{"task_id": "Python/0", "fn": "has_close_elements", "para": "(numbers: List[float], threshold: float)", "arg": "(numbers,threshold)", "assert": "True", "code": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n", "cover": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n\ndef find_path(numbers: List[float], threshold: float):\n\tassert has_close_elements(numbers,threshold) == True", "pass": true, "testcase": "find_path([0.0], 0.0)\nfind_path([-17470.0, 400.25, 400.75], 1.5)"}
{"task_id": "Python/0", "fn": "has_close_elements", "para": "(numbers: List[float], threshold: float)", "arg": "(numbers,threshold)", "assert": "False", "code": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n", "cover": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n\ndef find_path(numbers: List[float], threshold: float):\n\tassert has_close_elements(numbers,threshold) == False", "pass": true, "testcase": "find_path([0.0], 0.0)\nfind_path([-17470.0, 400.25, 400.75], 1.5)"}
{"task_id": "Python/1", "fn": "separate_paren_groups", "para": "(paren_string: str)", "arg": "(paren_string)", "assert": "True", "code": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n", "cover": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\ndef find_path(paren_string: str):\n\tassert separate_paren_groups(paren_string) == True", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/1", "fn": "separate_paren_groups", "para": "(paren_string: str)", "arg": "(paren_string)", "assert": "['()', '(())', '(()())']", "code": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n", "cover": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\ndef find_path(paren_string: str):\n\tassert separate_paren_groups(paren_string) == ['()', '(())', '(()())']", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/1", "fn": "separate_paren_groups", "para": "(paren_string: str)", "arg": "(paren_string)", "assert": "False", "code": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n", "cover": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\ndef find_path(paren_string: str):\n\tassert separate_paren_groups(paren_string) == False", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/2", "fn": "truncate_number", "para": "(number: float)", "arg": "(number)", "assert": "0.5", "code": "def truncate_number(number: float) -> float:\n    return number % 1.0\n", "cover": "def truncate_number(number: float) -> float:\n    return number % 1.0\n\ndef find_path(number: float):\n\tassert truncate_number(number) == 0.5", "pass": true, "testcase": "find_path(0.0)\nfind_path(0.5)"}
{"task_id": "Python/2", "fn": "truncate_number", "para": "(number: float)", "arg": "(number)", "assert": "1e-6", "code": "def truncate_number(number: float) -> float:\n    return number % 1.0\n", "cover": "def truncate_number(number: float) -> float:\n    return number % 1.0\n\ndef find_path(number: float):\n\tassert truncate_number(number) == 1e-6", "pass": true, "testcase": "find_path(0.0)\nfind_path(1e-06)"}
{"task_id": "Python/3", "fn": "below_zero", "para": "(operations: List[int])", "arg": "(operations)", "assert": "True", "code": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n", "cover": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n\ndef find_path(operations: List[int]):\n\tassert below_zero(operations) == True", "pass": true, "testcase": "find_path([])\nfind_path([175, 175, 175, -525, -1])"}
{"task_id": "Python/3", "fn": "below_zero", "para": "(operations: List[int])", "arg": "(operations)", "assert": "False", "code": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n", "cover": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n\ndef find_path(operations: List[int]):\n\tassert below_zero(operations) == False", "pass": true, "testcase": "find_path([])\nfind_path([175, 175, 175, -525, -1])"}
{"task_id": "Python/4", "fn": "mean_absolute_deviation", "para": "(numbers: List[float])", "arg": "(numbers)", "assert": "1e-6", "code": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n", "cover": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\ndef find_path(numbers: List[float]):\n\tassert mean_absolute_deviation(numbers) == 1e-6", "pass": false, "testcase": "find_path([0.0])\nfind_path([1.000002, 1.000004])"}
{"task_id": "Python/5", "fn": "intersperse", "para": "(numbers: List[int], delimeter: int)", "arg": "(numbers,delimeter)", "assert": "[]", "code": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n", "cover": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n\ndef find_path(numbers: List[int], delimeter: int):\n\tassert intersperse(numbers,delimeter) == []", "pass": true, "testcase": "find_path([0, 0], 0)\nfind_path([], 0)"}
{"task_id": "Python/5", "fn": "intersperse", "para": "(numbers: List[int], delimeter: int)", "arg": "(numbers,delimeter)", "assert": "[5, 8, 6, 8, 3, 8, 2]", "code": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n", "cover": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n\ndef find_path(numbers: List[int], delimeter: int):\n\tassert intersperse(numbers,delimeter) == [5, 8, 6, 8, 3, 8, 2]", "pass": true, "testcase": "find_path([0, 0], 0)\nfind_path([5, 6, 3, 2], 8)"}
{"task_id": "Python/5", "fn": "intersperse", "para": "(numbers: List[int], delimeter: int)", "arg": "(numbers,delimeter)", "assert": "[2, 2, 2, 2, 2]", "code": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n", "cover": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n\ndef find_path(numbers: List[int], delimeter: int):\n\tassert intersperse(numbers,delimeter) == [2, 2, 2, 2, 2]", "pass": true, "testcase": "find_path([0, 0], 0)\nfind_path([2, 2, 2], 2)"}
{"task_id": "Python/6", "fn": "parse_nested_parens", "para": "(paren_string: str)", "arg": "(paren_string)", "assert": "[4]", "code": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n", "cover": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n\ndef find_path(paren_string: str):\n\tassert parse_nested_parens(paren_string) == [4]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/6", "fn": "parse_nested_parens", "para": "(paren_string: str)", "arg": "(paren_string)", "assert": "[1, 2, 3, 4]", "code": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n", "cover": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n\ndef find_path(paren_string: str):\n\tassert parse_nested_parens(paren_string) == [1, 2, 3, 4]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/6", "fn": "parse_nested_parens", "para": "(paren_string: str)", "arg": "(paren_string)", "assert": "[2, 3, 1, 3]", "code": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n", "cover": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n\ndef find_path(paren_string: str):\n\tassert parse_nested_parens(paren_string) == [2, 3, 1, 3]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/7", "fn": "filter_by_substring", "para": "(strings: List[str], substring: str)", "arg": "(strings,substring)", "assert": "[]", "code": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [x for x in strings if substring in x]\n", "cover": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [x for x in strings if substring in x]\n\ndef find_path(strings: List[str], substring: str):\n\tassert filter_by_substring(strings,substring) == []", "pass": true, "testcase": "find_path([''], '\\x00')\nfind_path([''], '')"}
{"task_id": "Python/7", "fn": "filter_by_substring", "para": "(strings: List[str], substring: str)", "arg": "(strings,substring)", "assert": "['xxx', 'xxxAAA', 'xxx']", "code": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [x for x in strings if substring in x]\n", "cover": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [x for x in strings if substring in x]\n\ndef find_path(strings: List[str], substring: str):\n\tassert filter_by_substring(strings,substring) == ['xxx', 'xxxAAA', 'xxx']", "pass": false, "testcase": "find_path([''], '\\x00')"}
{"task_id": "Python/7", "fn": "filter_by_substring", "para": "(strings: List[str], substring: str)", "arg": "(strings,substring)", "assert": "['xxx', 'aaaxxy', 'xxxAAA', 'xxx']", "code": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [x for x in strings if substring in x]\n", "cover": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [x for x in strings if substring in x]\n\ndef find_path(strings: List[str], substring: str):\n\tassert filter_by_substring(strings,substring) == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']", "pass": false, "testcase": "find_path([''], '\\x00')"}
{"task_id": "Python/7", "fn": "filter_by_substring", "para": "(strings: List[str], substring: str)", "arg": "(strings,substring)", "assert": "['grunt', 'prune']", "code": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [x for x in strings if substring in x]\n", "cover": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [x for x in strings if substring in x]\n\ndef find_path(strings: List[str], substring: str):\n\tassert filter_by_substring(strings,substring) == ['grunt', 'prune']", "pass": true, "testcase": "find_path([''], '\\x00')\nfind_path(['grunt', 'prune'], '')"}
{"task_id": "Python/8", "fn": "sum_product", "para": "(numbers: List[int])", "arg": "(numbers)", "assert": "(10, 10)", "code": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n", "cover": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n\ndef find_path(numbers: List[int]):\n\tassert sum_product(numbers) == (10, 10)", "pass": true, "testcase": "find_path([])\nfind_path([10])"}
{"task_id": "Python/8", "fn": "sum_product", "para": "(numbers: List[int])", "arg": "(numbers)", "assert": "(0, 1)", "code": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n", "cover": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n\ndef find_path(numbers: List[int]):\n\tassert sum_product(numbers) == (0, 1)", "pass": true, "testcase": "find_path([])\nfind_path([2])"}
{"task_id": "Python/8", "fn": "sum_product", "para": "(numbers: List[int])", "arg": "(numbers)", "assert": "(3, 1)", "code": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n", "cover": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n\ndef find_path(numbers: List[int]):\n\tassert sum_product(numbers) == (3, 1)", "pass": true, "testcase": "find_path([])\nfind_path([1, 1, 1])"}
{"task_id": "Python/8", "fn": "sum_product", "para": "(numbers: List[int])", "arg": "(numbers)", "assert": "(100, 0)", "code": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n", "cover": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n\ndef find_path(numbers: List[int]):\n\tassert sum_product(numbers) == (100, 0)", "pass": true, "testcase": "find_path([])\nfind_path([100, 0])"}
{"task_id": "Python/8", "fn": "sum_product", "para": "(numbers: List[int])", "arg": "(numbers)", "assert": "(3 + 5 + 7, 3 * 5 * 7)", "code": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n", "cover": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n\ndef find_path(numbers: List[int]):\n\tassert sum_product(numbers) == (3 + 5 + 7, 3 * 5 * 7)", "pass": true, "testcase": "find_path([])\nfind_path([3, 7, 5])"}
{"task_id": "Python/9", "fn": "rolling_max", "para": "(numbers: List[int])", "arg": "(numbers)", "assert": "[]", "code": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n", "cover": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n\ndef find_path(numbers: List[int]):\n\tassert rolling_max(numbers) == []", "pass": true, "testcase": "find_path([])\nfind_path([0])"}
{"task_id": "Python/9", "fn": "rolling_max", "para": "(numbers: List[int])", "arg": "(numbers)", "assert": "[1, 2, 3, 4]", "code": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n", "cover": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n\ndef find_path(numbers: List[int]):\n\tassert rolling_max(numbers) == [1, 2, 3, 4]", "pass": false, "testcase": "find_path([])"}
{"task_id": "Python/9", "fn": "rolling_max", "para": "(numbers: List[int])", "arg": "(numbers)", "assert": "[3, 3, 3, 100, 100]", "code": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n", "cover": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n\ndef find_path(numbers: List[int]):\n\tassert rolling_max(numbers) == [3, 3, 3, 100, 100]", "pass": false, "testcase": "find_path([])"}
{"task_id": "Python/9", "fn": "rolling_max", "para": "(numbers: List[int])", "arg": "(numbers)", "assert": "[4, 4, 4, 4]", "code": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n", "cover": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n\ndef find_path(numbers: List[int]):\n\tassert rolling_max(numbers) == [4, 4, 4, 4]", "pass": true, "testcase": "find_path([])\nfind_path([4, -175, -175, -175])"}
{"task_id": "Python/10", "fn": "make_palindrome", "para": "(string: str)", "arg": "(string)", "assert": "''", "code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n", "cover": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n\ndef find_path(string: str):\n\tassert make_palindrome(string) == ''", "pass": true, "testcase": "find_path('')\nfind_path('\\x00')"}
{"task_id": "Python/10", "fn": "make_palindrome", "para": "(string: str)", "arg": "(string)", "assert": "'x'", "code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n", "cover": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n\ndef find_path(string: str):\n\tassert make_palindrome(string) == 'x'", "pass": true, "testcase": "find_path('')\nfind_path('x')"}
{"task_id": "Python/10", "fn": "make_palindrome", "para": "(string: str)", "arg": "(string)", "assert": "'jerryrrej'", "code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n", "cover": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n\ndef find_path(string: str):\n\tassert make_palindrome(string) == 'jerryrrej'", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/10", "fn": "make_palindrome", "para": "(string: str)", "arg": "(string)", "assert": "'xyzyx'", "code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n", "cover": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n\ndef find_path(string: str):\n\tassert make_palindrome(string) == 'xyzyx'", "pass": true, "testcase": "find_path('')\nfind_path('xyz')"}
{"task_id": "Python/10", "fn": "make_palindrome", "para": "(string: str)", "arg": "(string)", "assert": "'xyx'", "code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n", "cover": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n\ndef find_path(string: str):\n\tassert make_palindrome(string) == 'xyx'", "pass": true, "testcase": "find_path('')\nfind_path('xy')"}
{"task_id": "Python/11", "fn": "string_xor", "para": "(a: str, b: str)", "arg": "(a,b)", "assert": "'0'", "code": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n", "cover": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n\ndef find_path(a: str, b: str):\n\tassert string_xor(a,b) == '0'", "pass": false, "testcase": "find_path('\\x00', '')"}
{"task_id": "Python/11", "fn": "string_xor", "para": "(a: str, b: str)", "arg": "(a,b)", "assert": "'010010'", "code": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n", "cover": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n\ndef find_path(a: str, b: str):\n\tassert string_xor(a,b) == '010010'", "pass": false, "testcase": "find_path('\\x00', '')"}
{"task_id": "Python/11", "fn": "string_xor", "para": "(a: str, b: str)", "arg": "(a,b)", "assert": "'0101'", "code": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n", "cover": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n\ndef find_path(a: str, b: str):\n\tassert string_xor(a,b) == '0101'", "pass": false, "testcase": "find_path('\\x00', '')"}
{"task_id": "Python/12", "fn": "longest", "para": "(strings: List[str])", "arg": "(strings)", "assert": "None", "code": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n", "cover": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n\ndef find_path(strings: List[str]):\n\tassert longest(strings) == None", "pass": true, "testcase": "find_path([])\nfind_path([''])"}
{"task_id": "Python/12", "fn": "longest", "para": "(strings: List[str])", "arg": "(strings)", "assert": "'x'", "code": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n", "cover": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n\ndef find_path(strings: List[str]):\n\tassert longest(strings) == 'x'", "pass": true, "testcase": "find_path([])\nfind_path(['x'])"}
{"task_id": "Python/12", "fn": "longest", "para": "(strings: List[str])", "arg": "(strings)", "assert": "'zzzz'", "code": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n", "cover": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n\ndef find_path(strings: List[str]):\n\tassert longest(strings) == 'zzzz'", "pass": true, "testcase": "find_path([])\nfind_path(['zzzz'])"}
{"task_id": "Python/13", "fn": "greatest_common_divisor", "para": "(a: int, b: int)", "arg": "(a,b)", "assert": "5", "code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n", "cover": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n\ndef find_path(a: int, b: int):\n\tassert greatest_common_divisor(a,b) == 5", "pass": false, "testcase": "TIMEOUT"}
{"task_id": "Python/13", "fn": "greatest_common_divisor", "para": "(a: int, b: int)", "arg": "(a,b)", "assert": "1", "code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n", "cover": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n\ndef find_path(a: int, b: int):\n\tassert greatest_common_divisor(a,b) == 1", "pass": false, "testcase": "TIMEOUT"}
{"task_id": "Python/13", "fn": "greatest_common_divisor", "para": "(a: int, b: int)", "arg": "(a,b)", "assert": "7", "code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n", "cover": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n\ndef find_path(a: int, b: int):\n\tassert greatest_common_divisor(a,b) == 7", "pass": false, "testcase": "TIMEOUT"}
{"task_id": "Python/13", "fn": "greatest_common_divisor", "para": "(a: int, b: int)", "arg": "(a,b)", "assert": "12", "code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n", "cover": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n\ndef find_path(a: int, b: int):\n\tassert greatest_common_divisor(a,b) == 12", "pass": false, "testcase": "TIMEOUT"}
{"task_id": "Python/14", "fn": "all_prefixes", "para": "(string: str)", "arg": "(string)", "assert": "[]", "code": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n", "cover": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n\ndef find_path(string: str):\n\tassert all_prefixes(string) == []", "pass": true, "testcase": "find_path('')\nfind_path('\\x00')"}
{"task_id": "Python/14", "fn": "all_prefixes", "para": "(string: str)", "arg": "(string)", "assert": "['W', 'WW', 'WWW']", "code": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n", "cover": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n\ndef find_path(string: str):\n\tassert all_prefixes(string) == ['W', 'WW', 'WWW']", "pass": true, "testcase": "find_path('')\nfind_path('WWW')"}
{"task_id": "Python/14", "fn": "all_prefixes", "para": "(string: str)", "arg": "(string)", "assert": "['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']", "code": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n", "cover": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n\ndef find_path(string: str):\n\tassert all_prefixes(string) == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']", "pass": true, "testcase": "find_path('')\nfind_path('asdfgh')"}
{"task_id": "Python/15", "fn": "string_sequence", "para": "(n: int)", "arg": "(n)", "assert": "'0'", "code": "def string_sequence(n: int) -> str:\n    return ' '.join([str(x) for x in range(n + 1)])\n", "cover": "def string_sequence(n: int) -> str:\n    return ' '.join([str(x) for x in range(n + 1)])\n\ndef find_path(n: int):\n\tassert string_sequence(n) == '0'", "pass": true, "testcase": "find_path(-1)\nfind_path(0)"}
{"task_id": "Python/15", "fn": "string_sequence", "para": "(n: int)", "arg": "(n)", "assert": "'0 1 2 3 4 5 6 7 8 9 10'", "code": "def string_sequence(n: int) -> str:\n    return ' '.join([str(x) for x in range(n + 1)])\n", "cover": "def string_sequence(n: int) -> str:\n    return ' '.join([str(x) for x in range(n + 1)])\n\ndef find_path(n: int):\n\tassert string_sequence(n) == '0 1 2 3 4 5 6 7 8 9 10'", "pass": false, "testcase": "find_path(-1)"}
{"task_id": "Python/15", "fn": "string_sequence", "para": "(n: int)", "arg": "(n)", "assert": "'0 1 2 3'", "code": "def string_sequence(n: int) -> str:\n    return ' '.join([str(x) for x in range(n + 1)])\n", "cover": "def string_sequence(n: int) -> str:\n    return ' '.join([str(x) for x in range(n + 1)])\n\ndef find_path(n: int):\n\tassert string_sequence(n) == '0 1 2 3'", "pass": true, "testcase": "find_path(-1)\nfind_path(3)"}
{"task_id": "Python/16", "fn": "count_distinct_characters", "para": "(string: str)", "arg": "(string)", "assert": "5", "code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))\n", "cover": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))\n\ndef find_path(string: str):\n\tassert count_distinct_characters(string) == 5", "pass": false, "testcase": "find_path('\u01a7')"}
{"task_id": "Python/16", "fn": "count_distinct_characters", "para": "(string: str)", "arg": "(string)", "assert": "1", "code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))\n", "cover": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))\n\ndef find_path(string: str):\n\tassert count_distinct_characters(string) == 1", "pass": true, "testcase": "find_path('\u01a7')"}
{"task_id": "Python/16", "fn": "count_distinct_characters", "para": "(string: str)", "arg": "(string)", "assert": "0", "code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))\n", "cover": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))\n\ndef find_path(string: str):\n\tassert count_distinct_characters(string) == 0", "pass": false, "testcase": "TIMEOUT"}
{"task_id": "Python/17", "fn": "parse_music", "para": "(music_string: str)", "arg": "(music_string)", "assert": "[]", "code": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n", "cover": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n\ndef find_path(music_string: str):\n\tassert parse_music(music_string) == []", "pass": true, "testcase": "find_path('')\nfind_path('o')"}
{"task_id": "Python/17", "fn": "parse_music", "para": "(music_string: str)", "arg": "(music_string)", "assert": "[2, 1, 2, 1, 4, 2, 4, 2]", "code": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n", "cover": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n\ndef find_path(music_string: str):\n\tassert parse_music(music_string) == [2, 1, 2, 1, 4, 2, 4, 2]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/17", "fn": "parse_music", "para": "(music_string: str)", "arg": "(music_string)", "assert": "[4, 4, 4, 4]", "code": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n", "cover": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n\ndef find_path(music_string: str):\n\tassert parse_music(music_string) == [4, 4, 4, 4]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/17", "fn": "parse_music", "para": "(music_string: str)", "arg": "(music_string)", "assert": "[2, 2, 1, 1, 4, 4, 4, 4]", "code": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n", "cover": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n\ndef find_path(music_string: str):\n\tassert parse_music(music_string) == [2, 2, 1, 1, 4, 4, 4, 4]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/17", "fn": "parse_music", "para": "(music_string: str)", "arg": "(music_string)", "assert": "[1, 1, 1, 1]", "code": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n", "cover": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n\ndef find_path(music_string: str):\n\tassert parse_music(music_string) == [1, 1, 1, 1]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/18", "fn": "how_many_times", "para": "(string: str, substring: str)", "arg": "(string,substring)", "assert": "1", "code": "def how_many_times(string: str, substring: str) -> int:\n    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n", "cover": "def how_many_times(string: str, substring: str) -> int:\n    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n\ndef find_path(string: str, substring: str):\n\tassert how_many_times(string,substring) == 1", "pass": true, "testcase": "find_path('', '')\nfind_path('', '\\x00')"}
{"task_id": "Python/18", "fn": "how_many_times", "para": "(string: str, substring: str)", "arg": "(string,substring)", "assert": "0", "code": "def how_many_times(string: str, substring: str) -> int:\n    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n", "cover": "def how_many_times(string: str, substring: str) -> int:\n    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n\ndef find_path(string: str, substring: str):\n\tassert how_many_times(string,substring) == 0", "pass": true, "testcase": "find_path('', '')\nfind_path('', '\\x00')"}
{"task_id": "Python/18", "fn": "how_many_times", "para": "(string: str, substring: str)", "arg": "(string,substring)", "assert": "4", "code": "def how_many_times(string: str, substring: str) -> int:\n    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n", "cover": "def how_many_times(string: str, substring: str) -> int:\n    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n\ndef find_path(string: str, substring: str):\n\tassert how_many_times(string,substring) == 4", "pass": true, "testcase": "find_path('', '')\nfind_path('\\x00\\x00\\x00', '')"}
{"task_id": "Python/19", "fn": "sort_numbers", "para": "(numbers: str)", "arg": "(numbers)", "assert": "'zero one two three four five six'", "code": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n", "cover": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n\ndef find_path(numbers: str):\n\tassert sort_numbers(numbers) == 'zero one two three four five six'", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/19", "fn": "sort_numbers", "para": "(numbers: str)", "arg": "(numbers)", "assert": "'three'", "code": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n", "cover": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n\ndef find_path(numbers: str):\n\tassert sort_numbers(numbers) == 'three'", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/19", "fn": "sort_numbers", "para": "(numbers: str)", "arg": "(numbers)", "assert": "''", "code": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n", "cover": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n\ndef find_path(numbers: str):\n\tassert sort_numbers(numbers) == ''", "pass": true, "testcase": "find_path('')\nfind_path('six')"}
{"task_id": "Python/19", "fn": "sort_numbers", "para": "(numbers: str)", "arg": "(numbers)", "assert": "'three five nine'", "code": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n", "cover": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n\ndef find_path(numbers: str):\n\tassert sort_numbers(numbers) == 'three five nine'", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/19", "fn": "sort_numbers", "para": "(numbers: str)", "arg": "(numbers)", "assert": "'zero four five seven eight nine'", "code": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n", "cover": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n\ndef find_path(numbers: str):\n\tassert sort_numbers(numbers) == 'zero four five seven eight nine'", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/20", "fn": "find_closest_elements", "para": "(numbers: List[float])", "arg": "(numbers)", "assert": "(5.0, 5.9)", "code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n", "cover": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n\ndef find_path(numbers: List[float]):\n\tassert find_closest_elements(numbers) == (5.0, 5.9)", "pass": true, "testcase": "find_path([])\nfind_path([5.0, 5.9])"}
{"task_id": "Python/20", "fn": "find_closest_elements", "para": "(numbers: List[float])", "arg": "(numbers)", "assert": "(2.2, 3.1)", "code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n", "cover": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n\ndef find_path(numbers: List[float]):\n\tassert find_closest_elements(numbers) == (2.2, 3.1)", "pass": true, "testcase": "find_path([])\nfind_path([2.2, 3.1])"}
{"task_id": "Python/20", "fn": "find_closest_elements", "para": "(numbers: List[float])", "arg": "(numbers)", "assert": "(2.0, 2.2)", "code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n", "cover": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n\ndef find_path(numbers: List[float]):\n\tassert find_closest_elements(numbers) == (2.0, 2.2)", "pass": true, "testcase": "find_path([])\nfind_path([2.0, 2.2])"}
{"task_id": "Python/20", "fn": "find_closest_elements", "para": "(numbers: List[float])", "arg": "(numbers)", "assert": "(3.9, 4.0)", "code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n", "cover": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n\ndef find_path(numbers: List[float]):\n\tassert find_closest_elements(numbers) == (3.9, 4.0)", "pass": true, "testcase": "find_path([])\nfind_path([3.9, 4.0])"}
{"task_id": "Python/20", "fn": "find_closest_elements", "para": "(numbers: List[float])", "arg": "(numbers)", "assert": "(2.0, 2.0)", "code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n", "cover": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n\ndef find_path(numbers: List[float]):\n\tassert find_closest_elements(numbers) == (2.0, 2.0)", "pass": true, "testcase": "find_path([])\nfind_path([2.0, 2.0])"}
{"task_id": "Python/21", "fn": "rescale_to_unit", "para": "(numbers: List[float])", "arg": "(numbers)", "assert": "[0.25, 0.0, 1.0, 0.5, 0.75]", "code": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n", "cover": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n\ndef find_path(numbers: List[float]):\n\tassert rescale_to_unit(numbers) == [0.25, 0.0, 1.0, 0.5, 0.75]", "pass": false, "testcase": "find_path([-1.0, 0.0])"}
{"task_id": "Python/21", "fn": "rescale_to_unit", "para": "(numbers: List[float])", "arg": "(numbers)", "assert": "[1.0, 0.0]", "code": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n", "cover": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n\ndef find_path(numbers: List[float]):\n\tassert rescale_to_unit(numbers) == [1.0, 0.0]", "pass": true, "testcase": "find_path([-1.0, 0.0])\nfind_path([1.0, 0.0])"}
{"task_id": "Python/21", "fn": "rescale_to_unit", "para": "(numbers: List[float])", "arg": "(numbers)", "assert": "[0.0, 1.0]", "code": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n", "cover": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n\ndef find_path(numbers: List[float]):\n\tassert rescale_to_unit(numbers) == [0.0, 1.0]", "pass": true, "testcase": "find_path([-1.0, 0.0])\nfind_path([0.0, 0.0, 0.5])"}
{"task_id": "Python/21", "fn": "rescale_to_unit", "para": "(numbers: List[float])", "arg": "(numbers)", "assert": "[0.0, 0.25, 0.5, 0.75, 1.0]", "code": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n", "cover": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n\ndef find_path(numbers: List[float]):\n\tassert rescale_to_unit(numbers) == [0.0, 0.25, 0.5, 0.75, 1.0]", "pass": false, "testcase": "find_path([-1.0, 0.0])"}
{"task_id": "Python/22", "fn": "filter_integers", "para": "(values: List[Any])", "arg": "(values)", "assert": "[]", "code": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]\n", "cover": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]\n\ndef find_path(values: List[Any]):\n\tassert filter_integers(values) == []", "pass": true, "testcase": "find_path([])\nfind_path([0])"}
{"task_id": "Python/22", "fn": "filter_integers", "para": "(values: List[Any])", "arg": "(values)", "assert": "[3, 3, 3]", "code": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]\n", "cover": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]\n\ndef find_path(values: List[Any]):\n\tassert filter_integers(values) == [3, 3, 3]", "pass": true, "testcase": "find_path([])\nfind_path([3, 3, 3])"}
{"task_id": "Python/22", "fn": "filter_integers", "para": "(values: List[Any])", "arg": "(values)", "assert": "[4, 9]", "code": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]\n", "cover": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]\n\ndef find_path(values: List[Any]):\n\tassert filter_integers(values) == [4, 9]", "pass": true, "testcase": "find_path([])\nfind_path([4, 9])"}
{"task_id": "Python/23", "fn": "strlen", "para": "(string: str)", "arg": "(string)", "assert": "1", "code": "def strlen(string: str) -> int:\n    return len(string)\n", "cover": "def strlen(string: str) -> int:\n    return len(string)\n\ndef find_path(string: str):\n\tassert strlen(string) == 1", "pass": true, "testcase": "find_path('')\nfind_path('\\x00')"}
{"task_id": "Python/23", "fn": "strlen", "para": "(string: str)", "arg": "(string)", "assert": "0", "code": "def strlen(string: str) -> int:\n    return len(string)\n", "cover": "def strlen(string: str) -> int:\n    return len(string)\n\ndef find_path(string: str):\n\tassert strlen(string) == 0", "pass": true, "testcase": "find_path('\\x00')\nfind_path('')"}
{"task_id": "Python/23", "fn": "strlen", "para": "(string: str)", "arg": "(string)", "assert": "9", "code": "def strlen(string: str) -> int:\n    return len(string)\n", "cover": "def strlen(string: str) -> int:\n    return len(string)\n\ndef find_path(string: str):\n\tassert strlen(string) == 9", "pass": true, "testcase": "find_path('')\nfind_path('\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00')"}
{"task_id": "Python/24", "fn": "largest_divisor", "para": "(n: int)", "arg": "(n)", "assert": "5", "code": "def largest_divisor(n: int) -> int:\n    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n", "cover": "def largest_divisor(n: int) -> int:\n    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n\ndef find_path(n: int):\n\tassert largest_divisor(n) == 5", "pass": true, "testcase": "find_path(11)\nfind_path(10)"}
{"task_id": "Python/24", "fn": "largest_divisor", "para": "(n: int)", "arg": "(n)", "assert": "1", "code": "def largest_divisor(n: int) -> int:\n    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n", "cover": "def largest_divisor(n: int) -> int:\n    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n\ndef find_path(n: int):\n\tassert largest_divisor(n) == 1", "pass": true, "testcase": "find_path(15)\nfind_path(2)"}
{"task_id": "Python/24", "fn": "largest_divisor", "para": "(n: int)", "arg": "(n)", "assert": "7", "code": "def largest_divisor(n: int) -> int:\n    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n", "cover": "def largest_divisor(n: int) -> int:\n    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n\ndef find_path(n: int):\n\tassert largest_divisor(n) == 7", "pass": false, "testcase": "find_path(15)"}
{"task_id": "Python/24", "fn": "largest_divisor", "para": "(n: int)", "arg": "(n)", "assert": "50", "code": "def largest_divisor(n: int) -> int:\n    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n", "cover": "def largest_divisor(n: int) -> int:\n    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n\ndef find_path(n: int):\n\tassert largest_divisor(n) == 50", "pass": false, "testcase": "find_path(11)"}
{"task_id": "Python/25", "fn": "factorize", "para": "(n: int)", "arg": "(n)", "assert": "[3, 19]", "code": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n", "cover": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n\ndef find_path(n: int):\n\tassert factorize(n) == [3, 19]", "pass": false, "testcase": "find_path(0)"}
{"task_id": "Python/25", "fn": "factorize", "para": "(n: int)", "arg": "(n)", "assert": "[2, 2]", "code": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n", "cover": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n\ndef find_path(n: int):\n\tassert factorize(n) == [2, 2]", "pass": false, "testcase": "find_path(0)"}
{"task_id": "Python/25", "fn": "factorize", "para": "(n: int)", "arg": "(n)", "assert": "[2, 3, 3]", "code": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n", "cover": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n\ndef find_path(n: int):\n\tassert factorize(n) == [2, 3, 3]", "pass": false, "testcase": "find_path(0)"}
{"task_id": "Python/25", "fn": "factorize", "para": "(n: int)", "arg": "(n)", "assert": "[3, 3, 19, 19]", "code": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n", "cover": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n\ndef find_path(n: int):\n\tassert factorize(n) == [3, 3, 19, 19]", "pass": false, "testcase": "find_path(0)"}
{"task_id": "Python/25", "fn": "factorize", "para": "(n: int)", "arg": "(n)", "assert": "[2]", "code": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n", "cover": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n\ndef find_path(n: int):\n\tassert factorize(n) == [2]", "pass": true, "testcase": "find_path(0)\nfind_path(2)"}
{"task_id": "Python/25", "fn": "factorize", "para": "(n: int)", "arg": "(n)", "assert": "[2, 2, 2]", "code": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n", "cover": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n\ndef find_path(n: int):\n\tassert factorize(n) == [2, 2, 2]", "pass": false, "testcase": "find_path(0)"}
{"task_id": "Python/25", "fn": "factorize", "para": "(n: int)", "arg": "(n)", "assert": "[3, 19, 19, 19]", "code": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n", "cover": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n\ndef find_path(n: int):\n\tassert factorize(n) == [3, 19, 19, 19]", "pass": false, "testcase": "find_path(0)"}
{"task_id": "Python/25", "fn": "factorize", "para": "(n: int)", "arg": "(n)", "assert": "[3, 3, 3, 19, 19, 19]", "code": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n", "cover": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n\ndef find_path(n: int):\n\tassert factorize(n) == [3, 3, 3, 19, 19, 19]", "pass": false, "testcase": "find_path(0)"}
{"task_id": "Python/26", "fn": "remove_duplicates", "para": "(numbers: List[int])", "arg": "(numbers)", "assert": "[]", "code": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n", "cover": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n\ndef find_path(numbers: List[int]):\n\tassert remove_duplicates(numbers) == []", "pass": true, "testcase": "find_path([])\nfind_path([0])"}
{"task_id": "Python/26", "fn": "remove_duplicates", "para": "(numbers: List[int])", "arg": "(numbers)", "assert": "[1, 2, 3, 4]", "code": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n", "cover": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n\ndef find_path(numbers: List[int]):\n\tassert remove_duplicates(numbers) == [1, 2, 3, 4]", "pass": false, "testcase": "find_path([])"}
{"task_id": "Python/26", "fn": "remove_duplicates", "para": "(numbers: List[int])", "arg": "(numbers)", "assert": "[1, 4, 5]", "code": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n", "cover": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n\ndef find_path(numbers: List[int]):\n\tassert remove_duplicates(numbers) == [1, 4, 5]", "pass": false, "testcase": "find_path([])"}
{"task_id": "Python/27", "fn": "flip_case", "para": "(string: str)", "arg": "(string)", "assert": "'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'", "code": "def flip_case(string: str) -> str:\n    return string.swapcase()\n", "cover": "def flip_case(string: str) -> str:\n    return string.swapcase()\n\ndef find_path(string: str):\n\tassert flip_case(string) == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'", "pass": false, "testcase": "TIMEOUT"}
{"task_id": "Python/27", "fn": "flip_case", "para": "(string: str)", "arg": "(string)", "assert": "'hELLO!'", "code": "def flip_case(string: str) -> str:\n    return string.swapcase()\n", "cover": "def flip_case(string: str) -> str:\n    return string.swapcase()\n\ndef find_path(string: str):\n\tassert flip_case(string) == 'hELLO!'", "pass": false, "testcase": "TIMEOUT"}
{"task_id": "Python/27", "fn": "flip_case", "para": "(string: str)", "arg": "(string)", "assert": "''", "code": "def flip_case(string: str) -> str:\n    return string.swapcase()\n", "cover": "def flip_case(string: str) -> str:\n    return string.swapcase()\n\ndef find_path(string: str):\n\tassert flip_case(string) == ''", "pass": false, "testcase": "TIMEOUT"}
{"task_id": "Python/28", "fn": "concatenate", "para": "(strings: List[str])", "arg": "(strings)", "assert": "'xyzwk'", "code": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n", "cover": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n\ndef find_path(strings: List[str]):\n\tassert concatenate(strings) == 'xyzwk'", "pass": true, "testcase": "find_path([])\nfind_path(['xyzwk'])"}
{"task_id": "Python/28", "fn": "concatenate", "para": "(strings: List[str])", "arg": "(strings)", "assert": "'xyz'", "code": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n", "cover": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n\ndef find_path(strings: List[str]):\n\tassert concatenate(strings) == 'xyz'", "pass": true, "testcase": "find_path([])\nfind_path(['xyz'])"}
{"task_id": "Python/28", "fn": "concatenate", "para": "(strings: List[str])", "arg": "(strings)", "assert": "''", "code": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n", "cover": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n\ndef find_path(strings: List[str]):\n\tassert concatenate(strings) == ''", "pass": true, "testcase": "find_path([])\nfind_path(['\\x00'])"}
{"task_id": "Python/29", "fn": "filter_by_prefix", "para": "(strings: List[str], prefix: str)", "arg": "(strings,prefix)", "assert": "[]", "code": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [x for x in strings if x.startswith(prefix)]\n", "cover": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [x for x in strings if x.startswith(prefix)]\n\ndef find_path(strings: List[str], prefix: str):\n\tassert filter_by_prefix(strings,prefix) == []", "pass": true, "testcase": "find_path([''], '')\nfind_path([], '')"}
{"task_id": "Python/29", "fn": "filter_by_prefix", "para": "(strings: List[str], prefix: str)", "arg": "(strings,prefix)", "assert": "['xxx', 'xxxAAA', 'xxx']", "code": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [x for x in strings if x.startswith(prefix)]\n", "cover": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [x for x in strings if x.startswith(prefix)]\n\ndef find_path(strings: List[str], prefix: str):\n\tassert filter_by_prefix(strings,prefix) == ['xxx', 'xxxAAA', 'xxx']", "pass": false, "testcase": "find_path([''], '')"}
{"task_id": "Python/30", "fn": "get_positive", "para": "(l: list)", "arg": "(l)", "assert": "[]", "code": "def get_positive(l: list):\n    return [e for e in l if e > 0]\n", "cover": "def get_positive(l: list):\n    return [e for e in l if e > 0]\n\ndef find_path(l: list):\n\tassert get_positive(l) == []", "pass": true, "testcase": "find_path([])\nfind_path([1])"}
{"task_id": "Python/30", "fn": "get_positive", "para": "(l: list)", "arg": "(l)", "assert": "[5, 3, 2, 3, 3, 9, 123, 1]", "code": "def get_positive(l: list):\n    return [e for e in l if e > 0]\n", "cover": "def get_positive(l: list):\n    return [e for e in l if e > 0]\n\ndef find_path(l: list):\n\tassert get_positive(l) == [5, 3, 2, 3, 3, 9, 123, 1]", "pass": false, "testcase": "find_path([])"}
{"task_id": "Python/30", "fn": "get_positive", "para": "(l: list)", "arg": "(l)", "assert": "[4, 5, 6]", "code": "def get_positive(l: list):\n    return [e for e in l if e > 0]\n", "cover": "def get_positive(l: list):\n    return [e for e in l if e > 0]\n\ndef find_path(l: list):\n\tassert get_positive(l) == [4, 5, 6]", "pass": false, "testcase": "find_path([])"}
{"task_id": "Python/31", "fn": "is_prime", "para": "(n)", "arg": "(n)", "assert": "True", "code": "def is_prime(n):\n    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n", "cover": "def is_prime(n):\n    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n\ndef find_path(n):\n\tassert is_prime(n) == True", "pass": true, "testcase": "find_path(RegexFlag.VERBOSE)\nfind_path(2)"}
{"task_id": "Python/31", "fn": "is_prime", "para": "(n)", "arg": "(n)", "assert": "False", "code": "def is_prime(n):\n    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n", "cover": "def is_prime(n):\n    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n\ndef find_path(n):\n\tassert is_prime(n) == False", "pass": false, "testcase": "find_path(RegexFlag.VERBOSE)\nfind_path(2)"}
{"task_id": "Python/32", "fn": "find_zero", "para": "(xs: list)", "arg": "(xs)", "assert": "1e-4", "code": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n", "cover": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n\ndef find_path(xs: list):\n\tassert find_zero(xs) == 1e-4", "pass": false, "testcase": "TIMEOUT"}
{"task_id": "Python/33", "fn": "sort_third", "para": "(l: list)", "arg": "(l)", "assert": "tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))", "code": "def sort_third(l: list):\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n", "cover": "def sort_third(l: list):\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n\ndef find_path(l: list):\n\tassert sort_third(l) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))", "pass": false, "testcase": "find_path([])"}
{"task_id": "Python/33", "fn": "sort_third", "para": "(l: list)", "arg": "(l)", "assert": "tuple(sort_third([1, 2, 3]))", "code": "def sort_third(l: list):\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n", "cover": "def sort_third(l: list):\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n\ndef find_path(l: list):\n\tassert sort_third(l) == tuple(sort_third([1, 2, 3]))", "pass": false, "testcase": "find_path([])"}
{"task_id": "Python/33", "fn": "sort_third", "para": "(l: list)", "arg": "(l)", "assert": "tuple([2, 8, 3, 4, 6, 9, 5])", "code": "def sort_third(l: list):\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n", "cover": "def sort_third(l: list):\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n\ndef find_path(l: list):\n\tassert sort_third(l) == tuple([2, 8, 3, 4, 6, 9, 5])", "pass": false, "testcase": "find_path([])"}
{"task_id": "Python/33", "fn": "sort_third", "para": "(l: list)", "arg": "(l)", "assert": "tuple([2, 6, 3, 4, 8, 9, 5])", "code": "def sort_third(l: list):\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n", "cover": "def sort_third(l: list):\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n\ndef find_path(l: list):\n\tassert sort_third(l) == tuple([2, 6, 3, 4, 8, 9, 5])", "pass": false, "testcase": "find_path([])"}
{"task_id": "Python/33", "fn": "sort_third", "para": "(l: list)", "arg": "(l)", "assert": "tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))", "code": "def sort_third(l: list):\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n", "cover": "def sort_third(l: list):\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n\ndef find_path(l: list):\n\tassert sort_third(l) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))", "pass": false, "testcase": "find_path([])"}
{"task_id": "Python/33", "fn": "sort_third", "para": "(l: list)", "arg": "(l)", "assert": "tuple([2, 6, 3, 4, 8, 9, 5, 1])", "code": "def sort_third(l: list):\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n", "cover": "def sort_third(l: list):\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n\ndef find_path(l: list):\n\tassert sort_third(l) == tuple([2, 6, 3, 4, 8, 9, 5, 1])", "pass": false, "testcase": "find_path([])"}
{"task_id": "Python/33", "fn": "sort_third", "para": "(l: list)", "arg": "(l)", "assert": "tuple([2, 6, 9, 4, 8, 3, 5])", "code": "def sort_third(l: list):\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n", "cover": "def sort_third(l: list):\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n\ndef find_path(l: list):\n\tassert sort_third(l) == tuple([2, 6, 9, 4, 8, 3, 5])", "pass": false, "testcase": "find_path([])"}
{"task_id": "Python/34", "fn": "unique", "para": "(l: list)", "arg": "(l)", "assert": "[0, 2, 3, 5, 9, 123]", "code": "def unique(l: list):\n    return sorted(list(set(l)))\n", "cover": "def unique(l: list):\n    return sorted(list(set(l)))\n\ndef find_path(l: list):\n\tassert unique(l) == [0, 2, 3, 5, 9, 123]", "pass": false, "testcase": "find_path([])"}
{"task_id": "Python/35", "fn": "max_element", "para": "(l: list)", "arg": "(l)", "assert": "3", "code": "def max_element(l: list):\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n", "cover": "def max_element(l: list):\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n\ndef find_path(l: list):\n\tassert max_element(l) == 3", "pass": true, "testcase": "find_path([''])\nfind_path([3])"}
{"task_id": "Python/35", "fn": "max_element", "para": "(l: list)", "arg": "(l)", "assert": "124", "code": "def max_element(l: list):\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n", "cover": "def max_element(l: list):\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n\ndef find_path(l: list):\n\tassert max_element(l) == 124", "pass": false, "testcase": "find_path([''])\nfind_path([124, _Precedence.NOT])"}
{"task_id": "Python/36", "fn": "fizz_buzz", "para": "(n: int)", "arg": "(n)", "assert": "3", "code": "def fizz_buzz(n: int):\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n", "cover": "def fizz_buzz(n: int):\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\ndef find_path(n: int):\n\tassert fizz_buzz(n) == 3", "pass": false, "testcase": "find_path(0)"}
{"task_id": "Python/36", "fn": "fizz_buzz", "para": "(n: int)", "arg": "(n)", "assert": "639", "code": "def fizz_buzz(n: int):\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n", "cover": "def fizz_buzz(n: int):\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\ndef find_path(n: int):\n\tassert fizz_buzz(n) == 639", "pass": false, "testcase": "find_path(0)"}
{"task_id": "Python/36", "fn": "fizz_buzz", "para": "(n: int)", "arg": "(n)", "assert": "2", "code": "def fizz_buzz(n: int):\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n", "cover": "def fizz_buzz(n: int):\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\ndef find_path(n: int):\n\tassert fizz_buzz(n) == 2", "pass": false, "testcase": "find_path(0)"}
{"task_id": "Python/36", "fn": "fizz_buzz", "para": "(n: int)", "arg": "(n)", "assert": "0", "code": "def fizz_buzz(n: int):\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n", "cover": "def fizz_buzz(n: int):\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\ndef find_path(n: int):\n\tassert fizz_buzz(n) == 0", "pass": true, "testcase": "find_path(0)"}
{"task_id": "Python/36", "fn": "fizz_buzz", "para": "(n: int)", "arg": "(n)", "assert": "192", "code": "def fizz_buzz(n: int):\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n", "cover": "def fizz_buzz(n: int):\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\ndef find_path(n: int):\n\tassert fizz_buzz(n) == 192", "pass": false, "testcase": "find_path(0)"}
{"task_id": "Python/36", "fn": "fizz_buzz", "para": "(n: int)", "arg": "(n)", "assert": "6", "code": "def fizz_buzz(n: int):\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n", "cover": "def fizz_buzz(n: int):\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\ndef find_path(n: int):\n\tassert fizz_buzz(n) == 6", "pass": false, "testcase": "find_path(0)"}
{"task_id": "Python/36", "fn": "fizz_buzz", "para": "(n: int)", "arg": "(n)", "assert": "8026", "code": "def fizz_buzz(n: int):\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n", "cover": "def fizz_buzz(n: int):\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\ndef find_path(n: int):\n\tassert fizz_buzz(n) == 8026", "pass": false, "testcase": "find_path(0)"}
{"task_id": "Python/37", "fn": "sort_even", "para": "(l: list)", "arg": "(l)", "assert": "tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])", "code": "def sort_even(l: list):\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n", "cover": "def sort_even(l: list):\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n\ndef find_path(l: list):\n\tassert sort_even(l) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])", "pass": false, "testcase": "find_path([''])"}
{"task_id": "Python/37", "fn": "sort_even", "para": "(l: list)", "arg": "(l)", "assert": "tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])", "code": "def sort_even(l: list):\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n", "cover": "def sort_even(l: list):\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n\ndef find_path(l: list):\n\tassert sort_even(l) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])", "pass": false, "testcase": "find_path([''])"}
{"task_id": "Python/37", "fn": "sort_even", "para": "(l: list)", "arg": "(l)", "assert": "tuple([1, 2, 3])", "code": "def sort_even(l: list):\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n", "cover": "def sort_even(l: list):\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n\ndef find_path(l: list):\n\tassert sort_even(l) == tuple([1, 2, 3])", "pass": false, "testcase": "find_path([''])"}
{"task_id": "Python/38", "fn": "decode_cyclic", "para": "(s: str)", "arg": "(s)", "assert": "str", "code": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    return encode_cyclic(encode_cyclic(s))\n", "cover": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    return encode_cyclic(encode_cyclic(s))\n\ndef find_path(s: str):\n\tassert decode_cyclic(s) == str", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/39", "fn": "prime_fib", "para": "(n: int)", "arg": "(n)", "assert": "514229", "code": "def prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n", "cover": "def prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n\ndef find_path(n: int):\n\tassert prime_fib(n) == 514229", "pass": false, "testcase": "TIMEOUT"}
{"task_id": "Python/39", "fn": "prime_fib", "para": "(n: int)", "arg": "(n)", "assert": "3", "code": "def prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n", "cover": "def prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n\ndef find_path(n: int):\n\tassert prime_fib(n) == 3", "pass": false, "testcase": "TIMEOUT"}
{"task_id": "Python/39", "fn": "prime_fib", "para": "(n: int)", "arg": "(n)", "assert": "433494437", "code": "def prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n", "cover": "def prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n\ndef find_path(n: int):\n\tassert prime_fib(n) == 433494437", "pass": false, "testcase": "TIMEOUT"}
{"task_id": "Python/39", "fn": "prime_fib", "para": "(n: int)", "arg": "(n)", "assert": "2", "code": "def prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n", "cover": "def prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n\ndef find_path(n: int):\n\tassert prime_fib(n) == 2", "pass": false, "testcase": "TIMEOUT"}
{"task_id": "Python/39", "fn": "prime_fib", "para": "(n: int)", "arg": "(n)", "assert": "233", "code": "def prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n", "cover": "def prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n\ndef find_path(n: int):\n\tassert prime_fib(n) == 233", "pass": false, "testcase": "TIMEOUT"}
{"task_id": "Python/39", "fn": "prime_fib", "para": "(n: int)", "arg": "(n)", "assert": "5", "code": "def prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n", "cover": "def prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n\ndef find_path(n: int):\n\tassert prime_fib(n) == 5", "pass": false, "testcase": "TIMEOUT"}
{"task_id": "Python/39", "fn": "prime_fib", "para": "(n: int)", "arg": "(n)", "assert": "13", "code": "def prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n", "cover": "def prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n\ndef find_path(n: int):\n\tassert prime_fib(n) == 13", "pass": false, "testcase": "TIMEOUT"}
{"task_id": "Python/39", "fn": "prime_fib", "para": "(n: int)", "arg": "(n)", "assert": "89", "code": "def prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n", "cover": "def prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n\ndef find_path(n: int):\n\tassert prime_fib(n) == 89", "pass": false, "testcase": "TIMEOUT"}
{"task_id": "Python/39", "fn": "prime_fib", "para": "(n: int)", "arg": "(n)", "assert": "28657", "code": "def prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n", "cover": "def prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n\ndef find_path(n: int):\n\tassert prime_fib(n) == 28657", "pass": false, "testcase": "TIMEOUT"}
{"task_id": "Python/39", "fn": "prime_fib", "para": "(n: int)", "arg": "(n)", "assert": "1597", "code": "def prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n", "cover": "def prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n\ndef find_path(n: int):\n\tassert prime_fib(n) == 1597", "pass": false, "testcase": "TIMEOUT"}
{"task_id": "Python/40", "fn": "triples_sum_to_zero", "para": "(l: list)", "arg": "(l)", "assert": "True", "code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n", "cover": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\ndef find_path(l: list):\n\tassert triples_sum_to_zero(l) == True", "pass": true, "testcase": "find_path([])\nfind_path([0, 0, 0, 0, ''])"}
{"task_id": "Python/40", "fn": "triples_sum_to_zero", "para": "(l: list)", "arg": "(l)", "assert": "False", "code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n", "cover": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\ndef find_path(l: list):\n\tassert triples_sum_to_zero(l) == False", "pass": true, "testcase": "find_path([])\nfind_path([0, 0, 0, 0, ''])"}
{"task_id": "Python/41", "fn": "car_race_collision", "para": "(n: int)", "arg": "(n)", "assert": "4", "code": "def car_race_collision(n: int):\n    return n**2\n", "cover": "def car_race_collision(n: int):\n    return n**2\n\ndef find_path(n: int):\n\tassert car_race_collision(n) == 4", "pass": true, "testcase": "find_path(0)\nfind_path(2)"}
{"task_id": "Python/41", "fn": "car_race_collision", "para": "(n: int)", "arg": "(n)", "assert": "16", "code": "def car_race_collision(n: int):\n    return n**2\n", "cover": "def car_race_collision(n: int):\n    return n**2\n\ndef find_path(n: int):\n\tassert car_race_collision(n) == 16", "pass": true, "testcase": "find_path(0)\nfind_path(4)"}
{"task_id": "Python/41", "fn": "car_race_collision", "para": "(n: int)", "arg": "(n)", "assert": "9", "code": "def car_race_collision(n: int):\n    return n**2\n", "cover": "def car_race_collision(n: int):\n    return n**2\n\ndef find_path(n: int):\n\tassert car_race_collision(n) == 9", "pass": true, "testcase": "find_path(0)\nfind_path(3)"}
{"task_id": "Python/41", "fn": "car_race_collision", "para": "(n: int)", "arg": "(n)", "assert": "100", "code": "def car_race_collision(n: int):\n    return n**2\n", "cover": "def car_race_collision(n: int):\n    return n**2\n\ndef find_path(n: int):\n\tassert car_race_collision(n) == 100", "pass": true, "testcase": "find_path(0)\nfind_path(10)"}
{"task_id": "Python/41", "fn": "car_race_collision", "para": "(n: int)", "arg": "(n)", "assert": "64", "code": "def car_race_collision(n: int):\n    return n**2\n", "cover": "def car_race_collision(n: int):\n    return n**2\n\ndef find_path(n: int):\n\tassert car_race_collision(n) == 64", "pass": true, "testcase": "find_path(0)\nfind_path(8)"}
{"task_id": "Python/42", "fn": "incr_list", "para": "(l: list)", "arg": "(l)", "assert": "[]", "code": "def incr_list(l: list):\n    return [(e + 1) for e in l]\n", "cover": "def incr_list(l: list):\n    return [(e + 1) for e in l]\n\ndef find_path(l: list):\n\tassert incr_list(l) == []", "pass": true, "testcase": "find_path([])\nfind_path([0])"}
{"task_id": "Python/42", "fn": "incr_list", "para": "(l: list)", "arg": "(l)", "assert": "[6, 3, 6, 3, 4, 4, 10, 1, 124]", "code": "def incr_list(l: list):\n    return [(e + 1) for e in l]\n", "cover": "def incr_list(l: list):\n    return [(e + 1) for e in l]\n\ndef find_path(l: list):\n\tassert incr_list(l) == [6, 3, 6, 3, 4, 4, 10, 1, 124]", "pass": false, "testcase": "find_path([])"}
{"task_id": "Python/42", "fn": "incr_list", "para": "(l: list)", "arg": "(l)", "assert": "[4, 3, 2]", "code": "def incr_list(l: list):\n    return [(e + 1) for e in l]\n", "cover": "def incr_list(l: list):\n    return [(e + 1) for e in l]\n\ndef find_path(l: list):\n\tassert incr_list(l) == [4, 3, 2]", "pass": false, "testcase": "find_path([])"}
{"task_id": "Python/43", "fn": "pairs_sum_to_zero", "para": "(l)", "arg": "(l)", "assert": "True", "code": "def pairs_sum_to_zero(l):\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n", "cover": "def pairs_sum_to_zero(l):\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n\ndef find_path(l):\n\tassert pairs_sum_to_zero(l) == True", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/43", "fn": "pairs_sum_to_zero", "para": "(l)", "arg": "(l)", "assert": "False", "code": "def pairs_sum_to_zero(l):\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n", "cover": "def pairs_sum_to_zero(l):\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n\ndef find_path(l):\n\tassert pairs_sum_to_zero(l) == False", "pass": true, "testcase": "find_path('')"}
{"task_id": "Python/44", "fn": "change_base", "para": "(x: int, base: int)", "arg": "(x,base)", "assert": "\"10000\"", "code": "def change_base(x: int, base: int):\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n", "cover": "def change_base(x: int, base: int):\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n\ndef find_path(x: int, base: int):\n\tassert change_base(x,base) == \"10000\"", "pass": false, "testcase": "find_path(1, -2)"}
{"task_id": "Python/44", "fn": "change_base", "para": "(x: int, base: int)", "arg": "(x,base)", "assert": "\"111\"", "code": "def change_base(x: int, base: int):\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n", "cover": "def change_base(x: int, base: int):\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n\ndef find_path(x: int, base: int):\n\tassert change_base(x,base) == \"111\"", "pass": false, "testcase": "find_path(1, -2)"}
{"task_id": "Python/44", "fn": "change_base", "para": "(x: int, base: int)", "arg": "(x,base)", "assert": "\"100\"", "code": "def change_base(x: int, base: int):\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n", "cover": "def change_base(x: int, base: int):\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n\ndef find_path(x: int, base: int):\n\tassert change_base(x,base) == \"100\"", "pass": false, "testcase": "find_path(1, -2)"}
{"task_id": "Python/44", "fn": "change_base", "para": "(x: int, base: int)", "arg": "(x,base)", "assert": "\"1000\"", "code": "def change_base(x: int, base: int):\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n", "cover": "def change_base(x: int, base: int):\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n\ndef find_path(x: int, base: int):\n\tassert change_base(x,base) == \"1000\"", "pass": false, "testcase": "find_path(1, -2)"}
{"task_id": "Python/44", "fn": "change_base", "para": "(x: int, base: int)", "arg": "(x,base)", "assert": "str(x)", "code": "def change_base(x: int, base: int):\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n", "cover": "def change_base(x: int, base: int):\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n\ndef find_path(x: int, base: int):\n\tassert change_base(x,base) == str(x)", "pass": true, "testcase": "find_path(1, -2)\nfind_path(1, 2)"}
{"task_id": "Python/44", "fn": "change_base", "para": "(x: int, base: int)", "arg": "(x,base)", "assert": "\"22\"", "code": "def change_base(x: int, base: int):\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n", "cover": "def change_base(x: int, base: int):\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n\ndef find_path(x: int, base: int):\n\tassert change_base(x,base) == \"22\"", "pass": false, "testcase": "find_path(1, -2)"}
{"task_id": "Python/44", "fn": "change_base", "para": "(x: int, base: int)", "arg": "(x,base)", "assert": "\"11101010\"", "code": "def change_base(x: int, base: int):\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n", "cover": "def change_base(x: int, base: int):\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n\ndef find_path(x: int, base: int):\n\tassert change_base(x,base) == \"11101010\"", "pass": false, "testcase": "find_path(1, -2)"}
{"task_id": "Python/45", "fn": "triangle_area", "para": "(a, h)", "arg": "(a,h)", "assert": "7.5", "code": "def triangle_area(a, h):\n    return a * h / 2.0\n", "cover": "def triangle_area(a, h):\n    return a * h / 2.0\n\ndef find_path(a, h):\n\tassert triangle_area(a,h) == 7.5", "pass": false, "testcase": "find_path(0, 0)"}
{"task_id": "Python/45", "fn": "triangle_area", "para": "(a, h)", "arg": "(a,h)", "assert": "40.0", "code": "def triangle_area(a, h):\n    return a * h / 2.0\n", "cover": "def triangle_area(a, h):\n    return a * h / 2.0\n\ndef find_path(a, h):\n\tassert triangle_area(a,h) == 40.0", "pass": false, "testcase": "find_path(0, 0)"}
{"task_id": "Python/45", "fn": "triangle_area", "para": "(a, h)", "arg": "(a,h)", "assert": "2.0", "code": "def triangle_area(a, h):\n    return a * h / 2.0\n", "cover": "def triangle_area(a, h):\n    return a * h / 2.0\n\ndef find_path(a, h):\n\tassert triangle_area(a,h) == 2.0", "pass": false, "testcase": "find_path(0, 0)"}
{"task_id": "Python/46", "fn": "fib4", "para": "(n: int)", "arg": "(n)", "assert": "104", "code": "def fib4(n: int):\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n", "cover": "def fib4(n: int):\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n\ndef find_path(n: int):\n\tassert fib4(n) == 104", "pass": true, "testcase": "find_path(5)\nfind_path(10)"}
{"task_id": "Python/46", "fn": "fib4", "para": "(n: int)", "arg": "(n)", "assert": "386", "code": "def fib4(n: int):\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n", "cover": "def fib4(n: int):\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n\ndef find_path(n: int):\n\tassert fib4(n) == 386", "pass": false, "testcase": "find_path(5)"}
{"task_id": "Python/46", "fn": "fib4", "para": "(n: int)", "arg": "(n)", "assert": "4", "code": "def fib4(n: int):\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n", "cover": "def fib4(n: int):\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n\ndef find_path(n: int):\n\tassert fib4(n) == 4", "pass": true, "testcase": "find_path(5)\nfind_path(4)"}
{"task_id": "Python/46", "fn": "fib4", "para": "(n: int)", "arg": "(n)", "assert": "28", "code": "def fib4(n: int):\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n", "cover": "def fib4(n: int):\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n\ndef find_path(n: int):\n\tassert fib4(n) == 28", "pass": true, "testcase": "find_path(5)\nfind_path(8)"}
{"task_id": "Python/47", "fn": "median", "para": "(l: list)", "arg": "(l)", "assert": "5.5", "code": "def median(l: list):\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n", "cover": "def median(l: list):\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n\ndef find_path(l: list):\n\tassert median(l) == 5.5", "pass": true, "testcase": "find_path([2.0])\nfind_path([5.5])"}
{"task_id": "Python/47", "fn": "median", "para": "(l: list)", "arg": "(l)", "assert": "3", "code": "def median(l: list):\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n", "cover": "def median(l: list):\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n\ndef find_path(l: list):\n\tassert median(l) == 3", "pass": true, "testcase": "find_path([RegexFlag.IGNORECASE])\nfind_path([3])"}
{"task_id": "Python/47", "fn": "median", "para": "(l: list)", "arg": "(l)", "assert": "5", "code": "def median(l: list):\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n", "cover": "def median(l: list):\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n\ndef find_path(l: list):\n\tassert median(l) == 5", "pass": true, "testcase": "find_path([RegexFlag.IGNORECASE])\nfind_path([5])"}
{"task_id": "Python/47", "fn": "median", "para": "(l: list)", "arg": "(l)", "assert": "7", "code": "def median(l: list):\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n", "cover": "def median(l: list):\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n\ndef find_path(l: list):\n\tassert median(l) == 7", "pass": true, "testcase": "find_path([RegexFlag.IGNORECASE])\nfind_path([7])"}
{"task_id": "Python/47", "fn": "median", "para": "(l: list)", "arg": "(l)", "assert": "8.0", "code": "def median(l: list):\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n", "cover": "def median(l: list):\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n\ndef find_path(l: list):\n\tassert median(l) == 8.0", "pass": true, "testcase": "find_path([2.0])\nfind_path([8.0])"}
{"task_id": "Python/48", "fn": "is_palindrome", "para": "(text: str)", "arg": "(text)", "assert": "True", "code": "def is_palindrome(text: str):\n    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n", "cover": "def is_palindrome(text: str):\n    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n\ndef find_path(text: str):\n\tassert is_palindrome(text) == True", "pass": true, "testcase": "find_path('')\nfind_path('\\x00\\x01')"}
{"task_id": "Python/48", "fn": "is_palindrome", "para": "(text: str)", "arg": "(text)", "assert": "False", "code": "def is_palindrome(text: str):\n    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n", "cover": "def is_palindrome(text: str):\n    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n\ndef find_path(text: str):\n\tassert is_palindrome(text) == False", "pass": true, "testcase": "find_path('')\nfind_path('\\x00\\x01')"}
{"task_id": "Python/49", "fn": "modp", "para": "(n: int, p: int)", "arg": "(n,p)", "assert": "1", "code": "def modp(n: int, p: int):\n    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n", "cover": "def modp(n: int, p: int):\n    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n\ndef find_path(n: int, p: int):\n\tassert modp(n,p) == 1", "pass": true, "testcase": "find_path(1, -3)\nfind_path(0, 0)"}
{"task_id": "Python/49", "fn": "modp", "para": "(n: int, p: int)", "arg": "(n,p)", "assert": "4", "code": "def modp(n: int, p: int):\n    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n", "cover": "def modp(n: int, p: int):\n    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n\ndef find_path(n: int, p: int):\n\tassert modp(n,p) == 4", "pass": false, "testcase": "find_path(1, -3)"}
{"task_id": "Python/49", "fn": "modp", "para": "(n: int, p: int)", "arg": "(n,p)", "assert": "3", "code": "def modp(n: int, p: int):\n    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n", "cover": "def modp(n: int, p: int):\n    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n\ndef find_path(n: int, p: int):\n\tassert modp(n,p) == 3", "pass": false, "testcase": "find_path(1, -3)"}
{"task_id": "Python/49", "fn": "modp", "para": "(n: int, p: int)", "arg": "(n,p)", "assert": "2", "code": "def modp(n: int, p: int):\n    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n", "cover": "def modp(n: int, p: int):\n    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n\ndef find_path(n: int, p: int):\n\tassert modp(n,p) == 2", "pass": false, "testcase": "find_path(1, -3)"}
{"task_id": "Python/49", "fn": "modp", "para": "(n: int, p: int)", "arg": "(n,p)", "assert": "8", "code": "def modp(n: int, p: int):\n    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n", "cover": "def modp(n: int, p: int):\n    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n\ndef find_path(n: int, p: int):\n\tassert modp(n,p) == 8", "pass": false, "testcase": "find_path(1, -3)"}
{"task_id": "Python/50", "fn": "decode_shift", "para": "(s: str)", "arg": "(s)", "assert": "str", "code": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n", "cover": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef find_path(s: str):\n\tassert decode_shift(s) == str", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/51", "fn": "remove_vowels", "para": "(text)", "arg": "(text)", "assert": "'bcdf\\nghjklm'", "code": "def remove_vowels(text):\n    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n", "cover": "def remove_vowels(text):\n    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n\ndef find_path(text):\n\tassert remove_vowels(text) == 'bcdf\\nghjklm'", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/51", "fn": "remove_vowels", "para": "(text)", "arg": "(text)", "assert": "''", "code": "def remove_vowels(text):\n    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n", "cover": "def remove_vowels(text):\n    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n\ndef find_path(text):\n\tassert remove_vowels(text) == ''", "pass": false, "testcase": "TIMEOUT"}
{"task_id": "Python/51", "fn": "remove_vowels", "para": "(text)", "arg": "(text)", "assert": "'ybcd'", "code": "def remove_vowels(text):\n    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n", "cover": "def remove_vowels(text):\n    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n\ndef find_path(text):\n\tassert remove_vowels(text) == 'ybcd'", "pass": false, "testcase": "TIMEOUT"}
{"task_id": "Python/51", "fn": "remove_vowels", "para": "(text)", "arg": "(text)", "assert": "'cB'", "code": "def remove_vowels(text):\n    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n", "cover": "def remove_vowels(text):\n    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n\ndef find_path(text):\n\tassert remove_vowels(text) == 'cB'", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/51", "fn": "remove_vowels", "para": "(text)", "arg": "(text)", "assert": "'fdcb'", "code": "def remove_vowels(text):\n    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n", "cover": "def remove_vowels(text):\n    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n\ndef find_path(text):\n\tassert remove_vowels(text) == 'fdcb'", "pass": false, "testcase": "TIMEOUT"}
{"task_id": "Python/52", "fn": "below_threshold", "para": "(l: list, t: int)", "arg": "(l,t)", "assert": "True", "code": "def below_threshold(l: list, t: int):\n    for e in l:\n        if e >= t:\n            return False\n    return True\n", "cover": "def below_threshold(l: list, t: int):\n    for e in l:\n        if e >= t:\n            return False\n    return True\n\ndef find_path(l: list, t: int):\n\tassert below_threshold(l,t) == True", "pass": true, "testcase": "find_path([0], 1)\nfind_path([-1, -1, _ParameterKind.POSITIONAL_ONLY, _ParameterKind.POSITIONAL_ONLY, '', ''], 0)"}
{"task_id": "Python/52", "fn": "below_threshold", "para": "(l: list, t: int)", "arg": "(l,t)", "assert": "False", "code": "def below_threshold(l: list, t: int):\n    for e in l:\n        if e >= t:\n            return False\n    return True\n", "cover": "def below_threshold(l: list, t: int):\n    for e in l:\n        if e >= t:\n            return False\n    return True\n\ndef find_path(l: list, t: int):\n\tassert below_threshold(l,t) == False", "pass": false, "testcase": "find_path([0], 1)\nfind_path([-1, -1, _ParameterKind.POSITIONAL_ONLY, _ParameterKind.POSITIONAL_ONLY, '', ''], 0)"}
{"task_id": "Python/53", "fn": "add", "para": "(x: int, y: int)", "arg": "(x,y)", "assert": "5", "code": "def add(x: int, y: int):\n    return x + y\n", "cover": "def add(x: int, y: int):\n    return x + y\n\ndef find_path(x: int, y: int):\n\tassert add(x,y) == 5", "pass": true, "testcase": "find_path(5, 0)\nfind_path(6, -2)"}
{"task_id": "Python/53", "fn": "add", "para": "(x: int, y: int)", "arg": "(x,y)", "assert": "1", "code": "def add(x: int, y: int):\n    return x + y\n", "cover": "def add(x: int, y: int):\n    return x + y\n\ndef find_path(x: int, y: int):\n\tassert add(x,y) == 1", "pass": true, "testcase": "find_path(1, 0)\nfind_path(2, -2)"}
{"task_id": "Python/53", "fn": "add", "para": "(x: int, y: int)", "arg": "(x,y)", "assert": "x + y", "code": "def add(x: int, y: int):\n    return x + y\n", "cover": "def add(x: int, y: int):\n    return x + y\n\ndef find_path(x: int, y: int):\n\tassert add(x,y) == x + y", "pass": true, "testcase": "find_path(0, 0)"}
{"task_id": "Python/53", "fn": "add", "para": "(x: int, y: int)", "arg": "(x,y)", "assert": "12", "code": "def add(x: int, y: int):\n    return x + y\n", "cover": "def add(x: int, y: int):\n    return x + y\n\ndef find_path(x: int, y: int):\n\tassert add(x,y) == 12", "pass": true, "testcase": "find_path(12, 0)\nfind_path(13, -2)"}
{"task_id": "Python/54", "fn": "same_chars", "para": "(s0: str, s1: str)", "arg": "(s0,s1)", "assert": "True", "code": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)\n", "cover": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)\n\ndef find_path(s0: str, s1: str):\n\tassert same_chars(s0,s1) == True", "pass": true, "testcase": "find_path('\\x00', '')\nfind_path('', '')"}
{"task_id": "Python/54", "fn": "same_chars", "para": "(s0: str, s1: str)", "arg": "(s0,s1)", "assert": "False", "code": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)\n", "cover": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)\n\ndef find_path(s0: str, s1: str):\n\tassert same_chars(s0,s1) == False", "pass": true, "testcase": "find_path('\\x00', '')\nfind_path('', '')"}
{"task_id": "Python/55", "fn": "fib", "para": "(n: int)", "arg": "(n)", "assert": "1", "code": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n", "cover": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\ndef find_path(n: int):\n\tassert fib(n) == 1", "pass": true, "testcase": "find_path(1)\nfind_path(11)"}
{"task_id": "Python/55", "fn": "fib", "para": "(n: int)", "arg": "(n)", "assert": "144", "code": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n", "cover": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\ndef find_path(n: int):\n\tassert fib(n) == 144", "pass": false, "testcase": "find_path(1)"}
{"task_id": "Python/55", "fn": "fib", "para": "(n: int)", "arg": "(n)", "assert": "55", "code": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n", "cover": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\ndef find_path(n: int):\n\tassert fib(n) == 55", "pass": false, "testcase": "find_path(1)"}
{"task_id": "Python/55", "fn": "fib", "para": "(n: int)", "arg": "(n)", "assert": "89", "code": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n", "cover": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\ndef find_path(n: int):\n\tassert fib(n) == 89", "pass": true, "testcase": "find_path(1)\nfind_path(11)"}
{"task_id": "Python/55", "fn": "fib", "para": "(n: int)", "arg": "(n)", "assert": "21", "code": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n", "cover": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\ndef find_path(n: int):\n\tassert fib(n) == 21", "pass": false, "testcase": "find_path(1)"}
{"task_id": "Python/56", "fn": "correct_bracketing", "para": "(brackets: str)", "arg": "(brackets)", "assert": "True", "code": "def correct_bracketing(brackets: str):\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n", "cover": "def correct_bracketing(brackets: str):\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n\ndef find_path(brackets: str):\n\tassert correct_bracketing(brackets) == True", "pass": true, "testcase": "find_path('')\nfind_path('\\x00')"}
{"task_id": "Python/56", "fn": "correct_bracketing", "para": "(brackets: str)", "arg": "(brackets)", "assert": "False", "code": "def correct_bracketing(brackets: str):\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n", "cover": "def correct_bracketing(brackets: str):\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n\ndef find_path(brackets: str):\n\tassert correct_bracketing(brackets) == False", "pass": true, "testcase": "find_path('')\nfind_path('\\x00')"}
{"task_id": "Python/57", "fn": "monotonic", "para": "(l: list)", "arg": "(l)", "assert": "True", "code": "def monotonic(l: list):\n    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n", "cover": "def monotonic(l: list):\n    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n\ndef find_path(l: list):\n\tassert monotonic(l) == True", "pass": true, "testcase": "find_path([])"}
{"task_id": "Python/57", "fn": "monotonic", "para": "(l: list)", "arg": "(l)", "assert": "False", "code": "def monotonic(l: list):\n    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n", "cover": "def monotonic(l: list):\n    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n\ndef find_path(l: list):\n\tassert monotonic(l) == False", "pass": false, "testcase": "find_path([])"}
{"task_id": "Python/58", "fn": "common", "para": "(l1: list, l2: list)", "arg": "(l1,l2)", "assert": "[]", "code": "def common(l1: list, l2: list):\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n", "cover": "def common(l1: list, l2: list):\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n\ndef find_path(l1: list, l2: list):\n\tassert common(l1,l2) == []", "pass": true, "testcase": "find_path([''], [])\nfind_path([''], [''])"}
{"task_id": "Python/58", "fn": "common", "para": "(l1: list, l2: list)", "arg": "(l1,l2)", "assert": "[2, 3]", "code": "def common(l1: list, l2: list):\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n", "cover": "def common(l1: list, l2: list):\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n\ndef find_path(l1: list, l2: list):\n\tassert common(l1,l2) == [2, 3]", "pass": false, "testcase": "find_path([''], [])"}
{"task_id": "Python/58", "fn": "common", "para": "(l1: list, l2: list)", "arg": "(l1,l2)", "assert": "[1, 5, 653]", "code": "def common(l1: list, l2: list):\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n", "cover": "def common(l1: list, l2: list):\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n\ndef find_path(l1: list, l2: list):\n\tassert common(l1,l2) == [1, 5, 653]", "pass": false, "testcase": "find_path([''], [])"}
{"task_id": "Python/58", "fn": "common", "para": "(l1: list, l2: list)", "arg": "(l1,l2)", "assert": "[2, 3, 4]", "code": "def common(l1: list, l2: list):\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n", "cover": "def common(l1: list, l2: list):\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n\ndef find_path(l1: list, l2: list):\n\tassert common(l1,l2) == [2, 3, 4]", "pass": false, "testcase": "find_path([''], [])"}
{"task_id": "Python/59", "fn": "largest_prime_factor", "para": "(n: int)", "arg": "(n)", "assert": "3", "code": "def largest_prime_factor(n: int):\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n", "cover": "def largest_prime_factor(n: int):\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n\ndef find_path(n: int):\n\tassert largest_prime_factor(n) == 3", "pass": false, "testcase": "TIMEOUT"}
{"task_id": "Python/59", "fn": "largest_prime_factor", "para": "(n: int)", "arg": "(n)", "assert": "11", "code": "def largest_prime_factor(n: int):\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n", "cover": "def largest_prime_factor(n: int):\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n\ndef find_path(n: int):\n\tassert largest_prime_factor(n) == 11", "pass": false, "testcase": "TIMEOUT"}
{"task_id": "Python/59", "fn": "largest_prime_factor", "para": "(n: int)", "arg": "(n)", "assert": "5", "code": "def largest_prime_factor(n: int):\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n", "cover": "def largest_prime_factor(n: int):\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n\ndef find_path(n: int):\n\tassert largest_prime_factor(n) == 5", "pass": false, "testcase": "TIMEOUT"}
{"task_id": "Python/59", "fn": "largest_prime_factor", "para": "(n: int)", "arg": "(n)", "assert": "29", "code": "def largest_prime_factor(n: int):\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n", "cover": "def largest_prime_factor(n: int):\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n\ndef find_path(n: int):\n\tassert largest_prime_factor(n) == 29", "pass": false, "testcase": "TIMEOUT"}
{"task_id": "Python/59", "fn": "largest_prime_factor", "para": "(n: int)", "arg": "(n)", "assert": "7", "code": "def largest_prime_factor(n: int):\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n", "cover": "def largest_prime_factor(n: int):\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n\ndef find_path(n: int):\n\tassert largest_prime_factor(n) == 7", "pass": false, "testcase": "TIMEOUT"}
{"task_id": "Python/60", "fn": "sum_to_n", "para": "(n: int)", "arg": "(n)", "assert": "465", "code": "def sum_to_n(n: int):\n    return sum(range(n + 1))\n", "cover": "def sum_to_n(n: int):\n    return sum(range(n + 1))\n\ndef find_path(n: int):\n\tassert sum_to_n(n) == 465", "pass": false, "testcase": "find_path(-1)"}
{"task_id": "Python/60", "fn": "sum_to_n", "para": "(n: int)", "arg": "(n)", "assert": "1", "code": "def sum_to_n(n: int):\n    return sum(range(n + 1))\n", "cover": "def sum_to_n(n: int):\n    return sum(range(n + 1))\n\ndef find_path(n: int):\n\tassert sum_to_n(n) == 1", "pass": true, "testcase": "find_path(-1)\nfind_path(1)"}
{"task_id": "Python/60", "fn": "sum_to_n", "para": "(n: int)", "arg": "(n)", "assert": "5050", "code": "def sum_to_n(n: int):\n    return sum(range(n + 1))\n", "cover": "def sum_to_n(n: int):\n    return sum(range(n + 1))\n\ndef find_path(n: int):\n\tassert sum_to_n(n) == 5050", "pass": false, "testcase": "find_path(-1)"}
{"task_id": "Python/60", "fn": "sum_to_n", "para": "(n: int)", "arg": "(n)", "assert": "66", "code": "def sum_to_n(n: int):\n    return sum(range(n + 1))\n", "cover": "def sum_to_n(n: int):\n    return sum(range(n + 1))\n\ndef find_path(n: int):\n\tassert sum_to_n(n) == 66", "pass": false, "testcase": "find_path(-1)"}
{"task_id": "Python/60", "fn": "sum_to_n", "para": "(n: int)", "arg": "(n)", "assert": "21", "code": "def sum_to_n(n: int):\n    return sum(range(n + 1))\n", "cover": "def sum_to_n(n: int):\n    return sum(range(n + 1))\n\ndef find_path(n: int):\n\tassert sum_to_n(n) == 21", "pass": false, "testcase": "find_path(-1)"}
{"task_id": "Python/61", "fn": "correct_bracketing", "para": "(brackets: str)", "arg": "(brackets)", "assert": "True", "code": "def correct_bracketing(brackets: str):\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n", "cover": "def correct_bracketing(brackets: str):\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n\ndef find_path(brackets: str):\n\tassert correct_bracketing(brackets) == True", "pass": true, "testcase": "find_path('')\nfind_path('\\x00')"}
{"task_id": "Python/61", "fn": "correct_bracketing", "para": "(brackets: str)", "arg": "(brackets)", "assert": "False", "code": "def correct_bracketing(brackets: str):\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n", "cover": "def correct_bracketing(brackets: str):\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n\ndef find_path(brackets: str):\n\tassert correct_bracketing(brackets) == False", "pass": true, "testcase": "find_path('')\nfind_path('\\x00')"}
{"task_id": "Python/62", "fn": "derivative", "para": "(xs: list)", "arg": "(xs)", "assert": "[]", "code": "def derivative(xs: list):\n    return [(i * x) for i, x in enumerate(xs)][1:]\n", "cover": "def derivative(xs: list):\n    return [(i * x) for i, x in enumerate(xs)][1:]\n\ndef find_path(xs: list):\n\tassert derivative(xs) == []", "pass": true, "testcase": "find_path([])\nfind_path([0, ''])"}
{"task_id": "Python/62", "fn": "derivative", "para": "(xs: list)", "arg": "(xs)", "assert": "[2, 2, 0, 16]", "code": "def derivative(xs: list):\n    return [(i * x) for i, x in enumerate(xs)][1:]\n", "cover": "def derivative(xs: list):\n    return [(i * x) for i, x in enumerate(xs)][1:]\n\ndef find_path(xs: list):\n\tassert derivative(xs) == [2, 2, 0, 16]", "pass": false, "testcase": "find_path([])"}
{"task_id": "Python/62", "fn": "derivative", "para": "(xs: list)", "arg": "(xs)", "assert": "[2, 2]", "code": "def derivative(xs: list):\n    return [(i * x) for i, x in enumerate(xs)][1:]\n", "cover": "def derivative(xs: list):\n    return [(i * x) for i, x in enumerate(xs)][1:]\n\ndef find_path(xs: list):\n\tassert derivative(xs) == [2, 2]", "pass": false, "testcase": "find_path([])"}
{"task_id": "Python/62", "fn": "derivative", "para": "(xs: list)", "arg": "(xs)", "assert": "[1, 4, 12, 20]", "code": "def derivative(xs: list):\n    return [(i * x) for i, x in enumerate(xs)][1:]\n", "cover": "def derivative(xs: list):\n    return [(i * x) for i, x in enumerate(xs)][1:]\n\ndef find_path(xs: list):\n\tassert derivative(xs) == [1, 4, 12, 20]", "pass": false, "testcase": "find_path([])"}
{"task_id": "Python/62", "fn": "derivative", "para": "(xs: list)", "arg": "(xs)", "assert": "[2, 6]", "code": "def derivative(xs: list):\n    return [(i * x) for i, x in enumerate(xs)][1:]\n", "cover": "def derivative(xs: list):\n    return [(i * x) for i, x in enumerate(xs)][1:]\n\ndef find_path(xs: list):\n\tassert derivative(xs) == [2, 6]", "pass": false, "testcase": "find_path([])"}
{"task_id": "Python/63", "fn": "fibfib", "para": "(n: int)", "arg": "(n)", "assert": "1", "code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n", "cover": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\ndef find_path(n: int):\n\tassert fibfib(n) == 1", "pass": true, "testcase": "find_path(1)\nfind_path(3)"}
{"task_id": "Python/63", "fn": "fibfib", "para": "(n: int)", "arg": "(n)", "assert": "4", "code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n", "cover": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\ndef find_path(n: int):\n\tassert fibfib(n) == 4", "pass": false, "testcase": "find_path(1)"}
{"task_id": "Python/63", "fn": "fibfib", "para": "(n: int)", "arg": "(n)", "assert": "927", "code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n", "cover": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\ndef find_path(n: int):\n\tassert fibfib(n) == 927", "pass": false, "testcase": "find_path(1)"}
{"task_id": "Python/63", "fn": "fibfib", "para": "(n: int)", "arg": "(n)", "assert": "24", "code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n", "cover": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\ndef find_path(n: int):\n\tassert fibfib(n) == 24", "pass": false, "testcase": "find_path(1)"}
{"task_id": "Python/63", "fn": "fibfib", "para": "(n: int)", "arg": "(n)", "assert": "0", "code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n", "cover": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\ndef find_path(n: int):\n\tassert fibfib(n) == 0", "pass": true, "testcase": "find_path(1)\nfind_path(11)"}
{"task_id": "Python/63", "fn": "fibfib", "para": "(n: int)", "arg": "(n)", "assert": "274", "code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n", "cover": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\ndef find_path(n: int):\n\tassert fibfib(n) == 274", "pass": false, "testcase": "find_path(1)"}
{"task_id": "Python/63", "fn": "fibfib", "para": "(n: int)", "arg": "(n)", "assert": "81", "code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n", "cover": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\ndef find_path(n: int):\n\tassert fibfib(n) == 81", "pass": false, "testcase": "find_path(1)"}
{"task_id": "Python/64", "fn": "vowels_count", "para": "(s)", "arg": "(s)", "assert": "1", "code": "FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n", "cover": "FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n\ndef find_path(s):\n\tassert vowels_count(s) == 1", "pass": true, "testcase": "find_path('\\x00')\nfind_path('Y')"}
{"task_id": "Python/64", "fn": "vowels_count", "para": "(s)", "arg": "(s)", "assert": "3", "code": "FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n", "cover": "FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n\ndef find_path(s):\n\tassert vowels_count(s) == 3", "pass": false, "testcase": "find_path('\\x00')"}
{"task_id": "Python/64", "fn": "vowels_count", "para": "(s)", "arg": "(s)", "assert": "2", "code": "FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n", "cover": "FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n\ndef find_path(s):\n\tassert vowels_count(s) == 2", "pass": false, "testcase": "find_path('\\x00')"}
{"task_id": "Python/65", "fn": "circular_shift", "para": "(x, shift)", "arg": "(x,shift)", "assert": "\"79\"", "code": "def circular_shift(x, shift):\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n", "cover": "def circular_shift(x, shift):\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n\ndef find_path(x, shift):\n\tassert circular_shift(x,shift) == \"79\"", "pass": true, "testcase": "find_path('', 0)\nfind_path('79', 2)"}
{"task_id": "Python/65", "fn": "circular_shift", "para": "(x, shift)", "arg": "(x,shift)", "assert": "\"12\"", "code": "def circular_shift(x, shift):\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n", "cover": "def circular_shift(x, shift):\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n\ndef find_path(x, shift):\n\tassert circular_shift(x,shift) == \"12\"", "pass": true, "testcase": "find_path('', 0)\nfind_path('12', 2)"}
{"task_id": "Python/65", "fn": "circular_shift", "para": "(x, shift)", "arg": "(x,shift)", "assert": "\"11\"", "code": "def circular_shift(x, shift):\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n", "cover": "def circular_shift(x, shift):\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n\ndef find_path(x, shift):\n\tassert circular_shift(x,shift) == \"11\"", "pass": true, "testcase": "find_path('', 0)\nfind_path('11', 2)"}
{"task_id": "Python/65", "fn": "circular_shift", "para": "(x, shift)", "arg": "(x,shift)", "assert": "\"21\"", "code": "def circular_shift(x, shift):\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n", "cover": "def circular_shift(x, shift):\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n\ndef find_path(x, shift):\n\tassert circular_shift(x,shift) == \"21\"", "pass": true, "testcase": "find_path('', 0)\nfind_path('21', 2)"}
{"task_id": "Python/65", "fn": "circular_shift", "para": "(x, shift)", "arg": "(x,shift)", "assert": "\"001\"", "code": "def circular_shift(x, shift):\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n", "cover": "def circular_shift(x, shift):\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n\ndef find_path(x, shift):\n\tassert circular_shift(x,shift) == \"001\"", "pass": true, "testcase": "find_path('', 0)\nfind_path('001', 3)"}
{"task_id": "Python/66", "fn": "digitSum", "para": "(s)", "arg": "(s)", "assert": "153", "code": "def digitSum(s):\n    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n", "cover": "def digitSum(s):\n    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n\ndef find_path(s):\n\tassert digitSum(s) == 153", "pass": false, "testcase": "TIMEOUT"}
{"task_id": "Python/66", "fn": "digitSum", "para": "(s)", "arg": "(s)", "assert": "151", "code": "def digitSum(s):\n    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n", "cover": "def digitSum(s):\n    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n\ndef find_path(s):\n\tassert digitSum(s) == 151", "pass": false, "testcase": "TIMEOUT"}
{"task_id": "Python/66", "fn": "digitSum", "para": "(s)", "arg": "(s)", "assert": "69", "code": "def digitSum(s):\n    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n", "cover": "def digitSum(s):\n    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n\ndef find_path(s):\n\tassert digitSum(s) == 69", "pass": false, "testcase": "TIMEOUT"}
{"task_id": "Python/66", "fn": "digitSum", "para": "(s)", "arg": "(s)", "assert": "0", "code": "def digitSum(s):\n    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n", "cover": "def digitSum(s):\n    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n\ndef find_path(s):\n\tassert digitSum(s) == 0", "pass": false, "testcase": "TIMEOUT"}
{"task_id": "Python/66", "fn": "digitSum", "para": "(s)", "arg": "(s)", "assert": "131", "code": "def digitSum(s):\n    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n", "cover": "def digitSum(s):\n    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n\ndef find_path(s):\n\tassert digitSum(s) == 131", "pass": false, "testcase": "TIMEOUT"}
{"task_id": "Python/66", "fn": "digitSum", "para": "(s)", "arg": "(s)", "assert": "327", "code": "def digitSum(s):\n    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n", "cover": "def digitSum(s):\n    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n\ndef find_path(s):\n\tassert digitSum(s) == 327", "pass": false, "testcase": "TIMEOUT"}
{"task_id": "Python/66", "fn": "digitSum", "para": "(s)", "arg": "(s)", "assert": "67", "code": "def digitSum(s):\n    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n", "cover": "def digitSum(s):\n    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n\ndef find_path(s):\n\tassert digitSum(s) == 67", "pass": false, "testcase": "TIMEOUT"}
{"task_id": "Python/67", "fn": "fruit_distribution", "para": "(s,n)", "arg": "(s,n)", "assert": "10", "code": "def fruit_distribution(s,n):\n    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n", "cover": "def fruit_distribution(s,n):\n    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n\ndef find_path(s,n):\n\tassert fruit_distribution(s,n) == 10", "pass": true, "testcase": "find_path('!', 10)\nfind_path('', 1)"}
{"task_id": "Python/67", "fn": "fruit_distribution", "para": "(s,n)", "arg": "(s,n)", "assert": "2", "code": "def fruit_distribution(s,n):\n    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n", "cover": "def fruit_distribution(s,n):\n    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n\ndef find_path(s,n):\n\tassert fruit_distribution(s,n) == 2", "pass": true, "testcase": "find_path('\u00ba', 2)\nfind_path('', 1)"}
{"task_id": "Python/67", "fn": "fruit_distribution", "para": "(s,n)", "arg": "(s,n)", "assert": "0", "code": "def fruit_distribution(s,n):\n    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n", "cover": "def fruit_distribution(s,n):\n    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n\ndef find_path(s,n):\n\tassert fruit_distribution(s,n) == 0", "pass": true, "testcase": "find_path('\u24eb', 0)\nfind_path('', 1)"}
{"task_id": "Python/67", "fn": "fruit_distribution", "para": "(s,n)", "arg": "(s,n)", "assert": "8", "code": "def fruit_distribution(s,n):\n    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n", "cover": "def fruit_distribution(s,n):\n    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n\ndef find_path(s,n):\n\tassert fruit_distribution(s,n) == 8", "pass": true, "testcase": "find_path('!', 8)\nfind_path('', 1)"}
{"task_id": "Python/67", "fn": "fruit_distribution", "para": "(s,n)", "arg": "(s,n)", "assert": "95", "code": "def fruit_distribution(s,n):\n    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n", "cover": "def fruit_distribution(s,n):\n    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n\ndef find_path(s,n):\n\tassert fruit_distribution(s,n) == 95", "pass": true, "testcase": "find_path('!', 95)\nfind_path('', 1)"}
{"task_id": "Python/67", "fn": "fruit_distribution", "para": "(s,n)", "arg": "(s,n)", "assert": "19", "code": "def fruit_distribution(s,n):\n    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n", "cover": "def fruit_distribution(s,n):\n    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n\ndef find_path(s,n):\n\tassert fruit_distribution(s,n) == 19", "pass": true, "testcase": "find_path('!', 19)\nfind_path('', 1)"}
{"task_id": "Python/68", "fn": "pluck", "para": "(arr)", "arg": "(arr)", "assert": "[]", "code": "def pluck(arr):\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n", "cover": "def pluck(arr):\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n\ndef find_path(arr):\n\tassert pluck(arr) == []", "pass": false, "testcase": "find_path('\\x00')"}
{"task_id": "Python/68", "fn": "pluck", "para": "(arr)", "arg": "(arr)", "assert": "[2, 1]", "code": "def pluck(arr):\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n", "cover": "def pluck(arr):\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n\ndef find_path(arr):\n\tassert pluck(arr) == [2, 1]", "pass": false, "testcase": "find_path('\\x00')"}
{"task_id": "Python/68", "fn": "pluck", "para": "(arr)", "arg": "(arr)", "assert": "[0, 3]", "code": "def pluck(arr):\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n", "cover": "def pluck(arr):\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n\ndef find_path(arr):\n\tassert pluck(arr) == [0, 3]", "pass": false, "testcase": "find_path('\\x00')"}
{"task_id": "Python/68", "fn": "pluck", "para": "(arr)", "arg": "(arr)", "assert": "[6, 1]", "code": "def pluck(arr):\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n", "cover": "def pluck(arr):\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n\ndef find_path(arr):\n\tassert pluck(arr) == [6, 1]", "pass": false, "testcase": "find_path('\\x00')"}
{"task_id": "Python/68", "fn": "pluck", "para": "(arr)", "arg": "(arr)", "assert": "[4, 1]", "code": "def pluck(arr):\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n", "cover": "def pluck(arr):\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n\ndef find_path(arr):\n\tassert pluck(arr) == [4, 1]", "pass": false, "testcase": "find_path('\\x00')"}
{"task_id": "Python/68", "fn": "pluck", "para": "(arr)", "arg": "(arr)", "assert": "[0, 1]", "code": "def pluck(arr):\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n", "cover": "def pluck(arr):\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n\ndef find_path(arr):\n\tassert pluck(arr) == [0, 1]", "pass": false, "testcase": "find_path('\\x00')"}
{"task_id": "Python/69", "fn": "search", "para": "(lst)", "arg": "(lst)", "assert": "1", "code": "def search(lst):\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n", "cover": "def search(lst):\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n\ndef find_path(lst):\n\tassert search(lst) == 1", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/69", "fn": "search", "para": "(lst)", "arg": "(lst)", "assert": "4", "code": "def search(lst):\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n", "cover": "def search(lst):\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n\ndef find_path(lst):\n\tassert search(lst) == 4", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/69", "fn": "search", "para": "(lst)", "arg": "(lst)", "assert": "-1", "code": "def search(lst):\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n", "cover": "def search(lst):\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n\ndef find_path(lst):\n\tassert search(lst) == -1", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/69", "fn": "search", "para": "(lst)", "arg": "(lst)", "assert": "2", "code": "def search(lst):\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n", "cover": "def search(lst):\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n\ndef find_path(lst):\n\tassert search(lst) == 2", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/69", "fn": "search", "para": "(lst)", "arg": "(lst)", "assert": "5", "code": "def search(lst):\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n", "cover": "def search(lst):\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n\ndef find_path(lst):\n\tassert search(lst) == 5", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/69", "fn": "search", "para": "(lst)", "arg": "(lst)", "assert": "8", "code": "def search(lst):\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n", "cover": "def search(lst):\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n\ndef find_path(lst):\n\tassert search(lst) == 8", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/70", "fn": "strange_sort_list", "para": "(lst)", "arg": "(lst)", "assert": "[]", "code": "def strange_sort_list(lst):\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n", "cover": "def strange_sort_list(lst):\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n\ndef find_path(lst):\n\tassert strange_sort_list(lst) == []", "pass": true, "testcase": "find_path('')"}
{"task_id": "Python/70", "fn": "strange_sort_list", "para": "(lst)", "arg": "(lst)", "assert": "[5, 9, 6, 8, 7]", "code": "def strange_sort_list(lst):\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n", "cover": "def strange_sort_list(lst):\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n\ndef find_path(lst):\n\tassert strange_sort_list(lst) == [5, 9, 6, 8, 7]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/70", "fn": "strange_sort_list", "para": "(lst)", "arg": "(lst)", "assert": "[1, 8, 2, 7, 3, 6, 4, 5]", "code": "def strange_sort_list(lst):\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n", "cover": "def strange_sort_list(lst):\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n\ndef find_path(lst):\n\tassert strange_sort_list(lst) == [1, 8, 2, 7, 3, 6, 4, 5]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/70", "fn": "strange_sort_list", "para": "(lst)", "arg": "(lst)", "assert": "[1, 9, 5, 8, 6, 7]", "code": "def strange_sort_list(lst):\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n", "cover": "def strange_sort_list(lst):\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n\ndef find_path(lst):\n\tassert strange_sort_list(lst) == [1, 9, 5, 8, 6, 7]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/70", "fn": "strange_sort_list", "para": "(lst)", "arg": "(lst)", "assert": "[111111]", "code": "def strange_sort_list(lst):\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n", "cover": "def strange_sort_list(lst):\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n\ndef find_path(lst):\n\tassert strange_sort_list(lst) == [111111]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/70", "fn": "strange_sort_list", "para": "(lst)", "arg": "(lst)", "assert": "[5, 5, 5, 5]", "code": "def strange_sort_list(lst):\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n", "cover": "def strange_sort_list(lst):\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n\ndef find_path(lst):\n\tassert strange_sort_list(lst) == [5, 5, 5, 5]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/70", "fn": "strange_sort_list", "para": "(lst)", "arg": "(lst)", "assert": "[1, 4, 2, 3]", "code": "def strange_sort_list(lst):\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n", "cover": "def strange_sort_list(lst):\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n\ndef find_path(lst):\n\tassert strange_sort_list(lst) == [1, 4, 2, 3]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/70", "fn": "strange_sort_list", "para": "(lst)", "arg": "(lst)", "assert": "[1, 5, 2, 4, 3]", "code": "def strange_sort_list(lst):\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n", "cover": "def strange_sort_list(lst):\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n\ndef find_path(lst):\n\tassert strange_sort_list(lst) == [1, 5, 2, 4, 3]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/70", "fn": "strange_sort_list", "para": "(lst)", "arg": "(lst)", "assert": "[-5, 5, -5, 5, 0, 2, 2, 2]", "code": "def strange_sort_list(lst):\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n", "cover": "def strange_sort_list(lst):\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n\ndef find_path(lst):\n\tassert strange_sort_list(lst) == [-5, 5, -5, 5, 0, 2, 2, 2]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/71", "fn": "triangle_area", "para": "(a, b, c)", "arg": "(a,b,c)", "assert": "8.18", "code": "def triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n", "cover": "def triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n\ndef find_path(a, b, c):\n\tassert triangle_area(a,b,c) == 8.18", "pass": false, "testcase": "find_path('', '\\x00', FoldedCase())"}
{"task_id": "Python/71", "fn": "triangle_area", "para": "(a, b, c)", "arg": "(a,b,c)", "assert": "-1", "code": "def triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n", "cover": "def triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n\ndef find_path(a, b, c):\n\tassert triangle_area(a,b,c) == -1", "pass": false, "testcase": "find_path('', '\u0142', FoldedCase())"}
{"task_id": "Python/71", "fn": "triangle_area", "para": "(a, b, c)", "arg": "(a,b,c)", "assert": "6.00", "code": "def triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n", "cover": "def triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n\ndef find_path(a, b, c):\n\tassert triangle_area(a,b,c) == 6.00", "pass": false, "testcase": "find_path('', '\u0207', FoldedCase())"}
{"task_id": "Python/71", "fn": "triangle_area", "para": "(a, b, c)", "arg": "(a,b,c)", "assert": "0.43", "code": "def triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n", "cover": "def triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n\ndef find_path(a, b, c):\n\tassert triangle_area(a,b,c) == 0.43", "pass": false, "testcase": "find_path('', '\u013e', FoldedCase())"}
{"task_id": "Python/71", "fn": "triangle_area", "para": "(a, b, c)", "arg": "(a,b,c)", "assert": "1.73", "code": "def triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n", "cover": "def triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n\ndef find_path(a, b, c):\n\tassert triangle_area(a,b,c) == 1.73", "pass": false, "testcase": "find_path('', '\u0142', FoldedCase())"}
{"task_id": "Python/71", "fn": "triangle_area", "para": "(a, b, c)", "arg": "(a,b,c)", "assert": "16.25", "code": "def triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n", "cover": "def triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n\ndef find_path(a, b, c):\n\tassert triangle_area(a,b,c) == 16.25", "pass": false, "testcase": "find_path('', '\u0129', FoldedCase())"}
{"task_id": "Python/72", "fn": "will_it_fly", "para": "(q,w)", "arg": "(q,w)", "assert": "True", "code": "def will_it_fly(q,w):\n    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n", "cover": "def will_it_fly(q,w):\n    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n\ndef find_path(q,w):\n\tassert will_it_fly(q,w) == True", "pass": true, "testcase": "find_path('', 0)\nfind_path('', -1)"}
{"task_id": "Python/72", "fn": "will_it_fly", "para": "(q,w)", "arg": "(q,w)", "assert": "False", "code": "def will_it_fly(q,w):\n    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n", "cover": "def will_it_fly(q,w):\n    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n\ndef find_path(q,w):\n\tassert will_it_fly(q,w) == False", "pass": true, "testcase": "find_path('', 0)\nfind_path('', -1)"}
{"task_id": "Python/73", "fn": "smallest_change", "para": "(arr)", "arg": "(arr)", "assert": "1", "code": "def smallest_change(arr):\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n", "cover": "def smallest_change(arr):\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n\ndef find_path(arr):\n\tassert smallest_change(arr) == 1", "pass": true, "testcase": "find_path('')\nfind_path('\\x00\\x01')"}
{"task_id": "Python/73", "fn": "smallest_change", "para": "(arr)", "arg": "(arr)", "assert": "0", "code": "def smallest_change(arr):\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n", "cover": "def smallest_change(arr):\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n\ndef find_path(arr):\n\tassert smallest_change(arr) == 0", "pass": true, "testcase": "find_path('')\nfind_path('\\x00\\x01')"}
{"task_id": "Python/73", "fn": "smallest_change", "para": "(arr)", "arg": "(arr)", "assert": "4", "code": "def smallest_change(arr):\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n", "cover": "def smallest_change(arr):\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n\ndef find_path(arr):\n\tassert smallest_change(arr) == 4", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/74", "fn": "total_match", "para": "(lst1, lst2)", "arg": "(lst1,lst2)", "assert": "[]", "code": "def total_match(lst1, lst2):\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n", "cover": "def total_match(lst1, lst2):\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n\ndef find_path(lst1, lst2):\n\tassert total_match(lst1,lst2) == []", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/74", "fn": "total_match", "para": "(lst1, lst2)", "arg": "(lst1,lst2)", "assert": "['4']", "code": "def total_match(lst1, lst2):\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n", "cover": "def total_match(lst1, lst2):\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n\ndef find_path(lst1, lst2):\n\tassert total_match(lst1,lst2) == ['4']", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/74", "fn": "total_match", "para": "(lst1, lst2)", "arg": "(lst1,lst2)", "assert": "['hi', 'hi']", "code": "def total_match(lst1, lst2):\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n", "cover": "def total_match(lst1, lst2):\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n\ndef find_path(lst1, lst2):\n\tassert total_match(lst1,lst2) == ['hi', 'hi']", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/74", "fn": "total_match", "para": "(lst1, lst2)", "arg": "(lst1,lst2)", "assert": "['hI', 'hi', 'hi']", "code": "def total_match(lst1, lst2):\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n", "cover": "def total_match(lst1, lst2):\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n\ndef find_path(lst1, lst2):\n\tassert total_match(lst1,lst2) == ['hI', 'hi', 'hi']", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/74", "fn": "total_match", "para": "(lst1, lst2)", "arg": "(lst1,lst2)", "assert": "['hI', 'Hi']", "code": "def total_match(lst1, lst2):\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n", "cover": "def total_match(lst1, lst2):\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n\ndef find_path(lst1, lst2):\n\tassert total_match(lst1,lst2) == ['hI', 'Hi']", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/74", "fn": "total_match", "para": "(lst1, lst2)", "arg": "(lst1,lst2)", "assert": "['hi', 'admin']", "code": "def total_match(lst1, lst2):\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n", "cover": "def total_match(lst1, lst2):\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n\ndef find_path(lst1, lst2):\n\tassert total_match(lst1,lst2) == ['hi', 'admin']", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/75", "fn": "is_multiply_prime", "para": "(a)", "arg": "(a)", "assert": "True", "code": "def is_multiply_prime(a):\n    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n", "cover": "def is_multiply_prime(a):\n    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n\ndef find_path(a):\n\tassert is_multiply_prime(a) == True", "pass": true, "testcase": "find_path(RegexFlag.VERBOSE)\nfind_path(316)"}
{"task_id": "Python/75", "fn": "is_multiply_prime", "para": "(a)", "arg": "(a)", "assert": "False", "code": "def is_multiply_prime(a):\n    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n", "cover": "def is_multiply_prime(a):\n    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n\ndef find_path(a):\n\tassert is_multiply_prime(a) == False", "pass": false, "testcase": "find_path(RegexFlag.VERBOSE)\nfind_path(316)"}
{"task_id": "Python/76", "fn": "is_simple_power", "para": "(x, n)", "arg": "(x,n)", "assert": "True", "code": "def is_simple_power(x, n):\n    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n", "cover": "def is_simple_power(x, n):\n    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n\ndef find_path(x, n):\n\tassert is_simple_power(x,n) == True", "pass": true, "testcase": "find_path(0, RegexFlag.VERBOSE)\nfind_path(1, 2)"}
{"task_id": "Python/76", "fn": "is_simple_power", "para": "(x, n)", "arg": "(x,n)", "assert": "False", "code": "def is_simple_power(x, n):\n    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n", "cover": "def is_simple_power(x, n):\n    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n\ndef find_path(x, n):\n\tassert is_simple_power(x,n) == False", "pass": true, "testcase": "find_path(1, RegexFlag.VERBOSE)\nfind_path(0, 2)"}
{"task_id": "Python/77", "fn": "iscube", "para": "(a)", "arg": "(a)", "assert": "True", "code": "def iscube(a):\n    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n", "cover": "def iscube(a):\n    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n\ndef find_path(a):\n\tassert iscube(a) == True", "pass": true, "testcase": "find_path(0)\nfind_path(2)"}
{"task_id": "Python/77", "fn": "iscube", "para": "(a)", "arg": "(a)", "assert": "False", "code": "def iscube(a):\n    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n", "cover": "def iscube(a):\n    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n\ndef find_path(a):\n\tassert iscube(a) == False", "pass": true, "testcase": "find_path(0)\nfind_path(2)"}
{"task_id": "Python/78", "fn": "hex_key", "para": "(num)", "arg": "(num)", "assert": "1", "code": "def hex_key(num):\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n", "cover": "def hex_key(num):\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n\ndef find_path(num):\n\tassert hex_key(num) == 1", "pass": true, "testcase": "find_path('')\nfind_path('3')"}
{"task_id": "Python/78", "fn": "hex_key", "para": "(num)", "arg": "(num)", "assert": "4", "code": "def hex_key(num):\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n", "cover": "def hex_key(num):\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n\ndef find_path(num):\n\tassert hex_key(num) == 4", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/78", "fn": "hex_key", "para": "(num)", "arg": "(num)", "assert": "12", "code": "def hex_key(num):\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n", "cover": "def hex_key(num):\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n\ndef find_path(num):\n\tassert hex_key(num) == 12", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/78", "fn": "hex_key", "para": "(num)", "arg": "(num)", "assert": "2", "code": "def hex_key(num):\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n", "cover": "def hex_key(num):\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n\ndef find_path(num):\n\tassert hex_key(num) == 2", "pass": true, "testcase": "find_path('')\nfind_path('55')"}
{"task_id": "Python/78", "fn": "hex_key", "para": "(num)", "arg": "(num)", "assert": "0", "code": "def hex_key(num):\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n", "cover": "def hex_key(num):\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n\ndef find_path(num):\n\tassert hex_key(num) == 0", "pass": true, "testcase": "find_path('')\nfind_path('3')"}
{"task_id": "Python/78", "fn": "hex_key", "para": "(num)", "arg": "(num)", "assert": "6", "code": "def hex_key(num):\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n", "cover": "def hex_key(num):\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n\ndef find_path(num):\n\tassert hex_key(num) == 6", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/79", "fn": "decimal_to_binary", "para": "(decimal)", "arg": "(decimal)", "assert": "\"db100000db\"", "code": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\"\n", "cover": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\"\n\ndef find_path(decimal):\n\tassert decimal_to_binary(decimal) == \"db100000db\"", "pass": false, "testcase": "find_path(0)"}
{"task_id": "Python/79", "fn": "decimal_to_binary", "para": "(decimal)", "arg": "(decimal)", "assert": "\"db0db\"", "code": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\"\n", "cover": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\"\n\ndef find_path(decimal):\n\tassert decimal_to_binary(decimal) == \"db0db\"", "pass": true, "testcase": "find_path(0)\nfind_path(2)"}
{"task_id": "Python/79", "fn": "decimal_to_binary", "para": "(decimal)", "arg": "(decimal)", "assert": "\"db1111db\"", "code": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\"\n", "cover": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\"\n\ndef find_path(decimal):\n\tassert decimal_to_binary(decimal) == \"db1111db\"", "pass": false, "testcase": "find_path(0)"}
{"task_id": "Python/79", "fn": "decimal_to_binary", "para": "(decimal)", "arg": "(decimal)", "assert": "\"db1100111db\"", "code": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\"\n", "cover": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\"\n\ndef find_path(decimal):\n\tassert decimal_to_binary(decimal) == \"db1100111db\"", "pass": false, "testcase": "find_path(0)"}
{"task_id": "Python/80", "fn": "is_happy", "para": "(s)", "arg": "(s)", "assert": "True", "code": "def is_happy(s):\n    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n", "cover": "def is_happy(s):\n    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n\ndef find_path(s):\n\tassert is_happy(s) == True", "pass": true, "testcase": "find_path('\\x01\\x02\\x00')\nfind_path('')"}
{"task_id": "Python/80", "fn": "is_happy", "para": "(s)", "arg": "(s)", "assert": "False", "code": "def is_happy(s):\n    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n", "cover": "def is_happy(s):\n    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n\ndef find_path(s):\n\tassert is_happy(s) == False", "pass": true, "testcase": "find_path('\\x01\\x02\\x00')\nfind_path('')"}
{"task_id": "Python/81", "fn": "numerical_letter_grade", "para": "(grades)", "arg": "(grades)", "assert": "['A+', 'B', 'C-', 'C', 'A-']", "code": "def numerical_letter_grade(grades):\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n", "cover": "def numerical_letter_grade(grades):\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n\ndef find_path(grades):\n\tassert numerical_letter_grade(grades) == ['A+', 'B', 'C-', 'C', 'A-']", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/81", "fn": "numerical_letter_grade", "para": "(grades)", "arg": "(grades)", "assert": "['E']", "code": "def numerical_letter_grade(grades):\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n", "cover": "def numerical_letter_grade(grades):\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n\ndef find_path(grades):\n\tassert numerical_letter_grade(grades) == ['E']", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/81", "fn": "numerical_letter_grade", "para": "(grades)", "arg": "(grades)", "assert": "['E', 'D-']", "code": "def numerical_letter_grade(grades):\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n", "cover": "def numerical_letter_grade(grades):\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n\ndef find_path(grades):\n\tassert numerical_letter_grade(grades) == ['E', 'D-']", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/81", "fn": "numerical_letter_grade", "para": "(grades)", "arg": "(grades)", "assert": "['D-']", "code": "def numerical_letter_grade(grades):\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n", "cover": "def numerical_letter_grade(grades):\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n\ndef find_path(grades):\n\tassert numerical_letter_grade(grades) == ['D-']", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/81", "fn": "numerical_letter_grade", "para": "(grades)", "arg": "(grades)", "assert": "['D+']", "code": "def numerical_letter_grade(grades):\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n", "cover": "def numerical_letter_grade(grades):\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n\ndef find_path(grades):\n\tassert numerical_letter_grade(grades) == ['D+']", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/81", "fn": "numerical_letter_grade", "para": "(grades)", "arg": "(grades)", "assert": "['D', 'D-', 'C-', 'B', 'B+']", "code": "def numerical_letter_grade(grades):\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n", "cover": "def numerical_letter_grade(grades):\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n\ndef find_path(grades):\n\tassert numerical_letter_grade(grades) == ['D', 'D-', 'C-', 'B', 'B+']", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/82", "fn": "prime_length", "para": "(string)", "arg": "(string)", "assert": "True", "code": "def prime_length(string):\n    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n", "cover": "def prime_length(string):\n    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n\ndef find_path(string):\n\tassert prime_length(string) == True", "pass": true, "testcase": "find_path('\\x00\\x00')\nfind_path('\\x00\\x00\\x00\\x00')"}
{"task_id": "Python/82", "fn": "prime_length", "para": "(string)", "arg": "(string)", "assert": "False", "code": "def prime_length(string):\n    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n", "cover": "def prime_length(string):\n    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n\ndef find_path(string):\n\tassert prime_length(string) == False", "pass": true, "testcase": "find_path('\\x00\\x00')\nfind_path('\\x00\\x00\\x00\\x00')"}
{"task_id": "Python/83", "fn": "starts_one_ends", "para": "(n)", "arg": "(n)", "assert": "1", "code": "def starts_one_ends(n):\n    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n", "cover": "def starts_one_ends(n):\n    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n\ndef find_path(n):\n\tassert starts_one_ends(n) == 1", "pass": true, "testcase": "find_path(RegexFlag.VERBOSE)\nfind_path(1)"}
{"task_id": "Python/83", "fn": "starts_one_ends", "para": "(n)", "arg": "(n)", "assert": "180", "code": "def starts_one_ends(n):\n    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n", "cover": "def starts_one_ends(n):\n    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n\ndef find_path(n):\n\tassert starts_one_ends(n) == 180", "pass": true, "testcase": "find_path(RegexFlag.VERBOSE)\nfind_path(3)"}
{"task_id": "Python/83", "fn": "starts_one_ends", "para": "(n)", "arg": "(n)", "assert": "1800", "code": "def starts_one_ends(n):\n    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n", "cover": "def starts_one_ends(n):\n    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n\ndef find_path(n):\n\tassert starts_one_ends(n) == 1800", "pass": true, "testcase": "find_path(RegexFlag.VERBOSE)\nfind_path(4)"}
{"task_id": "Python/83", "fn": "starts_one_ends", "para": "(n)", "arg": "(n)", "assert": "18", "code": "def starts_one_ends(n):\n    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n", "cover": "def starts_one_ends(n):\n    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n\ndef find_path(n):\n\tassert starts_one_ends(n) == 18", "pass": true, "testcase": "find_path(RegexFlag.VERBOSE)\nfind_path(2)"}
{"task_id": "Python/83", "fn": "starts_one_ends", "para": "(n)", "arg": "(n)", "assert": "18000", "code": "def starts_one_ends(n):\n    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n", "cover": "def starts_one_ends(n):\n    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n\ndef find_path(n):\n\tassert starts_one_ends(n) == 18000", "pass": true, "testcase": "find_path(RegexFlag.VERBOSE)\nfind_path(5)"}
{"task_id": "Python/84", "fn": "solve", "para": "(N)", "arg": "(N)", "assert": "\"10010\"", "code": "def solve(N):\n    return bin(sum(int(i) for i in str(N)))[2:]\n", "cover": "def solve(N):\n    return bin(sum(int(i) for i in str(N)))[2:]\n\ndef find_path(N):\n\tassert solve(N) == \"10010\"", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/84", "fn": "solve", "para": "(N)", "arg": "(N)", "assert": "\"1001\"", "code": "def solve(N):\n    return bin(sum(int(i) for i in str(N)))[2:]\n", "cover": "def solve(N):\n    return bin(sum(int(i) for i in str(N)))[2:]\n\ndef find_path(N):\n\tassert solve(N) == \"1001\"", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/84", "fn": "solve", "para": "(N)", "arg": "(N)", "assert": "\"1\"", "code": "def solve(N):\n    return bin(sum(int(i) for i in str(N)))[2:]\n", "cover": "def solve(N):\n    return bin(sum(int(i) for i in str(N)))[2:]\n\ndef find_path(N):\n\tassert solve(N) == \"1\"", "pass": true, "testcase": "find_path('')\nfind_path('1')"}
{"task_id": "Python/84", "fn": "solve", "para": "(N)", "arg": "(N)", "assert": "\"110\"", "code": "def solve(N):\n    return bin(sum(int(i) for i in str(N)))[2:]\n", "cover": "def solve(N):\n    return bin(sum(int(i) for i in str(N)))[2:]\n\ndef find_path(N):\n\tassert solve(N) == \"110\"", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/84", "fn": "solve", "para": "(N)", "arg": "(N)", "assert": "\"1100\"", "code": "def solve(N):\n    return bin(sum(int(i) for i in str(N)))[2:]\n", "cover": "def solve(N):\n    return bin(sum(int(i) for i in str(N)))[2:]\n\ndef find_path(N):\n\tassert solve(N) == \"1100\"", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/85", "fn": "add", "para": "(lst)", "arg": "(lst)", "assert": "122", "code": "def add(lst):\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n", "cover": "def add(lst):\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n\ndef find_path(lst):\n\tassert add(lst) == 122", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/85", "fn": "add", "para": "(lst)", "arg": "(lst)", "assert": "0", "code": "def add(lst):\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n", "cover": "def add(lst):\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n\ndef find_path(lst):\n\tassert add(lst) == 0", "pass": true, "testcase": "find_path('')"}
{"task_id": "Python/85", "fn": "add", "para": "(lst)", "arg": "(lst)", "assert": "88", "code": "def add(lst):\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n", "cover": "def add(lst):\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n\ndef find_path(lst):\n\tassert add(lst) == 88", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/85", "fn": "add", "para": "(lst)", "arg": "(lst)", "assert": "12", "code": "def add(lst):\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n", "cover": "def add(lst):\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n\ndef find_path(lst):\n\tassert add(lst) == 12", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/86", "fn": "anti_shuffle", "para": "(s)", "arg": "(s)", "assert": "'bemnru'", "code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n", "cover": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n\ndef find_path(s):\n\tassert anti_shuffle(s) == 'bemnru'", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/86", "fn": "anti_shuffle", "para": "(s)", "arg": "(s)", "assert": "''", "code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n", "cover": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n\ndef find_path(s):\n\tassert anti_shuffle(s) == ''", "pass": true, "testcase": "find_path('')\nfind_path('!')"}
{"task_id": "Python/86", "fn": "anti_shuffle", "para": "(s)", "arg": "(s)", "assert": "'Hi'", "code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n", "cover": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n\ndef find_path(s):\n\tassert anti_shuffle(s) == 'Hi'", "pass": true, "testcase": "find_path('')\nfind_path('Hi')"}
{"task_id": "Python/86", "fn": "anti_shuffle", "para": "(s)", "arg": "(s)", "assert": "'.Hi My aemn is Meirst .Rboot How aer ?ouy'", "code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n", "cover": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n\ndef find_path(s):\n\tassert anti_shuffle(s) == '.Hi My aemn is Meirst .Rboot How aer ?ouy'", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/86", "fn": "anti_shuffle", "para": "(s)", "arg": "(s)", "assert": "'Hello !!!Wdlor'", "code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n", "cover": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n\ndef find_path(s):\n\tassert anti_shuffle(s) == 'Hello !!!Wdlor'", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/86", "fn": "anti_shuffle", "para": "(s)", "arg": "(s)", "assert": "'abcd'", "code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n", "cover": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n\ndef find_path(s):\n\tassert anti_shuffle(s) == 'abcd'", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/86", "fn": "anti_shuffle", "para": "(s)", "arg": "(s)", "assert": "'ehllo'", "code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n", "cover": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n\ndef find_path(s):\n\tassert anti_shuffle(s) == 'ehllo'", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/87", "fn": "get_row", "para": "(lst, x)", "arg": "(lst,x)", "assert": "[]", "code": "def get_row(lst, x):\n    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n", "cover": "def get_row(lst, x):\n    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n\ndef find_path(lst, x):\n\tassert get_row(lst,x) == []", "pass": true, "testcase": "find_path('', '')\nfind_path('\\x00', '\\x00')"}
{"task_id": "Python/87", "fn": "get_row", "para": "(lst, x)", "arg": "(lst,x)", "assert": "[(2, 2)]", "code": "def get_row(lst, x):\n    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n", "cover": "def get_row(lst, x):\n    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n\ndef find_path(lst, x):\n\tassert get_row(lst,x) == [(2, 2)]", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/87", "fn": "get_row", "para": "(lst, x)", "arg": "(lst,x)", "assert": "True", "code": "def get_row(lst, x):\n    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n", "cover": "def get_row(lst, x):\n    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n\ndef find_path(lst, x):\n\tassert get_row(lst,x) == True", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/87", "fn": "get_row", "para": "(lst, x)", "arg": "(lst,x)", "assert": "False", "code": "def get_row(lst, x):\n    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n", "cover": "def get_row(lst, x):\n    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n\ndef find_path(lst, x):\n\tassert get_row(lst,x) == False", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/88", "fn": "sort_array", "para": "(array)", "arg": "(array)", "assert": "[]", "code": "def sort_array(array):\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n", "cover": "def sort_array(array):\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n\ndef find_path(array):\n\tassert sort_array(array) == []", "pass": false, "testcase": "find_path('\\x00')"}
{"task_id": "Python/88", "fn": "sort_array", "para": "(array)", "arg": "(array)", "assert": "[0, 1, 2, 3, 4, 5]", "code": "def sort_array(array):\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n", "cover": "def sort_array(array):\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n\ndef find_path(array):\n\tassert sort_array(array) == [0, 1, 2, 3, 4, 5]", "pass": false, "testcase": "find_path('\\x00')"}
{"task_id": "Python/88", "fn": "sort_array", "para": "(array)", "arg": "(array)", "assert": "[23, 21, 14, 11]", "code": "def sort_array(array):\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n", "cover": "def sort_array(array):\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n\ndef find_path(array):\n\tassert sort_array(array) == [23, 21, 14, 11]", "pass": false, "testcase": "find_path('\\x00')"}
{"task_id": "Python/88", "fn": "sort_array", "para": "(array)", "arg": "(array)", "assert": "[6, 5, 4, 3, 2, 1, 0]", "code": "def sort_array(array):\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n", "cover": "def sort_array(array):\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n\ndef find_path(array):\n\tassert sort_array(array) == [6, 5, 4, 3, 2, 1, 0]", "pass": false, "testcase": "find_path('\\x00')"}
{"task_id": "Python/88", "fn": "sort_array", "para": "(array)", "arg": "(array)", "assert": "[5]", "code": "def sort_array(array):\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n", "cover": "def sort_array(array):\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n\ndef find_path(array):\n\tassert sort_array(array) == [5]", "pass": false, "testcase": "find_path('\\x00')"}
{"task_id": "Python/88", "fn": "sort_array", "para": "(array)", "arg": "(array)", "assert": "[0, 11, 15, 32, 42, 87]", "code": "def sort_array(array):\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n", "cover": "def sort_array(array):\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n\ndef find_path(array):\n\tassert sort_array(array) == [0, 11, 15, 32, 42, 87]", "pass": false, "testcase": "find_path('\\x00')"}
{"task_id": "Python/88", "fn": "sort_array", "para": "(array)", "arg": "(array)", "assert": "[1, 2]", "code": "def sort_array(array):\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n", "cover": "def sort_array(array):\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n\ndef find_path(array):\n\tassert sort_array(array) == [1, 2]", "pass": false, "testcase": "find_path('\\x00')"}
{"task_id": "Python/89", "fn": "encrypt", "para": "(s)", "arg": "(s)", "assert": "'lm'", "code": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n", "cover": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n\ndef find_path(s):\n\tassert encrypt(s) == 'lm'", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/89", "fn": "encrypt", "para": "(s)", "arg": "(s)", "assert": "'kj'", "code": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n", "cover": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n\ndef find_path(s):\n\tassert encrypt(s) == 'kj'", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/89", "fn": "encrypt", "para": "(s)", "arg": "(s)", "assert": "'ewhjklnop'", "code": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n", "cover": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n\ndef find_path(s):\n\tassert encrypt(s) == 'ewhjklnop'", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/89", "fn": "encrypt", "para": "(s)", "arg": "(s)", "assert": "'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'", "code": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n", "cover": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n\ndef find_path(s):\n\tassert encrypt(s) == 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/89", "fn": "encrypt", "para": "(s)", "arg": "(s)", "assert": "'lippsqcjvmirh'", "code": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n", "cover": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n\ndef find_path(s):\n\tassert encrypt(s) == 'lippsqcjvmirh'", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/89", "fn": "encrypt", "para": "(s)", "arg": "(s)", "assert": "'jeiajeaijeiak'", "code": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n", "cover": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n\ndef find_path(s):\n\tassert encrypt(s) == 'jeiajeaijeiak'", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/89", "fn": "encrypt", "para": "(s)", "arg": "(s)", "assert": "'e'", "code": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n", "cover": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n\ndef find_path(s):\n\tassert encrypt(s) == 'e'", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/89", "fn": "encrypt", "para": "(s)", "arg": "(s)", "assert": "'ix'", "code": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n", "cover": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n\ndef find_path(s):\n\tassert encrypt(s) == 'ix'", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/90", "fn": "next_smallest", "para": "(lst)", "arg": "(lst)", "assert": "None", "code": "def next_smallest(lst):\n    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n", "cover": "def next_smallest(lst):\n    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n\ndef find_path(lst):\n\tassert next_smallest(lst) == None", "pass": true, "testcase": "find_path('')"}
{"task_id": "Python/90", "fn": "next_smallest", "para": "(lst)", "arg": "(lst)", "assert": "1", "code": "def next_smallest(lst):\n    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n", "cover": "def next_smallest(lst):\n    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n\ndef find_path(lst):\n\tassert next_smallest(lst) == 1", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/90", "fn": "next_smallest", "para": "(lst)", "arg": "(lst)", "assert": "-35", "code": "def next_smallest(lst):\n    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n", "cover": "def next_smallest(lst):\n    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n\ndef find_path(lst):\n\tassert next_smallest(lst) == -35", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/90", "fn": "next_smallest", "para": "(lst)", "arg": "(lst)", "assert": "2", "code": "def next_smallest(lst):\n    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n", "cover": "def next_smallest(lst):\n    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n\ndef find_path(lst):\n\tassert next_smallest(lst) == 2", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/91", "fn": "is_bored", "para": "(S)", "arg": "(S)", "assert": "1", "code": "def is_bored(S):\n    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n", "cover": "def is_bored(S):\n    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n\ndef find_path(S):\n\tassert is_bored(S) == 1", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/91", "fn": "is_bored", "para": "(S)", "arg": "(S)", "assert": "0", "code": "def is_bored(S):\n    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n", "cover": "def is_bored(S):\n    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n\ndef find_path(S):\n\tassert is_bored(S) == 0", "pass": true, "testcase": "find_path('')"}
{"task_id": "Python/91", "fn": "is_bored", "para": "(S)", "arg": "(S)", "assert": "2", "code": "def is_bored(S):\n    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n", "cover": "def is_bored(S):\n    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n\ndef find_path(S):\n\tassert is_bored(S) == 2", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/92", "fn": "any_int", "para": "(x, y, z)", "arg": "(x,y,z)", "assert": "True", "code": "def any_int(x, y, z):\n    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n", "cover": "def any_int(x, y, z):\n    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n\ndef find_path(x, y, z):\n\tassert any_int(x,y,z) == True", "pass": true, "testcase": "find_path(0, '', 0)\nfind_path(0, 0, 0)"}
{"task_id": "Python/92", "fn": "any_int", "para": "(x, y, z)", "arg": "(x,y,z)", "assert": "False", "code": "def any_int(x, y, z):\n    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n", "cover": "def any_int(x, y, z):\n    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n\ndef find_path(x, y, z):\n\tassert any_int(x,y,z) == False", "pass": true, "testcase": "find_path(0, '', 0)\nfind_path(0, 0, 0)"}
{"task_id": "Python/93", "fn": "encode", "para": "(message)", "arg": "(message)", "assert": "'k dQnT kNqW wHcT Tq wRkTg'", "code": "def encode(message):\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n", "cover": "def encode(message):\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n\ndef find_path(message):\n\tassert encode(message) == 'k dQnT kNqW wHcT Tq wRkTg'", "pass": false, "testcase": "TIMEOUT"}
{"task_id": "Python/93", "fn": "encode", "para": "(message)", "arg": "(message)", "assert": "'tgst'", "code": "def encode(message):\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n", "cover": "def encode(message):\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n\ndef find_path(message):\n\tassert encode(message) == 'tgst'", "pass": false, "testcase": "TIMEOUT"}
{"task_id": "Python/93", "fn": "encode", "para": "(message)", "arg": "(message)", "assert": "'ygs'", "code": "def encode(message):\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n", "cover": "def encode(message):\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n\ndef find_path(message):\n\tassert encode(message) == 'ygs'", "pass": false, "testcase": "TIMEOUT"}
{"task_id": "Python/93", "fn": "encode", "para": "(message)", "arg": "(message)", "assert": "'tHKS KS C MGSSCGG'", "code": "def encode(message):\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n", "cover": "def encode(message):\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n\ndef find_path(message):\n\tassert encode(message) == 'tHKS KS C MGSSCGG'", "pass": false, "testcase": "TIMEOUT"}
{"task_id": "Python/93", "fn": "encode", "para": "(message)", "arg": "(message)", "assert": "'mWDCSKR'", "code": "def encode(message):\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n", "cover": "def encode(message):\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n\ndef find_path(message):\n\tassert encode(message) == 'mWDCSKR'", "pass": false, "testcase": "TIMEOUT"}
{"task_id": "Python/94", "fn": "skjkasdkd", "para": "(lst)", "arg": "(lst)", "assert": "10", "code": "def skjkasdkd(lst):\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n", "cover": "def skjkasdkd(lst):\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n\ndef find_path(lst):\n\tassert skjkasdkd(lst) == 10", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/94", "fn": "skjkasdkd", "para": "(lst)", "arg": "(lst)", "assert": "3", "code": "def skjkasdkd(lst):\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n", "cover": "def skjkasdkd(lst):\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n\ndef find_path(lst):\n\tassert skjkasdkd(lst) == 3", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/94", "fn": "skjkasdkd", "para": "(lst)", "arg": "(lst)", "assert": "25", "code": "def skjkasdkd(lst):\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n", "cover": "def skjkasdkd(lst):\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n\ndef find_path(lst):\n\tassert skjkasdkd(lst) == 25", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/94", "fn": "skjkasdkd", "para": "(lst)", "arg": "(lst)", "assert": "11", "code": "def skjkasdkd(lst):\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n", "cover": "def skjkasdkd(lst):\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n\ndef find_path(lst):\n\tassert skjkasdkd(lst) == 11", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/94", "fn": "skjkasdkd", "para": "(lst)", "arg": "(lst)", "assert": "13", "code": "def skjkasdkd(lst):\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n", "cover": "def skjkasdkd(lst):\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n\ndef find_path(lst):\n\tassert skjkasdkd(lst) == 13", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/94", "fn": "skjkasdkd", "para": "(lst)", "arg": "(lst)", "assert": "7", "code": "def skjkasdkd(lst):\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n", "cover": "def skjkasdkd(lst):\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n\ndef find_path(lst):\n\tassert skjkasdkd(lst) == 7", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/94", "fn": "skjkasdkd", "para": "(lst)", "arg": "(lst)", "assert": "19", "code": "def skjkasdkd(lst):\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n", "cover": "def skjkasdkd(lst):\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n\ndef find_path(lst):\n\tassert skjkasdkd(lst) == 19", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/95", "fn": "check_dict_case", "para": "(dict)", "arg": "(dict)", "assert": "True", "code": "def check_dict_case(dict):\n    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n", "cover": "def check_dict_case(dict):\n    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n\ndef find_path(dict):\n\tassert check_dict_case(dict) == True", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/95", "fn": "check_dict_case", "para": "(dict)", "arg": "(dict)", "assert": "False", "code": "def check_dict_case(dict):\n    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n", "cover": "def check_dict_case(dict):\n    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n\ndef find_path(dict):\n\tassert check_dict_case(dict) == False", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/96", "fn": "count_up_to", "para": "(n)", "arg": "(n)", "assert": "[]", "code": "def count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n", "cover": "def count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n\ndef find_path(n):\n\tassert count_up_to(n) == []", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/96", "fn": "count_up_to", "para": "(n)", "arg": "(n)", "assert": "[2,3,5,7,11,13,17,19]", "code": "def count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n", "cover": "def count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n\ndef find_path(n):\n\tassert count_up_to(n) == [2,3,5,7,11,13,17,19]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/96", "fn": "count_up_to", "para": "(n)", "arg": "(n)", "assert": "[2,3,5,7]", "code": "def count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n", "cover": "def count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n\ndef find_path(n):\n\tassert count_up_to(n) == [2,3,5,7]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/96", "fn": "count_up_to", "para": "(n)", "arg": "(n)", "assert": "[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]", "code": "def count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n", "cover": "def count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n\ndef find_path(n):\n\tassert count_up_to(n) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/96", "fn": "count_up_to", "para": "(n)", "arg": "(n)", "assert": "[2,3,5,7,11,13,17]", "code": "def count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n", "cover": "def count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n\ndef find_path(n):\n\tassert count_up_to(n) == [2,3,5,7,11,13,17]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/96", "fn": "count_up_to", "para": "(n)", "arg": "(n)", "assert": "[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]", "code": "def count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n", "cover": "def count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n\ndef find_path(n):\n\tassert count_up_to(n) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/96", "fn": "count_up_to", "para": "(n)", "arg": "(n)", "assert": "[2,3]", "code": "def count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n", "cover": "def count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n\ndef find_path(n):\n\tassert count_up_to(n) == [2,3]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/96", "fn": "count_up_to", "para": "(n)", "arg": "(n)", "assert": "[2,3,5]", "code": "def count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n", "cover": "def count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n\ndef find_path(n):\n\tassert count_up_to(n) == [2,3,5]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/97", "fn": "multiply", "para": "(a, b)", "arg": "(a,b)", "assert": "42", "code": "def multiply(a, b):\n    return abs(a % 10) * abs(b % 10)\n", "cover": "def multiply(a, b):\n    return abs(a % 10) * abs(b % 10)\n\ndef find_path(a, b):\n\tassert multiply(a,b) == 42", "pass": true, "testcase": "find_path(0, 0)\nfind_path(-4, 7)"}
{"task_id": "Python/97", "fn": "multiply", "para": "(a, b)", "arg": "(a,b)", "assert": "72", "code": "def multiply(a, b):\n    return abs(a % 10) * abs(b % 10)\n", "cover": "def multiply(a, b):\n    return abs(a % 10) * abs(b % 10)\n\ndef find_path(a, b):\n\tassert multiply(a,b) == 72", "pass": true, "testcase": "find_path(0, 0)\nfind_path(-2, 9)"}
{"task_id": "Python/97", "fn": "multiply", "para": "(a, b)", "arg": "(a,b)", "assert": "16", "code": "def multiply(a, b):\n    return abs(a % 10) * abs(b % 10)\n", "cover": "def multiply(a, b):\n    return abs(a % 10) * abs(b % 10)\n\ndef find_path(a, b):\n\tassert multiply(a,b) == 16", "pass": true, "testcase": "find_path(0, 0)\nfind_path(-8, 8)"}
{"task_id": "Python/97", "fn": "multiply", "para": "(a, b)", "arg": "(a,b)", "assert": "0", "code": "def multiply(a, b):\n    return abs(a % 10) * abs(b % 10)\n", "cover": "def multiply(a, b):\n    return abs(a % 10) * abs(b % 10)\n\ndef find_path(a, b):\n\tassert multiply(a,b) == 0", "pass": true, "testcase": "find_path(11, 1)\nfind_path(0, 0)"}
{"task_id": "Python/97", "fn": "multiply", "para": "(a, b)", "arg": "(a,b)", "assert": "49", "code": "def multiply(a, b):\n    return abs(a % 10) * abs(b % 10)\n", "cover": "def multiply(a, b):\n    return abs(a % 10) * abs(b % 10)\n\ndef find_path(a, b):\n\tassert multiply(a,b) == 49", "pass": true, "testcase": "find_path(0, 0)\nfind_path(-3, 7)"}
{"task_id": "Python/97", "fn": "multiply", "para": "(a, b)", "arg": "(a,b)", "assert": "20", "code": "def multiply(a, b):\n    return abs(a % 10) * abs(b % 10)\n", "cover": "def multiply(a, b):\n    return abs(a % 10) * abs(b % 10)\n\ndef find_path(a, b):\n\tassert multiply(a,b) == 20", "pass": true, "testcase": "find_path(0, 0)\nfind_path(-6, 5)"}
{"task_id": "Python/98", "fn": "count_upper", "para": "(s)", "arg": "(s)", "assert": "1", "code": "def count_upper(s):\n    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n", "cover": "def count_upper(s):\n    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n\ndef find_path(s):\n\tassert count_upper(s) == 1", "pass": true, "testcase": "find_path('')\nfind_path('\\x00\\x00\\x00\\x00A')"}
{"task_id": "Python/98", "fn": "count_upper", "para": "(s)", "arg": "(s)", "assert": "0", "code": "def count_upper(s):\n    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n", "cover": "def count_upper(s):\n    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n\ndef find_path(s):\n\tassert count_upper(s) == 0", "pass": true, "testcase": "find_path('')\nfind_path('\\x00\\x00\\x00\\x00A')"}
{"task_id": "Python/98", "fn": "count_upper", "para": "(s)", "arg": "(s)", "assert": "2", "code": "def count_upper(s):\n    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n", "cover": "def count_upper(s):\n    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n\ndef find_path(s):\n\tassert count_upper(s) == 2", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/99", "fn": "closest_integer", "para": "(value)", "arg": "(value)", "assert": "15", "code": "def closest_integer(value):\n    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n", "cover": "def closest_integer(value):\n    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n\ndef find_path(value):\n\tassert closest_integer(value) == 15", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/99", "fn": "closest_integer", "para": "(value)", "arg": "(value)", "assert": "0", "code": "def closest_integer(value):\n    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n", "cover": "def closest_integer(value):\n    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n\ndef find_path(value):\n\tassert closest_integer(value) == 0", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/99", "fn": "closest_integer", "para": "(value)", "arg": "(value)", "assert": "10", "code": "def closest_integer(value):\n    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n", "cover": "def closest_integer(value):\n    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n\ndef find_path(value):\n\tassert closest_integer(value) == 10", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/99", "fn": "closest_integer", "para": "(value)", "arg": "(value)", "assert": "-16", "code": "def closest_integer(value):\n    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n", "cover": "def closest_integer(value):\n    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n\ndef find_path(value):\n\tassert closest_integer(value) == -16", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/100", "fn": "make_a_pile", "para": "(n)", "arg": "(n)", "assert": "[5, 7, 9, 11, 13]", "code": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]\n", "cover": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]\n\ndef find_path(n):\n\tassert make_a_pile(n) == [5, 7, 9, 11, 13]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/100", "fn": "make_a_pile", "para": "(n)", "arg": "(n)", "assert": "[6, 8, 10, 12, 14, 16]", "code": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]\n", "cover": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]\n\ndef find_path(n):\n\tassert make_a_pile(n) == [6, 8, 10, 12, 14, 16]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/100", "fn": "make_a_pile", "para": "(n)", "arg": "(n)", "assert": "[4,6,8,10]", "code": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]\n", "cover": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]\n\ndef find_path(n):\n\tassert make_a_pile(n) == [4,6,8,10]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/100", "fn": "make_a_pile", "para": "(n)", "arg": "(n)", "assert": "[3, 5, 7]", "code": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]\n", "cover": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]\n\ndef find_path(n):\n\tassert make_a_pile(n) == [3, 5, 7]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/100", "fn": "make_a_pile", "para": "(n)", "arg": "(n)", "assert": "[8, 10, 12, 14, 16, 18, 20, 22]", "code": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]\n", "cover": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]\n\ndef find_path(n):\n\tassert make_a_pile(n) == [8, 10, 12, 14, 16, 18, 20, 22]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/101", "fn": "words_string", "para": "(s)", "arg": "(s)", "assert": "[]", "code": "def words_string(s):\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n", "cover": "def words_string(s):\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\ndef find_path(s):\n\tassert words_string(s) == []", "pass": true, "testcase": "find_path('')\nfind_path('-')"}
{"task_id": "Python/101", "fn": "words_string", "para": "(s)", "arg": "(s)", "assert": "[\"Hi\", \"my\", \"name\", \"is\", \"John\"]", "code": "def words_string(s):\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n", "cover": "def words_string(s):\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\ndef find_path(s):\n\tassert words_string(s) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/101", "fn": "words_string", "para": "(s)", "arg": "(s)", "assert": "[\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]", "code": "def words_string(s):\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n", "cover": "def words_string(s):\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\ndef find_path(s):\n\tassert words_string(s) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/101", "fn": "words_string", "para": "(s)", "arg": "(s)", "assert": "[\"ahmed\", \"gamal\"]", "code": "def words_string(s):\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n", "cover": "def words_string(s):\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\ndef find_path(s):\n\tassert words_string(s) == [\"ahmed\", \"gamal\"]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/101", "fn": "words_string", "para": "(s)", "arg": "(s)", "assert": "[\"Hi\", \"my\", \"name\"]", "code": "def words_string(s):\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n", "cover": "def words_string(s):\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\ndef find_path(s):\n\tassert words_string(s) == [\"Hi\", \"my\", \"name\"]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/102", "fn": "choose_num", "para": "(x, y)", "arg": "(x,y)", "assert": "546", "code": "def choose_num(x, y):\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n", "cover": "def choose_num(x, y):\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n\ndef find_path(x, y):\n\tassert choose_num(x,y) == 546", "pass": true, "testcase": "find_path(0, 547)\nfind_path(0, 1)"}
{"task_id": "Python/102", "fn": "choose_num", "para": "(x, y)", "arg": "(x,y)", "assert": "-1", "code": "def choose_num(x, y):\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n", "cover": "def choose_num(x, y):\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n\ndef find_path(x, y):\n\tassert choose_num(x,y) == -1", "pass": true, "testcase": "find_path(-2, -1)\nfind_path(1, 1)"}
{"task_id": "Python/102", "fn": "choose_num", "para": "(x, y)", "arg": "(x,y)", "assert": "14", "code": "def choose_num(x, y):\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n", "cover": "def choose_num(x, y):\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n\ndef find_path(x, y):\n\tassert choose_num(x,y) == 14", "pass": true, "testcase": "find_path(0, 15)\nfind_path(0, 1)"}
{"task_id": "Python/102", "fn": "choose_num", "para": "(x, y)", "arg": "(x,y)", "assert": "28", "code": "def choose_num(x, y):\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n", "cover": "def choose_num(x, y):\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n\ndef find_path(x, y):\n\tassert choose_num(x,y) == 28", "pass": true, "testcase": "find_path(0, 29)\nfind_path(0, 1)"}
{"task_id": "Python/102", "fn": "choose_num", "para": "(x, y)", "arg": "(x,y)", "assert": "12354", "code": "def choose_num(x, y):\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n", "cover": "def choose_num(x, y):\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n\ndef find_path(x, y):\n\tassert choose_num(x,y) == 12354", "pass": true, "testcase": "find_path(0, 12355)\nfind_path(0, 1)"}
{"task_id": "Python/103", "fn": "rounded_avg", "para": "(n, m)", "arg": "(n,m)", "assert": "\"0b1010\"", "code": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n", "cover": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n\ndef find_path(n, m):\n\tassert rounded_avg(n,m) == \"0b1010\"", "pass": false, "testcase": "find_path('\\x01', '\\x00')"}
{"task_id": "Python/103", "fn": "rounded_avg", "para": "(n, m)", "arg": "(n,m)", "assert": "\"0b11010111\"", "code": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n", "cover": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n\ndef find_path(n, m):\n\tassert rounded_avg(n,m) == \"0b11010111\"", "pass": false, "testcase": "find_path('\\x01', '\\x00')"}
{"task_id": "Python/103", "fn": "rounded_avg", "para": "(n, m)", "arg": "(n,m)", "assert": "-1", "code": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n", "cover": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n\ndef find_path(n, m):\n\tassert rounded_avg(n,m) == -1", "pass": true, "testcase": "find_path('\\x01', '\\x00')"}
{"task_id": "Python/103", "fn": "rounded_avg", "para": "(n, m)", "arg": "(n,m)", "assert": "\"0b1111100100\"", "code": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n", "cover": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n\ndef find_path(n, m):\n\tassert rounded_avg(n,m) == \"0b1111100100\"", "pass": false, "testcase": "find_path('\\x01', '\\x00')"}
{"task_id": "Python/103", "fn": "rounded_avg", "para": "(n, m)", "arg": "(n,m)", "assert": "\"0b101\"", "code": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n", "cover": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n\ndef find_path(n, m):\n\tassert rounded_avg(n,m) == \"0b101\"", "pass": false, "testcase": "find_path('\\x01', '\\x00')"}
{"task_id": "Python/103", "fn": "rounded_avg", "para": "(n, m)", "arg": "(n,m)", "assert": "\"0b1111001010\"", "code": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n", "cover": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n\ndef find_path(n, m):\n\tassert rounded_avg(n,m) == \"0b1111001010\"", "pass": false, "testcase": "find_path('\\x01', '\\x00')"}
{"task_id": "Python/103", "fn": "rounded_avg", "para": "(n, m)", "arg": "(n,m)", "assert": "\"0b1011000010\"", "code": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n", "cover": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n\ndef find_path(n, m):\n\tassert rounded_avg(n,m) == \"0b1011000010\"", "pass": false, "testcase": "find_path('\\x01', '\\x00')"}
{"task_id": "Python/103", "fn": "rounded_avg", "para": "(n, m)", "arg": "(n,m)", "assert": "\"0b101101110\"", "code": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n", "cover": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n\ndef find_path(n, m):\n\tassert rounded_avg(n,m) == \"0b101101110\"", "pass": false, "testcase": "find_path('\\x01', '\\x00')"}
{"task_id": "Python/103", "fn": "rounded_avg", "para": "(n, m)", "arg": "(n,m)", "assert": "\"0b1001110010\"", "code": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n", "cover": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n\ndef find_path(n, m):\n\tassert rounded_avg(n,m) == \"0b1001110010\"", "pass": false, "testcase": "find_path('\\x01', '\\x00')"}
{"task_id": "Python/103", "fn": "rounded_avg", "para": "(n, m)", "arg": "(n,m)", "assert": "\"0b110101101\"", "code": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n", "cover": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n\ndef find_path(n, m):\n\tassert rounded_avg(n,m) == \"0b110101101\"", "pass": false, "testcase": "find_path('\\x01', '\\x00')"}
{"task_id": "Python/103", "fn": "rounded_avg", "para": "(n, m)", "arg": "(n,m)", "assert": "\"0b11\"", "code": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n", "cover": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n\ndef find_path(n, m):\n\tassert rounded_avg(n,m) == \"0b11\"", "pass": false, "testcase": "find_path('\\x01', '\\x00')"}
{"task_id": "Python/104", "fn": "unique_digits", "para": "(x)", "arg": "(x)", "assert": "[]", "code": "def unique_digits(x):\n    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n", "cover": "def unique_digits(x):\n    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n\ndef find_path(x):\n\tassert unique_digits(x) == []", "pass": true, "testcase": "find_path('')\nfind_path('0100')"}
{"task_id": "Python/104", "fn": "unique_digits", "para": "(x)", "arg": "(x)", "assert": "[1, 15, 33]", "code": "def unique_digits(x):\n    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n", "cover": "def unique_digits(x):\n    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n\ndef find_path(x):\n\tassert unique_digits(x) == [1, 15, 33]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/104", "fn": "unique_digits", "para": "(x)", "arg": "(x)", "assert": "[31, 135]", "code": "def unique_digits(x):\n    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n", "cover": "def unique_digits(x):\n    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n\ndef find_path(x):\n\tassert unique_digits(x) == [31, 135]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/104", "fn": "unique_digits", "para": "(x)", "arg": "(x)", "assert": "[111, 151]", "code": "def unique_digits(x):\n    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n", "cover": "def unique_digits(x):\n    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n\ndef find_path(x):\n\tassert unique_digits(x) == [111, 151]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/105", "fn": "by_length", "para": "(arr)", "arg": "(arr)", "assert": "[]", "code": "def by_length(arr):\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n", "cover": "def by_length(arr):\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n\ndef find_path(arr):\n\tassert by_length(arr) == []", "pass": true, "testcase": "find_path('')"}
{"task_id": "Python/105", "fn": "by_length", "para": "(arr)", "arg": "(arr)", "assert": "[\"Three\", \"Two\", \"One\"]", "code": "def by_length(arr):\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n", "cover": "def by_length(arr):\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n\ndef find_path(arr):\n\tassert by_length(arr) == [\"Three\", \"Two\", \"One\"]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/105", "fn": "by_length", "para": "(arr)", "arg": "(arr)", "assert": "[\"Nine\", \"Eight\", \"Four\"]", "code": "def by_length(arr):\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n", "cover": "def by_length(arr):\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n\ndef find_path(arr):\n\tassert by_length(arr) == [\"Nine\", \"Eight\", \"Four\"]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/105", "fn": "by_length", "para": "(arr)", "arg": "(arr)", "assert": "['One']", "code": "def by_length(arr):\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n", "cover": "def by_length(arr):\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n\ndef find_path(arr):\n\tassert by_length(arr) == ['One']", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/105", "fn": "by_length", "para": "(arr)", "arg": "(arr)", "assert": "[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]", "code": "def by_length(arr):\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n", "cover": "def by_length(arr):\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n\ndef find_path(arr):\n\tassert by_length(arr) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/106", "fn": "f", "para": "(n)", "arg": "(n)", "assert": "[1, 2, 6]", "code": "def f(n):\n    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n", "cover": "def f(n):\n    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n\ndef find_path(n):\n\tassert f(n) == [1, 2, 6]", "pass": true, "testcase": "find_path(0)\nfind_path(3)"}
{"task_id": "Python/106", "fn": "f", "para": "(n)", "arg": "(n)", "assert": "[1, 2, 6, 24, 15, 720, 28]", "code": "def f(n):\n    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n", "cover": "def f(n):\n    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n\ndef find_path(n):\n\tassert f(n) == [1, 2, 6, 24, 15, 720, 28]", "pass": false, "testcase": "find_path(0)"}
{"task_id": "Python/106", "fn": "f", "para": "(n)", "arg": "(n)", "assert": "[1]", "code": "def f(n):\n    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n", "cover": "def f(n):\n    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n\ndef find_path(n):\n\tassert f(n) == [1]", "pass": true, "testcase": "find_path(0)\nfind_path(1)"}
{"task_id": "Python/106", "fn": "f", "para": "(n)", "arg": "(n)", "assert": "[1, 2, 6, 24, 15]", "code": "def f(n):\n    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n", "cover": "def f(n):\n    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n\ndef find_path(n):\n\tassert f(n) == [1, 2, 6, 24, 15]", "pass": true, "testcase": "find_path(0)\nfind_path(5)"}
{"task_id": "Python/107", "fn": "even_odd_palindrome", "para": "(n)", "arg": "(n)", "assert": "(5, 6)", "code": "def even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n", "cover": "def even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\ndef find_path(n):\n\tassert even_odd_palindrome(n) == (5, 6)", "pass": false, "testcase": "find_path(0)"}
{"task_id": "Python/107", "fn": "even_odd_palindrome", "para": "(n)", "arg": "(n)", "assert": "(4, 5)", "code": "def even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n", "cover": "def even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\ndef find_path(n):\n\tassert even_odd_palindrome(n) == (4, 5)", "pass": false, "testcase": "find_path(0)"}
{"task_id": "Python/107", "fn": "even_odd_palindrome", "para": "(n)", "arg": "(n)", "assert": "(4, 6)", "code": "def even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n", "cover": "def even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\ndef find_path(n):\n\tassert even_odd_palindrome(n) == (4, 6)", "pass": false, "testcase": "find_path(0)"}
{"task_id": "Python/107", "fn": "even_odd_palindrome", "para": "(n)", "arg": "(n)", "assert": "(8, 13)", "code": "def even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n", "cover": "def even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\ndef find_path(n):\n\tassert even_odd_palindrome(n) == (8, 13)", "pass": false, "testcase": "find_path(0)"}
{"task_id": "Python/107", "fn": "even_odd_palindrome", "para": "(n)", "arg": "(n)", "assert": "(0, 1)", "code": "def even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n", "cover": "def even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\ndef find_path(n):\n\tassert even_odd_palindrome(n) == (0, 1)", "pass": true, "testcase": "find_path(0)\nfind_path(1)"}
{"task_id": "Python/107", "fn": "even_odd_palindrome", "para": "(n)", "arg": "(n)", "assert": "(1, 2)", "code": "def even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n", "cover": "def even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\ndef find_path(n):\n\tassert even_odd_palindrome(n) == (1, 2)", "pass": true, "testcase": "find_path(0)\nfind_path(3)"}
{"task_id": "Python/107", "fn": "even_odd_palindrome", "para": "(n)", "arg": "(n)", "assert": "(6, 8)", "code": "def even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n", "cover": "def even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\ndef find_path(n):\n\tassert even_odd_palindrome(n) == (6, 8)", "pass": false, "testcase": "find_path(0)"}
{"task_id": "Python/108", "fn": "count_nums", "para": "(arr)", "arg": "(arr)", "assert": "1", "code": "def count_nums(arr):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n", "cover": "def count_nums(arr):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n\ndef find_path(arr):\n\tassert count_nums(arr) == 1", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/108", "fn": "count_nums", "para": "(arr)", "arg": "(arr)", "assert": "4", "code": "def count_nums(arr):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n", "cover": "def count_nums(arr):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n\ndef find_path(arr):\n\tassert count_nums(arr) == 4", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/108", "fn": "count_nums", "para": "(arr)", "arg": "(arr)", "assert": "5", "code": "def count_nums(arr):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n", "cover": "def count_nums(arr):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n\ndef find_path(arr):\n\tassert count_nums(arr) == 5", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/108", "fn": "count_nums", "para": "(arr)", "arg": "(arr)", "assert": "0", "code": "def count_nums(arr):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n", "cover": "def count_nums(arr):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n\ndef find_path(arr):\n\tassert count_nums(arr) == 0", "pass": true, "testcase": "find_path('')"}
{"task_id": "Python/108", "fn": "count_nums", "para": "(arr)", "arg": "(arr)", "assert": "6", "code": "def count_nums(arr):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n", "cover": "def count_nums(arr):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n\ndef find_path(arr):\n\tassert count_nums(arr) == 6", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/109", "fn": "move_one_ball", "para": "(arr)", "arg": "(arr)", "assert": "True", "code": "def move_one_ball(arr):\n    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n", "cover": "def move_one_ball(arr):\n    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n\ndef find_path(arr):\n\tassert move_one_ball(arr) == True", "pass": true, "testcase": "find_path('\\x00')\nfind_path('\\x00\\x02\\x01')"}
{"task_id": "Python/109", "fn": "move_one_ball", "para": "(arr)", "arg": "(arr)", "assert": "False", "code": "def move_one_ball(arr):\n    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n", "cover": "def move_one_ball(arr):\n    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n\ndef find_path(arr):\n\tassert move_one_ball(arr) == False", "pass": true, "testcase": "find_path('\\x00')\nfind_path('\\x00\\x02\\x01')"}
{"task_id": "Python/110", "fn": "exchange", "para": "(lst1, lst2)", "arg": "(lst1,lst2)", "assert": "\"YES\"", "code": "def exchange(lst1, lst2):\n    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n", "cover": "def exchange(lst1, lst2):\n    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n\ndef find_path(lst1, lst2):\n\tassert exchange(lst1,lst2) == \"YES\"", "pass": true, "testcase": "find_path('', '')"}
{"task_id": "Python/110", "fn": "exchange", "para": "(lst1, lst2)", "arg": "(lst1,lst2)", "assert": "\"NO\"", "code": "def exchange(lst1, lst2):\n    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n", "cover": "def exchange(lst1, lst2):\n    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n\ndef find_path(lst1, lst2):\n\tassert exchange(lst1,lst2) == \"NO\"", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/111", "fn": "histogram", "para": "(test)", "arg": "(test)", "assert": "{'r': 1,'t': 1,'g': 1}", "code": "def histogram(test):\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n", "cover": "def histogram(test):\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n\ndef find_path(test):\n\tassert histogram(test) == {'r': 1,'t': 1,'g': 1}", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/111", "fn": "histogram", "para": "(test)", "arg": "(test)", "assert": "{'a':2,'b': 2}", "code": "def histogram(test):\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n", "cover": "def histogram(test):\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n\ndef find_path(test):\n\tassert histogram(test) == {'a':2,'b': 2}", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/111", "fn": "histogram", "para": "(test)", "arg": "(test)", "assert": "{}", "code": "def histogram(test):\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n", "cover": "def histogram(test):\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n\ndef find_path(test):\n\tassert histogram(test) == {}", "pass": true, "testcase": "find_path('')\nfind_path('!')"}
{"task_id": "Python/111", "fn": "histogram", "para": "(test)", "arg": "(test)", "assert": "{'a': 1}", "code": "def histogram(test):\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n", "cover": "def histogram(test):\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n\ndef find_path(test):\n\tassert histogram(test) == {'a': 1}", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/111", "fn": "histogram", "para": "(test)", "arg": "(test)", "assert": "{'b': 4}", "code": "def histogram(test):\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n", "cover": "def histogram(test):\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n\ndef find_path(test):\n\tassert histogram(test) == {'b': 4}", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/111", "fn": "histogram", "para": "(test)", "arg": "(test)", "assert": "{'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}", "code": "def histogram(test):\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n", "cover": "def histogram(test):\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n\ndef find_path(test):\n\tassert histogram(test) == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/111", "fn": "histogram", "para": "(test)", "arg": "(test)", "assert": "{'a': 2, 'b': 2}", "code": "def histogram(test):\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n", "cover": "def histogram(test):\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n\ndef find_path(test):\n\tassert histogram(test) == {'a': 2, 'b': 2}", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/112", "fn": "reverse_delete", "para": "(s,c)", "arg": "(s,c)", "assert": "('cdedc',True)", "code": "def reverse_delete(s,c):\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n", "cover": "def reverse_delete(s,c):\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n\ndef find_path(s,c):\n\tassert reverse_delete(s,c) == ('cdedc',True)", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/112", "fn": "reverse_delete", "para": "(s,c)", "arg": "(s,c)", "assert": "('abcdedcba',True)", "code": "def reverse_delete(s,c):\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n", "cover": "def reverse_delete(s,c):\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n\ndef find_path(s,c):\n\tassert reverse_delete(s,c) == ('abcdedcba',True)", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/112", "fn": "reverse_delete", "para": "(s,c)", "arg": "(s,c)", "assert": "('',True)", "code": "def reverse_delete(s,c):\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n", "cover": "def reverse_delete(s,c):\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n\ndef find_path(s,c):\n\tassert reverse_delete(s,c) == ('',True)", "pass": true, "testcase": "find_path('', '')\nfind_path('\\x00', '\\x01')"}
{"task_id": "Python/112", "fn": "reverse_delete", "para": "(s,c)", "arg": "(s,c)", "assert": "(\"\", True)", "code": "def reverse_delete(s,c):\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n", "cover": "def reverse_delete(s,c):\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n\ndef find_path(s,c):\n\tassert reverse_delete(s,c) == (\"\", True)", "pass": true, "testcase": "find_path('', '')\nfind_path('\\x00', '\\x01')"}
{"task_id": "Python/112", "fn": "reverse_delete", "para": "(s,c)", "arg": "(s,c)", "assert": "('acdef',False)", "code": "def reverse_delete(s,c):\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n", "cover": "def reverse_delete(s,c):\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n\ndef find_path(s,c):\n\tassert reverse_delete(s,c) == ('acdef',False)", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/112", "fn": "reverse_delete", "para": "(s,c)", "arg": "(s,c)", "assert": "('bcd',False)", "code": "def reverse_delete(s,c):\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n", "cover": "def reverse_delete(s,c):\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n\ndef find_path(s,c):\n\tassert reverse_delete(s,c) == ('bcd',False)", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/112", "fn": "reverse_delete", "para": "(s,c)", "arg": "(s,c)", "assert": "('abba',True)", "code": "def reverse_delete(s,c):\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n", "cover": "def reverse_delete(s,c):\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n\ndef find_path(s,c):\n\tassert reverse_delete(s,c) == ('abba',True)", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/112", "fn": "reverse_delete", "para": "(s,c)", "arg": "(s,c)", "assert": "('dik',False)", "code": "def reverse_delete(s,c):\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n", "cover": "def reverse_delete(s,c):\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n\ndef find_path(s,c):\n\tassert reverse_delete(s,c) == ('dik',False)", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/113", "fn": "odd_count", "para": "(lst)", "arg": "(lst)", "assert": "[\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]", "code": "def odd_count(lst):\n    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n", "cover": "def odd_count(lst):\n    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n\ndef find_path(lst):\n\tassert odd_count(lst) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/113", "fn": "odd_count", "para": "(lst)", "arg": "(lst)", "assert": "[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]", "code": "def odd_count(lst):\n    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n", "cover": "def odd_count(lst):\n    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n\ndef find_path(lst):\n\tassert odd_count(lst) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/113", "fn": "odd_count", "para": "(lst)", "arg": "(lst)", "assert": "True", "code": "def odd_count(lst):\n    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n", "cover": "def odd_count(lst):\n    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n\ndef find_path(lst):\n\tassert odd_count(lst) == True", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/113", "fn": "odd_count", "para": "(lst)", "arg": "(lst)", "assert": "False", "code": "def odd_count(lst):\n    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n", "cover": "def odd_count(lst):\n    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n\ndef find_path(lst):\n\tassert odd_count(lst) == False", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/114", "fn": "minSubArraySum", "para": "(nums)", "arg": "(nums)", "assert": "-14", "code": "def minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n", "cover": "def minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n\ndef find_path(nums):\n\tassert minSubArraySum(nums) == -14", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/114", "fn": "minSubArraySum", "para": "(nums)", "arg": "(nums)", "assert": "1", "code": "def minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n", "cover": "def minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n\ndef find_path(nums):\n\tassert minSubArraySum(nums) == 1", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/114", "fn": "minSubArraySum", "para": "(nums)", "arg": "(nums)", "assert": "-33", "code": "def minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n", "cover": "def minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n\ndef find_path(nums):\n\tassert minSubArraySum(nums) == -33", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/114", "fn": "minSubArraySum", "para": "(nums)", "arg": "(nums)", "assert": "3", "code": "def minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n", "cover": "def minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n\ndef find_path(nums):\n\tassert minSubArraySum(nums) == 3", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/114", "fn": "minSubArraySum", "para": "(nums)", "arg": "(nums)", "assert": "-1", "code": "def minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n", "cover": "def minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n\ndef find_path(nums):\n\tassert minSubArraySum(nums) == -1", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/114", "fn": "minSubArraySum", "para": "(nums)", "arg": "(nums)", "assert": "-6", "code": "def minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n", "cover": "def minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n\ndef find_path(nums):\n\tassert minSubArraySum(nums) == -6", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/114", "fn": "minSubArraySum", "para": "(nums)", "arg": "(nums)", "assert": "0", "code": "def minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n", "cover": "def minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n\ndef find_path(nums):\n\tassert minSubArraySum(nums) == 0", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/114", "fn": "minSubArraySum", "para": "(nums)", "arg": "(nums)", "assert": "7", "code": "def minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n", "cover": "def minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n\ndef find_path(nums):\n\tassert minSubArraySum(nums) == 7", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/114", "fn": "minSubArraySum", "para": "(nums)", "arg": "(nums)", "assert": "-10", "code": "def minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n", "cover": "def minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n\ndef find_path(nums):\n\tassert minSubArraySum(nums) == -10", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/114", "fn": "minSubArraySum", "para": "(nums)", "arg": "(nums)", "assert": "-9999999999999999", "code": "def minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n", "cover": "def minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n\ndef find_path(nums):\n\tassert minSubArraySum(nums) == -9999999999999999", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/115", "fn": "max_fill", "para": "(grid, capacity)", "arg": "(grid,capacity)", "assert": "4", "code": "def max_fill(grid, capacity):\n    import math\n    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n", "cover": "def max_fill(grid, capacity):\n    import math\n    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n\ndef find_path(grid, capacity):\n\tassert max_fill(grid,capacity) == 4", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/115", "fn": "max_fill", "para": "(grid, capacity)", "arg": "(grid,capacity)", "assert": "2", "code": "def max_fill(grid, capacity):\n    import math\n    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n", "cover": "def max_fill(grid, capacity):\n    import math\n    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n\ndef find_path(grid, capacity):\n\tassert max_fill(grid,capacity) == 2", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/115", "fn": "max_fill", "para": "(grid, capacity)", "arg": "(grid,capacity)", "assert": "5", "code": "def max_fill(grid, capacity):\n    import math\n    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n", "cover": "def max_fill(grid, capacity):\n    import math\n    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n\ndef find_path(grid, capacity):\n\tassert max_fill(grid,capacity) == 5", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/115", "fn": "max_fill", "para": "(grid, capacity)", "arg": "(grid,capacity)", "assert": "0", "code": "def max_fill(grid, capacity):\n    import math\n    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n", "cover": "def max_fill(grid, capacity):\n    import math\n    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n\ndef find_path(grid, capacity):\n\tassert max_fill(grid,capacity) == 0", "pass": true, "testcase": "find_path('', '')"}
{"task_id": "Python/115", "fn": "max_fill", "para": "(grid, capacity)", "arg": "(grid,capacity)", "assert": "6", "code": "def max_fill(grid, capacity):\n    import math\n    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n", "cover": "def max_fill(grid, capacity):\n    import math\n    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n\ndef find_path(grid, capacity):\n\tassert max_fill(grid,capacity) == 6", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/116", "fn": "sort_array", "para": "(arr)", "arg": "(arr)", "assert": "[]", "code": "def sort_array(arr):\n    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n", "cover": "def sort_array(arr):\n    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n\ndef find_path(arr):\n\tassert sort_array(arr) == []", "pass": true, "testcase": "find_path('')"}
{"task_id": "Python/116", "fn": "sort_array", "para": "(arr)", "arg": "(arr)", "assert": "[32, 3, 5, 6, 12, 44]", "code": "def sort_array(arr):\n    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n", "cover": "def sort_array(arr):\n    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n\ndef find_path(arr):\n\tassert sort_array(arr) == [32, 3, 5, 6, 12, 44]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/116", "fn": "sort_array", "para": "(arr)", "arg": "(arr)", "assert": "[0, 1, 2, 4, 3]", "code": "def sort_array(arr):\n    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n", "cover": "def sort_array(arr):\n    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n\ndef find_path(arr):\n\tassert sort_array(arr) == [0, 1, 2, 4, 3]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/116", "fn": "sort_array", "para": "(arr)", "arg": "(arr)", "assert": "[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]", "code": "def sort_array(arr):\n    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n", "cover": "def sort_array(arr):\n    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n\ndef find_path(arr):\n\tassert sort_array(arr) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/116", "fn": "sort_array", "para": "(arr)", "arg": "(arr)", "assert": "[-4, -2, -6, -5, -3]", "code": "def sort_array(arr):\n    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n", "cover": "def sort_array(arr):\n    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n\ndef find_path(arr):\n\tassert sort_array(arr) == [-4, -2, -6, -5, -3]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/116", "fn": "sort_array", "para": "(arr)", "arg": "(arr)", "assert": "[1, 2, 4, 3, 5]", "code": "def sort_array(arr):\n    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n", "cover": "def sort_array(arr):\n    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n\ndef find_path(arr):\n\tassert sort_array(arr) == [1, 2, 4, 3, 5]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/116", "fn": "sort_array", "para": "(arr)", "arg": "(arr)", "assert": "[2, 4, 8, 16, 32]", "code": "def sort_array(arr):\n    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n", "cover": "def sort_array(arr):\n    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n\ndef find_path(arr):\n\tassert sort_array(arr) == [2, 4, 8, 16, 32]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/117", "fn": "select_words", "para": "(s, n)", "arg": "(s,n)", "assert": "[]", "code": "def select_words(s, n):\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n", "cover": "def select_words(s, n):\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n\ndef find_path(s, n):\n\tassert select_words(s,n) == []", "pass": true, "testcase": "find_path('', '')\nfind_path('\\x00', 1)"}
{"task_id": "Python/117", "fn": "select_words", "para": "(s, n)", "arg": "(s,n)", "assert": "[\"Uncle\"]", "code": "def select_words(s, n):\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n", "cover": "def select_words(s, n):\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n\ndef find_path(s, n):\n\tassert select_words(s,n) == [\"Uncle\"]", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/117", "fn": "select_words", "para": "(s, n)", "arg": "(s,n)", "assert": "[\"world\"]", "code": "def select_words(s, n):\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n", "cover": "def select_words(s, n):\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n\ndef find_path(s, n):\n\tassert select_words(s,n) == [\"world\"]", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/117", "fn": "select_words", "para": "(s, n)", "arg": "(s,n)", "assert": "[\"b\", \"c\", \"d\", \"f\"]", "code": "def select_words(s, n):\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n", "cover": "def select_words(s, n):\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n\ndef find_path(s, n):\n\tassert select_words(s,n) == [\"b\", \"c\", \"d\", \"f\"]", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/117", "fn": "select_words", "para": "(s, n)", "arg": "(s,n)", "assert": "[\"little\"]", "code": "def select_words(s, n):\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n", "cover": "def select_words(s, n):\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n\ndef find_path(s, n):\n\tassert select_words(s,n) == [\"little\"]", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/117", "fn": "select_words", "para": "(s, n)", "arg": "(s,n)", "assert": "[\"Mary\", \"lamb\"]", "code": "def select_words(s, n):\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n", "cover": "def select_words(s, n):\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n\ndef find_path(s, n):\n\tassert select_words(s,n) == [\"Mary\", \"lamb\"]", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/118", "fn": "get_closest_vowel", "para": "(word)", "arg": "(word)", "assert": "\"u\"", "code": "def get_closest_vowel(word):\n    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n", "cover": "def get_closest_vowel(word):\n    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n\ndef find_path(word):\n\tassert get_closest_vowel(word) == \"u\"", "pass": false, "testcase": "find_path('\\x00P\\x00')"}
{"task_id": "Python/118", "fn": "get_closest_vowel", "para": "(word)", "arg": "(word)", "assert": "\"o\"", "code": "def get_closest_vowel(word):\n    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n", "cover": "def get_closest_vowel(word):\n    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n\ndef find_path(word):\n\tassert get_closest_vowel(word) == \"o\"", "pass": false, "testcase": "find_path('\\x00F\\x00')"}
{"task_id": "Python/118", "fn": "get_closest_vowel", "para": "(word)", "arg": "(word)", "assert": "\"a\"", "code": "def get_closest_vowel(word):\n    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n", "cover": "def get_closest_vowel(word):\n    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n\ndef find_path(word):\n\tassert get_closest_vowel(word) == \"a\"", "pass": false, "testcase": "find_path('\\x00f\\x00')"}
{"task_id": "Python/118", "fn": "get_closest_vowel", "para": "(word)", "arg": "(word)", "assert": "\"\"", "code": "def get_closest_vowel(word):\n    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n", "cover": "def get_closest_vowel(word):\n    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n\ndef find_path(word):\n\tassert get_closest_vowel(word) == \"\"", "pass": true, "testcase": "find_path('\\x00f\\x00')"}
{"task_id": "Python/118", "fn": "get_closest_vowel", "para": "(word)", "arg": "(word)", "assert": "\"i\"", "code": "def get_closest_vowel(word):\n    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n", "cover": "def get_closest_vowel(word):\n    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n\ndef find_path(word):\n\tassert get_closest_vowel(word) == \"i\"", "pass": false, "testcase": "find_path('\\x00b\\x00')"}
{"task_id": "Python/119", "fn": "match_parens", "para": "(lst)", "arg": "(lst)", "assert": "'No'", "code": "def match_parens(lst):\n    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n", "cover": "def match_parens(lst):\n    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n\ndef find_path(lst):\n\tassert match_parens(lst) == 'No'", "pass": true, "testcase": "find_path(')\\x00')\nfind_path('\\x00(')"}
{"task_id": "Python/119", "fn": "match_parens", "para": "(lst)", "arg": "(lst)", "assert": "'Yes'", "code": "def match_parens(lst):\n    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n", "cover": "def match_parens(lst):\n    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n\ndef find_path(lst):\n\tassert match_parens(lst) == 'Yes'", "pass": true, "testcase": "find_path(')\\x00')\nfind_path('\\x00(')"}
{"task_id": "Python/120", "fn": "maximum", "para": "(arr, k)", "arg": "(arr,k)", "assert": "[2, 20, 123]", "code": "def maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n", "cover": "def maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n\ndef find_path(arr, k):\n\tassert maximum(arr,k) == [2, 20, 123]", "pass": false, "testcase": "find_path('', 0)"}
{"task_id": "Python/120", "fn": "maximum", "para": "(arr, k)", "arg": "(arr,k)", "assert": "[-10, 10]", "code": "def maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n", "cover": "def maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n\ndef find_path(arr, k):\n\tassert maximum(arr,k) == [-10, 10]", "pass": false, "testcase": "find_path('', 0)"}
{"task_id": "Python/120", "fn": "maximum", "para": "(arr, k)", "arg": "(arr,k)", "assert": "[]", "code": "def maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n", "cover": "def maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n\ndef find_path(arr, k):\n\tassert maximum(arr,k) == []", "pass": true, "testcase": "find_path('', 0)"}
{"task_id": "Python/120", "fn": "maximum", "para": "(arr, k)", "arg": "(arr,k)", "assert": "[-13, -8, 0, 0, 3, 5, 15]", "code": "def maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n", "cover": "def maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n\ndef find_path(arr, k):\n\tassert maximum(arr,k) == [-13, -8, 0, 0, 3, 5, 15]", "pass": false, "testcase": "find_path('', 0)"}
{"task_id": "Python/120", "fn": "maximum", "para": "(arr, k)", "arg": "(arr,k)", "assert": "[-4, 4]", "code": "def maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n", "cover": "def maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n\ndef find_path(arr, k):\n\tassert maximum(arr,k) == [-4, 4]", "pass": false, "testcase": "find_path('', 0)"}
{"task_id": "Python/120", "fn": "maximum", "para": "(arr, k)", "arg": "(arr,k)", "assert": "[2]", "code": "def maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n", "cover": "def maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n\ndef find_path(arr, k):\n\tassert maximum(arr,k) == [2]", "pass": false, "testcase": "find_path('', 0)"}
{"task_id": "Python/120", "fn": "maximum", "para": "(arr, k)", "arg": "(arr,k)", "assert": "[0, 1, 2, 20]", "code": "def maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n", "cover": "def maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n\ndef find_path(arr, k):\n\tassert maximum(arr,k) == [0, 1, 2, 20]", "pass": false, "testcase": "find_path('', 0)"}
{"task_id": "Python/120", "fn": "maximum", "para": "(arr, k)", "arg": "(arr,k)", "assert": "[5]", "code": "def maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n", "cover": "def maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n\ndef find_path(arr, k):\n\tassert maximum(arr,k) == [5]", "pass": false, "testcase": "find_path('', 0)"}
{"task_id": "Python/120", "fn": "maximum", "para": "(arr, k)", "arg": "(arr,k)", "assert": "[3, 5]", "code": "def maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n", "cover": "def maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n\ndef find_path(arr, k):\n\tassert maximum(arr,k) == [3, 5]", "pass": false, "testcase": "find_path('', 0)"}
{"task_id": "Python/120", "fn": "maximum", "para": "(arr, k)", "arg": "(arr,k)", "assert": "[-4, -3, 5]", "code": "def maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n", "cover": "def maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n\ndef find_path(arr, k):\n\tassert maximum(arr,k) == [-4, -3, 5]", "pass": false, "testcase": "find_path('', 0)"}
{"task_id": "Python/120", "fn": "maximum", "para": "(arr, k)", "arg": "(arr,k)", "assert": "[4, 4]", "code": "def maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n", "cover": "def maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n\ndef find_path(arr, k):\n\tassert maximum(arr,k) == [4, 4]", "pass": false, "testcase": "find_path('', 0)"}
{"task_id": "Python/121", "fn": "solution", "para": "(lst)", "arg": "(lst)", "assert": "3", "code": "def solution(lst):\n    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n", "cover": "def solution(lst):\n    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n\ndef find_path(lst):\n\tassert solution(lst) == 3", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/121", "fn": "solution", "para": "(lst)", "arg": "(lst)", "assert": "12", "code": "def solution(lst):\n    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n", "cover": "def solution(lst):\n    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n\ndef find_path(lst):\n\tassert solution(lst) == 12", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/121", "fn": "solution", "para": "(lst)", "arg": "(lst)", "assert": "23", "code": "def solution(lst):\n    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n", "cover": "def solution(lst):\n    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n\ndef find_path(lst):\n\tassert solution(lst) == 23", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/121", "fn": "solution", "para": "(lst)", "arg": "(lst)", "assert": "5", "code": "def solution(lst):\n    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n", "cover": "def solution(lst):\n    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n\ndef find_path(lst):\n\tassert solution(lst) == 5", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/121", "fn": "solution", "para": "(lst)", "arg": "(lst)", "assert": "0", "code": "def solution(lst):\n    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n", "cover": "def solution(lst):\n    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n\ndef find_path(lst):\n\tassert solution(lst) == 0", "pass": true, "testcase": "find_path('')"}
{"task_id": "Python/121", "fn": "solution", "para": "(lst)", "arg": "(lst)", "assert": "9", "code": "def solution(lst):\n    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n", "cover": "def solution(lst):\n    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n\ndef find_path(lst):\n\tassert solution(lst) == 9", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/122", "fn": "add_elements", "para": "(arr, k)", "arg": "(arr,k)", "assert": "125", "code": "def add_elements(arr, k):\n    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n", "cover": "def add_elements(arr, k):\n    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n\ndef find_path(arr, k):\n\tassert add_elements(arr,k) == 125", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/122", "fn": "add_elements", "para": "(arr, k)", "arg": "(arr,k)", "assert": "1", "code": "def add_elements(arr, k):\n    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n", "cover": "def add_elements(arr, k):\n    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n\ndef find_path(arr, k):\n\tassert add_elements(arr,k) == 1", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/122", "fn": "add_elements", "para": "(arr, k)", "arg": "(arr,k)", "assert": "24", "code": "def add_elements(arr, k):\n    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n", "cover": "def add_elements(arr, k):\n    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n\ndef find_path(arr, k):\n\tassert add_elements(arr,k) == 24", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/122", "fn": "add_elements", "para": "(arr, k)", "arg": "(arr,k)", "assert": "0", "code": "def add_elements(arr, k):\n    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n", "cover": "def add_elements(arr, k):\n    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n\ndef find_path(arr, k):\n\tassert add_elements(arr,k) == 0", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/122", "fn": "add_elements", "para": "(arr, k)", "arg": "(arr,k)", "assert": "-4", "code": "def add_elements(arr, k):\n    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n", "cover": "def add_elements(arr, k):\n    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n\ndef find_path(arr, k):\n\tassert add_elements(arr,k) == -4", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/123", "fn": "get_odd_collatz", "para": "(n)", "arg": "(n)", "assert": "[1, 5, 7, 11, 13, 17]", "code": "def get_odd_collatz(n):\n    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n", "cover": "def get_odd_collatz(n):\n    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n\ndef find_path(n):\n\tassert get_odd_collatz(n) == [1, 5, 7, 11, 13, 17]", "pass": true, "testcase": "find_path(1)\nfind_path(7)"}
{"task_id": "Python/123", "fn": "get_odd_collatz", "para": "(n)", "arg": "(n)", "assert": "[1]", "code": "def get_odd_collatz(n):\n    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n", "cover": "def get_odd_collatz(n):\n    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n\ndef find_path(n):\n\tassert get_odd_collatz(n) == [1]", "pass": true, "testcase": "find_path(1)\nfind_path(-1)"}
{"task_id": "Python/123", "fn": "get_odd_collatz", "para": "(n)", "arg": "(n)", "assert": "[1, 3, 5]", "code": "def get_odd_collatz(n):\n    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n", "cover": "def get_odd_collatz(n):\n    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n\ndef find_path(n):\n\tassert get_odd_collatz(n) == [1, 3, 5]", "pass": true, "testcase": "find_path(1)\nfind_path(3)"}
{"task_id": "Python/123", "fn": "get_odd_collatz", "para": "(n)", "arg": "(n)", "assert": "[1, 5]", "code": "def get_odd_collatz(n):\n    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n", "cover": "def get_odd_collatz(n):\n    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n\ndef find_path(n):\n\tassert get_odd_collatz(n) == [1, 5]", "pass": false, "testcase": "find_path(1)"}
{"task_id": "Python/124", "fn": "valid_date", "para": "(date)", "arg": "(date)", "assert": "True", "code": "def valid_date(date):\n    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n", "cover": "def valid_date(date):\n    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n\ndef find_path(date):\n\tassert valid_date(date) == True", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/124", "fn": "valid_date", "para": "(date)", "arg": "(date)", "assert": "False", "code": "def valid_date(date):\n    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n", "cover": "def valid_date(date):\n    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n\ndef find_path(date):\n\tassert valid_date(date) == False", "pass": true, "testcase": "find_path('')"}
{"task_id": "Python/125", "fn": "split_words", "para": "(txt)", "arg": "(txt)", "assert": "1", "code": "def split_words(txt):\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n", "cover": "def split_words(txt):\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n\ndef find_path(txt):\n\tassert split_words(txt) == 1", "pass": true, "testcase": "find_path('')\nfind_path('\u0560')"}
{"task_id": "Python/125", "fn": "split_words", "para": "(txt)", "arg": "(txt)", "assert": "[\"Hello\",\"world,!\"]", "code": "def split_words(txt):\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n", "cover": "def split_words(txt):\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n\ndef find_path(txt):\n\tassert split_words(txt) == [\"Hello\",\"world,!\"]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/125", "fn": "split_words", "para": "(txt)", "arg": "(txt)", "assert": "3", "code": "def split_words(txt):\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n", "cover": "def split_words(txt):\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n\ndef find_path(txt):\n\tassert split_words(txt) == 3", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/125", "fn": "split_words", "para": "(txt)", "arg": "(txt)", "assert": "[\"Hello\",\"world!\"]", "code": "def split_words(txt):\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n", "cover": "def split_words(txt):\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n\ndef find_path(txt):\n\tassert split_words(txt) == [\"Hello\",\"world!\"]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/125", "fn": "split_words", "para": "(txt)", "arg": "(txt)", "assert": "[\"Hello,Hello,world\",\"!\"]", "code": "def split_words(txt):\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n", "cover": "def split_words(txt):\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n\ndef find_path(txt):\n\tassert split_words(txt) == [\"Hello,Hello,world\",\"!\"]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/125", "fn": "split_words", "para": "(txt)", "arg": "(txt)", "assert": "2", "code": "def split_words(txt):\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n", "cover": "def split_words(txt):\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n\ndef find_path(txt):\n\tassert split_words(txt) == 2", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/125", "fn": "split_words", "para": "(txt)", "arg": "(txt)", "assert": "0", "code": "def split_words(txt):\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n", "cover": "def split_words(txt):\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n\ndef find_path(txt):\n\tassert split_words(txt) == 0", "pass": true, "testcase": "find_path('')\nfind_path('\ufb00')"}
{"task_id": "Python/126", "fn": "is_sorted", "para": "(lst)", "arg": "(lst)", "assert": "True", "code": "def is_sorted(lst):\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n", "cover": "def is_sorted(lst):\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n\ndef find_path(lst):\n\tassert is_sorted(lst) == True", "pass": true, "testcase": "find_path('')"}
{"task_id": "Python/126", "fn": "is_sorted", "para": "(lst)", "arg": "(lst)", "assert": "False", "code": "def is_sorted(lst):\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n", "cover": "def is_sorted(lst):\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n\ndef find_path(lst):\n\tassert is_sorted(lst) == False", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/127", "fn": "intersection", "para": "(interval1, interval2)", "arg": "(interval1,interval2)", "assert": "\"YES\"", "code": "def intersection(interval1, interval2):\n    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n", "cover": "def intersection(interval1, interval2):\n    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n\ndef find_path(interval1, interval2):\n\tassert intersection(interval1,interval2) == \"YES\"", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/127", "fn": "intersection", "para": "(interval1, interval2)", "arg": "(interval1,interval2)", "assert": "\"NO\"", "code": "def intersection(interval1, interval2):\n    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n", "cover": "def intersection(interval1, interval2):\n    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n\ndef find_path(interval1, interval2):\n\tassert intersection(interval1,interval2) == \"NO\"", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/128", "fn": "prod_signs", "para": "(arr)", "arg": "(arr)", "assert": "None", "code": "def prod_signs(arr):\n    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n", "cover": "def prod_signs(arr):\n    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n\ndef find_path(arr):\n\tassert prod_signs(arr) == None", "pass": true, "testcase": "find_path('')"}
{"task_id": "Python/128", "fn": "prod_signs", "para": "(arr)", "arg": "(arr)", "assert": "4", "code": "def prod_signs(arr):\n    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n", "cover": "def prod_signs(arr):\n    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n\ndef find_path(arr):\n\tassert prod_signs(arr) == 4", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/128", "fn": "prod_signs", "para": "(arr)", "arg": "(arr)", "assert": "-9", "code": "def prod_signs(arr):\n    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n", "cover": "def prod_signs(arr):\n    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n\ndef find_path(arr):\n\tassert prod_signs(arr) == -9", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/128", "fn": "prod_signs", "para": "(arr)", "arg": "(arr)", "assert": "0", "code": "def prod_signs(arr):\n    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n", "cover": "def prod_signs(arr):\n    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n\ndef find_path(arr):\n\tassert prod_signs(arr) == 0", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/128", "fn": "prod_signs", "para": "(arr)", "arg": "(arr)", "assert": "-4", "code": "def prod_signs(arr):\n    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n", "cover": "def prod_signs(arr):\n    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n\ndef find_path(arr):\n\tassert prod_signs(arr) == -4", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/128", "fn": "prod_signs", "para": "(arr)", "arg": "(arr)", "assert": "-10", "code": "def prod_signs(arr):\n    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n", "cover": "def prod_signs(arr):\n    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n\ndef find_path(arr):\n\tassert prod_signs(arr) == -10", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/128", "fn": "prod_signs", "para": "(arr)", "arg": "(arr)", "assert": "20", "code": "def prod_signs(arr):\n    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n", "cover": "def prod_signs(arr):\n    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n\ndef find_path(arr):\n\tassert prod_signs(arr) == 20", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/129", "fn": "minPath", "para": "(grid, k)", "arg": "(grid,k)", "assert": "[1, 2, 1]", "code": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n", "cover": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n\ndef find_path(grid, k):\n\tassert minPath(grid,k) == [1, 2, 1]", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/129", "fn": "minPath", "para": "(grid, k)", "arg": "(grid,k)", "assert": "[1]", "code": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n", "cover": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n\ndef find_path(grid, k):\n\tassert minPath(grid,k) == [1]", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/129", "fn": "minPath", "para": "(grid, k)", "arg": "(grid,k)", "assert": "[1, 2, 1, 2]", "code": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n", "cover": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n\ndef find_path(grid, k):\n\tassert minPath(grid,k) == [1, 2, 1, 2]", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/129", "fn": "minPath", "para": "(grid, k)", "arg": "(grid,k)", "assert": "[1, 7, 1, 7, 1]", "code": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n", "cover": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n\ndef find_path(grid, k):\n\tassert minPath(grid,k) == [1, 7, 1, 7, 1]", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/129", "fn": "minPath", "para": "(grid, k)", "arg": "(grid,k)", "assert": "[1, 3, 1, 3, 1, 3, 1, 3]", "code": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n", "cover": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n\ndef find_path(grid, k):\n\tassert minPath(grid,k) == [1, 3, 1, 3, 1, 3, 1, 3]", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/129", "fn": "minPath", "para": "(grid, k)", "arg": "(grid,k)", "assert": "[1, 5, 1, 5, 1, 5, 1, 5]", "code": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n", "cover": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n\ndef find_path(grid, k):\n\tassert minPath(grid,k) == [1, 5, 1, 5, 1, 5, 1, 5]", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/129", "fn": "minPath", "para": "(grid, k)", "arg": "(grid,k)", "assert": "[1, 3, 1, 3, 1, 3, 1, 3, 1, 3]", "code": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n", "cover": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n\ndef find_path(grid, k):\n\tassert minPath(grid,k) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/129", "fn": "minPath", "para": "(grid, k)", "arg": "(grid,k)", "assert": "[1, 6, 1, 6, 1, 6, 1, 6, 1]", "code": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n", "cover": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n\ndef find_path(grid, k):\n\tassert minPath(grid,k) == [1, 6, 1, 6, 1, 6, 1, 6, 1]", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/129", "fn": "minPath", "para": "(grid, k)", "arg": "(grid,k)", "assert": "[1, 10, 1, 10, 1, 10, 1]", "code": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n", "cover": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n\ndef find_path(grid, k):\n\tassert minPath(grid,k) == [1, 10, 1, 10, 1, 10, 1]", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/129", "fn": "minPath", "para": "(grid, k)", "arg": "(grid,k)", "assert": "[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]", "code": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n", "cover": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n\ndef find_path(grid, k):\n\tassert minPath(grid,k) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/129", "fn": "minPath", "para": "(grid, k)", "arg": "(grid,k)", "assert": "[1, 2, 1, 2, 1, 2, 1, 2, 1, 2]", "code": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n", "cover": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n\ndef find_path(grid, k):\n\tassert minPath(grid,k) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/130", "fn": "tri", "para": "(n)", "arg": "(n)", "assert": "[1]", "code": "def tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n", "cover": "def tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n\ndef find_path(n):\n\tassert tri(n) == [1]", "pass": true, "testcase": "find_path(RegexFlag.VERBOSE)\nfind_path(0)"}
{"task_id": "Python/130", "fn": "tri", "para": "(n)", "arg": "(n)", "assert": "[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]", "code": "def tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n", "cover": "def tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n\ndef find_path(n):\n\tassert tri(n) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]", "pass": false, "testcase": "find_path(RegexFlag.VERBOSE)"}
{"task_id": "Python/130", "fn": "tri", "para": "(n)", "arg": "(n)", "assert": "[1, 3, 2.0, 8.0, 3.0, 15.0]", "code": "def tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n", "cover": "def tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n\ndef find_path(n):\n\tassert tri(n) == [1, 3, 2.0, 8.0, 3.0, 15.0]", "pass": true, "testcase": "find_path(RegexFlag.VERBOSE)\nfind_path(5)"}
{"task_id": "Python/130", "fn": "tri", "para": "(n)", "arg": "(n)", "assert": "[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]", "code": "def tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n", "cover": "def tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n\ndef find_path(n):\n\tassert tri(n) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]", "pass": false, "testcase": "find_path(RegexFlag.VERBOSE)"}
{"task_id": "Python/130", "fn": "tri", "para": "(n)", "arg": "(n)", "assert": "[1, 3, 2.0, 8.0, 3.0]", "code": "def tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n", "cover": "def tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n\ndef find_path(n):\n\tassert tri(n) == [1, 3, 2.0, 8.0, 3.0]", "pass": true, "testcase": "find_path(RegexFlag.VERBOSE)\nfind_path(4)"}
{"task_id": "Python/130", "fn": "tri", "para": "(n)", "arg": "(n)", "assert": "[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]", "code": "def tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n", "cover": "def tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n\ndef find_path(n):\n\tassert tri(n) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]", "pass": false, "testcase": "find_path(RegexFlag.VERBOSE)"}
{"task_id": "Python/130", "fn": "tri", "para": "(n)", "arg": "(n)", "assert": "[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]", "code": "def tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n", "cover": "def tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n\ndef find_path(n):\n\tassert tri(n) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]", "pass": false, "testcase": "find_path(RegexFlag.VERBOSE)"}
{"task_id": "Python/130", "fn": "tri", "para": "(n)", "arg": "(n)", "assert": "[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]", "code": "def tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n", "cover": "def tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n\ndef find_path(n):\n\tassert tri(n) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]", "pass": false, "testcase": "find_path(RegexFlag.VERBOSE)"}
{"task_id": "Python/130", "fn": "tri", "para": "(n)", "arg": "(n)", "assert": "[1, 3, 2.0, 8.0]", "code": "def tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n", "cover": "def tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n\ndef find_path(n):\n\tassert tri(n) == [1, 3, 2.0, 8.0]", "pass": true, "testcase": "find_path(RegexFlag.VERBOSE)\nfind_path(3)"}
{"task_id": "Python/130", "fn": "tri", "para": "(n)", "arg": "(n)", "assert": "[1, 3]", "code": "def tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n", "cover": "def tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n\ndef find_path(n):\n\tassert tri(n) == [1, 3]", "pass": true, "testcase": "find_path(RegexFlag.VERBOSE)\nfind_path(1)"}
{"task_id": "Python/131", "fn": "digits", "para": "(n)", "arg": "(n)", "assert": "1", "code": "def digits(n):\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n", "cover": "def digits(n):\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n\ndef find_path(n):\n\tassert digits(n) == 1", "pass": true, "testcase": "find_path('')\nfind_path(1)"}
{"task_id": "Python/131", "fn": "digits", "para": "(n)", "arg": "(n)", "assert": "315", "code": "def digits(n):\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n", "cover": "def digits(n):\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n\ndef find_path(n):\n\tassert digits(n) == 315", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/131", "fn": "digits", "para": "(n)", "arg": "(n)", "assert": "5", "code": "def digits(n):\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n", "cover": "def digits(n):\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n\ndef find_path(n):\n\tassert digits(n) == 5", "pass": true, "testcase": "find_path('')\nfind_path(5)"}
{"task_id": "Python/131", "fn": "digits", "para": "(n)", "arg": "(n)", "assert": "0", "code": "def digits(n):\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n", "cover": "def digits(n):\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n\ndef find_path(n):\n\tassert digits(n) == 0", "pass": true, "testcase": "find_path('')\nfind_path('0100')"}
{"task_id": "Python/131", "fn": "digits", "para": "(n)", "arg": "(n)", "assert": "2625", "code": "def digits(n):\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n", "cover": "def digits(n):\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n\ndef find_path(n):\n\tassert digits(n) == 2625", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/132", "fn": "is_nested", "para": "(string)", "arg": "(string)", "assert": "True", "code": "def is_nested(string):\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n", "cover": "def is_nested(string):\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n\ndef find_path(string):\n\tassert is_nested(string) == True", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/132", "fn": "is_nested", "para": "(string)", "arg": "(string)", "assert": "False", "code": "def is_nested(string):\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n", "cover": "def is_nested(string):\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n\ndef find_path(string):\n\tassert is_nested(string) == False", "pass": true, "testcase": "find_path('')"}
{"task_id": "Python/133", "fn": "sum_squares", "para": "(lst)", "arg": "(lst)", "assert": "1", "code": "def sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n", "cover": "def sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\ndef find_path(lst):\n\tassert sum_squares(lst) == 1", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/133", "fn": "sum_squares", "para": "(lst)", "arg": "(lst)", "assert": "14", "code": "def sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n", "cover": "def sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\ndef find_path(lst):\n\tassert sum_squares(lst) == 14", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/133", "fn": "sum_squares", "para": "(lst)", "arg": "(lst)", "assert": "75", "code": "def sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n", "cover": "def sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\ndef find_path(lst):\n\tassert sum_squares(lst) == 75", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/133", "fn": "sum_squares", "para": "(lst)", "arg": "(lst)", "assert": "1086", "code": "def sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n", "cover": "def sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\ndef find_path(lst):\n\tassert sum_squares(lst) == 1086", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/133", "fn": "sum_squares", "para": "(lst)", "arg": "(lst)", "assert": "2", "code": "def sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n", "cover": "def sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\ndef find_path(lst):\n\tassert sum_squares(lst) == 2", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/133", "fn": "sum_squares", "para": "(lst)", "arg": "(lst)", "assert": "84", "code": "def sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n", "cover": "def sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\ndef find_path(lst):\n\tassert sum_squares(lst) == 84", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/133", "fn": "sum_squares", "para": "(lst)", "arg": "(lst)", "assert": "29", "code": "def sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n", "cover": "def sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\ndef find_path(lst):\n\tassert sum_squares(lst) == 29", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/133", "fn": "sum_squares", "para": "(lst)", "arg": "(lst)", "assert": "0", "code": "def sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n", "cover": "def sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\ndef find_path(lst):\n\tassert sum_squares(lst) == 0", "pass": true, "testcase": "find_path('')"}
{"task_id": "Python/133", "fn": "sum_squares", "para": "(lst)", "arg": "(lst)", "assert": "10230", "code": "def sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n", "cover": "def sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\ndef find_path(lst):\n\tassert sum_squares(lst) == 10230", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/133", "fn": "sum_squares", "para": "(lst)", "arg": "(lst)", "assert": "6", "code": "def sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n", "cover": "def sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\ndef find_path(lst):\n\tassert sum_squares(lst) == 6", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/133", "fn": "sum_squares", "para": "(lst)", "arg": "(lst)", "assert": "200000000", "code": "def sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n", "cover": "def sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\ndef find_path(lst):\n\tassert sum_squares(lst) == 200000000", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/134", "fn": "check_if_last_char_is_a_letter", "para": "(txt)", "arg": "(txt)", "assert": "True", "code": "def check_if_last_char_is_a_letter(txt):\n \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n", "cover": "def check_if_last_char_is_a_letter(txt):\n \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n\ndef find_path(txt):\n\tassert check_if_last_char_is_a_letter(txt) == True", "pass": true, "testcase": "find_path('')\nfind_path('a')"}
{"task_id": "Python/134", "fn": "check_if_last_char_is_a_letter", "para": "(txt)", "arg": "(txt)", "assert": "False", "code": "def check_if_last_char_is_a_letter(txt):\n \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n", "cover": "def check_if_last_char_is_a_letter(txt):\n \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n\ndef find_path(txt):\n\tassert check_if_last_char_is_a_letter(txt) == False", "pass": true, "testcase": "find_path('')\nfind_path('a')"}
{"task_id": "Python/135", "fn": "can_arrange", "para": "(arr)", "arg": "(arr)", "assert": "-1", "code": "def can_arrange(arr):\n    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n", "cover": "def can_arrange(arr):\n    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n\ndef find_path(arr):\n\tassert can_arrange(arr) == -1", "pass": true, "testcase": "find_path('')\nfind_path('\\x01\\x00')"}
{"task_id": "Python/135", "fn": "can_arrange", "para": "(arr)", "arg": "(arr)", "assert": "4", "code": "def can_arrange(arr):\n    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n", "cover": "def can_arrange(arr):\n    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n\ndef find_path(arr):\n\tassert can_arrange(arr) == 4", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/135", "fn": "can_arrange", "para": "(arr)", "arg": "(arr)", "assert": "3", "code": "def can_arrange(arr):\n    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n", "cover": "def can_arrange(arr):\n    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n\ndef find_path(arr):\n\tassert can_arrange(arr) == 3", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/135", "fn": "can_arrange", "para": "(arr)", "arg": "(arr)", "assert": "2", "code": "def can_arrange(arr):\n    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n", "cover": "def can_arrange(arr):\n    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n\ndef find_path(arr):\n\tassert can_arrange(arr) == 2", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/136", "fn": "largest_smallest_integers", "para": "(lst)", "arg": "(lst)", "assert": "(None, None)", "code": "def largest_smallest_integers(lst):\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n", "cover": "def largest_smallest_integers(lst):\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n\ndef find_path(lst):\n\tassert largest_smallest_integers(lst) == (None, None)", "pass": true, "testcase": "find_path('')"}
{"task_id": "Python/136", "fn": "largest_smallest_integers", "para": "(lst)", "arg": "(lst)", "assert": "(-2, 1)", "code": "def largest_smallest_integers(lst):\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n", "cover": "def largest_smallest_integers(lst):\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n\ndef find_path(lst):\n\tassert largest_smallest_integers(lst) == (-2, 1)", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/136", "fn": "largest_smallest_integers", "para": "(lst)", "arg": "(lst)", "assert": "(-9, 2)", "code": "def largest_smallest_integers(lst):\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n", "cover": "def largest_smallest_integers(lst):\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n\ndef find_path(lst):\n\tassert largest_smallest_integers(lst) == (-9, 2)", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/136", "fn": "largest_smallest_integers", "para": "(lst)", "arg": "(lst)", "assert": "(-7, 2)", "code": "def largest_smallest_integers(lst):\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n", "cover": "def largest_smallest_integers(lst):\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n\ndef find_path(lst):\n\tassert largest_smallest_integers(lst) == (-7, 2)", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/136", "fn": "largest_smallest_integers", "para": "(lst)", "arg": "(lst)", "assert": "(None, 1)", "code": "def largest_smallest_integers(lst):\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n", "cover": "def largest_smallest_integers(lst):\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n\ndef find_path(lst):\n\tassert largest_smallest_integers(lst) == (None, 1)", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/136", "fn": "largest_smallest_integers", "para": "(lst)", "arg": "(lst)", "assert": "(-3, 1)", "code": "def largest_smallest_integers(lst):\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n", "cover": "def largest_smallest_integers(lst):\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n\ndef find_path(lst):\n\tassert largest_smallest_integers(lst) == (-3, 1)", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/136", "fn": "largest_smallest_integers", "para": "(lst)", "arg": "(lst)", "assert": "(-1, None)", "code": "def largest_smallest_integers(lst):\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n", "cover": "def largest_smallest_integers(lst):\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n\ndef find_path(lst):\n\tassert largest_smallest_integers(lst) == (-1, None)", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/137", "fn": "compare_one", "para": "(a, b)", "arg": "(a,b)", "assert": "None", "code": "def compare_one(a, b):\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n", "cover": "def compare_one(a, b):\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n\ndef find_path(a, b):\n\tassert compare_one(a,b) == None", "pass": true, "testcase": "find_path(0, 0)"}
{"task_id": "Python/137", "fn": "compare_one", "para": "(a, b)", "arg": "(a,b)", "assert": "3", "code": "def compare_one(a, b):\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n", "cover": "def compare_one(a, b):\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n\ndef find_path(a, b):\n\tassert compare_one(a,b) == 3", "pass": false, "testcase": "find_path(0, 0)"}
{"task_id": "Python/137", "fn": "compare_one", "para": "(a, b)", "arg": "(a,b)", "assert": "\"2,3\"", "code": "def compare_one(a, b):\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n", "cover": "def compare_one(a, b):\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n\ndef find_path(a, b):\n\tassert compare_one(a,b) == \"2,3\"", "pass": false, "testcase": "find_path(0, 0)"}
{"task_id": "Python/137", "fn": "compare_one", "para": "(a, b)", "arg": "(a,b)", "assert": "\"6\"", "code": "def compare_one(a, b):\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n", "cover": "def compare_one(a, b):\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n\ndef find_path(a, b):\n\tassert compare_one(a,b) == \"6\"", "pass": false, "testcase": "find_path(0, 0)"}
{"task_id": "Python/137", "fn": "compare_one", "para": "(a, b)", "arg": "(a,b)", "assert": "2", "code": "def compare_one(a, b):\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n", "cover": "def compare_one(a, b):\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n\ndef find_path(a, b):\n\tassert compare_one(a,b) == 2", "pass": false, "testcase": "find_path(0, 0)"}
{"task_id": "Python/137", "fn": "compare_one", "para": "(a, b)", "arg": "(a,b)", "assert": "\"2\"", "code": "def compare_one(a, b):\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n", "cover": "def compare_one(a, b):\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n\ndef find_path(a, b):\n\tassert compare_one(a,b) == \"2\"", "pass": false, "testcase": "find_path(0, 0)"}
{"task_id": "Python/137", "fn": "compare_one", "para": "(a, b)", "arg": "(a,b)", "assert": "6", "code": "def compare_one(a, b):\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n", "cover": "def compare_one(a, b):\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n\ndef find_path(a, b):\n\tassert compare_one(a,b) == 6", "pass": false, "testcase": "find_path(0, 0)"}
{"task_id": "Python/137", "fn": "compare_one", "para": "(a, b)", "arg": "(a,b)", "assert": "2.5", "code": "def compare_one(a, b):\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n", "cover": "def compare_one(a, b):\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n\ndef find_path(a, b):\n\tassert compare_one(a,b) == 2.5", "pass": false, "testcase": "find_path(0, 0)"}
{"task_id": "Python/138", "fn": "is_equal_to_sum_even", "para": "(n)", "arg": "(n)", "assert": "True", "code": "def is_equal_to_sum_even(n):\n    return n%2 == 0 and n >= 8\n", "cover": "def is_equal_to_sum_even(n):\n    return n%2 == 0 and n >= 8\n\ndef find_path(n):\n\tassert is_equal_to_sum_even(n) == True", "pass": true, "testcase": "find_path(1)\nfind_path(8)"}
{"task_id": "Python/138", "fn": "is_equal_to_sum_even", "para": "(n)", "arg": "(n)", "assert": "False", "code": "def is_equal_to_sum_even(n):\n    return n%2 == 0 and n >= 8\n", "cover": "def is_equal_to_sum_even(n):\n    return n%2 == 0 and n >= 8\n\ndef find_path(n):\n\tassert is_equal_to_sum_even(n) == False", "pass": true, "testcase": "find_path(1)\nfind_path(8)"}
{"task_id": "Python/139", "fn": "special_factorial", "para": "(n)", "arg": "(n)", "assert": "125411328000", "code": "def special_factorial(n):\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n", "cover": "def special_factorial(n):\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n\ndef find_path(n):\n\tassert special_factorial(n) == 125411328000", "pass": false, "testcase": "find_path(0)"}
{"task_id": "Python/139", "fn": "special_factorial", "para": "(n)", "arg": "(n)", "assert": "288", "code": "def special_factorial(n):\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n", "cover": "def special_factorial(n):\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n\ndef find_path(n):\n\tassert special_factorial(n) == 288", "pass": true, "testcase": "find_path(0)\nfind_path(4)"}
{"task_id": "Python/139", "fn": "special_factorial", "para": "(n)", "arg": "(n)", "assert": "1", "code": "def special_factorial(n):\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n", "cover": "def special_factorial(n):\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n\ndef find_path(n):\n\tassert special_factorial(n) == 1", "pass": true, "testcase": "find_path(0)\nfind_path(3)"}
{"task_id": "Python/139", "fn": "special_factorial", "para": "(n)", "arg": "(n)", "assert": "34560", "code": "def special_factorial(n):\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n", "cover": "def special_factorial(n):\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n\ndef find_path(n):\n\tassert special_factorial(n) == 34560", "pass": true, "testcase": "find_path(0)\nfind_path(5)"}
{"task_id": "Python/140", "fn": "fix_spaces", "para": "(text)", "arg": "(text)", "assert": "\"-Exa_1_2_2_mple\"", "code": "def fix_spaces(text):\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n", "cover": "def fix_spaces(text):\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n\ndef find_path(text):\n\tassert fix_spaces(text) == \"-Exa_1_2_2_mple\"", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/140", "fn": "fix_spaces", "para": "(text)", "arg": "(text)", "assert": "\"Exa-mple\"", "code": "def fix_spaces(text):\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n", "cover": "def fix_spaces(text):\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n\ndef find_path(text):\n\tassert fix_spaces(text) == \"Exa-mple\"", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/140", "fn": "fix_spaces", "para": "(text)", "arg": "(text)", "assert": "\"Mudasir_Hanif_\"", "code": "def fix_spaces(text):\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n", "cover": "def fix_spaces(text):\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n\ndef find_path(text):\n\tassert fix_spaces(text) == \"Mudasir_Hanif_\"", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/140", "fn": "fix_spaces", "para": "(text)", "arg": "(text)", "assert": "\"Example\"", "code": "def fix_spaces(text):\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n", "cover": "def fix_spaces(text):\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n\ndef find_path(text):\n\tassert fix_spaces(text) == \"Example\"", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/140", "fn": "fix_spaces", "para": "(text)", "arg": "(text)", "assert": "\"Yellow_Yellow__Dirty__Fellow\"", "code": "def fix_spaces(text):\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n", "cover": "def fix_spaces(text):\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n\ndef find_path(text):\n\tassert fix_spaces(text) == \"Yellow_Yellow__Dirty__Fellow\"", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/141", "fn": "file_name_check", "para": "(file_name)", "arg": "(file_name)", "assert": "'No'", "code": "def file_name_check(file_name):\n    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n", "cover": "def file_name_check(file_name):\n    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n\ndef find_path(file_name):\n\tassert file_name_check(file_name) == 'No'", "pass": true, "testcase": "find_path('')"}
{"task_id": "Python/141", "fn": "file_name_check", "para": "(file_name)", "arg": "(file_name)", "assert": "'Yes'", "code": "def file_name_check(file_name):\n    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n", "cover": "def file_name_check(file_name):\n    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n\ndef find_path(file_name):\n\tassert file_name_check(file_name) == 'Yes'", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/142", "fn": "sum_squares", "para": "(lst)", "arg": "(lst)", "assert": "3030", "code": "def sum_squares(lst):\n    \"\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n", "cover": "def sum_squares(lst):\n    \"\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n\ndef find_path(lst):\n\tassert sum_squares(lst) == 3030", "pass": false, "testcase": "Error"}
{"task_id": "Python/142", "fn": "sum_squares", "para": "(lst)", "arg": "(lst)", "assert": "-14196", "code": "def sum_squares(lst):\n    \"\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n", "cover": "def sum_squares(lst):\n    \"\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n\ndef find_path(lst):\n\tassert sum_squares(lst) == -14196", "pass": false, "testcase": "Error"}
{"task_id": "Python/142", "fn": "sum_squares", "para": "(lst)", "arg": "(lst)", "assert": "14", "code": "def sum_squares(lst):\n    \"\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n", "cover": "def sum_squares(lst):\n    \"\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n\ndef find_path(lst):\n\tassert sum_squares(lst) == 14", "pass": false, "testcase": "Error"}
{"task_id": "Python/142", "fn": "sum_squares", "para": "(lst)", "arg": "(lst)", "assert": "-126", "code": "def sum_squares(lst):\n    \"\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n", "cover": "def sum_squares(lst):\n    \"\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n\ndef find_path(lst):\n\tassert sum_squares(lst) == -126", "pass": false, "testcase": "Error"}
{"task_id": "Python/142", "fn": "sum_squares", "para": "(lst)", "arg": "(lst)", "assert": "0", "code": "def sum_squares(lst):\n    \"\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n", "cover": "def sum_squares(lst):\n    \"\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n\ndef find_path(lst):\n\tassert sum_squares(lst) == 0", "pass": false, "testcase": "Error"}
{"task_id": "Python/142", "fn": "sum_squares", "para": "(lst)", "arg": "(lst)", "assert": "9", "code": "def sum_squares(lst):\n    \"\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n", "cover": "def sum_squares(lst):\n    \"\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n\ndef find_path(lst):\n\tassert sum_squares(lst) == 9", "pass": false, "testcase": "Error"}
{"task_id": "Python/142", "fn": "sum_squares", "para": "(lst)", "arg": "(lst)", "assert": "-1448", "code": "def sum_squares(lst):\n    \"\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n", "cover": "def sum_squares(lst):\n    \"\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n\ndef find_path(lst):\n\tassert sum_squares(lst) == -1448", "pass": false, "testcase": "Error"}
{"task_id": "Python/142", "fn": "sum_squares", "para": "(lst)", "arg": "(lst)", "assert": "6", "code": "def sum_squares(lst):\n    \"\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n", "cover": "def sum_squares(lst):\n    \"\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n\ndef find_path(lst):\n\tassert sum_squares(lst) == 6", "pass": false, "testcase": "Error"}
{"task_id": "Python/142", "fn": "sum_squares", "para": "(lst)", "arg": "(lst)", "assert": "-3", "code": "def sum_squares(lst):\n    \"\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n", "cover": "def sum_squares(lst):\n    \"\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n\ndef find_path(lst):\n\tassert sum_squares(lst) == -3", "pass": false, "testcase": "Error"}
{"task_id": "Python/143", "fn": "words_in_sentence", "para": "(sentence)", "arg": "(sentence)", "assert": "\"there is no place\"", "code": "def words_in_sentence(sentence):\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n", "cover": "def words_in_sentence(sentence):\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n\ndef find_path(sentence):\n\tassert words_in_sentence(sentence) == \"there is no place\"", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/143", "fn": "words_in_sentence", "para": "(sentence)", "arg": "(sentence)", "assert": "\"is\"", "code": "def words_in_sentence(sentence):\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n", "cover": "def words_in_sentence(sentence):\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n\ndef find_path(sentence):\n\tassert words_in_sentence(sentence) == \"is\"", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/143", "fn": "words_in_sentence", "para": "(sentence)", "arg": "(sentence)", "assert": "\"\"", "code": "def words_in_sentence(sentence):\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n", "cover": "def words_in_sentence(sentence):\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n\ndef find_path(sentence):\n\tassert words_in_sentence(sentence) == \"\"", "pass": true, "testcase": "find_path('')"}
{"task_id": "Python/143", "fn": "words_in_sentence", "para": "(sentence)", "arg": "(sentence)", "assert": "\"go for\"", "code": "def words_in_sentence(sentence):\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n", "cover": "def words_in_sentence(sentence):\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n\ndef find_path(sentence):\n\tassert words_in_sentence(sentence) == \"go for\"", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/143", "fn": "words_in_sentence", "para": "(sentence)", "arg": "(sentence)", "assert": "\"Hi am Hussein\"", "code": "def words_in_sentence(sentence):\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n", "cover": "def words_in_sentence(sentence):\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n\ndef find_path(sentence):\n\tassert words_in_sentence(sentence) == \"Hi am Hussein\"", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/143", "fn": "words_in_sentence", "para": "(sentence)", "arg": "(sentence)", "assert": "\"go for it\"", "code": "def words_in_sentence(sentence):\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n", "cover": "def words_in_sentence(sentence):\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n\ndef find_path(sentence):\n\tassert words_in_sentence(sentence) == \"go for it\"", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/144", "fn": "simplify", "para": "(x, n)", "arg": "(x,n)", "assert": "True", "code": "def simplify(x, n):\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n", "cover": "def simplify(x, n):\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n\ndef find_path(x, n):\n\tassert simplify(x,n) == True", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/144", "fn": "simplify", "para": "(x, n)", "arg": "(x,n)", "assert": "False", "code": "def simplify(x, n):\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n", "cover": "def simplify(x, n):\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n\ndef find_path(x, n):\n\tassert simplify(x,n) == False", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/145", "fn": "order_by_points", "para": "(nums)", "arg": "(nums)", "assert": "[]", "code": "def order_by_points(nums):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n", "cover": "def order_by_points(nums):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n\ndef find_path(nums):\n\tassert order_by_points(nums) == []", "pass": true, "testcase": "find_path('')"}
{"task_id": "Python/145", "fn": "order_by_points", "para": "(nums)", "arg": "(nums)", "assert": "[-76, -21, 0, 4, 23, 6, 6]", "code": "def order_by_points(nums):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n", "cover": "def order_by_points(nums):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n\ndef find_path(nums):\n\tassert order_by_points(nums) == [-76, -21, 0, 4, 23, 6, 6]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/145", "fn": "order_by_points", "para": "(nums)", "arg": "(nums)", "assert": "[-1, -11, 1, -12, 11]", "code": "def order_by_points(nums):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n", "cover": "def order_by_points(nums):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n\ndef find_path(nums):\n\tassert order_by_points(nums) == [-1, -11, 1, -12, 11]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/145", "fn": "order_by_points", "para": "(nums)", "arg": "(nums)", "assert": "[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]", "code": "def order_by_points(nums):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n", "cover": "def order_by_points(nums):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n\ndef find_path(nums):\n\tassert order_by_points(nums) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/145", "fn": "order_by_points", "para": "(nums)", "arg": "(nums)", "assert": "[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]", "code": "def order_by_points(nums):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n", "cover": "def order_by_points(nums):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n\ndef find_path(nums):\n\tassert order_by_points(nums) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/145", "fn": "order_by_points", "para": "(nums)", "arg": "(nums)", "assert": "[-3, -32, -98, -11, 1, 2, 43, 54]", "code": "def order_by_points(nums):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n", "cover": "def order_by_points(nums):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n\ndef find_path(nums):\n\tassert order_by_points(nums) == [-3, -32, -98, -11, 1, 2, 43, 54]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/146", "fn": "specialFilter", "para": "(nums)", "arg": "(nums)", "assert": "1", "code": "def specialFilter(nums):\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n", "cover": "def specialFilter(nums):\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n\ndef find_path(nums):\n\tassert specialFilter(nums) == 1", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/146", "fn": "specialFilter", "para": "(nums)", "arg": "(nums)", "assert": "4", "code": "def specialFilter(nums):\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n", "cover": "def specialFilter(nums):\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n\ndef find_path(nums):\n\tassert specialFilter(nums) == 4", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/146", "fn": "specialFilter", "para": "(nums)", "arg": "(nums)", "assert": "3", "code": "def specialFilter(nums):\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n", "cover": "def specialFilter(nums):\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n\ndef find_path(nums):\n\tassert specialFilter(nums) == 3", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/146", "fn": "specialFilter", "para": "(nums)", "arg": "(nums)", "assert": "2", "code": "def specialFilter(nums):\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n", "cover": "def specialFilter(nums):\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n\ndef find_path(nums):\n\tassert specialFilter(nums) == 2", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/146", "fn": "specialFilter", "para": "(nums)", "arg": "(nums)", "assert": "0", "code": "def specialFilter(nums):\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n", "cover": "def specialFilter(nums):\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n\ndef find_path(nums):\n\tassert specialFilter(nums) == 0", "pass": true, "testcase": "find_path('')"}
{"task_id": "Python/147", "fn": "get_max_triples", "para": "(n)", "arg": "(n)", "assert": "1", "code": "def get_max_triples(n):\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n", "cover": "def get_max_triples(n):\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n\ndef find_path(n):\n\tassert get_max_triples(n) == 1", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/147", "fn": "get_max_triples", "para": "(n)", "arg": "(n)", "assert": "4", "code": "def get_max_triples(n):\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n", "cover": "def get_max_triples(n):\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n\ndef find_path(n):\n\tassert get_max_triples(n) == 4", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/147", "fn": "get_max_triples", "para": "(n)", "arg": "(n)", "assert": "53361", "code": "def get_max_triples(n):\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n", "cover": "def get_max_triples(n):\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n\ndef find_path(n):\n\tassert get_max_triples(n) == 53361", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/147", "fn": "get_max_triples", "para": "(n)", "arg": "(n)", "assert": "36", "code": "def get_max_triples(n):\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n", "cover": "def get_max_triples(n):\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n\ndef find_path(n):\n\tassert get_max_triples(n) == 36", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/148", "fn": "bf", "para": "(planet1, planet2)", "arg": "(planet1,planet2)", "assert": "(\"Saturn\", \"Uranus\")", "code": "def bf(planet1, planet2):\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n", "cover": "def bf(planet1, planet2):\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n\ndef find_path(planet1, planet2):\n\tassert bf(planet1,planet2) == (\"Saturn\", \"Uranus\")", "pass": false, "testcase": "find_path(FoldedCase(), '')"}
{"task_id": "Python/148", "fn": "bf", "para": "(planet1, planet2)", "arg": "(planet1,planet2)", "assert": "(\"Venus\",)", "code": "def bf(planet1, planet2):\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n", "cover": "def bf(planet1, planet2):\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n\ndef find_path(planet1, planet2):\n\tassert bf(planet1,planet2) == (\"Venus\",)", "pass": true, "testcase": "find_path(FoldedCase(), '')\nfind_path('Mercury', 'Earth')"}
{"task_id": "Python/148", "fn": "bf", "para": "(planet1, planet2)", "arg": "(planet1,planet2)", "assert": "()", "code": "def bf(planet1, planet2):\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n", "cover": "def bf(planet1, planet2):\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n\ndef find_path(planet1, planet2):\n\tassert bf(planet1,planet2) == ()", "pass": false, "testcase": "find_path(FoldedCase(), '')\nfind_path('Neptune', 'Venus')"}
{"task_id": "Python/148", "fn": "bf", "para": "(planet1, planet2)", "arg": "(planet1,planet2)", "assert": "(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")", "code": "def bf(planet1, planet2):\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n", "cover": "def bf(planet1, planet2):\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n\ndef find_path(planet1, planet2):\n\tassert bf(planet1,planet2) == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")", "pass": true, "testcase": "find_path(FoldedCase(), '')\nfind_path('Neptune', 'Venus')"}
{"task_id": "Python/148", "fn": "bf", "para": "(planet1, planet2)", "arg": "(planet1,planet2)", "assert": "(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")", "code": "def bf(planet1, planet2):\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n", "cover": "def bf(planet1, planet2):\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n\ndef find_path(planet1, planet2):\n\tassert bf(planet1,planet2) == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")", "pass": false, "testcase": "find_path(FoldedCase(), '')"}
{"task_id": "Python/149", "fn": "sorted_list_sum", "para": "(lst)", "arg": "(lst)", "assert": "[]", "code": "def sorted_list_sum(lst):\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n", "cover": "def sorted_list_sum(lst):\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n\ndef find_path(lst):\n\tassert sorted_list_sum(lst) == []", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/149", "fn": "sorted_list_sum", "para": "(lst)", "arg": "(lst)", "assert": "[\"AI\", \"asdf\", \"school\"]", "code": "def sorted_list_sum(lst):\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n", "cover": "def sorted_list_sum(lst):\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n\ndef find_path(lst):\n\tassert sorted_list_sum(lst) == [\"AI\", \"asdf\", \"school\"]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/149", "fn": "sorted_list_sum", "para": "(lst)", "arg": "(lst)", "assert": "[\"cc\", \"dd\", \"aaaa\", \"bbbb\"]", "code": "def sorted_list_sum(lst):\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n", "cover": "def sorted_list_sum(lst):\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n\ndef find_path(lst):\n\tassert sorted_list_sum(lst) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/149", "fn": "sorted_list_sum", "para": "(lst)", "arg": "(lst)", "assert": "[\"AI\", \"ai\", \"au\"]", "code": "def sorted_list_sum(lst):\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n", "cover": "def sorted_list_sum(lst):\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n\ndef find_path(lst):\n\tassert sorted_list_sum(lst) == [\"AI\", \"ai\", \"au\"]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/149", "fn": "sorted_list_sum", "para": "(lst)", "arg": "(lst)", "assert": "[\"aa\"]", "code": "def sorted_list_sum(lst):\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n", "cover": "def sorted_list_sum(lst):\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n\ndef find_path(lst):\n\tassert sorted_list_sum(lst) == [\"aa\"]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/149", "fn": "sorted_list_sum", "para": "(lst)", "arg": "(lst)", "assert": "[\"abcd\", \"dcba\"]", "code": "def sorted_list_sum(lst):\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n", "cover": "def sorted_list_sum(lst):\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n\ndef find_path(lst):\n\tassert sorted_list_sum(lst) == [\"abcd\", \"dcba\"]", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/150", "fn": "x_or_y", "para": "(n, x, y)", "arg": "(n,x,y)", "assert": "3", "code": "def x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n", "cover": "def x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n\ndef find_path(n, x, y):\n\tassert x_or_y(n,x,y) == 3", "pass": true, "testcase": "find_path(1, '', 2)\nfind_path(1, '', 3)"}
{"task_id": "Python/150", "fn": "x_or_y", "para": "(n, x, y)", "arg": "(n,x,y)", "assert": "-1", "code": "def x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n", "cover": "def x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n\ndef find_path(n, x, y):\n\tassert x_or_y(n,x,y) == -1", "pass": true, "testcase": "find_path(1, '', 2)\nfind_path(1, '', -1)"}
{"task_id": "Python/150", "fn": "x_or_y", "para": "(n, x, y)", "arg": "(n,x,y)", "assert": "2", "code": "def x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n", "cover": "def x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n\ndef find_path(n, x, y):\n\tassert x_or_y(n,x,y) == 2", "pass": true, "testcase": "find_path(1, '', 3)\nfind_path(1, '', 2)"}
{"task_id": "Python/150", "fn": "x_or_y", "para": "(n, x, y)", "arg": "(n,x,y)", "assert": "5", "code": "def x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n", "cover": "def x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n\ndef find_path(n, x, y):\n\tassert x_or_y(n,x,y) == 5", "pass": true, "testcase": "find_path(1, '', 2)\nfind_path(1, '', 5)"}
{"task_id": "Python/150", "fn": "x_or_y", "para": "(n, x, y)", "arg": "(n,x,y)", "assert": "34", "code": "def x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n", "cover": "def x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n\ndef find_path(n, x, y):\n\tassert x_or_y(n,x,y) == 34", "pass": true, "testcase": "find_path(1, '', 2)\nfind_path(1, '', 34)"}
{"task_id": "Python/150", "fn": "x_or_y", "para": "(n, x, y)", "arg": "(n,x,y)", "assert": "0", "code": "def x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n", "cover": "def x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n\ndef find_path(n, x, y):\n\tassert x_or_y(n,x,y) == 0", "pass": true, "testcase": "find_path(1, '', 2)\nfind_path(1, '', 0)"}
{"task_id": "Python/150", "fn": "x_or_y", "para": "(n, x, y)", "arg": "(n,x,y)", "assert": "583", "code": "def x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n", "cover": "def x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n\ndef find_path(n, x, y):\n\tassert x_or_y(n,x,y) == 583", "pass": true, "testcase": "find_path(1, '', 2)\nfind_path(1, '', 583)"}
{"task_id": "Python/150", "fn": "x_or_y", "para": "(n, x, y)", "arg": "(n,x,y)", "assert": "1234", "code": "def x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n", "cover": "def x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n\ndef find_path(n, x, y):\n\tassert x_or_y(n,x,y) == 1234", "pass": true, "testcase": "find_path(1, '', 2)\nfind_path(1, '', 1234)"}
{"task_id": "Python/150", "fn": "x_or_y", "para": "(n, x, y)", "arg": "(n,x,y)", "assert": "33", "code": "def x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n", "cover": "def x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n\ndef find_path(n, x, y):\n\tassert x_or_y(n,x,y) == 33", "pass": true, "testcase": "find_path(1, '', 2)\nfind_path(1, '', 33)"}
{"task_id": "Python/150", "fn": "x_or_y", "para": "(n, x, y)", "arg": "(n,x,y)", "assert": "129", "code": "def x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n", "cover": "def x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n\ndef find_path(n, x, y):\n\tassert x_or_y(n,x,y) == 129", "pass": true, "testcase": "find_path(1, '', 2)\nfind_path(1, '', 129)"}
{"task_id": "Python/151", "fn": "double_the_difference", "para": "(lst)", "arg": "(lst)", "assert": "34", "code": "def double_the_difference(lst):\n    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n", "cover": "def double_the_difference(lst):\n    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n\ndef find_path(lst):\n\tassert double_the_difference(lst) == 34", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/151", "fn": "double_the_difference", "para": "(lst)", "arg": "(lst)", "assert": "0", "code": "def double_the_difference(lst):\n    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n", "cover": "def double_the_difference(lst):\n    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n\ndef find_path(lst):\n\tassert double_the_difference(lst) == 0", "pass": true, "testcase": "find_path('')"}
{"task_id": "Python/151", "fn": "double_the_difference", "para": "(lst)", "arg": "(lst)", "assert": "25", "code": "def double_the_difference(lst):\n    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n", "cover": "def double_the_difference(lst):\n    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n\ndef find_path(lst):\n\tassert double_the_difference(lst) == 25", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/151", "fn": "double_the_difference", "para": "(lst)", "arg": "(lst)", "assert": "odd_sum", "code": "def double_the_difference(lst):\n    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n", "cover": "def double_the_difference(lst):\n    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n\ndef find_path(lst):\n\tassert double_the_difference(lst) == odd_sum", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/152", "fn": "compare", "para": "(game,guess)", "arg": "(game,guess)", "assert": "[0,0,0,0,0,0]", "code": "def compare(game,guess):\n    return [abs(x-y) for x,y in zip(game,guess)]\n", "cover": "def compare(game,guess):\n    return [abs(x-y) for x,y in zip(game,guess)]\n\ndef find_path(game,guess):\n\tassert compare(game,guess) == [0,0,0,0,0,0]", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/152", "fn": "compare", "para": "(game,guess)", "arg": "(game,guess)", "assert": "[2,4,6]", "code": "def compare(game,guess):\n    return [abs(x-y) for x,y in zip(game,guess)]\n", "cover": "def compare(game,guess):\n    return [abs(x-y) for x,y in zip(game,guess)]\n\ndef find_path(game,guess):\n\tassert compare(game,guess) == [2,4,6]", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/152", "fn": "compare", "para": "(game,guess)", "arg": "(game,guess)", "assert": "[4,4,1,0,0,6]", "code": "def compare(game,guess):\n    return [abs(x-y) for x,y in zip(game,guess)]\n", "cover": "def compare(game,guess):\n    return [abs(x-y) for x,y in zip(game,guess)]\n\ndef find_path(game,guess):\n\tassert compare(game,guess) == [4,4,1,0,0,6]", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/152", "fn": "compare", "para": "(game,guess)", "arg": "(game,guess)", "assert": "[0,0,0,0,3,3]", "code": "def compare(game,guess):\n    return [abs(x-y) for x,y in zip(game,guess)]\n", "cover": "def compare(game,guess):\n    return [abs(x-y) for x,y in zip(game,guess)]\n\ndef find_path(game,guess):\n\tassert compare(game,guess) == [0,0,0,0,3,3]", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/152", "fn": "compare", "para": "(game,guess)", "arg": "(game,guess)", "assert": "[2,0,0,1]", "code": "def compare(game,guess):\n    return [abs(x-y) for x,y in zip(game,guess)]\n", "cover": "def compare(game,guess):\n    return [abs(x-y) for x,y in zip(game,guess)]\n\ndef find_path(game,guess):\n\tassert compare(game,guess) == [2,0,0,1]", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/153", "fn": "Strongest_Extension", "para": "(class_name, extensions)", "arg": "(class_name,extensions)", "assert": "'K.TAR'", "code": "def Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n", "cover": "def Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n\ndef find_path(class_name, extensions):\n\tassert Strongest_Extension(class_name,extensions) == 'K.TAR'", "pass": false, "testcase": "find_path('\\x00\\x00\\x00', '\u0387')"}
{"task_id": "Python/153", "fn": "Strongest_Extension", "para": "(class_name, extensions)", "arg": "(class_name,extensions)", "assert": "'__YESIMHERE.NuLl__'", "code": "def Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n", "cover": "def Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n\ndef find_path(class_name, extensions):\n\tassert Strongest_Extension(class_name,extensions) == '__YESIMHERE.NuLl__'", "pass": false, "testcase": "TIMEOUT"}
{"task_id": "Python/153", "fn": "Strongest_Extension", "para": "(class_name, extensions)", "arg": "(class_name,extensions)", "assert": "'YameRore.okIWILL123'", "code": "def Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n", "cover": "def Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n\ndef find_path(class_name, extensions):\n\tassert Strongest_Extension(class_name,extensions) == 'YameRore.okIWILL123'", "pass": false, "testcase": "TIMEOUT"}
{"task_id": "Python/153", "fn": "Strongest_Extension", "para": "(class_name, extensions)", "arg": "(class_name,extensions)", "assert": "'__HAHA.123'", "code": "def Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n", "cover": "def Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n\ndef find_path(class_name, extensions):\n\tassert Strongest_Extension(class_name,extensions) == '__HAHA.123'", "pass": false, "testcase": "TIMEOUT"}
{"task_id": "Python/153", "fn": "Strongest_Extension", "para": "(class_name, extensions)", "arg": "(class_name,extensions)", "assert": "'finNNalLLly.WoW'", "code": "def Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n", "cover": "def Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n\ndef find_path(class_name, extensions):\n\tassert Strongest_Extension(class_name,extensions) == 'finNNalLLly.WoW'", "pass": false, "testcase": "TIMEOUT"}
{"task_id": "Python/153", "fn": "Strongest_Extension", "para": "(class_name, extensions)", "arg": "(class_name,extensions)", "assert": "'Boku123.YEs.WeCaNe'", "code": "def Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n", "cover": "def Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n\ndef find_path(class_name, extensions):\n\tassert Strongest_Extension(class_name,extensions) == 'Boku123.YEs.WeCaNe'", "pass": false, "testcase": "TIMEOUT"}
{"task_id": "Python/153", "fn": "Strongest_Extension", "para": "(class_name, extensions)", "arg": "(class_name,extensions)", "assert": "'Watashi.eIGHt8OKe'", "code": "def Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n", "cover": "def Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n\ndef find_path(class_name, extensions):\n\tassert Strongest_Extension(class_name,extensions) == 'Watashi.eIGHt8OKe'", "pass": false, "testcase": "TIMEOUT"}
{"task_id": "Python/153", "fn": "Strongest_Extension", "para": "(class_name, extensions)", "arg": "(class_name,extensions)", "assert": "'Sp.671235'", "code": "def Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n", "cover": "def Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n\ndef find_path(class_name, extensions):\n\tassert Strongest_Extension(class_name,extensions) == 'Sp.671235'", "pass": false, "testcase": "TIMEOUT"}
{"task_id": "Python/153", "fn": "Strongest_Extension", "para": "(class_name, extensions)", "arg": "(class_name,extensions)", "assert": "'_.Bb'", "code": "def Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n", "cover": "def Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n\ndef find_path(class_name, extensions):\n\tassert Strongest_Extension(class_name,extensions) == '_.Bb'", "pass": false, "testcase": "find_path('\\x00\\x00', '\u00b6')"}
{"task_id": "Python/154", "fn": "cycpattern_check", "para": "(a , b)", "arg": "(a,b)", "assert": "True", "code": "def cycpattern_check(a , b):\n    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n", "cover": "def cycpattern_check(a , b):\n    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n\ndef find_path(a , b):\n\tassert cycpattern_check(a,b) == True", "pass": true, "testcase": "find_path('', '\\x00')\nfind_path('', '')"}
{"task_id": "Python/154", "fn": "cycpattern_check", "para": "(a , b)", "arg": "(a,b)", "assert": "False", "code": "def cycpattern_check(a , b):\n    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n", "cover": "def cycpattern_check(a , b):\n    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n\ndef find_path(a , b):\n\tassert cycpattern_check(a,b) == False", "pass": true, "testcase": "find_path('', '\\x00')\nfind_path('', '')"}
{"task_id": "Python/155", "fn": "even_odd_count", "para": "(num)", "arg": "(num)", "assert": "(2, 2)", "code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n", "cover": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n\ndef find_path(num):\n\tassert even_odd_count(num) == (2, 2)", "pass": false, "testcase": "find_path(1)"}
{"task_id": "Python/155", "fn": "even_odd_count", "para": "(num)", "arg": "(num)", "assert": "(1, 0)", "code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n", "cover": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n\ndef find_path(num):\n\tassert even_odd_count(num) == (1, 0)", "pass": true, "testcase": "find_path(1)\nfind_path(0)"}
{"task_id": "Python/155", "fn": "even_odd_count", "para": "(num)", "arg": "(num)", "assert": "(1, 1)", "code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n", "cover": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n\ndef find_path(num):\n\tassert even_odd_count(num) == (1, 1)", "pass": true, "testcase": "find_path(1)\nfind_path(23)"}
{"task_id": "Python/155", "fn": "even_odd_count", "para": "(num)", "arg": "(num)", "assert": "(2, 3)", "code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n", "cover": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n\ndef find_path(num):\n\tassert even_odd_count(num) == (2, 3)", "pass": false, "testcase": "find_path(1)"}
{"task_id": "Python/155", "fn": "even_odd_count", "para": "(num)", "arg": "(num)", "assert": "(0, 1)", "code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n", "cover": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n\ndef find_path(num):\n\tassert even_odd_count(num) == (0, 1)", "pass": true, "testcase": "find_path(1)\nfind_path(0)"}
{"task_id": "Python/155", "fn": "even_odd_count", "para": "(num)", "arg": "(num)", "assert": "(3, 3)", "code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n", "cover": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n\ndef find_path(num):\n\tassert even_odd_count(num) == (3, 3)", "pass": false, "testcase": "find_path(1)"}
{"task_id": "Python/156", "fn": "int_to_mini_roman", "para": "(number)", "arg": "(number)", "assert": "'xc'", "code": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n", "cover": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n\ndef find_path(number):\n\tassert int_to_mini_roman(number) == 'xc'", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/156", "fn": "int_to_mini_roman", "para": "(number)", "arg": "(number)", "assert": "'cmxciv'", "code": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n", "cover": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n\ndef find_path(number):\n\tassert int_to_mini_roman(number) == 'cmxciv'", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/156", "fn": "int_to_mini_roman", "para": "(number)", "arg": "(number)", "assert": "'clii'", "code": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n", "cover": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n\ndef find_path(number):\n\tassert int_to_mini_roman(number) == 'clii'", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/156", "fn": "int_to_mini_roman", "para": "(number)", "arg": "(number)", "assert": "'d'", "code": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n", "cover": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n\ndef find_path(number):\n\tassert int_to_mini_roman(number) == 'd'", "pass": true, "testcase": "find_path('')\nfind_path(500)"}
{"task_id": "Python/156", "fn": "int_to_mini_roman", "para": "(number)", "arg": "(number)", "assert": "'dxxxii'", "code": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n", "cover": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n\ndef find_path(number):\n\tassert int_to_mini_roman(number) == 'dxxxii'", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/156", "fn": "int_to_mini_roman", "para": "(number)", "arg": "(number)", "assert": "'cdxxvi'", "code": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n", "cover": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n\ndef find_path(number):\n\tassert int_to_mini_roman(number) == 'cdxxvi'", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/156", "fn": "int_to_mini_roman", "para": "(number)", "arg": "(number)", "assert": "'m'", "code": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n", "cover": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n\ndef find_path(number):\n\tassert int_to_mini_roman(number) == 'm'", "pass": true, "testcase": "find_path('')\nfind_path(1000)"}
{"task_id": "Python/156", "fn": "int_to_mini_roman", "para": "(number)", "arg": "(number)", "assert": "'xciv'", "code": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n", "cover": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n\ndef find_path(number):\n\tassert int_to_mini_roman(number) == 'xciv'", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/156", "fn": "int_to_mini_roman", "para": "(number)", "arg": "(number)", "assert": "'xix'", "code": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n", "cover": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n\ndef find_path(number):\n\tassert int_to_mini_roman(number) == 'xix'", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/156", "fn": "int_to_mini_roman", "para": "(number)", "arg": "(number)", "assert": "'xliii'", "code": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n", "cover": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n\ndef find_path(number):\n\tassert int_to_mini_roman(number) == 'xliii'", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/156", "fn": "int_to_mini_roman", "para": "(number)", "arg": "(number)", "assert": "'iv'", "code": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n", "cover": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n\ndef find_path(number):\n\tassert int_to_mini_roman(number) == 'iv'", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/156", "fn": "int_to_mini_roman", "para": "(number)", "arg": "(number)", "assert": "'i'", "code": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n", "cover": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n\ndef find_path(number):\n\tassert int_to_mini_roman(number) == 'i'", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/156", "fn": "int_to_mini_roman", "para": "(number)", "arg": "(number)", "assert": "'cm'", "code": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n", "cover": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n\ndef find_path(number):\n\tassert int_to_mini_roman(number) == 'cm'", "pass": true, "testcase": "find_path('')\nfind_path(900)"}
{"task_id": "Python/156", "fn": "int_to_mini_roman", "para": "(number)", "arg": "(number)", "assert": "'ccli'", "code": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n", "cover": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n\ndef find_path(number):\n\tassert int_to_mini_roman(number) == 'ccli'", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/157", "fn": "right_angle_triangle", "para": "(a, b, c)", "arg": "(a,b,c)", "assert": "True", "code": "def right_angle_triangle(a, b, c):\n    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n", "cover": "def right_angle_triangle(a, b, c):\n    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n\ndef find_path(a, b, c):\n\tassert right_angle_triangle(a,b,c) == True", "pass": true, "testcase": "find_path(-4, 3, 5)\nfind_path(-1, 0, 0)"}
{"task_id": "Python/157", "fn": "right_angle_triangle", "para": "(a, b, c)", "arg": "(a,b,c)", "assert": "False", "code": "def right_angle_triangle(a, b, c):\n    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n", "cover": "def right_angle_triangle(a, b, c):\n    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n\ndef find_path(a, b, c):\n\tassert right_angle_triangle(a,b,c) == False", "pass": true, "testcase": "find_path(1, 0, 0)\nfind_path(3, -4, 5)"}
{"task_id": "Python/158", "fn": "find_max", "para": "(words)", "arg": "(words)", "assert": "True", "code": "def find_max(words):\n    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n", "cover": "def find_max(words):\n    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n\ndef find_path(words):\n\tassert find_max(words) == True", "pass": false, "testcase": "find_path('\\x00')"}
{"task_id": "Python/158", "fn": "find_max", "para": "(words)", "arg": "(words)", "assert": "False", "code": "def find_max(words):\n    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n", "cover": "def find_max(words):\n    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n\ndef find_path(words):\n\tassert find_max(words) == False", "pass": false, "testcase": "find_path('\\x00')"}
{"task_id": "Python/159", "fn": "eat", "para": "(number, need, remaining)", "arg": "(number,need,remaining)", "assert": "[12, 1]", "code": "def eat(number, need, remaining):\n    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n", "cover": "def eat(number, need, remaining):\n    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n\ndef find_path(number, need, remaining):\n\tassert eat(number,need,remaining) == [12, 1]", "pass": false, "testcase": "find_path(0, 0, 0)"}
{"task_id": "Python/159", "fn": "eat", "para": "(number, need, remaining)", "arg": "(number,need,remaining)", "assert": "[7, 0]", "code": "def eat(number, need, remaining):\n    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n", "cover": "def eat(number, need, remaining):\n    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n\ndef find_path(number, need, remaining):\n\tassert eat(number,need,remaining) == [7, 0]", "pass": true, "testcase": "find_path(0, 0, 0)\nfind_path(7, 1, 0)"}
{"task_id": "Python/159", "fn": "eat", "para": "(number, need, remaining)", "arg": "(number,need,remaining)", "assert": "[11, 4]", "code": "def eat(number, need, remaining):\n    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n", "cover": "def eat(number, need, remaining):\n    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n\ndef find_path(number, need, remaining):\n\tassert eat(number,need,remaining) == [11, 4]", "pass": false, "testcase": "find_path(0, 0, 0)"}
{"task_id": "Python/159", "fn": "eat", "para": "(number, need, remaining)", "arg": "(number,need,remaining)", "assert": "[5, 0]", "code": "def eat(number, need, remaining):\n    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n", "cover": "def eat(number, need, remaining):\n    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n\ndef find_path(number, need, remaining):\n\tassert eat(number,need,remaining) == [5, 0]", "pass": true, "testcase": "find_path(0, 0, 0)\nfind_path(5, 1, 0)"}
{"task_id": "Python/159", "fn": "eat", "para": "(number, need, remaining)", "arg": "(number,need,remaining)", "assert": "[9, 2]", "code": "def eat(number, need, remaining):\n    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n", "cover": "def eat(number, need, remaining):\n    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n\ndef find_path(number, need, remaining):\n\tassert eat(number,need,remaining) == [9, 2]", "pass": false, "testcase": "find_path(0, 0, 0)"}
{"task_id": "Python/159", "fn": "eat", "para": "(number, need, remaining)", "arg": "(number,need,remaining)", "assert": "[11, 0]", "code": "def eat(number, need, remaining):\n    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n", "cover": "def eat(number, need, remaining):\n    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n\ndef find_path(number, need, remaining):\n\tassert eat(number,need,remaining) == [11, 0]", "pass": true, "testcase": "find_path(0, 0, 0)\nfind_path(11, 1, 0)"}
{"task_id": "Python/160", "fn": "do_algebra", "para": "(operator, operand)", "arg": "(operator,operand)", "assert": "8", "code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n", "cover": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\ndef find_path(operator, operand):\n\tassert do_algebra(operator,operand) == 8", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/160", "fn": "do_algebra", "para": "(operator, operand)", "arg": "(operator,operand)", "assert": "37", "code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n", "cover": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\ndef find_path(operator, operand):\n\tassert do_algebra(operator,operand) == 37", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/160", "fn": "do_algebra", "para": "(operator, operand)", "arg": "(operator,operand)", "assert": "9", "code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n", "cover": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\ndef find_path(operator, operand):\n\tassert do_algebra(operator,operand) == 9", "pass": false, "testcase": "find_path('', '')"}
{"task_id": "Python/161", "fn": "solve", "para": "(s)", "arg": "(s)", "assert": "\"#CCC\"", "code": "def solve(s):\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n", "cover": "def solve(s):\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n\ndef find_path(s):\n\tassert solve(s) == \"#CCC\"", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/161", "fn": "solve", "para": "(s)", "arg": "(s)", "assert": "\"2@6#\"", "code": "def solve(s):\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n", "cover": "def solve(s):\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n\ndef find_path(s):\n\tassert solve(s) == \"2@6#\"", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/161", "fn": "solve", "para": "(s)", "arg": "(s)", "assert": "\"#A@c\"", "code": "def solve(s):\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n", "cover": "def solve(s):\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n\ndef find_path(s):\n\tassert solve(s) == \"#A@c\"", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/161", "fn": "solve", "para": "(s)", "arg": "(s)", "assert": "\"AB\"", "code": "def solve(s):\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n", "cover": "def solve(s):\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n\ndef find_path(s):\n\tassert solve(s) == \"AB\"", "pass": false, "testcase": "TIMEOUT"}
{"task_id": "Python/161", "fn": "solve", "para": "(s)", "arg": "(s)", "assert": "\"4321\"", "code": "def solve(s):\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n", "cover": "def solve(s):\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n\ndef find_path(s):\n\tassert solve(s) == \"4321\"", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/161", "fn": "solve", "para": "(s)", "arg": "(s)", "assert": "\"#$A^d\"", "code": "def solve(s):\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n", "cover": "def solve(s):\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n\ndef find_path(s):\n\tassert solve(s) == \"#$A^d\"", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/161", "fn": "solve", "para": "(s)", "arg": "(s)", "assert": "\"aSdF\"", "code": "def solve(s):\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n", "cover": "def solve(s):\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n\ndef find_path(s):\n\tassert solve(s) == \"aSdF\"", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/161", "fn": "solve", "para": "(s)", "arg": "(s)", "assert": "\"#aSDFw^45\"", "code": "def solve(s):\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n", "cover": "def solve(s):\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n\ndef find_path(s):\n\tassert solve(s) == \"#aSDFw^45\"", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/162", "fn": "string_to_md5", "para": "(text)", "arg": "(text)", "assert": "None", "code": "def string_to_md5(text):\n    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n", "cover": "def string_to_md5(text):\n    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n\ndef find_path(text):\n\tassert string_to_md5(text) == None", "pass": true, "testcase": "find_path('')"}
{"task_id": "Python/162", "fn": "string_to_md5", "para": "(text)", "arg": "(text)", "assert": "'3e25960a79dbc69b674cd4ec67a72c62'", "code": "def string_to_md5(text):\n    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n", "cover": "def string_to_md5(text):\n    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n\ndef find_path(text):\n\tassert string_to_md5(text) == '3e25960a79dbc69b674cd4ec67a72c62'", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/162", "fn": "string_to_md5", "para": "(text)", "arg": "(text)", "assert": "'0ef78513b0cb8cef12743f5aeb35f888'", "code": "def string_to_md5(text):\n    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n", "cover": "def string_to_md5(text):\n    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n\ndef find_path(text):\n\tassert string_to_md5(text) == '0ef78513b0cb8cef12743f5aeb35f888'", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/162", "fn": "string_to_md5", "para": "(text)", "arg": "(text)", "assert": "'5f4dcc3b5aa765d61d8327deb882cf99'", "code": "def string_to_md5(text):\n    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n", "cover": "def string_to_md5(text):\n    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n\ndef find_path(text):\n\tassert string_to_md5(text) == '5f4dcc3b5aa765d61d8327deb882cf99'", "pass": false, "testcase": "find_path('')"}
{"task_id": "Python/163", "fn": "generate_integers", "para": "(a, b)", "arg": "(a,b)", "assert": "[]", "code": "def generate_integers(a, b):\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n", "cover": "def generate_integers(a, b):\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n\ndef find_path(a, b):\n\tassert generate_integers(a,b) == []", "pass": true, "testcase": "find_path(0, 8)\nfind_path(0, 0)"}
{"task_id": "Python/163", "fn": "generate_integers", "para": "(a, b)", "arg": "(a,b)", "assert": "[2, 4, 6, 8]", "code": "def generate_integers(a, b):\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n", "cover": "def generate_integers(a, b):\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n\ndef find_path(a, b):\n\tassert generate_integers(a,b) == [2, 4, 6, 8]", "pass": true, "testcase": "find_path(0, 8)\nfind_path(0, 0)"}
