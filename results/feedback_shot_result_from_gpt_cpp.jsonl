{"task_id": "CPP/0", "code": "#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool has_close_elements(vector<float> numbers, float threshold){\n    int i,j;\n    \n    for (i=0;i<numbers.size();i++)\n    for (j=i+1;j<numbers.size();j++)\n    if (abs(numbers[i]-numbers[j])<threshold)\n    return true;\n\n    return false;\n}\n\nint main(){\n\tauto result = has_close_elements(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{1.0, 2.0, 3.0, 4.0, 5.0}, 1.5", "fn": "has_close_elements", "para": "(vector<float> numbers, float threshold)", "pass": true}
{"task_id": "CPP/0", "code": "#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool has_close_elements(vector<float> numbers, float threshold){\n    int i,j;\n    \n    for (i=0;i<numbers.size();i++)\n    for (j=i+1;j<numbers.size();j++)\n    if (abs(numbers[i]-numbers[j])<threshold)\n    return true;\n\n    return false;\n}\n\nint main(){\n\tauto result = has_close_elements(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{1.5, 2.5, 3.5, 4.5, 5.5}, 1.0", "fn": "has_close_elements", "para": "(vector<float> numbers, float threshold)", "pass": false}
{"task_id": "CPP/0", "code": "#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool has_close_elements(vector<float> numbers, float threshold){\n    int i,j;\n    \n    for (i=0;i<numbers.size();i++)\n    for (j=i+1;j<numbers.size();j++)\n    if (abs(numbers[i]-numbers[j])<threshold)\n    return true;\n\n    return false;\n}\n\nint main(){\n\tauto result = has_close_elements(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{1.5, 2.5, 3.5, 4.5, 5.5}, 1.0", "fn": "has_close_elements", "para": "(vector<float> numbers, float threshold)", "pass": false}
{"task_id": "CPP/0", "code": "#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool has_close_elements(vector<float> numbers, float threshold){\n    int i,j;\n    \n    for (i=0;i<numbers.size();i++)\n    for (j=i+1;j<numbers.size();j++)\n    if (abs(numbers[i]-numbers[j])<threshold)\n    return true;\n\n    return false;\n}\n\nint main(){\n\tauto result = has_close_elements(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{1.0, 2.0, 3.0, 4.0, 5.0}, 1.5", "fn": "has_close_elements", "para": "(vector<float> numbers, float threshold)", "pass": true}
{"task_id": "CPP/0", "code": "#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool has_close_elements(vector<float> numbers, float threshold){\n    int i,j;\n    \n    for (i=0;i<numbers.size();i++)\n    for (j=i+1;j<numbers.size();j++)\n    if (abs(numbers[i]-numbers[j])<threshold)\n    return true;\n\n    return false;\n}\n\nint main(){\n\tauto result = has_close_elements(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{1.0, 2.0, 3.0, 4.0, 5.0}, 1.5", "fn": "has_close_elements", "para": "(vector<float> numbers, float threshold)", "pass": true}
{"task_id": "CPP/0", "code": "#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool has_close_elements(vector<float> numbers, float threshold){\n    int i,j;\n    \n    for (i=0;i<numbers.size();i++)\n    for (j=i+1;j<numbers.size();j++)\n    if (abs(numbers[i]-numbers[j])<threshold)\n    return true;\n\n    return false;\n}\n\nint main(){\n\tauto result = has_close_elements(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1.0, 2.0, 3.0, 4.0, 5.0}, 0.5", "fn": "has_close_elements", "para": "(vector<float> numbers, float threshold)", "pass": true}
{"task_id": "CPP/0", "code": "#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool has_close_elements(vector<float> numbers, float threshold){\n    int i,j;\n    \n    for (i=0;i<numbers.size();i++)\n    for (j=i+1;j<numbers.size();j++)\n    if (abs(numbers[i]-numbers[j])<threshold)\n    return true;\n\n    return false;\n}\n\nint main(){\n\tauto result = has_close_elements(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{1.0, 2.0, 3.0, 4.0, 5.0}, 0.5", "fn": "has_close_elements", "para": "(vector<float> numbers, float threshold)", "pass": true}
{"task_id": "CPP/0", "code": "#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool has_close_elements(vector<float> numbers, float threshold){\n    int i,j;\n    \n    for (i=0;i<numbers.size();i++)\n    for (j=i+1;j<numbers.size();j++)\n    if (abs(numbers[i]-numbers[j])<threshold)\n    return true;\n\n    return false;\n}\n\nint main(){\n\tauto result = has_close_elements(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1.0, 2.0, 3.0, 4.0, 5.0}, 0.5", "fn": "has_close_elements", "para": "(vector<float> numbers, float threshold)", "pass": true}
{"task_id": "CPP/0", "code": "#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool has_close_elements(vector<float> numbers, float threshold){\n    int i,j;\n    \n    for (i=0;i<numbers.size();i++)\n    for (j=i+1;j<numbers.size();j++)\n    if (abs(numbers[i]-numbers[j])<threshold)\n    return true;\n\n    return false;\n}\n\nint main(){\n\tauto result = has_close_elements(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{1.0, 2.0, 3.0, 4.0, 5.0}, 0.5", "fn": "has_close_elements", "para": "(vector<float> numbers, float threshold)", "pass": true}
{"task_id": "CPP/0", "code": "#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool has_close_elements(vector<float> numbers, float threshold){\n    int i,j;\n    \n    for (i=0;i<numbers.size();i++)\n    for (j=i+1;j<numbers.size();j++)\n    if (abs(numbers[i]-numbers[j])<threshold)\n    return true;\n\n    return false;\n}\n\nint main(){\n\tauto result = has_close_elements(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{1.0, 2.0, 3.0, 4.0, 5.0}, 0.5", "fn": "has_close_elements", "para": "(vector<float> numbers, float threshold)", "pass": true}
{"task_id": "CPP/1", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> separate_paren_groups(string paren_string){\n    vector<string> all_parens;\n    string current_paren;\n    int level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_parens.push_back(current_paren);\n                current_paren=\"\";\n            }\n        }\n    }\n    return all_parens;\n}\nint main(){\n\tauto result = separate_paren_groups(<FILL_ME>);\n\tassert(issame(result,{\"()\",\"(())\",\"(()())\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "\"()(()())\"", "fn": "separate_paren_groups", "para": "(string paren_string)", "pass": false}
{"task_id": "CPP/1", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> separate_paren_groups(string paren_string){\n    vector<string> all_parens;\n    string current_paren;\n    int level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_parens.push_back(current_paren);\n                current_paren=\"\";\n            }\n        }\n    }\n    return all_parens;\n}\nint main(){\n\tauto result = separate_paren_groups(<FILL_ME>);\n\tassert(issame(result,{\"()\",\"(())\",\"(()())\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "\"()(()())\"", "fn": "separate_paren_groups", "para": "(string paren_string)", "pass": false}
{"task_id": "CPP/1", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> separate_paren_groups(string paren_string){\n    vector<string> all_parens;\n    string current_paren;\n    int level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_parens.push_back(current_paren);\n                current_paren=\"\";\n            }\n        }\n    }\n    return all_parens;\n}\nint main(){\n\tauto result = separate_paren_groups(<FILL_ME>);\n\tassert(issame(result,{\"()\",\"(())\",\"(()())\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "\"()(()())\"", "fn": "separate_paren_groups", "para": "(string paren_string)", "pass": false}
{"task_id": "CPP/1", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> separate_paren_groups(string paren_string){\n    vector<string> all_parens;\n    string current_paren;\n    int level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_parens.push_back(current_paren);\n                current_paren=\"\";\n            }\n        }\n    }\n    return all_parens;\n}\nint main(){\n\tauto result = separate_paren_groups(<FILL_ME>);\n\tassert(issame(result,{\"()\",\"(())\",\"(()())\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "\"()(()())\"", "fn": "separate_paren_groups", "para": "(string paren_string)", "pass": false}
{"task_id": "CPP/1", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> separate_paren_groups(string paren_string){\n    vector<string> all_parens;\n    string current_paren;\n    int level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_parens.push_back(current_paren);\n                current_paren=\"\";\n            }\n        }\n    }\n    return all_parens;\n}\nint main(){\n\tauto result = separate_paren_groups(<FILL_ME>);\n\tassert(issame(result,{\"()\",\"(())\",\"(()())\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "\"()(()())\"", "fn": "separate_paren_groups", "para": "(string paren_string)", "pass": false}
{"task_id": "CPP/1", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> separate_paren_groups(string paren_string){\n    vector<string> all_parens;\n    string current_paren;\n    int level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_parens.push_back(current_paren);\n                current_paren=\"\";\n            }\n        }\n    }\n    return all_parens;\n}\nint main(){\n\tauto result = separate_paren_groups(<FILL_ME>);\n\tassert(issame(result,{\"()\",\"(())\",\"((()))\",\"(((())))\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "\"()(()(()))\"", "fn": "separate_paren_groups", "para": "(string paren_string)", "pass": false}
{"task_id": "CPP/1", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> separate_paren_groups(string paren_string){\n    vector<string> all_parens;\n    string current_paren;\n    int level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_parens.push_back(current_paren);\n                current_paren=\"\";\n            }\n        }\n    }\n    return all_parens;\n}\nint main(){\n\tauto result = separate_paren_groups(<FILL_ME>);\n\tassert(issame(result,{\"()\",\"(())\",\"((()))\",\"(((())))\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "\"()(()(())((()))(((())))\"", "fn": "separate_paren_groups", "para": "(string paren_string)", "pass": false}
{"task_id": "CPP/1", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> separate_paren_groups(string paren_string){\n    vector<string> all_parens;\n    string current_paren;\n    int level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_parens.push_back(current_paren);\n                current_paren=\"\";\n            }\n        }\n    }\n    return all_parens;\n}\nint main(){\n\tauto result = separate_paren_groups(<FILL_ME>);\n\tassert(issame(result,{\"()\",\"(())\",\"((()))\",\"(((())))\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "\"()(()(()))\"", "fn": "separate_paren_groups", "para": "(string paren_string)", "pass": false}
{"task_id": "CPP/1", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> separate_paren_groups(string paren_string){\n    vector<string> all_parens;\n    string current_paren;\n    int level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_parens.push_back(current_paren);\n                current_paren=\"\";\n            }\n        }\n    }\n    return all_parens;\n}\nint main(){\n\tauto result = separate_paren_groups(<FILL_ME>);\n\tassert(issame(result,{\"()\",\"(())\",\"((()))\",\"(((())))\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "\"()(()(())((()))(((())))\"", "fn": "separate_paren_groups", "para": "(string paren_string)", "pass": false}
{"task_id": "CPP/1", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> separate_paren_groups(string paren_string){\n    vector<string> all_parens;\n    string current_paren;\n    int level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_parens.push_back(current_paren);\n                current_paren=\"\";\n            }\n        }\n    }\n    return all_parens;\n}\nint main(){\n\tauto result = separate_paren_groups(<FILL_ME>);\n\tassert(issame(result,{\"()\",\"(())\",\"((()))\",\"(((())))\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "\"()(()(()))\"", "fn": "separate_paren_groups", "para": "(string paren_string)", "pass": false}
{"task_id": "CPP/1", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> separate_paren_groups(string paren_string){\n    vector<string> all_parens;\n    string current_paren;\n    int level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_parens.push_back(current_paren);\n                current_paren=\"\";\n            }\n        }\n    }\n    return all_parens;\n}\nint main(){\n\tauto result = separate_paren_groups(<FILL_ME>);\n\tassert(issame(result,{\"(()())\",\"((()))\",\"()\",\"((())()())\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "\"(()())((()))()((())()())\"", "fn": "separate_paren_groups", "para": "(string paren_string)", "pass": true}
{"task_id": "CPP/1", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> separate_paren_groups(string paren_string){\n    vector<string> all_parens;\n    string current_paren;\n    int level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_parens.push_back(current_paren);\n                current_paren=\"\";\n            }\n        }\n    }\n    return all_parens;\n}\nint main(){\n\tauto result = separate_paren_groups(<FILL_ME>);\n\tassert(issame(result,{\"(()())\",\"((()))\",\"()\",\"((())()())\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "\"(()())((()))()((())()())\"", "fn": "separate_paren_groups", "para": "(string paren_string)", "pass": true}
{"task_id": "CPP/1", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> separate_paren_groups(string paren_string){\n    vector<string> all_parens;\n    string current_paren;\n    int level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_parens.push_back(current_paren);\n                current_paren=\"\";\n            }\n        }\n    }\n    return all_parens;\n}\nint main(){\n\tauto result = separate_paren_groups(<FILL_ME>);\n\tassert(issame(result,{\"(()())\",\"((()))\",\"()\",\"((())()())\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "\"(()())((()))()((())()())\"", "fn": "separate_paren_groups", "para": "(string paren_string)", "pass": true}
{"task_id": "CPP/1", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> separate_paren_groups(string paren_string){\n    vector<string> all_parens;\n    string current_paren;\n    int level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_parens.push_back(current_paren);\n                current_paren=\"\";\n            }\n        }\n    }\n    return all_parens;\n}\nint main(){\n\tauto result = separate_paren_groups(<FILL_ME>);\n\tassert(issame(result,{\"(()())\",\"((()))\",\"()\",\"((())()())\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "\"(()())((()))()((())()())\"", "fn": "separate_paren_groups", "para": "(string paren_string)", "pass": true}
{"task_id": "CPP/1", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> separate_paren_groups(string paren_string){\n    vector<string> all_parens;\n    string current_paren;\n    int level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_parens.push_back(current_paren);\n                current_paren=\"\";\n            }\n        }\n    }\n    return all_parens;\n}\nint main(){\n\tauto result = separate_paren_groups(<FILL_ME>);\n\tassert(issame(result,{\"(()())\",\"((()))\",\"()\",\"((())()())\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "\"(()())((()))()((())()())\"", "fn": "separate_paren_groups", "para": "(string paren_string)", "pass": true}
{"task_id": "CPP/1", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> separate_paren_groups(string paren_string){\n    vector<string> all_parens;\n    string current_paren;\n    int level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_parens.push_back(current_paren);\n                current_paren=\"\";\n            }\n        }\n    }\n    return all_parens;\n}\nint main(){\n\tauto result = separate_paren_groups(<FILL_ME>);\n\tassert(issame(result,{\"(()(())((())))\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "\"(()(())((())))\"", "fn": "separate_paren_groups", "para": "(string paren_string)", "pass": true}
{"task_id": "CPP/1", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> separate_paren_groups(string paren_string){\n    vector<string> all_parens;\n    string current_paren;\n    int level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_parens.push_back(current_paren);\n                current_paren=\"\";\n            }\n        }\n    }\n    return all_parens;\n}\nint main(){\n\tauto result = separate_paren_groups(<FILL_ME>);\n\tassert(issame(result,{\"(()(())((())))\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "\"(()(())((())))\"", "fn": "separate_paren_groups", "para": "(string paren_string)", "pass": true}
{"task_id": "CPP/1", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> separate_paren_groups(string paren_string){\n    vector<string> all_parens;\n    string current_paren;\n    int level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_parens.push_back(current_paren);\n                current_paren=\"\";\n            }\n        }\n    }\n    return all_parens;\n}\nint main(){\n\tauto result = separate_paren_groups(<FILL_ME>);\n\tassert(issame(result,{\"(()(())((())))\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "\"(()(())((())))\"", "fn": "separate_paren_groups", "para": "(string paren_string)", "pass": true}
{"task_id": "CPP/1", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> separate_paren_groups(string paren_string){\n    vector<string> all_parens;\n    string current_paren;\n    int level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_parens.push_back(current_paren);\n                current_paren=\"\";\n            }\n        }\n    }\n    return all_parens;\n}\nint main(){\n\tauto result = separate_paren_groups(<FILL_ME>);\n\tassert(issame(result,{\"(()(())((())))\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "\"(()(())((())))\"", "fn": "separate_paren_groups", "para": "(string paren_string)", "pass": true}
{"task_id": "CPP/1", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> separate_paren_groups(string paren_string){\n    vector<string> all_parens;\n    string current_paren;\n    int level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_parens.push_back(current_paren);\n                current_paren=\"\";\n            }\n        }\n    }\n    return all_parens;\n}\nint main(){\n\tauto result = separate_paren_groups(<FILL_ME>);\n\tassert(issame(result,{\"(()(())((())))\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "\"(()(())((())))\"", "fn": "separate_paren_groups", "para": "(string paren_string)", "pass": true}
{"task_id": "CPP/2", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat truncate_number(float number){\n    return number-int(number);\n}\nint main(){\n\tauto result = truncate_number(<FILL_ME>);\n\tassert(abs(result-0.33)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n", "filling": "0.33", "fn": "truncate_number", "para": "(float number)", "pass": true}
{"task_id": "CPP/2", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat truncate_number(float number){\n    return number-int(number);\n}\nint main(){\n\tauto result = truncate_number(<FILL_ME>);\n\tassert(abs(result-0.33)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n", "filling": "0.33", "fn": "truncate_number", "para": "(float number)", "pass": true}
{"task_id": "CPP/2", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat truncate_number(float number){\n    return number-int(number);\n}\nint main(){\n\tauto result = truncate_number(<FILL_ME>);\n\tassert(abs(result-0.33)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n", "filling": "0.33", "fn": "truncate_number", "para": "(float number)", "pass": true}
{"task_id": "CPP/2", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat truncate_number(float number){\n    return number-int(number);\n}\nint main(){\n\tauto result = truncate_number(<FILL_ME>);\n\tassert(abs(result-0.33)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n", "filling": "0.33", "fn": "truncate_number", "para": "(float number)", "pass": true}
{"task_id": "CPP/2", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat truncate_number(float number){\n    return number-int(number);\n}\nint main(){\n\tauto result = truncate_number(<FILL_ME>);\n\tassert(abs(result-0.33)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n", "filling": "0.33", "fn": "truncate_number", "para": "(float number)", "pass": true}
{"task_id": "CPP/2", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat truncate_number(float number){\n    return number-int(number);\n}\nint main(){\n\tauto result = truncate_number(<FILL_ME>);\n\tassert(abs(result-0.456)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n", "filling": "0.456", "fn": "truncate_number", "para": "(float number)", "pass": true}
{"task_id": "CPP/2", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat truncate_number(float number){\n    return number-int(number);\n}\nint main(){\n\tauto result = truncate_number(<FILL_ME>);\n\tassert(abs(result-0.456)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n", "filling": "0.456", "fn": "truncate_number", "para": "(float number)", "pass": true}
{"task_id": "CPP/2", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat truncate_number(float number){\n    return number-int(number);\n}\nint main(){\n\tauto result = truncate_number(<FILL_ME>);\n\tassert(abs(result-0.456)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n", "filling": "0.456", "fn": "truncate_number", "para": "(float number)", "pass": true}
{"task_id": "CPP/2", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat truncate_number(float number){\n    return number-int(number);\n}\nint main(){\n\tauto result = truncate_number(<FILL_ME>);\n\tassert(abs(result-0.456)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n", "filling": "0.456", "fn": "truncate_number", "para": "(float number)", "pass": true}
{"task_id": "CPP/2", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat truncate_number(float number){\n    return number-int(number);\n}\nint main(){\n\tauto result = truncate_number(<FILL_ME>);\n\tassert(abs(result-0.456)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n", "filling": "0.456", "fn": "truncate_number", "para": "(float number)", "pass": true}
{"task_id": "CPP/2", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat truncate_number(float number){\n    return number-int(number);\n}\nint main(){\n\tauto result = truncate_number(<FILL_ME>);\n\tassert(result==0.5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n", "filling": "0.5", "fn": "truncate_number", "para": "(float number)", "pass": true}
{"task_id": "CPP/2", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat truncate_number(float number){\n    return number-int(number);\n}\nint main(){\n\tauto result = truncate_number(<FILL_ME>);\n\tassert(result==0.5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n", "filling": "0.5", "fn": "truncate_number", "para": "(float number)", "pass": true}
{"task_id": "CPP/2", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat truncate_number(float number){\n    return number-int(number);\n}\nint main(){\n\tauto result = truncate_number(<FILL_ME>);\n\tassert(result==0.5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n", "filling": "0.5", "fn": "truncate_number", "para": "(float number)", "pass": true}
{"task_id": "CPP/2", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat truncate_number(float number){\n    return number-int(number);\n}\nint main(){\n\tauto result = truncate_number(<FILL_ME>);\n\tassert(result==0.5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n", "filling": "0.5", "fn": "truncate_number", "para": "(float number)", "pass": true}
{"task_id": "CPP/2", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat truncate_number(float number){\n    return number-int(number);\n}\nint main(){\n\tauto result = truncate_number(<FILL_ME>);\n\tassert(result==0.5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n", "filling": "0.5", "fn": "truncate_number", "para": "(float number)", "pass": true}
{"task_id": "CPP/3", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool below_zero(vector<int> operations){\n    int num=0;\n    for (int i=0;i<operations.size();i++)\n    {\n        num+=operations[i];\n        if (num<0) return true;\n    }\n    return false;\n}\nint main(){\n\tauto result = below_zero(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n", "filling": "vector<int>{-1, 2, 3, -5, 6}", "fn": "below_zero", "para": "(vector<int> operations)", "pass": true}
{"task_id": "CPP/3", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool below_zero(vector<int> operations){\n    int num=0;\n    for (int i=0;i<operations.size();i++)\n    {\n        num+=operations[i];\n        if (num<0) return true;\n    }\n    return false;\n}\nint main(){\n\tauto result = below_zero(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n", "filling": "vector<int>{-1, 2, 3, -5, 6}", "fn": "below_zero", "para": "(vector<int> operations)", "pass": true}
{"task_id": "CPP/3", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool below_zero(vector<int> operations){\n    int num=0;\n    for (int i=0;i<operations.size();i++)\n    {\n        num+=operations[i];\n        if (num<0) return true;\n    }\n    return false;\n}\nint main(){\n\tauto result = below_zero(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n", "filling": "vector<int>{-1, 2, 3, -5, 6}", "fn": "below_zero", "para": "(vector<int> operations)", "pass": true}
{"task_id": "CPP/3", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool below_zero(vector<int> operations){\n    int num=0;\n    for (int i=0;i<operations.size();i++)\n    {\n        num+=operations[i];\n        if (num<0) return true;\n    }\n    return false;\n}\nint main(){\n\tauto result = below_zero(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n", "filling": "vector<int>{-1, 2, 3, -5, 6}", "fn": "below_zero", "para": "(vector<int> operations)", "pass": true}
{"task_id": "CPP/3", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool below_zero(vector<int> operations){\n    int num=0;\n    for (int i=0;i<operations.size();i++)\n    {\n        num+=operations[i];\n        if (num<0) return true;\n    }\n    return false;\n}\nint main(){\n\tauto result = below_zero(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n", "filling": "{-1, 2, 3, -5, 6}", "fn": "below_zero", "para": "(vector<int> operations)", "pass": true}
{"task_id": "CPP/3", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool below_zero(vector<int> operations){\n    int num=0;\n    for (int i=0;i<operations.size();i++)\n    {\n        num+=operations[i];\n        if (num<0) return true;\n    }\n    return false;\n}\nint main(){\n\tauto result = below_zero(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n", "filling": "vector<int>{1, 2, 3, 4, 5}", "fn": "below_zero", "para": "(vector<int> operations)", "pass": true}
{"task_id": "CPP/3", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool below_zero(vector<int> operations){\n    int num=0;\n    for (int i=0;i<operations.size();i++)\n    {\n        num+=operations[i];\n        if (num<0) return true;\n    }\n    return false;\n}\nint main(){\n\tauto result = below_zero(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n", "filling": "vector<int>{1, 2, 3, 4, 5}", "fn": "below_zero", "para": "(vector<int> operations)", "pass": true}
{"task_id": "CPP/3", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool below_zero(vector<int> operations){\n    int num=0;\n    for (int i=0;i<operations.size();i++)\n    {\n        num+=operations[i];\n        if (num<0) return true;\n    }\n    return false;\n}\nint main(){\n\tauto result = below_zero(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n", "filling": "vector<int>{1, 2, 3, 4, 5}", "fn": "below_zero", "para": "(vector<int> operations)", "pass": true}
{"task_id": "CPP/3", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool below_zero(vector<int> operations){\n    int num=0;\n    for (int i=0;i<operations.size();i++)\n    {\n        num+=operations[i];\n        if (num<0) return true;\n    }\n    return false;\n}\nint main(){\n\tauto result = below_zero(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n", "filling": "vector<int>{1, 2, 3, 4, 5}", "fn": "below_zero", "para": "(vector<int> operations)", "pass": true}
{"task_id": "CPP/3", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool below_zero(vector<int> operations){\n    int num=0;\n    for (int i=0;i<operations.size();i++)\n    {\n        num+=operations[i];\n        if (num<0) return true;\n    }\n    return false;\n}\nint main(){\n\tauto result = below_zero(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n", "filling": "vector<int>{1, 2, 3, 4, 5}", "fn": "below_zero", "para": "(vector<int> operations)", "pass": true}
{"task_id": "CPP/4", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat mean_absolute_deviation(vector<float> numbers){\n    float sum=0;\n    float avg,msum,mavg;\n    int i=0;\n    for (i=0;i<numbers.size();i++)\n        sum+=numbers[i];\n    avg=sum/numbers.size();\n    msum=0;\n    for (i=0;i<numbers.size();i++)\n        msum+=abs(numbers[i]-avg);\n    return msum/numbers.size();\n}\nint main(){\n\tauto result = mean_absolute_deviation(<FILL_ME>);\n\tassert(result<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n", "filling": "vector<float> {1.5, 2.5, 3.5, 4.5}", "fn": "mean_absolute_deviation", "para": "(vector<float> numbers)", "pass": false}
{"task_id": "CPP/4", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat mean_absolute_deviation(vector<float> numbers){\n    float sum=0;\n    float avg,msum,mavg;\n    int i=0;\n    for (i=0;i<numbers.size();i++)\n        sum+=numbers[i];\n    avg=sum/numbers.size();\n    msum=0;\n    for (i=0;i<numbers.size();i++)\n        msum+=abs(numbers[i]-avg);\n    return msum/numbers.size();\n}\nint main(){\n\tauto result = mean_absolute_deviation(<FILL_ME>);\n\tassert(result<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n", "filling": "vector<float> {1.5, 2.5, 3.5, 4.5}", "fn": "mean_absolute_deviation", "para": "(vector<float> numbers)", "pass": false}
{"task_id": "CPP/4", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat mean_absolute_deviation(vector<float> numbers){\n    float sum=0;\n    float avg,msum,mavg;\n    int i=0;\n    for (i=0;i<numbers.size();i++)\n        sum+=numbers[i];\n    avg=sum/numbers.size();\n    msum=0;\n    for (i=0;i<numbers.size();i++)\n        msum+=abs(numbers[i]-avg);\n    return msum/numbers.size();\n}\nint main(){\n\tauto result = mean_absolute_deviation(<FILL_ME>);\n\tassert(result<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n", "filling": "vector<float> {1.5, 2.5, 3.5, 4.5}", "fn": "mean_absolute_deviation", "para": "(vector<float> numbers)", "pass": false}
{"task_id": "CPP/4", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat mean_absolute_deviation(vector<float> numbers){\n    float sum=0;\n    float avg,msum,mavg;\n    int i=0;\n    for (i=0;i<numbers.size();i++)\n        sum+=numbers[i];\n    avg=sum/numbers.size();\n    msum=0;\n    for (i=0;i<numbers.size();i++)\n        msum+=abs(numbers[i]-avg);\n    return msum/numbers.size();\n}\nint main(){\n\tauto result = mean_absolute_deviation(<FILL_ME>);\n\tassert(result<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n", "filling": "vector<float> {1.5, 2.5, 3.5, 4.5}", "fn": "mean_absolute_deviation", "para": "(vector<float> numbers)", "pass": false}
{"task_id": "CPP/4", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat mean_absolute_deviation(vector<float> numbers){\n    float sum=0;\n    float avg,msum,mavg;\n    int i=0;\n    for (i=0;i<numbers.size();i++)\n        sum+=numbers[i];\n    avg=sum/numbers.size();\n    msum=0;\n    for (i=0;i<numbers.size();i++)\n        msum+=abs(numbers[i]-avg);\n    return msum/numbers.size();\n}\nint main(){\n\tauto result = mean_absolute_deviation(<FILL_ME>);\n\tassert(result<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n", "filling": "{1.5, 2.5, 3.5, 4.5}", "fn": "mean_absolute_deviation", "para": "(vector<float> numbers)", "pass": false}
{"task_id": "CPP/5", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n    vector<int> out={};\n    if (numbers.size()>0) out.push_back(numbers[0]);\n    for (int i=1;i<numbers.size();i++)\n    {\n        out.push_back(delimeter);\n        out.push_back(numbers[i]);\n\n    }\n    return out;\n}\nint main(){\n\tauto result = intersperse(<FILL_ME>);\n\tassert(issame(result,{5,8,6,8,3,8,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "{5,6,3,2}, 8", "fn": "intersperse", "para": "(vector<int> numbers, int delimeter)", "pass": true}
{"task_id": "CPP/5", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n    vector<int> out={};\n    if (numbers.size()>0) out.push_back(numbers[0]);\n    for (int i=1;i<numbers.size();i++)\n    {\n        out.push_back(delimeter);\n        out.push_back(numbers[i]);\n\n    }\n    return out;\n}\nint main(){\n\tauto result = intersperse(<FILL_ME>);\n\tassert(issame(result,{5,8,6,8,3,8,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "{5,6,3,2}, 8", "fn": "intersperse", "para": "(vector<int> numbers, int delimeter)", "pass": true}
{"task_id": "CPP/5", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n    vector<int> out={};\n    if (numbers.size()>0) out.push_back(numbers[0]);\n    for (int i=1;i<numbers.size();i++)\n    {\n        out.push_back(delimeter);\n        out.push_back(numbers[i]);\n\n    }\n    return out;\n}\nint main(){\n\tauto result = intersperse(<FILL_ME>);\n\tassert(issame(result,{5,8,6,8,3,8,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "{5,6,3,2}, 8", "fn": "intersperse", "para": "(vector<int> numbers, int delimeter)", "pass": true}
{"task_id": "CPP/5", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n    vector<int> out={};\n    if (numbers.size()>0) out.push_back(numbers[0]);\n    for (int i=1;i<numbers.size();i++)\n    {\n        out.push_back(delimeter);\n        out.push_back(numbers[i]);\n\n    }\n    return out;\n}\nint main(){\n\tauto result = intersperse(<FILL_ME>);\n\tassert(issame(result,{5,8,6,8,3,8,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "{5,6,3,2}, 8", "fn": "intersperse", "para": "(vector<int> numbers, int delimeter)", "pass": true}
{"task_id": "CPP/5", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n    vector<int> out={};\n    if (numbers.size()>0) out.push_back(numbers[0]);\n    for (int i=1;i<numbers.size();i++)\n    {\n        out.push_back(delimeter);\n        out.push_back(numbers[i]);\n\n    }\n    return out;\n}\nint main(){\n\tauto result = intersperse(<FILL_ME>);\n\tassert(issame(result,{5,8,6,8,3,8,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "{5,6,3,2}, 8", "fn": "intersperse", "para": "(vector<int> numbers, int delimeter)", "pass": true}
{"task_id": "CPP/5", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n    vector<int> out={};\n    if (numbers.size()>0) out.push_back(numbers[0]);\n    for (int i=1;i<numbers.size();i++)\n    {\n        out.push_back(delimeter);\n        out.push_back(numbers[i]);\n\n    }\n    return out;\n}\nint main(){\n\tauto result = intersperse(<FILL_ME>);\n\tassert(issame(result,{2,2,2,2,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "{2,2,2,2,2}, 2", "fn": "intersperse", "para": "(vector<int> numbers, int delimeter)", "pass": false}
{"task_id": "CPP/5", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n    vector<int> out={};\n    if (numbers.size()>0) out.push_back(numbers[0]);\n    for (int i=1;i<numbers.size();i++)\n    {\n        out.push_back(delimeter);\n        out.push_back(numbers[i]);\n\n    }\n    return out;\n}\nint main(){\n\tauto result = intersperse(<FILL_ME>);\n\tassert(issame(result,{2,2,2,2,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "{2,2,2,2,2}, 2", "fn": "intersperse", "para": "(vector<int> numbers, int delimeter)", "pass": false}
{"task_id": "CPP/5", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n    vector<int> out={};\n    if (numbers.size()>0) out.push_back(numbers[0]);\n    for (int i=1;i<numbers.size();i++)\n    {\n        out.push_back(delimeter);\n        out.push_back(numbers[i]);\n\n    }\n    return out;\n}\nint main(){\n\tauto result = intersperse(<FILL_ME>);\n\tassert(issame(result,{2,2,2,2,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "{2,2,2,2,2}, 2", "fn": "intersperse", "para": "(vector<int> numbers, int delimeter)", "pass": false}
{"task_id": "CPP/5", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n    vector<int> out={};\n    if (numbers.size()>0) out.push_back(numbers[0]);\n    for (int i=1;i<numbers.size();i++)\n    {\n        out.push_back(delimeter);\n        out.push_back(numbers[i]);\n\n    }\n    return out;\n}\nint main(){\n\tauto result = intersperse(<FILL_ME>);\n\tassert(issame(result,{2,2,2,2,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "{2,2,2,2,2}, 2", "fn": "intersperse", "para": "(vector<int> numbers, int delimeter)", "pass": false}
{"task_id": "CPP/5", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n    vector<int> out={};\n    if (numbers.size()>0) out.push_back(numbers[0]);\n    for (int i=1;i<numbers.size();i++)\n    {\n        out.push_back(delimeter);\n        out.push_back(numbers[i]);\n\n    }\n    return out;\n}\nint main(){\n\tauto result = intersperse(<FILL_ME>);\n\tassert(issame(result,{2,2,2,2,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "vector<int>{2,2,2,2,2}, 2", "fn": "intersperse", "para": "(vector<int> numbers, int delimeter)", "pass": false}
{"task_id": "CPP/5", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n    vector<int> out={};\n    if (numbers.size()>0) out.push_back(numbers[0]);\n    for (int i=1;i<numbers.size();i++)\n    {\n        out.push_back(delimeter);\n        out.push_back(numbers[i]);\n\n    }\n    return out;\n}\nint main(){\n\tauto result = intersperse(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "vector<int>{},0", "fn": "intersperse", "para": "(vector<int> numbers, int delimeter)", "pass": true}
{"task_id": "CPP/5", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n    vector<int> out={};\n    if (numbers.size()>0) out.push_back(numbers[0]);\n    for (int i=1;i<numbers.size();i++)\n    {\n        out.push_back(delimeter);\n        out.push_back(numbers[i]);\n\n    }\n    return out;\n}\nint main(){\n\tauto result = intersperse(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "vector<int>{}, 0", "fn": "intersperse", "para": "(vector<int> numbers, int delimeter)", "pass": true}
{"task_id": "CPP/5", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n    vector<int> out={};\n    if (numbers.size()>0) out.push_back(numbers[0]);\n    for (int i=1;i<numbers.size();i++)\n    {\n        out.push_back(delimeter);\n        out.push_back(numbers[i]);\n\n    }\n    return out;\n}\nint main(){\n\tauto result = intersperse(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "vector<int>{}", "fn": "intersperse", "para": "(vector<int> numbers, int delimeter)", "pass": false}
{"task_id": "CPP/5", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n    vector<int> out={};\n    if (numbers.size()>0) out.push_back(numbers[0]);\n    for (int i=1;i<numbers.size();i++)\n    {\n        out.push_back(delimeter);\n        out.push_back(numbers[i]);\n\n    }\n    return out;\n}\nint main(){\n\tauto result = intersperse(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "vector<int>{}, 0", "fn": "intersperse", "para": "(vector<int> numbers, int delimeter)", "pass": true}
{"task_id": "CPP/5", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n    vector<int> out={};\n    if (numbers.size()>0) out.push_back(numbers[0]);\n    for (int i=1;i<numbers.size();i++)\n    {\n        out.push_back(delimeter);\n        out.push_back(numbers[i]);\n\n    }\n    return out;\n}\nint main(){\n\tauto result = intersperse(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "vector<int>{}, 0", "fn": "intersperse", "para": "(vector<int> numbers, int delimeter)", "pass": true}
{"task_id": "CPP/6", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> parse_nested_parens(string paren_string){\n    vector<int> all_levels;\n    string current_paren;\n    int level=0,max_level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        if (level>max_level) max_level=level;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_levels.push_back(max_level);\n                current_paren=\"\";\n                max_level=0;\n            }\n        }\n    }\n    return all_levels;\n}\nint main(){\n\tauto result = parse_nested_parens(<FILL_ME>);\n\tassert(issame(result,{1,2,3,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "\"((((((())((())))))())\"", "fn": "parse_nested_parens", "para": "(string paren_string)", "pass": false}
{"task_id": "CPP/6", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> parse_nested_parens(string paren_string){\n    vector<int> all_levels;\n    string current_paren;\n    int level=0,max_level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        if (level>max_level) max_level=level;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_levels.push_back(max_level);\n                current_paren=\"\";\n                max_level=0;\n            }\n        }\n    }\n    return all_levels;\n}\nint main(){\n\tauto result = parse_nested_parens(<FILL_ME>);\n\tassert(issame(result,{1,2,3,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "\"()(())()((()))\"", "fn": "parse_nested_parens", "para": "(string paren_string)", "pass": false}
{"task_id": "CPP/6", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> parse_nested_parens(string paren_string){\n    vector<int> all_levels;\n    string current_paren;\n    int level=0,max_level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        if (level>max_level) max_level=level;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_levels.push_back(max_level);\n                current_paren=\"\";\n                max_level=0;\n            }\n        }\n    }\n    return all_levels;\n}\nint main(){\n\tauto result = parse_nested_parens(<FILL_ME>);\n\tassert(issame(result,{1,2,3,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "\"((((((((((((()))))))))))\"", "fn": "parse_nested_parens", "para": "(string paren_string)", "pass": false}
{"task_id": "CPP/6", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> parse_nested_parens(string paren_string){\n    vector<int> all_levels;\n    string current_paren;\n    int level=0,max_level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        if (level>max_level) max_level=level;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_levels.push_back(max_level);\n                current_paren=\"\";\n                max_level=0;\n            }\n        }\n    }\n    return all_levels;\n}\nint main(){\n\tauto result = parse_nested_parens(<FILL_ME>);\n\tassert(issame(result,{1,2,3,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "\"(((())(()))())\"", "fn": "parse_nested_parens", "para": "(string paren_string)", "pass": false}
{"task_id": "CPP/6", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> parse_nested_parens(string paren_string){\n    vector<int> all_levels;\n    string current_paren;\n    int level=0,max_level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        if (level>max_level) max_level=level;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_levels.push_back(max_level);\n                current_paren=\"\";\n                max_level=0;\n            }\n        }\n    }\n    return all_levels;\n}\nint main(){\n\tauto result = parse_nested_parens(<FILL_ME>);\n\tassert(issame(result,{1,2,3,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "\"(()()(()))(((())))\"", "fn": "parse_nested_parens", "para": "(string paren_string)", "pass": false}
{"task_id": "CPP/6", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> parse_nested_parens(string paren_string){\n    vector<int> all_levels;\n    string current_paren;\n    int level=0,max_level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        if (level>max_level) max_level=level;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_levels.push_back(max_level);\n                current_paren=\"\";\n                max_level=0;\n            }\n        }\n    }\n    return all_levels;\n}\nint main(){\n\tauto result = parse_nested_parens(<FILL_ME>);\n\tassert(issame(result,{2,3,1,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "\"(()())((()))()(()())\"", "fn": "parse_nested_parens", "para": "(string paren_string)", "pass": false}
{"task_id": "CPP/6", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> parse_nested_parens(string paren_string){\n    vector<int> all_levels;\n    string current_paren;\n    int level=0,max_level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        if (level>max_level) max_level=level;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_levels.push_back(max_level);\n                current_paren=\"\";\n                max_level=0;\n            }\n        }\n    }\n    return all_levels;\n}\nint main(){\n\tauto result = parse_nested_parens(<FILL_ME>);\n\tassert(issame(result,{2,3,1,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "\"((())())(()())\"", "fn": "parse_nested_parens", "para": "(string paren_string)", "pass": false}
{"task_id": "CPP/6", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> parse_nested_parens(string paren_string){\n    vector<int> all_levels;\n    string current_paren;\n    int level=0,max_level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        if (level>max_level) max_level=level;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_levels.push_back(max_level);\n                current_paren=\"\";\n                max_level=0;\n            }\n        }\n    }\n    return all_levels;\n}\nint main(){\n\tauto result = parse_nested_parens(<FILL_ME>);\n\tassert(issame(result,{2,3,1,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "\"((()())())(()())\"", "fn": "parse_nested_parens", "para": "(string paren_string)", "pass": false}
{"task_id": "CPP/6", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> parse_nested_parens(string paren_string){\n    vector<int> all_levels;\n    string current_paren;\n    int level=0,max_level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        if (level>max_level) max_level=level;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_levels.push_back(max_level);\n                current_paren=\"\";\n                max_level=0;\n            }\n        }\n    }\n    return all_levels;\n}\nint main(){\n\tauto result = parse_nested_parens(<FILL_ME>);\n\tassert(issame(result,{2,3,1,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "\"((())())(()())(())\"", "fn": "parse_nested_parens", "para": "(string paren_string)", "pass": false}
{"task_id": "CPP/6", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> parse_nested_parens(string paren_string){\n    vector<int> all_levels;\n    string current_paren;\n    int level=0,max_level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        if (level>max_level) max_level=level;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_levels.push_back(max_level);\n                current_paren=\"\";\n                max_level=0;\n            }\n        }\n    }\n    return all_levels;\n}\nint main(){\n\tauto result = parse_nested_parens(<FILL_ME>);\n\tassert(issame(result,{2,3,1,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "\"((())())(()())\"", "fn": "parse_nested_parens", "para": "(string paren_string)", "pass": false}
{"task_id": "CPP/6", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> parse_nested_parens(string paren_string){\n    vector<int> all_levels;\n    string current_paren;\n    int level=0,max_level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        if (level>max_level) max_level=level;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_levels.push_back(max_level);\n                current_paren=\"\";\n                max_level=0;\n            }\n        }\n    }\n    return all_levels;\n}\nint main(){\n\tauto result = parse_nested_parens(<FILL_ME>);\n\tassert(issame(result,{4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "\"(((())))\"", "fn": "parse_nested_parens", "para": "(string paren_string)", "pass": true}
{"task_id": "CPP/6", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> parse_nested_parens(string paren_string){\n    vector<int> all_levels;\n    string current_paren;\n    int level=0,max_level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        if (level>max_level) max_level=level;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_levels.push_back(max_level);\n                current_paren=\"\";\n                max_level=0;\n            }\n        }\n    }\n    return all_levels;\n}\nint main(){\n\tauto result = parse_nested_parens(<FILL_ME>);\n\tassert(issame(result,{4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "\"(((())))\"", "fn": "parse_nested_parens", "para": "(string paren_string)", "pass": true}
{"task_id": "CPP/6", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> parse_nested_parens(string paren_string){\n    vector<int> all_levels;\n    string current_paren;\n    int level=0,max_level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        if (level>max_level) max_level=level;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_levels.push_back(max_level);\n                current_paren=\"\";\n                max_level=0;\n            }\n        }\n    }\n    return all_levels;\n}\nint main(){\n\tauto result = parse_nested_parens(<FILL_ME>);\n\tassert(issame(result,{4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "\"(((())))\"", "fn": "parse_nested_parens", "para": "(string paren_string)", "pass": true}
{"task_id": "CPP/6", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> parse_nested_parens(string paren_string){\n    vector<int> all_levels;\n    string current_paren;\n    int level=0,max_level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        if (level>max_level) max_level=level;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_levels.push_back(max_level);\n                current_paren=\"\";\n                max_level=0;\n            }\n        }\n    }\n    return all_levels;\n}\nint main(){\n\tauto result = parse_nested_parens(<FILL_ME>);\n\tassert(issame(result,{4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "\"(((())))\"", "fn": "parse_nested_parens", "para": "(string paren_string)", "pass": true}
{"task_id": "CPP/6", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> parse_nested_parens(string paren_string){\n    vector<int> all_levels;\n    string current_paren;\n    int level=0,max_level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        if (level>max_level) max_level=level;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_levels.push_back(max_level);\n                current_paren=\"\";\n                max_level=0;\n            }\n        }\n    }\n    return all_levels;\n}\nint main(){\n\tauto result = parse_nested_parens(<FILL_ME>);\n\tassert(issame(result,{4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "\"(((())))\"", "fn": "parse_nested_parens", "para": "(string paren_string)", "pass": true}
{"task_id": "CPP/7", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].find(substring)!=strings[i].npos)\n        out.push_back(strings[i]);\n    }\n    return out;\n}\nint main(){\n\tauto result = filter_by_substring(<FILL_ME>);\n\tassert(issame(result,{\"xxx\",\"aaaxxy\",\"xxxAAA\",\"xxx\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"}, \"xxx\"", "fn": "filter_by_substring", "para": "(vector<string> strings, string substring)", "pass": false}
{"task_id": "CPP/7", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].find(substring)!=strings[i].npos)\n        out.push_back(strings[i]);\n    }\n    return out;\n}\nint main(){\n\tauto result = filter_by_substring(<FILL_ME>);\n\tassert(issame(result,{\"xxx\",\"aaaxxy\",\"xxxAAA\",\"xxx\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"xxx\",\"aaaxxy\",\"xxxAAA\",\"xxx\"},\"xxx\"", "fn": "filter_by_substring", "para": "(vector<string> strings, string substring)", "pass": false}
{"task_id": "CPP/7", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].find(substring)!=strings[i].npos)\n        out.push_back(strings[i]);\n    }\n    return out;\n}\nint main(){\n\tauto result = filter_by_substring(<FILL_ME>);\n\tassert(issame(result,{\"xxx\",\"aaaxxy\",\"xxxAAA\",\"xxx\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"xxx\",\"aaaxxy\",\"xxxAAA\",\"xxx\"}, \"xxx\"", "fn": "filter_by_substring", "para": "(vector<string> strings, string substring)", "pass": false}
{"task_id": "CPP/7", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].find(substring)!=strings[i].npos)\n        out.push_back(strings[i]);\n    }\n    return out;\n}\nint main(){\n\tauto result = filter_by_substring(<FILL_ME>);\n\tassert(issame(result,{\"xxx\",\"aaaxxy\",\"xxxAAA\",\"xxx\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"xxx\",\"aaaxxy\",\"xxxAAA\",\"xxx\"},\"xxx\"", "fn": "filter_by_substring", "para": "(vector<string> strings, string substring)", "pass": false}
{"task_id": "CPP/7", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].find(substring)!=strings[i].npos)\n        out.push_back(strings[i]);\n    }\n    return out;\n}\nint main(){\n\tauto result = filter_by_substring(<FILL_ME>);\n\tassert(issame(result,{\"xxx\",\"aaaxxy\",\"xxxAAA\",\"xxx\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"}, \"xxx\"", "fn": "filter_by_substring", "para": "(vector<string> strings, string substring)", "pass": false}
{"task_id": "CPP/7", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].find(substring)!=strings[i].npos)\n        out.push_back(strings[i]);\n    }\n    return out;\n}\nint main(){\n\tauto result = filter_by_substring(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"apple\", \"banana\", \"orange\"}, \"berry\"", "fn": "filter_by_substring", "para": "(vector<string> strings, string substring)", "pass": true}
{"task_id": "CPP/7", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].find(substring)!=strings[i].npos)\n        out.push_back(strings[i]);\n    }\n    return out;\n}\nint main(){\n\tauto result = filter_by_substring(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"apple\", \"banana\", \"orange\"}, \"berry\"", "fn": "filter_by_substring", "para": "(vector<string> strings, string substring)", "pass": true}
{"task_id": "CPP/7", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].find(substring)!=strings[i].npos)\n        out.push_back(strings[i]);\n    }\n    return out;\n}\nint main(){\n\tauto result = filter_by_substring(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"apple\", \"banana\", \"orange\"}, \"berry\"", "fn": "filter_by_substring", "para": "(vector<string> strings, string substring)", "pass": true}
{"task_id": "CPP/7", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].find(substring)!=strings[i].npos)\n        out.push_back(strings[i]);\n    }\n    return out;\n}\nint main(){\n\tauto result = filter_by_substring(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"apple\", \"banana\", \"orange\"}, \"berry\"", "fn": "filter_by_substring", "para": "(vector<string> strings, string substring)", "pass": true}
{"task_id": "CPP/7", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].find(substring)!=strings[i].npos)\n        out.push_back(strings[i]);\n    }\n    return out;\n}\nint main(){\n\tauto result = filter_by_substring(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"apple\", \"banana\", \"orange\"}, \"berry\"", "fn": "filter_by_substring", "para": "(vector<string> strings, string substring)", "pass": true}
{"task_id": "CPP/7", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].find(substring)!=strings[i].npos)\n        out.push_back(strings[i]);\n    }\n    return out;\n}\nint main(){\n\tauto result = filter_by_substring(<FILL_ME>);\n\tassert(issame(result,{\"xxx\",\"xxxAAA\",\"xxx\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<string>{\"xxx\", \"xxxAAA\", \"xxx\"}, \"xxx\"", "fn": "filter_by_substring", "para": "(vector<string> strings, string substring)", "pass": true}
{"task_id": "CPP/7", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].find(substring)!=strings[i].npos)\n        out.push_back(strings[i]);\n    }\n    return out;\n}\nint main(){\n\tauto result = filter_by_substring(<FILL_ME>);\n\tassert(issame(result,{\"xxx\",\"xxxAAA\",\"xxx\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<string>{\"xxx\", \"xxxAAA\", \"xxx\"}, \"xxx\"", "fn": "filter_by_substring", "para": "(vector<string> strings, string substring)", "pass": true}
{"task_id": "CPP/7", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].find(substring)!=strings[i].npos)\n        out.push_back(strings[i]);\n    }\n    return out;\n}\nint main(){\n\tauto result = filter_by_substring(<FILL_ME>);\n\tassert(issame(result,{\"xxx\",\"xxxAAA\",\"xxx\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<string>{\"xxx\", \"xxxAAA\", \"xxx\"}, \"xxx\"", "fn": "filter_by_substring", "para": "(vector<string> strings, string substring)", "pass": true}
{"task_id": "CPP/7", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].find(substring)!=strings[i].npos)\n        out.push_back(strings[i]);\n    }\n    return out;\n}\nint main(){\n\tauto result = filter_by_substring(<FILL_ME>);\n\tassert(issame(result,{\"xxx\",\"xxxAAA\",\"xxx\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<string>{\"xxx\", \"xxxAAA\", \"xxx\"}, \"xxx\"", "fn": "filter_by_substring", "para": "(vector<string> strings, string substring)", "pass": true}
{"task_id": "CPP/7", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].find(substring)!=strings[i].npos)\n        out.push_back(strings[i]);\n    }\n    return out;\n}\nint main(){\n\tauto result = filter_by_substring(<FILL_ME>);\n\tassert(issame(result,{\"xxx\",\"xxxAAA\",\"xxx\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<string>{\"xxx\", \"xxxAAA\", \"xxx\"}, \"xxx\"", "fn": "filter_by_substring", "para": "(vector<string> strings, string substring)", "pass": true}
{"task_id": "CPP/7", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].find(substring)!=strings[i].npos)\n        out.push_back(strings[i]);\n    }\n    return out;\n}\nint main(){\n\tauto result = filter_by_substring(<FILL_ME>);\n\tassert(issame(result,{\"grunt\",\"prune\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"apple\", \"banana\", \"grunt\", \"prune\"}, \"un\"", "fn": "filter_by_substring", "para": "(vector<string> strings, string substring)", "pass": true}
{"task_id": "CPP/7", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].find(substring)!=strings[i].npos)\n        out.push_back(strings[i]);\n    }\n    return out;\n}\nint main(){\n\tauto result = filter_by_substring(<FILL_ME>);\n\tassert(issame(result,{\"grunt\",\"prune\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"apple\", \"banana\", \"grunt\", \"prune\"}, \"un\"", "fn": "filter_by_substring", "para": "(vector<string> strings, string substring)", "pass": true}
{"task_id": "CPP/7", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].find(substring)!=strings[i].npos)\n        out.push_back(strings[i]);\n    }\n    return out;\n}\nint main(){\n\tauto result = filter_by_substring(<FILL_ME>);\n\tassert(issame(result,{\"grunt\",\"prune\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"apple\", \"banana\", \"grunt\", \"prune\"}, \"un\"", "fn": "filter_by_substring", "para": "(vector<string> strings, string substring)", "pass": true}
{"task_id": "CPP/7", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].find(substring)!=strings[i].npos)\n        out.push_back(strings[i]);\n    }\n    return out;\n}\nint main(){\n\tauto result = filter_by_substring(<FILL_ME>);\n\tassert(issame(result,{\"grunt\",\"prune\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<string>{\"apple\", \"banana\", \"grunt\", \"prune\"}, \"un\"", "fn": "filter_by_substring", "para": "(vector<string> strings, string substring)", "pass": true}
{"task_id": "CPP/7", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].find(substring)!=strings[i].npos)\n        out.push_back(strings[i]);\n    }\n    return out;\n}\nint main(){\n\tauto result = filter_by_substring(<FILL_ME>);\n\tassert(issame(result,{\"grunt\",\"prune\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"apple\", \"banana\", \"grunt\", \"prune\"}, \"un\"", "fn": "filter_by_substring", "para": "(vector<string> strings, string substring)", "pass": true}
{"task_id": "CPP/8", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> sum_product(vector<int> numbers){\n    int sum=0,product=1;\n    for (int i=0;i<numbers.size();i++)\n    {\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum,product};\n}\nint main(){\n\tauto result = sum_product(<FILL_ME>);\n\tassert(issame(result,{10,10}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n\n\n", "filling": "{5,5}", "fn": "sum_product", "para": "(vector<int> numbers)", "pass": false}
{"task_id": "CPP/8", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> sum_product(vector<int> numbers){\n    int sum=0,product=1;\n    for (int i=0;i<numbers.size();i++)\n    {\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum,product};\n}\nint main(){\n\tauto result = sum_product(<FILL_ME>);\n\tassert(issame(result,{10,10}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n\n\n", "filling": "{5,5}", "fn": "sum_product", "para": "(vector<int> numbers)", "pass": false}
{"task_id": "CPP/8", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> sum_product(vector<int> numbers){\n    int sum=0,product=1;\n    for (int i=0;i<numbers.size();i++)\n    {\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum,product};\n}\nint main(){\n\tauto result = sum_product(<FILL_ME>);\n\tassert(issame(result,{10,10}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n\n\n", "filling": "{5, 5}", "fn": "sum_product", "para": "(vector<int> numbers)", "pass": false}
{"task_id": "CPP/8", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> sum_product(vector<int> numbers){\n    int sum=0,product=1;\n    for (int i=0;i<numbers.size();i++)\n    {\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum,product};\n}\nint main(){\n\tauto result = sum_product(<FILL_ME>);\n\tassert(issame(result,{10,10}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n\n\n", "filling": "{5, 5}", "fn": "sum_product", "para": "(vector<int> numbers)", "pass": false}
{"task_id": "CPP/8", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> sum_product(vector<int> numbers){\n    int sum=0,product=1;\n    for (int i=0;i<numbers.size();i++)\n    {\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum,product};\n}\nint main(){\n\tauto result = sum_product(<FILL_ME>);\n\tassert(issame(result,{10,10}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n\n\n", "filling": "vector<int>{5, 5}", "fn": "sum_product", "para": "(vector<int> numbers)", "pass": false}
{"task_id": "CPP/8", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> sum_product(vector<int> numbers){\n    int sum=0,product=1;\n    for (int i=0;i<numbers.size();i++)\n    {\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum,product};\n}\nint main(){\n\tauto result = sum_product(<FILL_ME>);\n\tassert(issame(result,{3+5+7,3*5*7}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n\n\n", "filling": "{3, 5, 7}", "fn": "sum_product", "para": "(vector<int> numbers)", "pass": true}
{"task_id": "CPP/8", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> sum_product(vector<int> numbers){\n    int sum=0,product=1;\n    for (int i=0;i<numbers.size();i++)\n    {\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum,product};\n}\nint main(){\n\tauto result = sum_product(<FILL_ME>);\n\tassert(issame(result,{3+5+7,3*5*7}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n\n\n", "filling": "{3,5,7}", "fn": "sum_product", "para": "(vector<int> numbers)", "pass": true}
{"task_id": "CPP/8", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> sum_product(vector<int> numbers){\n    int sum=0,product=1;\n    for (int i=0;i<numbers.size();i++)\n    {\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum,product};\n}\nint main(){\n\tauto result = sum_product(<FILL_ME>);\n\tassert(issame(result,{3+5+7,3*5*7}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n\n\n", "filling": "{3, 5, 7}", "fn": "sum_product", "para": "(vector<int> numbers)", "pass": true}
{"task_id": "CPP/8", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> sum_product(vector<int> numbers){\n    int sum=0,product=1;\n    for (int i=0;i<numbers.size();i++)\n    {\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum,product};\n}\nint main(){\n\tauto result = sum_product(<FILL_ME>);\n\tassert(issame(result,{3+5+7,3*5*7}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n\n\n", "filling": "{3, 5, 7}", "fn": "sum_product", "para": "(vector<int> numbers)", "pass": true}
{"task_id": "CPP/8", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> sum_product(vector<int> numbers){\n    int sum=0,product=1;\n    for (int i=0;i<numbers.size();i++)\n    {\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum,product};\n}\nint main(){\n\tauto result = sum_product(<FILL_ME>);\n\tassert(issame(result,{3+5+7,3*5*7}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n\n\n", "filling": "{3, 5, 7}", "fn": "sum_product", "para": "(vector<int> numbers)", "pass": true}
{"task_id": "CPP/8", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> sum_product(vector<int> numbers){\n    int sum=0,product=1;\n    for (int i=0;i<numbers.size();i++)\n    {\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum,product};\n}\nint main(){\n\tauto result = sum_product(<FILL_ME>);\n\tassert(issame(result,{100,0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n\n\n", "filling": "{100,0}", "fn": "sum_product", "para": "(vector<int> numbers)", "pass": true}
{"task_id": "CPP/8", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> sum_product(vector<int> numbers){\n    int sum=0,product=1;\n    for (int i=0;i<numbers.size();i++)\n    {\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum,product};\n}\nint main(){\n\tauto result = sum_product(<FILL_ME>);\n\tassert(issame(result,{100,0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n\n\n", "filling": "{100,0}", "fn": "sum_product", "para": "(vector<int> numbers)", "pass": true}
{"task_id": "CPP/8", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> sum_product(vector<int> numbers){\n    int sum=0,product=1;\n    for (int i=0;i<numbers.size();i++)\n    {\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum,product};\n}\nint main(){\n\tauto result = sum_product(<FILL_ME>);\n\tassert(issame(result,{100,0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n\n\n", "filling": "{100,0}", "fn": "sum_product", "para": "(vector<int> numbers)", "pass": true}
{"task_id": "CPP/8", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> sum_product(vector<int> numbers){\n    int sum=0,product=1;\n    for (int i=0;i<numbers.size();i++)\n    {\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum,product};\n}\nint main(){\n\tauto result = sum_product(<FILL_ME>);\n\tassert(issame(result,{100,0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n\n\n", "filling": "{100,0}", "fn": "sum_product", "para": "(vector<int> numbers)", "pass": true}
{"task_id": "CPP/8", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> sum_product(vector<int> numbers){\n    int sum=0,product=1;\n    for (int i=0;i<numbers.size();i++)\n    {\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum,product};\n}\nint main(){\n\tauto result = sum_product(<FILL_ME>);\n\tassert(issame(result,{100,0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n\n\n", "filling": "{100,0}", "fn": "sum_product", "para": "(vector<int> numbers)", "pass": true}
{"task_id": "CPP/8", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> sum_product(vector<int> numbers){\n    int sum=0,product=1;\n    for (int i=0;i<numbers.size();i++)\n    {\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum,product};\n}\nint main(){\n\tauto result = sum_product(<FILL_ME>);\n\tassert(issame(result,{0,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n\n\n", "filling": "{0, 1}", "fn": "sum_product", "para": "(vector<int> numbers)", "pass": false}
{"task_id": "CPP/8", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> sum_product(vector<int> numbers){\n    int sum=0,product=1;\n    for (int i=0;i<numbers.size();i++)\n    {\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum,product};\n}\nint main(){\n\tauto result = sum_product(<FILL_ME>);\n\tassert(issame(result,{0,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n\n\n", "filling": "{0,1}", "fn": "sum_product", "para": "(vector<int> numbers)", "pass": false}
{"task_id": "CPP/8", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> sum_product(vector<int> numbers){\n    int sum=0,product=1;\n    for (int i=0;i<numbers.size();i++)\n    {\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum,product};\n}\nint main(){\n\tauto result = sum_product(<FILL_ME>);\n\tassert(issame(result,{0,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n\n\n", "filling": "{0, 1}", "fn": "sum_product", "para": "(vector<int> numbers)", "pass": false}
{"task_id": "CPP/8", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> sum_product(vector<int> numbers){\n    int sum=0,product=1;\n    for (int i=0;i<numbers.size();i++)\n    {\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum,product};\n}\nint main(){\n\tauto result = sum_product(<FILL_ME>);\n\tassert(issame(result,{0,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n\n\n", "filling": "{0,1}", "fn": "sum_product", "para": "(vector<int> numbers)", "pass": false}
{"task_id": "CPP/8", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> sum_product(vector<int> numbers){\n    int sum=0,product=1;\n    for (int i=0;i<numbers.size();i++)\n    {\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum,product};\n}\nint main(){\n\tauto result = sum_product(<FILL_ME>);\n\tassert(issame(result,{0,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n\n\n", "filling": "{0,1}", "fn": "sum_product", "para": "(vector<int> numbers)", "pass": false}
{"task_id": "CPP/8", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> sum_product(vector<int> numbers){\n    int sum=0,product=1;\n    for (int i=0;i<numbers.size();i++)\n    {\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum,product};\n}\nint main(){\n\tauto result = sum_product(<FILL_ME>);\n\tassert(issame(result,{3,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n\n\n", "filling": "vector<int>{3, 1}", "fn": "sum_product", "para": "(vector<int> numbers)", "pass": false}
{"task_id": "CPP/8", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> sum_product(vector<int> numbers){\n    int sum=0,product=1;\n    for (int i=0;i<numbers.size();i++)\n    {\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum,product};\n}\nint main(){\n\tauto result = sum_product(<FILL_ME>);\n\tassert(issame(result,{3,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n\n\n", "filling": "{1, 2}", "fn": "sum_product", "para": "(vector<int> numbers)", "pass": false}
{"task_id": "CPP/8", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> sum_product(vector<int> numbers){\n    int sum=0,product=1;\n    for (int i=0;i<numbers.size();i++)\n    {\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum,product};\n}\nint main(){\n\tauto result = sum_product(<FILL_ME>);\n\tassert(issame(result,{3,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n\n\n", "filling": "{1, 2}", "fn": "sum_product", "para": "(vector<int> numbers)", "pass": false}
{"task_id": "CPP/8", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> sum_product(vector<int> numbers){\n    int sum=0,product=1;\n    for (int i=0;i<numbers.size();i++)\n    {\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum,product};\n}\nint main(){\n\tauto result = sum_product(<FILL_ME>);\n\tassert(issame(result,{3,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n\n\n", "filling": "{2, 1}", "fn": "sum_product", "para": "(vector<int> numbers)", "pass": false}
{"task_id": "CPP/8", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> sum_product(vector<int> numbers){\n    int sum=0,product=1;\n    for (int i=0;i<numbers.size();i++)\n    {\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum,product};\n}\nint main(){\n\tauto result = sum_product(<FILL_ME>);\n\tassert(issame(result,{3,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n\n\n", "filling": "vector<int>{2, 1}", "fn": "sum_product", "para": "(vector<int> numbers)", "pass": false}
{"task_id": "CPP/9", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> rolling_max(vector<int> numbers){\n    vector<int> out;\n    int max=0;\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (numbers[i]>max) max=numbers[i];\n        out.push_back(max);\n    }\n    return out;\n}\nint main(){\n\tauto result = rolling_max(<FILL_ME>);\n\tassert(issame(result,{4,4,4,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "vector<int>{1, 2, 4, 3}", "fn": "rolling_max", "para": "(vector<int> numbers)", "pass": false}
{"task_id": "CPP/9", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> rolling_max(vector<int> numbers){\n    vector<int> out;\n    int max=0;\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (numbers[i]>max) max=numbers[i];\n        out.push_back(max);\n    }\n    return out;\n}\nint main(){\n\tauto result = rolling_max(<FILL_ME>);\n\tassert(issame(result,{4,4,4,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "vector<int>{1, 2, 4, 3}", "fn": "rolling_max", "para": "(vector<int> numbers)", "pass": false}
{"task_id": "CPP/9", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> rolling_max(vector<int> numbers){\n    vector<int> out;\n    int max=0;\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (numbers[i]>max) max=numbers[i];\n        out.push_back(max);\n    }\n    return out;\n}\nint main(){\n\tauto result = rolling_max(<FILL_ME>);\n\tassert(issame(result,{4,4,4,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "vector<int>{1, 2, 3, 4}", "fn": "rolling_max", "para": "(vector<int> numbers)", "pass": false}
{"task_id": "CPP/9", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> rolling_max(vector<int> numbers){\n    vector<int> out;\n    int max=0;\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (numbers[i]>max) max=numbers[i];\n        out.push_back(max);\n    }\n    return out;\n}\nint main(){\n\tauto result = rolling_max(<FILL_ME>);\n\tassert(issame(result,{4,4,4,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "{1, 2, 4, 3}", "fn": "rolling_max", "para": "(vector<int> numbers)", "pass": false}
{"task_id": "CPP/9", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> rolling_max(vector<int> numbers){\n    vector<int> out;\n    int max=0;\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (numbers[i]>max) max=numbers[i];\n        out.push_back(max);\n    }\n    return out;\n}\nint main(){\n\tauto result = rolling_max(<FILL_ME>);\n\tassert(issame(result,{4,4,4,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "vector<int>{1, 2, 4, 3}", "fn": "rolling_max", "para": "(vector<int> numbers)", "pass": false}
{"task_id": "CPP/9", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> rolling_max(vector<int> numbers){\n    vector<int> out;\n    int max=0;\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (numbers[i]>max) max=numbers[i];\n        out.push_back(max);\n    }\n    return out;\n}\nint main(){\n\tauto result = rolling_max(<FILL_ME>);\n\tassert(issame(result,{1,2,3,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "vector<int>{1, 2, 3, 4}", "fn": "rolling_max", "para": "(vector<int> numbers)", "pass": true}
{"task_id": "CPP/9", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> rolling_max(vector<int> numbers){\n    vector<int> out;\n    int max=0;\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (numbers[i]>max) max=numbers[i];\n        out.push_back(max);\n    }\n    return out;\n}\nint main(){\n\tauto result = rolling_max(<FILL_ME>);\n\tassert(issame(result,{1,2,3,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "{1, 2, 3, 4}", "fn": "rolling_max", "para": "(vector<int> numbers)", "pass": true}
{"task_id": "CPP/9", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> rolling_max(vector<int> numbers){\n    vector<int> out;\n    int max=0;\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (numbers[i]>max) max=numbers[i];\n        out.push_back(max);\n    }\n    return out;\n}\nint main(){\n\tauto result = rolling_max(<FILL_ME>);\n\tassert(issame(result,{1,2,3,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "vector<int>{1, 2, 3, 4}", "fn": "rolling_max", "para": "(vector<int> numbers)", "pass": true}
{"task_id": "CPP/9", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> rolling_max(vector<int> numbers){\n    vector<int> out;\n    int max=0;\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (numbers[i]>max) max=numbers[i];\n        out.push_back(max);\n    }\n    return out;\n}\nint main(){\n\tauto result = rolling_max(<FILL_ME>);\n\tassert(issame(result,{1,2,3,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "{1, 2, 3, 4}", "fn": "rolling_max", "para": "(vector<int> numbers)", "pass": true}
{"task_id": "CPP/9", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> rolling_max(vector<int> numbers){\n    vector<int> out;\n    int max=0;\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (numbers[i]>max) max=numbers[i];\n        out.push_back(max);\n    }\n    return out;\n}\nint main(){\n\tauto result = rolling_max(<FILL_ME>);\n\tassert(issame(result,{1,2,3,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "{1, 2, 3, 4}", "fn": "rolling_max", "para": "(vector<int> numbers)", "pass": true}
{"task_id": "CPP/9", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> rolling_max(vector<int> numbers){\n    vector<int> out;\n    int max=0;\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (numbers[i]>max) max=numbers[i];\n        out.push_back(max);\n    }\n    return out;\n}\nint main(){\n\tauto result = rolling_max(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "{10, 5, 15, 3, 20, 1}", "fn": "rolling_max", "para": "(vector<int> numbers)", "pass": false}
{"task_id": "CPP/9", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> rolling_max(vector<int> numbers){\n    vector<int> out;\n    int max=0;\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (numbers[i]>max) max=numbers[i];\n        out.push_back(max);\n    }\n    return out;\n}\nint main(){\n\tauto result = rolling_max(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "{10, 5, 15, 3, 20, 1}", "fn": "rolling_max", "para": "(vector<int> numbers)", "pass": false}
{"task_id": "CPP/9", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> rolling_max(vector<int> numbers){\n    vector<int> out;\n    int max=0;\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (numbers[i]>max) max=numbers[i];\n        out.push_back(max);\n    }\n    return out;\n}\nint main(){\n\tauto result = rolling_max(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "{10, 5, 15, 3, 20, 1}", "fn": "rolling_max", "para": "(vector<int> numbers)", "pass": false}
{"task_id": "CPP/9", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> rolling_max(vector<int> numbers){\n    vector<int> out;\n    int max=0;\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (numbers[i]>max) max=numbers[i];\n        out.push_back(max);\n    }\n    return out;\n}\nint main(){\n\tauto result = rolling_max(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "{10, 5, 15, 3, 20, 1}", "fn": "rolling_max", "para": "(vector<int> numbers)", "pass": false}
{"task_id": "CPP/9", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> rolling_max(vector<int> numbers){\n    vector<int> out;\n    int max=0;\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (numbers[i]>max) max=numbers[i];\n        out.push_back(max);\n    }\n    return out;\n}\nint main(){\n\tauto result = rolling_max(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "{10, 5, 15, 3, 20, 1}", "fn": "rolling_max", "para": "(vector<int> numbers)", "pass": false}
{"task_id": "CPP/9", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> rolling_max(vector<int> numbers){\n    vector<int> out;\n    int max=0;\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (numbers[i]>max) max=numbers[i];\n        out.push_back(max);\n    }\n    return out;\n}\nint main(){\n\tauto result = rolling_max(<FILL_ME>);\n\tassert(issame(result,{3,3,3,100,100}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "{1, 3, 2, 100, 99}", "fn": "rolling_max", "para": "(vector<int> numbers)", "pass": false}
{"task_id": "CPP/9", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> rolling_max(vector<int> numbers){\n    vector<int> out;\n    int max=0;\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (numbers[i]>max) max=numbers[i];\n        out.push_back(max);\n    }\n    return out;\n}\nint main(){\n\tauto result = rolling_max(<FILL_ME>);\n\tassert(issame(result,{3,3,3,100,100}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "vector<int>{1, 3, 2, 100, 99}", "fn": "rolling_max", "para": "(vector<int> numbers)", "pass": false}
{"task_id": "CPP/9", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> rolling_max(vector<int> numbers){\n    vector<int> out;\n    int max=0;\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (numbers[i]>max) max=numbers[i];\n        out.push_back(max);\n    }\n    return out;\n}\nint main(){\n\tauto result = rolling_max(<FILL_ME>);\n\tassert(issame(result,{3,3,3,100,100}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "vector<int>{1, 3, 2, 100, 99}", "fn": "rolling_max", "para": "(vector<int> numbers)", "pass": false}
{"task_id": "CPP/9", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> rolling_max(vector<int> numbers){\n    vector<int> out;\n    int max=0;\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (numbers[i]>max) max=numbers[i];\n        out.push_back(max);\n    }\n    return out;\n}\nint main(){\n\tauto result = rolling_max(<FILL_ME>);\n\tassert(issame(result,{3,3,3,100,100}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "vector<int>{1, 3, 2, 100, 99}", "fn": "rolling_max", "para": "(vector<int> numbers)", "pass": false}
{"task_id": "CPP/9", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> rolling_max(vector<int> numbers){\n    vector<int> out;\n    int max=0;\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (numbers[i]>max) max=numbers[i];\n        out.push_back(max);\n    }\n    return out;\n}\nint main(){\n\tauto result = rolling_max(<FILL_ME>);\n\tassert(issame(result,{3,3,3,100,100}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "vector<int>{1, 3, 2, 100, 99}", "fn": "rolling_max", "para": "(vector<int> numbers)", "pass": false}
{"task_id": "CPP/11", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_xor(string a,string b){\n    string output=\"\";\n    for (int i=0;(i<a.length() and i<b.length());i++)\n    {\n        if (i<a.length() and i<b.length())\n        {\n            if (a[i]== b[i]) \n            {\n                output+='0';\n            }  \n            else output+='1';\n        }\n        else\n        {\n            if (i>=a.length()) \n            {\n            output+=b[i];\n            }\n            else output+=a[i];\n        }\n    }\n    return output;\n}\nint main(){\n\tauto result = string_xor(<FILL_ME>);\n\tassert(result==\"010010\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"011001\", \"001011\"", "fn": "string_xor", "para": "(string a,string b)", "pass": true}
{"task_id": "CPP/11", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_xor(string a,string b){\n    string output=\"\";\n    for (int i=0;(i<a.length() and i<b.length());i++)\n    {\n        if (i<a.length() and i<b.length())\n        {\n            if (a[i]== b[i]) \n            {\n                output+='0';\n            }  \n            else output+='1';\n        }\n        else\n        {\n            if (i>=a.length()) \n            {\n            output+=b[i];\n            }\n            else output+=a[i];\n        }\n    }\n    return output;\n}\nint main(){\n\tauto result = string_xor(<FILL_ME>);\n\tassert(result==\"010010\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"011001\", \"001011\"", "fn": "string_xor", "para": "(string a,string b)", "pass": true}
{"task_id": "CPP/11", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_xor(string a,string b){\n    string output=\"\";\n    for (int i=0;(i<a.length() and i<b.length());i++)\n    {\n        if (i<a.length() and i<b.length())\n        {\n            if (a[i]== b[i]) \n            {\n                output+='0';\n            }  \n            else output+='1';\n        }\n        else\n        {\n            if (i>=a.length()) \n            {\n            output+=b[i];\n            }\n            else output+=a[i];\n        }\n    }\n    return output;\n}\nint main(){\n\tauto result = string_xor(<FILL_ME>);\n\tassert(result==\"010010\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"011001\", \"001011\"", "fn": "string_xor", "para": "(string a,string b)", "pass": true}
{"task_id": "CPP/11", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_xor(string a,string b){\n    string output=\"\";\n    for (int i=0;(i<a.length() and i<b.length());i++)\n    {\n        if (i<a.length() and i<b.length())\n        {\n            if (a[i]== b[i]) \n            {\n                output+='0';\n            }  \n            else output+='1';\n        }\n        else\n        {\n            if (i>=a.length()) \n            {\n            output+=b[i];\n            }\n            else output+=a[i];\n        }\n    }\n    return output;\n}\nint main(){\n\tauto result = string_xor(<FILL_ME>);\n\tassert(result==\"010010\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"011001\", \"001011\"", "fn": "string_xor", "para": "(string a,string b)", "pass": true}
{"task_id": "CPP/11", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_xor(string a,string b){\n    string output=\"\";\n    for (int i=0;(i<a.length() and i<b.length());i++)\n    {\n        if (i<a.length() and i<b.length())\n        {\n            if (a[i]== b[i]) \n            {\n                output+='0';\n            }  \n            else output+='1';\n        }\n        else\n        {\n            if (i>=a.length()) \n            {\n            output+=b[i];\n            }\n            else output+=a[i];\n        }\n    }\n    return output;\n}\nint main(){\n\tauto result = string_xor(<FILL_ME>);\n\tassert(result==\"010010\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"011001\", \"001011\"", "fn": "string_xor", "para": "(string a,string b)", "pass": true}
{"task_id": "CPP/11", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_xor(string a,string b){\n    string output=\"\";\n    for (int i=0;(i<a.length() and i<b.length());i++)\n    {\n        if (i<a.length() and i<b.length())\n        {\n            if (a[i]== b[i]) \n            {\n                output+='0';\n            }  \n            else output+='1';\n        }\n        else\n        {\n            if (i>=a.length()) \n            {\n            output+=b[i];\n            }\n            else output+=a[i];\n        }\n    }\n    return output;\n}\nint main(){\n\tauto result = string_xor(<FILL_ME>);\n\tassert(result==\"0\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"10101010\", \"10101010\"", "fn": "string_xor", "para": "(string a,string b)", "pass": false}
{"task_id": "CPP/11", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_xor(string a,string b){\n    string output=\"\";\n    for (int i=0;(i<a.length() and i<b.length());i++)\n    {\n        if (i<a.length() and i<b.length())\n        {\n            if (a[i]== b[i]) \n            {\n                output+='0';\n            }  \n            else output+='1';\n        }\n        else\n        {\n            if (i>=a.length()) \n            {\n            output+=b[i];\n            }\n            else output+=a[i];\n        }\n    }\n    return output;\n}\nint main(){\n\tauto result = string_xor(<FILL_ME>);\n\tassert(result==\"0\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"10101010\",\"10101010\"", "fn": "string_xor", "para": "(string a,string b)", "pass": false}
{"task_id": "CPP/11", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_xor(string a,string b){\n    string output=\"\";\n    for (int i=0;(i<a.length() and i<b.length());i++)\n    {\n        if (i<a.length() and i<b.length())\n        {\n            if (a[i]== b[i]) \n            {\n                output+='0';\n            }  \n            else output+='1';\n        }\n        else\n        {\n            if (i>=a.length()) \n            {\n            output+=b[i];\n            }\n            else output+=a[i];\n        }\n    }\n    return output;\n}\nint main(){\n\tauto result = string_xor(<FILL_ME>);\n\tassert(result==\"0\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"10101010\",\"10101010\"", "fn": "string_xor", "para": "(string a,string b)", "pass": false}
{"task_id": "CPP/11", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_xor(string a,string b){\n    string output=\"\";\n    for (int i=0;(i<a.length() and i<b.length());i++)\n    {\n        if (i<a.length() and i<b.length())\n        {\n            if (a[i]== b[i]) \n            {\n                output+='0';\n            }  \n            else output+='1';\n        }\n        else\n        {\n            if (i>=a.length()) \n            {\n            output+=b[i];\n            }\n            else output+=a[i];\n        }\n    }\n    return output;\n}\nint main(){\n\tauto result = string_xor(<FILL_ME>);\n\tassert(result==\"0\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "string(\"10101010\"),string(\"10101010\")", "fn": "string_xor", "para": "(string a,string b)", "pass": false}
{"task_id": "CPP/11", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_xor(string a,string b){\n    string output=\"\";\n    for (int i=0;(i<a.length() and i<b.length());i++)\n    {\n        if (i<a.length() and i<b.length())\n        {\n            if (a[i]== b[i]) \n            {\n                output+='0';\n            }  \n            else output+='1';\n        }\n        else\n        {\n            if (i>=a.length()) \n            {\n            output+=b[i];\n            }\n            else output+=a[i];\n        }\n    }\n    return output;\n}\nint main(){\n\tauto result = string_xor(<FILL_ME>);\n\tassert(result==\"0\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"10101010\",\"10101010\"", "fn": "string_xor", "para": "(string a,string b)", "pass": false}
{"task_id": "CPP/11", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_xor(string a,string b){\n    string output=\"\";\n    for (int i=0;(i<a.length() and i<b.length());i++)\n    {\n        if (i<a.length() and i<b.length())\n        {\n            if (a[i]== b[i]) \n            {\n                output+='0';\n            }  \n            else output+='1';\n        }\n        else\n        {\n            if (i>=a.length()) \n            {\n            output+=b[i];\n            }\n            else output+=a[i];\n        }\n    }\n    return output;\n}\nint main(){\n\tauto result = string_xor(<FILL_ME>);\n\tassert(result==\"0101\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "string(\"0110\"), string(\"0011\")", "fn": "string_xor", "para": "(string a,string b)", "pass": true}
{"task_id": "CPP/11", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_xor(string a,string b){\n    string output=\"\";\n    for (int i=0;(i<a.length() and i<b.length());i++)\n    {\n        if (i<a.length() and i<b.length())\n        {\n            if (a[i]== b[i]) \n            {\n                output+='0';\n            }  \n            else output+='1';\n        }\n        else\n        {\n            if (i>=a.length()) \n            {\n            output+=b[i];\n            }\n            else output+=a[i];\n        }\n    }\n    return output;\n}\nint main(){\n\tauto result = string_xor(<FILL_ME>);\n\tassert(result==\"0101\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "string(\"0110\"), string(\"0011\")", "fn": "string_xor", "para": "(string a,string b)", "pass": true}
{"task_id": "CPP/11", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_xor(string a,string b){\n    string output=\"\";\n    for (int i=0;(i<a.length() and i<b.length());i++)\n    {\n        if (i<a.length() and i<b.length())\n        {\n            if (a[i]== b[i]) \n            {\n                output+='0';\n            }  \n            else output+='1';\n        }\n        else\n        {\n            if (i>=a.length()) \n            {\n            output+=b[i];\n            }\n            else output+=a[i];\n        }\n    }\n    return output;\n}\nint main(){\n\tauto result = string_xor(<FILL_ME>);\n\tassert(result==\"0101\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "string(\"0110\"), string(\"0011\")", "fn": "string_xor", "para": "(string a,string b)", "pass": true}
{"task_id": "CPP/11", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_xor(string a,string b){\n    string output=\"\";\n    for (int i=0;(i<a.length() and i<b.length());i++)\n    {\n        if (i<a.length() and i<b.length())\n        {\n            if (a[i]== b[i]) \n            {\n                output+='0';\n            }  \n            else output+='1';\n        }\n        else\n        {\n            if (i>=a.length()) \n            {\n            output+=b[i];\n            }\n            else output+=a[i];\n        }\n    }\n    return output;\n}\nint main(){\n\tauto result = string_xor(<FILL_ME>);\n\tassert(result==\"0101\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "string(\"0110\"), string(\"0011\")", "fn": "string_xor", "para": "(string a,string b)", "pass": true}
{"task_id": "CPP/11", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_xor(string a,string b){\n    string output=\"\";\n    for (int i=0;(i<a.length() and i<b.length());i++)\n    {\n        if (i<a.length() and i<b.length())\n        {\n            if (a[i]== b[i]) \n            {\n                output+='0';\n            }  \n            else output+='1';\n        }\n        else\n        {\n            if (i>=a.length()) \n            {\n            output+=b[i];\n            }\n            else output+=a[i];\n        }\n    }\n    return output;\n}\nint main(){\n\tauto result = string_xor(<FILL_ME>);\n\tassert(result==\"0101\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "string(\"0110\"), string(\"0011\")", "fn": "string_xor", "para": "(string a,string b)", "pass": true}
{"task_id": "CPP/12", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring longest(vector<string> strings){\n    string out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].length()>out.length()) out=strings[i];\n    }\n    return out;\n}\nint main(){\n\tauto result = longest(<FILL_ME>);\n\tassert(result==\"zzzz\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"aaa\", \"bb\", \"ccc\", \"zzzz\"}", "fn": "longest", "para": "(vector<string> strings)", "pass": true}
{"task_id": "CPP/12", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring longest(vector<string> strings){\n    string out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].length()>out.length()) out=strings[i];\n    }\n    return out;\n}\nint main(){\n\tauto result = longest(<FILL_ME>);\n\tassert(result==\"zzzz\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"aaa\", \"bb\", \"ccc\", \"zzzz\"}", "fn": "longest", "para": "(vector<string> strings)", "pass": true}
{"task_id": "CPP/12", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring longest(vector<string> strings){\n    string out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].length()>out.length()) out=strings[i];\n    }\n    return out;\n}\nint main(){\n\tauto result = longest(<FILL_ME>);\n\tassert(result==\"zzzz\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"aaa\", \"bb\", \"ccc\", \"zzzz\"}", "fn": "longest", "para": "(vector<string> strings)", "pass": true}
{"task_id": "CPP/12", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring longest(vector<string> strings){\n    string out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].length()>out.length()) out=strings[i];\n    }\n    return out;\n}\nint main(){\n\tauto result = longest(<FILL_ME>);\n\tassert(result==\"zzzz\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"aaa\", \"bb\", \"ccc\", \"zzzz\"}", "fn": "longest", "para": "(vector<string> strings)", "pass": true}
{"task_id": "CPP/12", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring longest(vector<string> strings){\n    string out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].length()>out.length()) out=strings[i];\n    }\n    return out;\n}\nint main(){\n\tauto result = longest(<FILL_ME>);\n\tassert(result==\"zzzz\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"aaa\", \"bb\", \"ccc\", \"zzzz\"}", "fn": "longest", "para": "(vector<string> strings)", "pass": true}
{"task_id": "CPP/12", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring longest(vector<string> strings){\n    string out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].length()>out.length()) out=strings[i];\n    }\n    return out;\n}\nint main(){\n\tauto result = longest(<FILL_ME>);\n\tassert(result==\"\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"hello\", \"world\", \"how\", \"are\", \"you\"}", "fn": "longest", "para": "(vector<string> strings)", "pass": false}
{"task_id": "CPP/12", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring longest(vector<string> strings){\n    string out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].length()>out.length()) out=strings[i];\n    }\n    return out;\n}\nint main(){\n\tauto result = longest(<FILL_ME>);\n\tassert(result==\"\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"hello\", \"world\", \"how\", \"are\", \"you\"}", "fn": "longest", "para": "(vector<string> strings)", "pass": false}
{"task_id": "CPP/12", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring longest(vector<string> strings){\n    string out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].length()>out.length()) out=strings[i];\n    }\n    return out;\n}\nint main(){\n\tauto result = longest(<FILL_ME>);\n\tassert(result==\"\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{\"hello\", \"world\", \"how\", \"are\", \"you\"}", "fn": "longest", "para": "(vector<string> strings)", "pass": false}
{"task_id": "CPP/12", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring longest(vector<string> strings){\n    string out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].length()>out.length()) out=strings[i];\n    }\n    return out;\n}\nint main(){\n\tauto result = longest(<FILL_ME>);\n\tassert(result==\"\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"hello\", \"world\", \"how\", \"are\", \"you\"}", "fn": "longest", "para": "(vector<string> strings)", "pass": false}
{"task_id": "CPP/12", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring longest(vector<string> strings){\n    string out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].length()>out.length()) out=strings[i];\n    }\n    return out;\n}\nint main(){\n\tauto result = longest(<FILL_ME>);\n\tassert(result==\"\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{\"hello\", \"world\", \"how\", \"are\", \"you\"}", "fn": "longest", "para": "(vector<string> strings)", "pass": false}
{"task_id": "CPP/12", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring longest(vector<string> strings){\n    string out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].length()>out.length()) out=strings[i];\n    }\n    return out;\n}\nint main(){\n\tauto result = longest(<FILL_ME>);\n\tassert(result==\"x\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"x\", \"xy\", \"xyz\", \"w\"}", "fn": "longest", "para": "(vector<string> strings)", "pass": false}
{"task_id": "CPP/12", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring longest(vector<string> strings){\n    string out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].length()>out.length()) out=strings[i];\n    }\n    return out;\n}\nint main(){\n\tauto result = longest(<FILL_ME>);\n\tassert(result==\"x\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"x\", \"xy\", \"xyz\", \"w\"}", "fn": "longest", "para": "(vector<string> strings)", "pass": false}
{"task_id": "CPP/12", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring longest(vector<string> strings){\n    string out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].length()>out.length()) out=strings[i];\n    }\n    return out;\n}\nint main(){\n\tauto result = longest(<FILL_ME>);\n\tassert(result==\"x\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"x\", \"xy\", \"xyz\", \"w\"}", "fn": "longest", "para": "(vector<string> strings)", "pass": false}
{"task_id": "CPP/12", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring longest(vector<string> strings){\n    string out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].length()>out.length()) out=strings[i];\n    }\n    return out;\n}\nint main(){\n\tauto result = longest(<FILL_ME>);\n\tassert(result==\"x\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{\"x\", \"xy\", \"xyz\", \"w\"}", "fn": "longest", "para": "(vector<string> strings)", "pass": false}
{"task_id": "CPP/12", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring longest(vector<string> strings){\n    string out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].length()>out.length()) out=strings[i];\n    }\n    return out;\n}\nint main(){\n\tauto result = longest(<FILL_ME>);\n\tassert(result==\"x\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"x\", \"xy\", \"xyz\", \"w\"}", "fn": "longest", "para": "(vector<string> strings)", "pass": false}
{"task_id": "CPP/13", "code": "#include<stdio.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint greatest_common_divisor(int a, int b){\n    int out,m;\n    while (true){\n        if (a<b) \n        {\n            m=a;a=b;b=m;\n        }\n        a=a%b;\n        if (a==0) return b;\n    }\n}\nint main(){\n\tauto result = greatest_common_divisor(<FILL_ME>);\n\tassert(result==12);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "24, 36", "fn": "greatest_common_divisor", "para": "(int a, int b)", "pass": true}
{"task_id": "CPP/13", "code": "#include<stdio.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint greatest_common_divisor(int a, int b){\n    int out,m;\n    while (true){\n        if (a<b) \n        {\n            m=a;a=b;b=m;\n        }\n        a=a%b;\n        if (a==0) return b;\n    }\n}\nint main(){\n\tauto result = greatest_common_divisor(<FILL_ME>);\n\tassert(result==12);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "24, 36", "fn": "greatest_common_divisor", "para": "(int a, int b)", "pass": true}
{"task_id": "CPP/13", "code": "#include<stdio.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint greatest_common_divisor(int a, int b){\n    int out,m;\n    while (true){\n        if (a<b) \n        {\n            m=a;a=b;b=m;\n        }\n        a=a%b;\n        if (a==0) return b;\n    }\n}\nint main(){\n\tauto result = greatest_common_divisor(<FILL_ME>);\n\tassert(result==12);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "24, 36", "fn": "greatest_common_divisor", "para": "(int a, int b)", "pass": true}
{"task_id": "CPP/13", "code": "#include<stdio.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint greatest_common_divisor(int a, int b){\n    int out,m;\n    while (true){\n        if (a<b) \n        {\n            m=a;a=b;b=m;\n        }\n        a=a%b;\n        if (a==0) return b;\n    }\n}\nint main(){\n\tauto result = greatest_common_divisor(<FILL_ME>);\n\tassert(result==12);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "24, 36", "fn": "greatest_common_divisor", "para": "(int a, int b)", "pass": true}
{"task_id": "CPP/13", "code": "#include<stdio.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint greatest_common_divisor(int a, int b){\n    int out,m;\n    while (true){\n        if (a<b) \n        {\n            m=a;a=b;b=m;\n        }\n        a=a%b;\n        if (a==0) return b;\n    }\n}\nint main(){\n\tauto result = greatest_common_divisor(<FILL_ME>);\n\tassert(result==12);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "24, 36", "fn": "greatest_common_divisor", "para": "(int a, int b)", "pass": true}
{"task_id": "CPP/13", "code": "#include<stdio.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint greatest_common_divisor(int a, int b){\n    int out,m;\n    while (true){\n        if (a<b) \n        {\n            m=a;a=b;b=m;\n        }\n        a=a%b;\n        if (a==0) return b;\n    }\n}\nint main(){\n\tauto result = greatest_common_divisor(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10, 5", "fn": "greatest_common_divisor", "para": "(int a, int b)", "pass": true}
{"task_id": "CPP/13", "code": "#include<stdio.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint greatest_common_divisor(int a, int b){\n    int out,m;\n    while (true){\n        if (a<b) \n        {\n            m=a;a=b;b=m;\n        }\n        a=a%b;\n        if (a==0) return b;\n    }\n}\nint main(){\n\tauto result = greatest_common_divisor(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10, 5", "fn": "greatest_common_divisor", "para": "(int a, int b)", "pass": true}
{"task_id": "CPP/13", "code": "#include<stdio.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint greatest_common_divisor(int a, int b){\n    int out,m;\n    while (true){\n        if (a<b) \n        {\n            m=a;a=b;b=m;\n        }\n        a=a%b;\n        if (a==0) return b;\n    }\n}\nint main(){\n\tauto result = greatest_common_divisor(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10, 5", "fn": "greatest_common_divisor", "para": "(int a, int b)", "pass": true}
{"task_id": "CPP/13", "code": "#include<stdio.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint greatest_common_divisor(int a, int b){\n    int out,m;\n    while (true){\n        if (a<b) \n        {\n            m=a;a=b;b=m;\n        }\n        a=a%b;\n        if (a==0) return b;\n    }\n}\nint main(){\n\tauto result = greatest_common_divisor(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10, 5", "fn": "greatest_common_divisor", "para": "(int a, int b)", "pass": true}
{"task_id": "CPP/13", "code": "#include<stdio.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint greatest_common_divisor(int a, int b){\n    int out,m;\n    while (true){\n        if (a<b) \n        {\n            m=a;a=b;b=m;\n        }\n        a=a%b;\n        if (a==0) return b;\n    }\n}\nint main(){\n\tauto result = greatest_common_divisor(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "2, 5", "fn": "greatest_common_divisor", "para": "(int a, int b)", "pass": false}
{"task_id": "CPP/13", "code": "#include<stdio.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint greatest_common_divisor(int a, int b){\n    int out,m;\n    while (true){\n        if (a<b) \n        {\n            m=a;a=b;b=m;\n        }\n        a=a%b;\n        if (a==0) return b;\n    }\n}\nint main(){\n\tauto result = greatest_common_divisor(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10, 11", "fn": "greatest_common_divisor", "para": "(int a, int b)", "pass": true}
{"task_id": "CPP/13", "code": "#include<stdio.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint greatest_common_divisor(int a, int b){\n    int out,m;\n    while (true){\n        if (a<b) \n        {\n            m=a;a=b;b=m;\n        }\n        a=a%b;\n        if (a==0) return b;\n    }\n}\nint main(){\n\tauto result = greatest_common_divisor(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10, 11", "fn": "greatest_common_divisor", "para": "(int a, int b)", "pass": true}
{"task_id": "CPP/13", "code": "#include<stdio.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint greatest_common_divisor(int a, int b){\n    int out,m;\n    while (true){\n        if (a<b) \n        {\n            m=a;a=b;b=m;\n        }\n        a=a%b;\n        if (a==0) return b;\n    }\n}\nint main(){\n\tauto result = greatest_common_divisor(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10, 11", "fn": "greatest_common_divisor", "para": "(int a, int b)", "pass": true}
{"task_id": "CPP/13", "code": "#include<stdio.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint greatest_common_divisor(int a, int b){\n    int out,m;\n    while (true){\n        if (a<b) \n        {\n            m=a;a=b;b=m;\n        }\n        a=a%b;\n        if (a==0) return b;\n    }\n}\nint main(){\n\tauto result = greatest_common_divisor(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10, 11", "fn": "greatest_common_divisor", "para": "(int a, int b)", "pass": true}
{"task_id": "CPP/13", "code": "#include<stdio.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint greatest_common_divisor(int a, int b){\n    int out,m;\n    while (true){\n        if (a<b) \n        {\n            m=a;a=b;b=m;\n        }\n        a=a%b;\n        if (a==0) return b;\n    }\n}\nint main(){\n\tauto result = greatest_common_divisor(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10, 11", "fn": "greatest_common_divisor", "para": "(int a, int b)", "pass": true}
{"task_id": "CPP/13", "code": "#include<stdio.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint greatest_common_divisor(int a, int b){\n    int out,m;\n    while (true){\n        if (a<b) \n        {\n            m=a;a=b;b=m;\n        }\n        a=a%b;\n        if (a==0) return b;\n    }\n}\nint main(){\n\tauto result = greatest_common_divisor(<FILL_ME>);\n\tassert(result==7);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "21, 7", "fn": "greatest_common_divisor", "para": "(int a, int b)", "pass": true}
{"task_id": "CPP/13", "code": "#include<stdio.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint greatest_common_divisor(int a, int b){\n    int out,m;\n    while (true){\n        if (a<b) \n        {\n            m=a;a=b;b=m;\n        }\n        a=a%b;\n        if (a==0) return b;\n    }\n}\nint main(){\n\tauto result = greatest_common_divisor(<FILL_ME>);\n\tassert(result==7);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "21, 7", "fn": "greatest_common_divisor", "para": "(int a, int b)", "pass": true}
{"task_id": "CPP/13", "code": "#include<stdio.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint greatest_common_divisor(int a, int b){\n    int out,m;\n    while (true){\n        if (a<b) \n        {\n            m=a;a=b;b=m;\n        }\n        a=a%b;\n        if (a==0) return b;\n    }\n}\nint main(){\n\tauto result = greatest_common_divisor(<FILL_ME>);\n\tassert(result==7);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "21, 7", "fn": "greatest_common_divisor", "para": "(int a, int b)", "pass": true}
{"task_id": "CPP/13", "code": "#include<stdio.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint greatest_common_divisor(int a, int b){\n    int out,m;\n    while (true){\n        if (a<b) \n        {\n            m=a;a=b;b=m;\n        }\n        a=a%b;\n        if (a==0) return b;\n    }\n}\nint main(){\n\tauto result = greatest_common_divisor(<FILL_ME>);\n\tassert(result==7);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "21, 7", "fn": "greatest_common_divisor", "para": "(int a, int b)", "pass": true}
{"task_id": "CPP/13", "code": "#include<stdio.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint greatest_common_divisor(int a, int b){\n    int out,m;\n    while (true){\n        if (a<b) \n        {\n            m=a;a=b;b=m;\n        }\n        a=a%b;\n        if (a==0) return b;\n    }\n}\nint main(){\n\tauto result = greatest_common_divisor(<FILL_ME>);\n\tassert(result==7);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "21, 7", "fn": "greatest_common_divisor", "para": "(int a, int b)", "pass": true}
{"task_id": "CPP/14", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> all_prefixes(string str){\n    vector<string> out;\n    string current=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        current=current+str[i];\n        out.push_back(current);\n    }\n    return out;\n}\nint main(){\n\tauto result = all_prefixes(<FILL_ME>);\n\tassert(issame(result,{\"W\",\"WW\",\"WWW\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"WWW\"", "fn": "all_prefixes", "para": "(string str)", "pass": true}
{"task_id": "CPP/14", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> all_prefixes(string str){\n    vector<string> out;\n    string current=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        current=current+str[i];\n        out.push_back(current);\n    }\n    return out;\n}\nint main(){\n\tauto result = all_prefixes(<FILL_ME>);\n\tassert(issame(result,{\"W\",\"WW\",\"WWW\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"WWW\"", "fn": "all_prefixes", "para": "(string str)", "pass": true}
{"task_id": "CPP/14", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> all_prefixes(string str){\n    vector<string> out;\n    string current=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        current=current+str[i];\n        out.push_back(current);\n    }\n    return out;\n}\nint main(){\n\tauto result = all_prefixes(<FILL_ME>);\n\tassert(issame(result,{\"W\",\"WW\",\"WWW\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"WWW\"", "fn": "all_prefixes", "para": "(string str)", "pass": true}
{"task_id": "CPP/14", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> all_prefixes(string str){\n    vector<string> out;\n    string current=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        current=current+str[i];\n        out.push_back(current);\n    }\n    return out;\n}\nint main(){\n\tauto result = all_prefixes(<FILL_ME>);\n\tassert(issame(result,{\"W\",\"WW\",\"WWW\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"WWW\"", "fn": "all_prefixes", "para": "(string str)", "pass": true}
{"task_id": "CPP/14", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> all_prefixes(string str){\n    vector<string> out;\n    string current=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        current=current+str[i];\n        out.push_back(current);\n    }\n    return out;\n}\nint main(){\n\tauto result = all_prefixes(<FILL_ME>);\n\tassert(issame(result,{\"W\",\"WW\",\"WWW\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"WWW\"", "fn": "all_prefixes", "para": "(string str)", "pass": true}
{"task_id": "CPP/14", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> all_prefixes(string str){\n    vector<string> out;\n    string current=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        current=current+str[i];\n        out.push_back(current);\n    }\n    return out;\n}\nint main(){\n\tauto result = all_prefixes(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"\"", "fn": "all_prefixes", "para": "(string str)", "pass": true}
{"task_id": "CPP/14", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> all_prefixes(string str){\n    vector<string> out;\n    string current=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        current=current+str[i];\n        out.push_back(current);\n    }\n    return out;\n}\nint main(){\n\tauto result = all_prefixes(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Hello\"", "fn": "all_prefixes", "para": "(string str)", "pass": false}
{"task_id": "CPP/14", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> all_prefixes(string str){\n    vector<string> out;\n    string current=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        current=current+str[i];\n        out.push_back(current);\n    }\n    return out;\n}\nint main(){\n\tauto result = all_prefixes(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Hello\"", "fn": "all_prefixes", "para": "(string str)", "pass": false}
{"task_id": "CPP/14", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> all_prefixes(string str){\n    vector<string> out;\n    string current=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        current=current+str[i];\n        out.push_back(current);\n    }\n    return out;\n}\nint main(){\n\tauto result = all_prefixes(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"hello\"", "fn": "all_prefixes", "para": "(string str)", "pass": false}
{"task_id": "CPP/14", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> all_prefixes(string str){\n    vector<string> out;\n    string current=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        current=current+str[i];\n        out.push_back(current);\n    }\n    return out;\n}\nint main(){\n\tauto result = all_prefixes(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Hello\"", "fn": "all_prefixes", "para": "(string str)", "pass": false}
{"task_id": "CPP/14", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> all_prefixes(string str){\n    vector<string> out;\n    string current=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        current=current+str[i];\n        out.push_back(current);\n    }\n    return out;\n}\nint main(){\n\tauto result = all_prefixes(<FILL_ME>);\n\tassert(issame(result,{\"a\",\"as\",\"asd\",\"asdf\",\"asdfg\",\"asdfgh\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"asdfgh\"", "fn": "all_prefixes", "para": "(string str)", "pass": true}
{"task_id": "CPP/14", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> all_prefixes(string str){\n    vector<string> out;\n    string current=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        current=current+str[i];\n        out.push_back(current);\n    }\n    return out;\n}\nint main(){\n\tauto result = all_prefixes(<FILL_ME>);\n\tassert(issame(result,{\"a\",\"as\",\"asd\",\"asdf\",\"asdfg\",\"asdfgh\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"asdfgh\"", "fn": "all_prefixes", "para": "(string str)", "pass": true}
{"task_id": "CPP/14", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> all_prefixes(string str){\n    vector<string> out;\n    string current=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        current=current+str[i];\n        out.push_back(current);\n    }\n    return out;\n}\nint main(){\n\tauto result = all_prefixes(<FILL_ME>);\n\tassert(issame(result,{\"a\",\"as\",\"asd\",\"asdf\",\"asdfg\",\"asdfgh\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"asdfgh\"", "fn": "all_prefixes", "para": "(string str)", "pass": true}
{"task_id": "CPP/14", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> all_prefixes(string str){\n    vector<string> out;\n    string current=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        current=current+str[i];\n        out.push_back(current);\n    }\n    return out;\n}\nint main(){\n\tauto result = all_prefixes(<FILL_ME>);\n\tassert(issame(result,{\"a\",\"as\",\"asd\",\"asdf\",\"asdfg\",\"asdfgh\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"asdfgh\"", "fn": "all_prefixes", "para": "(string str)", "pass": true}
{"task_id": "CPP/14", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> all_prefixes(string str){\n    vector<string> out;\n    string current=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        current=current+str[i];\n        out.push_back(current);\n    }\n    return out;\n}\nint main(){\n\tauto result = all_prefixes(<FILL_ME>);\n\tassert(issame(result,{\"a\",\"as\",\"asd\",\"asdf\",\"asdfg\",\"asdfgh\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"asdfgh\"", "fn": "all_prefixes", "para": "(string str)", "pass": true}
{"task_id": "CPP/15", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring string_sequence(int n){\n    string out=\"0\";\n    for (int i=1;i<=n;i++)\n    out=out+\" \"+to_string(i);\n    return out;\n}\nint main(){\n\tauto result = string_sequence(<FILL_ME>);\n\tassert(result==\"012345678910\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10", "fn": "string_sequence", "para": "(int n)", "pass": false}
{"task_id": "CPP/15", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring string_sequence(int n){\n    string out=\"0\";\n    for (int i=1;i<=n;i++)\n    out=out+\" \"+to_string(i);\n    return out;\n}\nint main(){\n\tauto result = string_sequence(<FILL_ME>);\n\tassert(result==\"012345678910\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10", "fn": "string_sequence", "para": "(int n)", "pass": false}
{"task_id": "CPP/15", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring string_sequence(int n){\n    string out=\"0\";\n    for (int i=1;i<=n;i++)\n    out=out+\" \"+to_string(i);\n    return out;\n}\nint main(){\n\tauto result = string_sequence(<FILL_ME>);\n\tassert(result==\"012345678910\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10", "fn": "string_sequence", "para": "(int n)", "pass": false}
{"task_id": "CPP/15", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring string_sequence(int n){\n    string out=\"0\";\n    for (int i=1;i<=n;i++)\n    out=out+\" \"+to_string(i);\n    return out;\n}\nint main(){\n\tauto result = string_sequence(<FILL_ME>);\n\tassert(result==\"012345678910\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10", "fn": "string_sequence", "para": "(int n)", "pass": false}
{"task_id": "CPP/15", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring string_sequence(int n){\n    string out=\"0\";\n    for (int i=1;i<=n;i++)\n    out=out+\" \"+to_string(i);\n    return out;\n}\nint main(){\n\tauto result = string_sequence(<FILL_ME>);\n\tassert(result==\"012345678910\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10", "fn": "string_sequence", "para": "(int n)", "pass": false}
{"task_id": "CPP/15", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring string_sequence(int n){\n    string out=\"0\";\n    for (int i=1;i<=n;i++)\n    out=out+\" \"+to_string(i);\n    return out;\n}\nint main(){\n\tauto result = string_sequence(<FILL_ME>);\n\tassert(result==\"0123\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3", "fn": "string_sequence", "para": "(int n)", "pass": false}
{"task_id": "CPP/15", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring string_sequence(int n){\n    string out=\"0\";\n    for (int i=1;i<=n;i++)\n    out=out+\" \"+to_string(i);\n    return out;\n}\nint main(){\n\tauto result = string_sequence(<FILL_ME>);\n\tassert(result==\"0123\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3", "fn": "string_sequence", "para": "(int n)", "pass": false}
{"task_id": "CPP/15", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring string_sequence(int n){\n    string out=\"0\";\n    for (int i=1;i<=n;i++)\n    out=out+\" \"+to_string(i);\n    return out;\n}\nint main(){\n\tauto result = string_sequence(<FILL_ME>);\n\tassert(result==\"0123\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3", "fn": "string_sequence", "para": "(int n)", "pass": false}
{"task_id": "CPP/15", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring string_sequence(int n){\n    string out=\"0\";\n    for (int i=1;i<=n;i++)\n    out=out+\" \"+to_string(i);\n    return out;\n}\nint main(){\n\tauto result = string_sequence(<FILL_ME>);\n\tassert(result==\"0123\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3", "fn": "string_sequence", "para": "(int n)", "pass": false}
{"task_id": "CPP/15", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring string_sequence(int n){\n    string out=\"0\";\n    for (int i=1;i<=n;i++)\n    out=out+\" \"+to_string(i);\n    return out;\n}\nint main(){\n\tauto result = string_sequence(<FILL_ME>);\n\tassert(result==\"0123\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3", "fn": "string_sequence", "para": "(int n)", "pass": false}
{"task_id": "CPP/15", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring string_sequence(int n){\n    string out=\"0\";\n    for (int i=1;i<=n;i++)\n    out=out+\" \"+to_string(i);\n    return out;\n}\nint main(){\n\tauto result = string_sequence(<FILL_ME>);\n\tassert(result==\"0\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1", "fn": "string_sequence", "para": "(int n)", "pass": false}
{"task_id": "CPP/15", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring string_sequence(int n){\n    string out=\"0\";\n    for (int i=1;i<=n;i++)\n    out=out+\" \"+to_string(i);\n    return out;\n}\nint main(){\n\tauto result = string_sequence(<FILL_ME>);\n\tassert(result==\"0\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1", "fn": "string_sequence", "para": "(int n)", "pass": false}
{"task_id": "CPP/15", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring string_sequence(int n){\n    string out=\"0\";\n    for (int i=1;i<=n;i++)\n    out=out+\" \"+to_string(i);\n    return out;\n}\nint main(){\n\tauto result = string_sequence(<FILL_ME>);\n\tassert(result==\"0\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1", "fn": "string_sequence", "para": "(int n)", "pass": false}
{"task_id": "CPP/15", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring string_sequence(int n){\n    string out=\"0\";\n    for (int i=1;i<=n;i++)\n    out=out+\" \"+to_string(i);\n    return out;\n}\nint main(){\n\tauto result = string_sequence(<FILL_ME>);\n\tassert(result==\"0\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1", "fn": "string_sequence", "para": "(int n)", "pass": false}
{"task_id": "CPP/15", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring string_sequence(int n){\n    string out=\"0\";\n    for (int i=1;i<=n;i++)\n    out=out+\" \"+to_string(i);\n    return out;\n}\nint main(){\n\tauto result = string_sequence(<FILL_ME>);\n\tassert(result==\"0\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1", "fn": "string_sequence", "para": "(int n)", "pass": false}
{"task_id": "CPP/16", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_distinct_characters(string str){ \n    vector<char> distinct={};\n    transform(str.begin(),str.end(),str.begin(),::tolower);\n    for (int i=0;i<str.size();i++)\n    {\n        bool isin=false;\n        for (int j=0;j<distinct.size();j++)\n            if (distinct[j]==str[i])\n                isin=true;\n        if (isin==false) distinct.push_back(str[i]);\n\n    }\n    return distinct.size();\n}\nint main(){\n\tauto result = count_distinct_characters(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Hello\"", "fn": "count_distinct_characters", "para": "(string str)", "pass": false}
{"task_id": "CPP/16", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_distinct_characters(string str){ \n    vector<char> distinct={};\n    transform(str.begin(),str.end(),str.begin(),::tolower);\n    for (int i=0;i<str.size();i++)\n    {\n        bool isin=false;\n        for (int j=0;j<distinct.size();j++)\n            if (distinct[j]==str[i])\n                isin=true;\n        if (isin==false) distinct.push_back(str[i]);\n\n    }\n    return distinct.size();\n}\nint main(){\n\tauto result = count_distinct_characters(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"programming\"", "fn": "count_distinct_characters", "para": "(string str)", "pass": false}
{"task_id": "CPP/16", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_distinct_characters(string str){ \n    vector<char> distinct={};\n    transform(str.begin(),str.end(),str.begin(),::tolower);\n    for (int i=0;i<str.size();i++)\n    {\n        bool isin=false;\n        for (int j=0;j<distinct.size();j++)\n            if (distinct[j]==str[i])\n                isin=true;\n        if (isin==false) distinct.push_back(str[i]);\n\n    }\n    return distinct.size();\n}\nint main(){\n\tauto result = count_distinct_characters(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\"", "fn": "count_distinct_characters", "para": "(string str)", "pass": false}
{"task_id": "CPP/16", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_distinct_characters(string str){ \n    vector<char> distinct={};\n    transform(str.begin(),str.end(),str.begin(),::tolower);\n    for (int i=0;i<str.size();i++)\n    {\n        bool isin=false;\n        for (int j=0;j<distinct.size();j++)\n            if (distinct[j]==str[i])\n                isin=true;\n        if (isin==false) distinct.push_back(str[i]);\n\n    }\n    return distinct.size();\n}\nint main(){\n\tauto result = count_distinct_characters(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Hello\"", "fn": "count_distinct_characters", "para": "(string str)", "pass": false}
{"task_id": "CPP/16", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_distinct_characters(string str){ \n    vector<char> distinct={};\n    transform(str.begin(),str.end(),str.begin(),::tolower);\n    for (int i=0;i<str.size();i++)\n    {\n        bool isin=false;\n        for (int j=0;j<distinct.size();j++)\n            if (distinct[j]==str[i])\n                isin=true;\n        if (isin==false) distinct.push_back(str[i]);\n\n    }\n    return distinct.size();\n}\nint main(){\n\tauto result = count_distinct_characters(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\"", "fn": "count_distinct_characters", "para": "(string str)", "pass": false}
{"task_id": "CPP/16", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_distinct_characters(string str){ \n    vector<char> distinct={};\n    transform(str.begin(),str.end(),str.begin(),::tolower);\n    for (int i=0;i<str.size();i++)\n    {\n        bool isin=false;\n        for (int j=0;j<distinct.size();j++)\n            if (distinct[j]==str[i])\n                isin=true;\n        if (isin==false) distinct.push_back(str[i]);\n\n    }\n    return distinct.size();\n}\nint main(){\n\tauto result = count_distinct_characters(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"H\"", "fn": "count_distinct_characters", "para": "(string str)", "pass": true}
{"task_id": "CPP/16", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_distinct_characters(string str){ \n    vector<char> distinct={};\n    transform(str.begin(),str.end(),str.begin(),::tolower);\n    for (int i=0;i<str.size();i++)\n    {\n        bool isin=false;\n        for (int j=0;j<distinct.size();j++)\n            if (distinct[j]==str[i])\n                isin=true;\n        if (isin==false) distinct.push_back(str[i]);\n\n    }\n    return distinct.size();\n}\nint main(){\n\tauto result = count_distinct_characters(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"H\"", "fn": "count_distinct_characters", "para": "(string str)", "pass": true}
{"task_id": "CPP/16", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_distinct_characters(string str){ \n    vector<char> distinct={};\n    transform(str.begin(),str.end(),str.begin(),::tolower);\n    for (int i=0;i<str.size();i++)\n    {\n        bool isin=false;\n        for (int j=0;j<distinct.size();j++)\n            if (distinct[j]==str[i])\n                isin=true;\n        if (isin==false) distinct.push_back(str[i]);\n\n    }\n    return distinct.size();\n}\nint main(){\n\tauto result = count_distinct_characters(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"H\"", "fn": "count_distinct_characters", "para": "(string str)", "pass": true}
{"task_id": "CPP/16", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_distinct_characters(string str){ \n    vector<char> distinct={};\n    transform(str.begin(),str.end(),str.begin(),::tolower);\n    for (int i=0;i<str.size();i++)\n    {\n        bool isin=false;\n        for (int j=0;j<distinct.size();j++)\n            if (distinct[j]==str[i])\n                isin=true;\n        if (isin==false) distinct.push_back(str[i]);\n\n    }\n    return distinct.size();\n}\nint main(){\n\tauto result = count_distinct_characters(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"H\"", "fn": "count_distinct_characters", "para": "(string str)", "pass": true}
{"task_id": "CPP/16", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_distinct_characters(string str){ \n    vector<char> distinct={};\n    transform(str.begin(),str.end(),str.begin(),::tolower);\n    for (int i=0;i<str.size();i++)\n    {\n        bool isin=false;\n        for (int j=0;j<distinct.size();j++)\n            if (distinct[j]==str[i])\n                isin=true;\n        if (isin==false) distinct.push_back(str[i]);\n\n    }\n    return distinct.size();\n}\nint main(){\n\tauto result = count_distinct_characters(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"H\"", "fn": "count_distinct_characters", "para": "(string str)", "pass": true}
{"task_id": "CPP/16", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_distinct_characters(string str){ \n    vector<char> distinct={};\n    transform(str.begin(),str.end(),str.begin(),::tolower);\n    for (int i=0;i<str.size();i++)\n    {\n        bool isin=false;\n        for (int j=0;j<distinct.size();j++)\n            if (distinct[j]==str[i])\n                isin=true;\n        if (isin==false) distinct.push_back(str[i]);\n\n    }\n    return distinct.size();\n}\nint main(){\n\tauto result = count_distinct_characters(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\"", "fn": "count_distinct_characters", "para": "(string str)", "pass": false}
{"task_id": "CPP/16", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_distinct_characters(string str){ \n    vector<char> distinct={};\n    transform(str.begin(),str.end(),str.begin(),::tolower);\n    for (int i=0;i<str.size();i++)\n    {\n        bool isin=false;\n        for (int j=0;j<distinct.size();j++)\n            if (distinct[j]==str[i])\n                isin=true;\n        if (isin==false) distinct.push_back(str[i]);\n\n    }\n    return distinct.size();\n}\nint main(){\n\tauto result = count_distinct_characters(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\"", "fn": "count_distinct_characters", "para": "(string str)", "pass": false}
{"task_id": "CPP/16", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_distinct_characters(string str){ \n    vector<char> distinct={};\n    transform(str.begin(),str.end(),str.begin(),::tolower);\n    for (int i=0;i<str.size();i++)\n    {\n        bool isin=false;\n        for (int j=0;j<distinct.size();j++)\n            if (distinct[j]==str[i])\n                isin=true;\n        if (isin==false) distinct.push_back(str[i]);\n\n    }\n    return distinct.size();\n}\nint main(){\n\tauto result = count_distinct_characters(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"apple\"", "fn": "count_distinct_characters", "para": "(string str)", "pass": false}
{"task_id": "CPP/16", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_distinct_characters(string str){ \n    vector<char> distinct={};\n    transform(str.begin(),str.end(),str.begin(),::tolower);\n    for (int i=0;i<str.size();i++)\n    {\n        bool isin=false;\n        for (int j=0;j<distinct.size();j++)\n            if (distinct[j]==str[i])\n                isin=true;\n        if (isin==false) distinct.push_back(str[i]);\n\n    }\n    return distinct.size();\n}\nint main(){\n\tauto result = count_distinct_characters(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\"", "fn": "count_distinct_characters", "para": "(string str)", "pass": false}
{"task_id": "CPP/16", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_distinct_characters(string str){ \n    vector<char> distinct={};\n    transform(str.begin(),str.end(),str.begin(),::tolower);\n    for (int i=0;i<str.size();i++)\n    {\n        bool isin=false;\n        for (int j=0;j<distinct.size();j++)\n            if (distinct[j]==str[i])\n                isin=true;\n        if (isin==false) distinct.push_back(str[i]);\n\n    }\n    return distinct.size();\n}\nint main(){\n\tauto result = count_distinct_characters(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\"", "fn": "count_distinct_characters", "para": "(string str)", "pass": false}
{"task_id": "CPP/17", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> parse_music(string music_string){ \n    string current=\"\";\n    vector<int> out={};\n    if (music_string.length()>0)\n        music_string=music_string+' ';\n    for (int i=0;i<music_string.length();i++)\n    {\n        if (music_string[i]==' ')\n        {\n            if (current==\"o\") out.push_back(4);\n            if (current==\"o|\") out.push_back(2);\n            if (current==\".|\") out.push_back(1);\n            current=\"\";\n        }\n        else current+=music_string[i];\n    }\n    return out;\n}\nint main(){\n\tauto result = parse_music(<FILL_ME>);\n\tassert(issame(result,{2,2,1,1,4,4,4,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"o| o| .| .| o o o o\"", "fn": "parse_music", "para": "(string music_string)", "pass": true}
{"task_id": "CPP/17", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> parse_music(string music_string){ \n    string current=\"\";\n    vector<int> out={};\n    if (music_string.length()>0)\n        music_string=music_string+' ';\n    for (int i=0;i<music_string.length();i++)\n    {\n        if (music_string[i]==' ')\n        {\n            if (current==\"o\") out.push_back(4);\n            if (current==\"o|\") out.push_back(2);\n            if (current==\".|\") out.push_back(1);\n            current=\"\";\n        }\n        else current+=music_string[i];\n    }\n    return out;\n}\nint main(){\n\tauto result = parse_music(<FILL_ME>);\n\tassert(issame(result,{2,2,1,1,4,4,4,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"o| o| .| .| o o o o\"", "fn": "parse_music", "para": "(string music_string)", "pass": true}
{"task_id": "CPP/17", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> parse_music(string music_string){ \n    string current=\"\";\n    vector<int> out={};\n    if (music_string.length()>0)\n        music_string=music_string+' ';\n    for (int i=0;i<music_string.length();i++)\n    {\n        if (music_string[i]==' ')\n        {\n            if (current==\"o\") out.push_back(4);\n            if (current==\"o|\") out.push_back(2);\n            if (current==\".|\") out.push_back(1);\n            current=\"\";\n        }\n        else current+=music_string[i];\n    }\n    return out;\n}\nint main(){\n\tauto result = parse_music(<FILL_ME>);\n\tassert(issame(result,{2,2,1,1,4,4,4,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"o| o| .| .| o o o o\"", "fn": "parse_music", "para": "(string music_string)", "pass": true}
{"task_id": "CPP/17", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> parse_music(string music_string){ \n    string current=\"\";\n    vector<int> out={};\n    if (music_string.length()>0)\n        music_string=music_string+' ';\n    for (int i=0;i<music_string.length();i++)\n    {\n        if (music_string[i]==' ')\n        {\n            if (current==\"o\") out.push_back(4);\n            if (current==\"o|\") out.push_back(2);\n            if (current==\".|\") out.push_back(1);\n            current=\"\";\n        }\n        else current+=music_string[i];\n    }\n    return out;\n}\nint main(){\n\tauto result = parse_music(<FILL_ME>);\n\tassert(issame(result,{2,2,1,1,4,4,4,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"o| o| .| .| o o o o\"", "fn": "parse_music", "para": "(string music_string)", "pass": true}
{"task_id": "CPP/17", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> parse_music(string music_string){ \n    string current=\"\";\n    vector<int> out={};\n    if (music_string.length()>0)\n        music_string=music_string+' ';\n    for (int i=0;i<music_string.length();i++)\n    {\n        if (music_string[i]==' ')\n        {\n            if (current==\"o\") out.push_back(4);\n            if (current==\"o|\") out.push_back(2);\n            if (current==\".|\") out.push_back(1);\n            current=\"\";\n        }\n        else current+=music_string[i];\n    }\n    return out;\n}\nint main(){\n\tauto result = parse_music(<FILL_ME>);\n\tassert(issame(result,{2,2,1,1,4,4,4,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"o| o| .| .| o o o o\"", "fn": "parse_music", "para": "(string music_string)", "pass": true}
{"task_id": "CPP/17", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> parse_music(string music_string){ \n    string current=\"\";\n    vector<int> out={};\n    if (music_string.length()>0)\n        music_string=music_string+' ';\n    for (int i=0;i<music_string.length();i++)\n    {\n        if (music_string[i]==' ')\n        {\n            if (current==\"o\") out.push_back(4);\n            if (current==\"o|\") out.push_back(2);\n            if (current==\".|\") out.push_back(1);\n            current=\"\";\n        }\n        else current+=music_string[i];\n    }\n    return out;\n}\nint main(){\n\tauto result = parse_music(<FILL_ME>);\n\tassert(issame(result,{4,4,4,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"o o o o\"", "fn": "parse_music", "para": "(string music_string)", "pass": true}
{"task_id": "CPP/17", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> parse_music(string music_string){ \n    string current=\"\";\n    vector<int> out={};\n    if (music_string.length()>0)\n        music_string=music_string+' ';\n    for (int i=0;i<music_string.length();i++)\n    {\n        if (music_string[i]==' ')\n        {\n            if (current==\"o\") out.push_back(4);\n            if (current==\"o|\") out.push_back(2);\n            if (current==\".|\") out.push_back(1);\n            current=\"\";\n        }\n        else current+=music_string[i];\n    }\n    return out;\n}\nint main(){\n\tauto result = parse_music(<FILL_ME>);\n\tassert(issame(result,{4,4,4,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"o o o o\"", "fn": "parse_music", "para": "(string music_string)", "pass": true}
{"task_id": "CPP/17", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> parse_music(string music_string){ \n    string current=\"\";\n    vector<int> out={};\n    if (music_string.length()>0)\n        music_string=music_string+' ';\n    for (int i=0;i<music_string.length();i++)\n    {\n        if (music_string[i]==' ')\n        {\n            if (current==\"o\") out.push_back(4);\n            if (current==\"o|\") out.push_back(2);\n            if (current==\".|\") out.push_back(1);\n            current=\"\";\n        }\n        else current+=music_string[i];\n    }\n    return out;\n}\nint main(){\n\tauto result = parse_music(<FILL_ME>);\n\tassert(issame(result,{4,4,4,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"o o o o\"", "fn": "parse_music", "para": "(string music_string)", "pass": true}
{"task_id": "CPP/17", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> parse_music(string music_string){ \n    string current=\"\";\n    vector<int> out={};\n    if (music_string.length()>0)\n        music_string=music_string+' ';\n    for (int i=0;i<music_string.length();i++)\n    {\n        if (music_string[i]==' ')\n        {\n            if (current==\"o\") out.push_back(4);\n            if (current==\"o|\") out.push_back(2);\n            if (current==\".|\") out.push_back(1);\n            current=\"\";\n        }\n        else current+=music_string[i];\n    }\n    return out;\n}\nint main(){\n\tauto result = parse_music(<FILL_ME>);\n\tassert(issame(result,{4,4,4,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"o o o o\"", "fn": "parse_music", "para": "(string music_string)", "pass": true}
{"task_id": "CPP/17", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> parse_music(string music_string){ \n    string current=\"\";\n    vector<int> out={};\n    if (music_string.length()>0)\n        music_string=music_string+' ';\n    for (int i=0;i<music_string.length();i++)\n    {\n        if (music_string[i]==' ')\n        {\n            if (current==\"o\") out.push_back(4);\n            if (current==\"o|\") out.push_back(2);\n            if (current==\".|\") out.push_back(1);\n            current=\"\";\n        }\n        else current+=music_string[i];\n    }\n    return out;\n}\nint main(){\n\tauto result = parse_music(<FILL_ME>);\n\tassert(issame(result,{4,4,4,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"o o o o\"", "fn": "parse_music", "para": "(string music_string)", "pass": true}
{"task_id": "CPP/17", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> parse_music(string music_string){ \n    string current=\"\";\n    vector<int> out={};\n    if (music_string.length()>0)\n        music_string=music_string+' ';\n    for (int i=0;i<music_string.length();i++)\n    {\n        if (music_string[i]==' ')\n        {\n            if (current==\"o\") out.push_back(4);\n            if (current==\"o|\") out.push_back(2);\n            if (current==\".|\") out.push_back(1);\n            current=\"\";\n        }\n        else current+=music_string[i];\n    }\n    return out;\n}\nint main(){\n\tauto result = parse_music(<FILL_ME>);\n\tassert(issame(result,{2,1,2,1,4,2,4,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"o| .| o| .| o o\"", "fn": "parse_music", "para": "(string music_string)", "pass": false}
{"task_id": "CPP/17", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> parse_music(string music_string){ \n    string current=\"\";\n    vector<int> out={};\n    if (music_string.length()>0)\n        music_string=music_string+' ';\n    for (int i=0;i<music_string.length();i++)\n    {\n        if (music_string[i]==' ')\n        {\n            if (current==\"o\") out.push_back(4);\n            if (current==\"o|\") out.push_back(2);\n            if (current==\".|\") out.push_back(1);\n            current=\"\";\n        }\n        else current+=music_string[i];\n    }\n    return out;\n}\nint main(){\n\tauto result = parse_music(<FILL_ME>);\n\tassert(issame(result,{2,1,2,1,4,2,4,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"o| .| o| .| o o\"", "fn": "parse_music", "para": "(string music_string)", "pass": false}
{"task_id": "CPP/17", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> parse_music(string music_string){ \n    string current=\"\";\n    vector<int> out={};\n    if (music_string.length()>0)\n        music_string=music_string+' ';\n    for (int i=0;i<music_string.length();i++)\n    {\n        if (music_string[i]==' ')\n        {\n            if (current==\"o\") out.push_back(4);\n            if (current==\"o|\") out.push_back(2);\n            if (current==\".|\") out.push_back(1);\n            current=\"\";\n        }\n        else current+=music_string[i];\n    }\n    return out;\n}\nint main(){\n\tauto result = parse_music(<FILL_ME>);\n\tassert(issame(result,{2,1,2,1,4,2,4,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"o| .| o| .| o o\"", "fn": "parse_music", "para": "(string music_string)", "pass": false}
{"task_id": "CPP/17", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> parse_music(string music_string){ \n    string current=\"\";\n    vector<int> out={};\n    if (music_string.length()>0)\n        music_string=music_string+' ';\n    for (int i=0;i<music_string.length();i++)\n    {\n        if (music_string[i]==' ')\n        {\n            if (current==\"o\") out.push_back(4);\n            if (current==\"o|\") out.push_back(2);\n            if (current==\".|\") out.push_back(1);\n            current=\"\";\n        }\n        else current+=music_string[i];\n    }\n    return out;\n}\nint main(){\n\tauto result = parse_music(<FILL_ME>);\n\tassert(issame(result,{2,1,2,1,4,2,4,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"o| .| o| .| o o\"", "fn": "parse_music", "para": "(string music_string)", "pass": false}
{"task_id": "CPP/17", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> parse_music(string music_string){ \n    string current=\"\";\n    vector<int> out={};\n    if (music_string.length()>0)\n        music_string=music_string+' ';\n    for (int i=0;i<music_string.length();i++)\n    {\n        if (music_string[i]==' ')\n        {\n            if (current==\"o\") out.push_back(4);\n            if (current==\"o|\") out.push_back(2);\n            if (current==\".|\") out.push_back(1);\n            current=\"\";\n        }\n        else current+=music_string[i];\n    }\n    return out;\n}\nint main(){\n\tauto result = parse_music(<FILL_ME>);\n\tassert(issame(result,{2,1,2,1,4,2,4,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"o| .| o| .| o o\"", "fn": "parse_music", "para": "(string music_string)", "pass": false}
{"task_id": "CPP/17", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> parse_music(string music_string){ \n    string current=\"\";\n    vector<int> out={};\n    if (music_string.length()>0)\n        music_string=music_string+' ';\n    for (int i=0;i<music_string.length();i++)\n    {\n        if (music_string[i]==' ')\n        {\n            if (current==\"o\") out.push_back(4);\n            if (current==\"o|\") out.push_back(2);\n            if (current==\".|\") out.push_back(1);\n            current=\"\";\n        }\n        else current+=music_string[i];\n    }\n    return out;\n}\nint main(){\n\tauto result = parse_music(<FILL_ME>);\n\tassert(issame(result,{1,1,1,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"o o o o\"", "fn": "parse_music", "para": "(string music_string)", "pass": false}
{"task_id": "CPP/17", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> parse_music(string music_string){ \n    string current=\"\";\n    vector<int> out={};\n    if (music_string.length()>0)\n        music_string=music_string+' ';\n    for (int i=0;i<music_string.length();i++)\n    {\n        if (music_string[i]==' ')\n        {\n            if (current==\"o\") out.push_back(4);\n            if (current==\"o|\") out.push_back(2);\n            if (current==\".|\") out.push_back(1);\n            current=\"\";\n        }\n        else current+=music_string[i];\n    }\n    return out;\n}\nint main(){\n\tauto result = parse_music(<FILL_ME>);\n\tassert(issame(result,{1,1,1,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"o| o| o| o|\"", "fn": "parse_music", "para": "(string music_string)", "pass": false}
{"task_id": "CPP/17", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> parse_music(string music_string){ \n    string current=\"\";\n    vector<int> out={};\n    if (music_string.length()>0)\n        music_string=music_string+' ';\n    for (int i=0;i<music_string.length();i++)\n    {\n        if (music_string[i]==' ')\n        {\n            if (current==\"o\") out.push_back(4);\n            if (current==\"o|\") out.push_back(2);\n            if (current==\".|\") out.push_back(1);\n            current=\"\";\n        }\n        else current+=music_string[i];\n    }\n    return out;\n}\nint main(){\n\tauto result = parse_music(<FILL_ME>);\n\tassert(issame(result,{1,1,1,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"o| o| o| o|\"", "fn": "parse_music", "para": "(string music_string)", "pass": false}
{"task_id": "CPP/17", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> parse_music(string music_string){ \n    string current=\"\";\n    vector<int> out={};\n    if (music_string.length()>0)\n        music_string=music_string+' ';\n    for (int i=0;i<music_string.length();i++)\n    {\n        if (music_string[i]==' ')\n        {\n            if (current==\"o\") out.push_back(4);\n            if (current==\"o|\") out.push_back(2);\n            if (current==\".|\") out.push_back(1);\n            current=\"\";\n        }\n        else current+=music_string[i];\n    }\n    return out;\n}\nint main(){\n\tauto result = parse_music(<FILL_ME>);\n\tassert(issame(result,{1,1,1,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"o| o| o| o|\"", "fn": "parse_music", "para": "(string music_string)", "pass": false}
{"task_id": "CPP/17", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> parse_music(string music_string){ \n    string current=\"\";\n    vector<int> out={};\n    if (music_string.length()>0)\n        music_string=music_string+' ';\n    for (int i=0;i<music_string.length();i++)\n    {\n        if (music_string[i]==' ')\n        {\n            if (current==\"o\") out.push_back(4);\n            if (current==\"o|\") out.push_back(2);\n            if (current==\".|\") out.push_back(1);\n            current=\"\";\n        }\n        else current+=music_string[i];\n    }\n    return out;\n}\nint main(){\n\tauto result = parse_music(<FILL_ME>);\n\tassert(issame(result,{1,1,1,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"o| o| o| o|\"", "fn": "parse_music", "para": "(string music_string)", "pass": false}
{"task_id": "CPP/17", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> parse_music(string music_string){ \n    string current=\"\";\n    vector<int> out={};\n    if (music_string.length()>0)\n        music_string=music_string+' ';\n    for (int i=0;i<music_string.length();i++)\n    {\n        if (music_string[i]==' ')\n        {\n            if (current==\"o\") out.push_back(4);\n            if (current==\"o|\") out.push_back(2);\n            if (current==\".|\") out.push_back(1);\n            current=\"\";\n        }\n        else current+=music_string[i];\n    }\n    return out;\n}\nint main(){\n\tauto result = parse_music(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"o o o\"", "fn": "parse_music", "para": "(string music_string)", "pass": false}
{"task_id": "CPP/17", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> parse_music(string music_string){ \n    string current=\"\";\n    vector<int> out={};\n    if (music_string.length()>0)\n        music_string=music_string+' ';\n    for (int i=0;i<music_string.length();i++)\n    {\n        if (music_string[i]==' ')\n        {\n            if (current==\"o\") out.push_back(4);\n            if (current==\"o|\") out.push_back(2);\n            if (current==\".|\") out.push_back(1);\n            current=\"\";\n        }\n        else current+=music_string[i];\n    }\n    return out;\n}\nint main(){\n\tauto result = parse_music(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"o o o\"", "fn": "parse_music", "para": "(string music_string)", "pass": false}
{"task_id": "CPP/17", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> parse_music(string music_string){ \n    string current=\"\";\n    vector<int> out={};\n    if (music_string.length()>0)\n        music_string=music_string+' ';\n    for (int i=0;i<music_string.length();i++)\n    {\n        if (music_string[i]==' ')\n        {\n            if (current==\"o\") out.push_back(4);\n            if (current==\"o|\") out.push_back(2);\n            if (current==\".|\") out.push_back(1);\n            current=\"\";\n        }\n        else current+=music_string[i];\n    }\n    return out;\n}\nint main(){\n\tauto result = parse_music(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"o o o\"", "fn": "parse_music", "para": "(string music_string)", "pass": false}
{"task_id": "CPP/17", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> parse_music(string music_string){ \n    string current=\"\";\n    vector<int> out={};\n    if (music_string.length()>0)\n        music_string=music_string+' ';\n    for (int i=0;i<music_string.length();i++)\n    {\n        if (music_string[i]==' ')\n        {\n            if (current==\"o\") out.push_back(4);\n            if (current==\"o|\") out.push_back(2);\n            if (current==\".|\") out.push_back(1);\n            current=\"\";\n        }\n        else current+=music_string[i];\n    }\n    return out;\n}\nint main(){\n\tauto result = parse_music(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"o o o\"", "fn": "parse_music", "para": "(string music_string)", "pass": false}
{"task_id": "CPP/17", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> parse_music(string music_string){ \n    string current=\"\";\n    vector<int> out={};\n    if (music_string.length()>0)\n        music_string=music_string+' ';\n    for (int i=0;i<music_string.length();i++)\n    {\n        if (music_string[i]==' ')\n        {\n            if (current==\"o\") out.push_back(4);\n            if (current==\"o|\") out.push_back(2);\n            if (current==\".|\") out.push_back(1);\n            current=\"\";\n        }\n        else current+=music_string[i];\n    }\n    return out;\n}\nint main(){\n\tauto result = parse_music(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"o o o\"", "fn": "parse_music", "para": "(string music_string)", "pass": false}
{"task_id": "CPP/18", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint how_many_times(string str,string substring){\n    int out=0;\n    if (str.length()==0) return 0;\n    for (int i=0;i<=str.length()-substring.length();i++)\n    if (str.substr(i,substring.length())==substring)\n        out+=1;\n    return out;\n}\nint main(){\n\tauto result = how_many_times(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hellohellohellohello\", \"hello\"", "fn": "how_many_times", "para": "(string str,string substring)", "pass": true}
{"task_id": "CPP/18", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint how_many_times(string str,string substring){\n    int out=0;\n    if (str.length()==0) return 0;\n    for (int i=0;i<=str.length()-substring.length();i++)\n    if (str.substr(i,substring.length())==substring)\n        out+=1;\n    return out;\n}\nint main(){\n\tauto result = how_many_times(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hellohellohellohello\", \"hello\"", "fn": "how_many_times", "para": "(string str,string substring)", "pass": true}
{"task_id": "CPP/18", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint how_many_times(string str,string substring){\n    int out=0;\n    if (str.length()==0) return 0;\n    for (int i=0;i<=str.length()-substring.length();i++)\n    if (str.substr(i,substring.length())==substring)\n        out+=1;\n    return out;\n}\nint main(){\n\tauto result = how_many_times(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hellohellohellohello\", \"hello\"", "fn": "how_many_times", "para": "(string str,string substring)", "pass": true}
{"task_id": "CPP/18", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint how_many_times(string str,string substring){\n    int out=0;\n    if (str.length()==0) return 0;\n    for (int i=0;i<=str.length()-substring.length();i++)\n    if (str.substr(i,substring.length())==substring)\n        out+=1;\n    return out;\n}\nint main(){\n\tauto result = how_many_times(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hellohellohellohello\", \"hello\"", "fn": "how_many_times", "para": "(string str,string substring)", "pass": true}
{"task_id": "CPP/18", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint how_many_times(string str,string substring){\n    int out=0;\n    if (str.length()==0) return 0;\n    for (int i=0;i<=str.length()-substring.length();i++)\n    if (str.substr(i,substring.length())==substring)\n        out+=1;\n    return out;\n}\nint main(){\n\tauto result = how_many_times(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hellohellohellohello\", \"hello\"", "fn": "how_many_times", "para": "(string str,string substring)", "pass": true}
{"task_id": "CPP/18", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint how_many_times(string str,string substring){\n    int out=0;\n    if (str.length()==0) return 0;\n    for (int i=0;i<=str.length()-substring.length();i++)\n    if (str.substr(i,substring.length())==substring)\n        out+=1;\n    return out;\n}\nint main(){\n\tauto result = how_many_times(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello world\", \"hello\"", "fn": "how_many_times", "para": "(string str,string substring)", "pass": true}
{"task_id": "CPP/18", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint how_many_times(string str,string substring){\n    int out=0;\n    if (str.length()==0) return 0;\n    for (int i=0;i<=str.length()-substring.length();i++)\n    if (str.substr(i,substring.length())==substring)\n        out+=1;\n    return out;\n}\nint main(){\n\tauto result = how_many_times(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello world\", \"hello\"", "fn": "how_many_times", "para": "(string str,string substring)", "pass": true}
{"task_id": "CPP/18", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint how_many_times(string str,string substring){\n    int out=0;\n    if (str.length()==0) return 0;\n    for (int i=0;i<=str.length()-substring.length();i++)\n    if (str.substr(i,substring.length())==substring)\n        out+=1;\n    return out;\n}\nint main(){\n\tauto result = how_many_times(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello world\", \"hello\"", "fn": "how_many_times", "para": "(string str,string substring)", "pass": true}
{"task_id": "CPP/18", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint how_many_times(string str,string substring){\n    int out=0;\n    if (str.length()==0) return 0;\n    for (int i=0;i<=str.length()-substring.length();i++)\n    if (str.substr(i,substring.length())==substring)\n        out+=1;\n    return out;\n}\nint main(){\n\tauto result = how_many_times(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello world\", \"hello\"", "fn": "how_many_times", "para": "(string str,string substring)", "pass": true}
{"task_id": "CPP/18", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint how_many_times(string str,string substring){\n    int out=0;\n    if (str.length()==0) return 0;\n    for (int i=0;i<=str.length()-substring.length();i++)\n    if (str.substr(i,substring.length())==substring)\n        out+=1;\n    return out;\n}\nint main(){\n\tauto result = how_many_times(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello world\", \"hello\"", "fn": "how_many_times", "para": "(string str,string substring)", "pass": true}
{"task_id": "CPP/18", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint how_many_times(string str,string substring){\n    int out=0;\n    if (str.length()==0) return 0;\n    for (int i=0;i<=str.length()-substring.length();i++)\n    if (str.substr(i,substring.length())==substring)\n        out+=1;\n    return out;\n}\nint main(){\n\tauto result = how_many_times(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello world\", \"foo\"", "fn": "how_many_times", "para": "(string str,string substring)", "pass": true}
{"task_id": "CPP/18", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint how_many_times(string str,string substring){\n    int out=0;\n    if (str.length()==0) return 0;\n    for (int i=0;i<=str.length()-substring.length();i++)\n    if (str.substr(i,substring.length())==substring)\n        out+=1;\n    return out;\n}\nint main(){\n\tauto result = how_many_times(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello world\", \"foo\"", "fn": "how_many_times", "para": "(string str,string substring)", "pass": true}
{"task_id": "CPP/18", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint how_many_times(string str,string substring){\n    int out=0;\n    if (str.length()==0) return 0;\n    for (int i=0;i<=str.length()-substring.length();i++)\n    if (str.substr(i,substring.length())==substring)\n        out+=1;\n    return out;\n}\nint main(){\n\tauto result = how_many_times(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello world\", \"hi\"", "fn": "how_many_times", "para": "(string str,string substring)", "pass": true}
{"task_id": "CPP/18", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint how_many_times(string str,string substring){\n    int out=0;\n    if (str.length()==0) return 0;\n    for (int i=0;i<=str.length()-substring.length();i++)\n    if (str.substr(i,substring.length())==substring)\n        out+=1;\n    return out;\n}\nint main(){\n\tauto result = how_many_times(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello world\", \"foo\"", "fn": "how_many_times", "para": "(string str,string substring)", "pass": true}
{"task_id": "CPP/18", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint how_many_times(string str,string substring){\n    int out=0;\n    if (str.length()==0) return 0;\n    for (int i=0;i<=str.length()-substring.length();i++)\n    if (str.substr(i,substring.length())==substring)\n        out+=1;\n    return out;\n}\nint main(){\n\tauto result = how_many_times(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello world\", \"hi\"", "fn": "how_many_times", "para": "(string str,string substring)", "pass": true}
{"task_id": "CPP/19", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring sort_numbers(string numbers){\n    map<string,int> tonum={{\"zero\",0},{\"one\",1},{\"two\",2},{\"three\",3},{\"four\",4},{\"five\",5},{\"six\",6},{\"seven\",7},{\"eight\",8},{\"nine\",9}};\n    map<int,string> numto={{0,\"zero\"},{1,\"one\"},{2,\"two\"},{3,\"three\"},{4,\"four\"},{5,\"five\"},{6,\"six\"},{7,\"seven\"},{8,\"eight\"},{9,\"nine\"}};\n    int count[10];\n    for (int i=0;i<10;i++)\n        count[i]=0;\n    string out=\"\",current=\"\";\n    if (numbers.length()>0) numbers=numbers+' ';\n    for (int i=0;i<numbers.length();i++)\n        if (numbers[i]==' ')\n        {\n            count[tonum[current]]+=1;\n            current=\"\";\n        }\n        else current+=numbers[i];\n    for (int i=0;i<10;i++)\n        for (int j=0;j<count[i];j++)\n            out=out+numto[i]+' ';\n    if (out.length()>0) out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = sort_numbers(<FILL_ME>);\n\tassert(result==\"\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"one two three\"", "fn": "sort_numbers", "para": "(string numbers)", "pass": false}
{"task_id": "CPP/19", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring sort_numbers(string numbers){\n    map<string,int> tonum={{\"zero\",0},{\"one\",1},{\"two\",2},{\"three\",3},{\"four\",4},{\"five\",5},{\"six\",6},{\"seven\",7},{\"eight\",8},{\"nine\",9}};\n    map<int,string> numto={{0,\"zero\"},{1,\"one\"},{2,\"two\"},{3,\"three\"},{4,\"four\"},{5,\"five\"},{6,\"six\"},{7,\"seven\"},{8,\"eight\"},{9,\"nine\"}};\n    int count[10];\n    for (int i=0;i<10;i++)\n        count[i]=0;\n    string out=\"\",current=\"\";\n    if (numbers.length()>0) numbers=numbers+' ';\n    for (int i=0;i<numbers.length();i++)\n        if (numbers[i]==' ')\n        {\n            count[tonum[current]]+=1;\n            current=\"\";\n        }\n        else current+=numbers[i];\n    for (int i=0;i<10;i++)\n        for (int j=0;j<count[i];j++)\n            out=out+numto[i]+' ';\n    if (out.length()>0) out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = sort_numbers(<FILL_ME>);\n\tassert(result==\"\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"\"", "fn": "sort_numbers", "para": "(string numbers)", "pass": true}
{"task_id": "CPP/19", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring sort_numbers(string numbers){\n    map<string,int> tonum={{\"zero\",0},{\"one\",1},{\"two\",2},{\"three\",3},{\"four\",4},{\"five\",5},{\"six\",6},{\"seven\",7},{\"eight\",8},{\"nine\",9}};\n    map<int,string> numto={{0,\"zero\"},{1,\"one\"},{2,\"two\"},{3,\"three\"},{4,\"four\"},{5,\"five\"},{6,\"six\"},{7,\"seven\"},{8,\"eight\"},{9,\"nine\"}};\n    int count[10];\n    for (int i=0;i<10;i++)\n        count[i]=0;\n    string out=\"\",current=\"\";\n    if (numbers.length()>0) numbers=numbers+' ';\n    for (int i=0;i<numbers.length();i++)\n        if (numbers[i]==' ')\n        {\n            count[tonum[current]]+=1;\n            current=\"\";\n        }\n        else current+=numbers[i];\n    for (int i=0;i<10;i++)\n        for (int j=0;j<count[i];j++)\n            out=out+numto[i]+' ';\n    if (out.length()>0) out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = sort_numbers(<FILL_ME>);\n\tassert(result==\"\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"\"", "fn": "sort_numbers", "para": "(string numbers)", "pass": true}
{"task_id": "CPP/19", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring sort_numbers(string numbers){\n    map<string,int> tonum={{\"zero\",0},{\"one\",1},{\"two\",2},{\"three\",3},{\"four\",4},{\"five\",5},{\"six\",6},{\"seven\",7},{\"eight\",8},{\"nine\",9}};\n    map<int,string> numto={{0,\"zero\"},{1,\"one\"},{2,\"two\"},{3,\"three\"},{4,\"four\"},{5,\"five\"},{6,\"six\"},{7,\"seven\"},{8,\"eight\"},{9,\"nine\"}};\n    int count[10];\n    for (int i=0;i<10;i++)\n        count[i]=0;\n    string out=\"\",current=\"\";\n    if (numbers.length()>0) numbers=numbers+' ';\n    for (int i=0;i<numbers.length();i++)\n        if (numbers[i]==' ')\n        {\n            count[tonum[current]]+=1;\n            current=\"\";\n        }\n        else current+=numbers[i];\n    for (int i=0;i<10;i++)\n        for (int j=0;j<count[i];j++)\n            out=out+numto[i]+' ';\n    if (out.length()>0) out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = sort_numbers(<FILL_ME>);\n\tassert(result==\"\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"\"", "fn": "sort_numbers", "para": "(string numbers)", "pass": true}
{"task_id": "CPP/19", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring sort_numbers(string numbers){\n    map<string,int> tonum={{\"zero\",0},{\"one\",1},{\"two\",2},{\"three\",3},{\"four\",4},{\"five\",5},{\"six\",6},{\"seven\",7},{\"eight\",8},{\"nine\",9}};\n    map<int,string> numto={{0,\"zero\"},{1,\"one\"},{2,\"two\"},{3,\"three\"},{4,\"four\"},{5,\"five\"},{6,\"six\"},{7,\"seven\"},{8,\"eight\"},{9,\"nine\"}};\n    int count[10];\n    for (int i=0;i<10;i++)\n        count[i]=0;\n    string out=\"\",current=\"\";\n    if (numbers.length()>0) numbers=numbers+' ';\n    for (int i=0;i<numbers.length();i++)\n        if (numbers[i]==' ')\n        {\n            count[tonum[current]]+=1;\n            current=\"\";\n        }\n        else current+=numbers[i];\n    for (int i=0;i<10;i++)\n        for (int j=0;j<count[i];j++)\n            out=out+numto[i]+' ';\n    if (out.length()>0) out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = sort_numbers(<FILL_ME>);\n\tassert(result==\"\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"\"", "fn": "sort_numbers", "para": "(string numbers)", "pass": true}
{"task_id": "CPP/19", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring sort_numbers(string numbers){\n    map<string,int> tonum={{\"zero\",0},{\"one\",1},{\"two\",2},{\"three\",3},{\"four\",4},{\"five\",5},{\"six\",6},{\"seven\",7},{\"eight\",8},{\"nine\",9}};\n    map<int,string> numto={{0,\"zero\"},{1,\"one\"},{2,\"two\"},{3,\"three\"},{4,\"four\"},{5,\"five\"},{6,\"six\"},{7,\"seven\"},{8,\"eight\"},{9,\"nine\"}};\n    int count[10];\n    for (int i=0;i<10;i++)\n        count[i]=0;\n    string out=\"\",current=\"\";\n    if (numbers.length()>0) numbers=numbers+' ';\n    for (int i=0;i<numbers.length();i++)\n        if (numbers[i]==' ')\n        {\n            count[tonum[current]]+=1;\n            current=\"\";\n        }\n        else current+=numbers[i];\n    for (int i=0;i<10;i++)\n        for (int j=0;j<count[i];j++)\n            out=out+numto[i]+' ';\n    if (out.length()>0) out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = sort_numbers(<FILL_ME>);\n\tassert(result==\"zerofourfiveseveneightnine\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"zerofiveseveneightfournine\"", "fn": "sort_numbers", "para": "(string numbers)", "pass": false}
{"task_id": "CPP/19", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring sort_numbers(string numbers){\n    map<string,int> tonum={{\"zero\",0},{\"one\",1},{\"two\",2},{\"three\",3},{\"four\",4},{\"five\",5},{\"six\",6},{\"seven\",7},{\"eight\",8},{\"nine\",9}};\n    map<int,string> numto={{0,\"zero\"},{1,\"one\"},{2,\"two\"},{3,\"three\"},{4,\"four\"},{5,\"five\"},{6,\"six\"},{7,\"seven\"},{8,\"eight\"},{9,\"nine\"}};\n    int count[10];\n    for (int i=0;i<10;i++)\n        count[i]=0;\n    string out=\"\",current=\"\";\n    if (numbers.length()>0) numbers=numbers+' ';\n    for (int i=0;i<numbers.length();i++)\n        if (numbers[i]==' ')\n        {\n            count[tonum[current]]+=1;\n            current=\"\";\n        }\n        else current+=numbers[i];\n    for (int i=0;i<10;i++)\n        for (int j=0;j<count[i];j++)\n            out=out+numto[i]+' ';\n    if (out.length()>0) out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = sort_numbers(<FILL_ME>);\n\tassert(result==\"zerofourfiveseveneightnine\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"zerofiveseveneightfournine\"", "fn": "sort_numbers", "para": "(string numbers)", "pass": false}
{"task_id": "CPP/19", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring sort_numbers(string numbers){\n    map<string,int> tonum={{\"zero\",0},{\"one\",1},{\"two\",2},{\"three\",3},{\"four\",4},{\"five\",5},{\"six\",6},{\"seven\",7},{\"eight\",8},{\"nine\",9}};\n    map<int,string> numto={{0,\"zero\"},{1,\"one\"},{2,\"two\"},{3,\"three\"},{4,\"four\"},{5,\"five\"},{6,\"six\"},{7,\"seven\"},{8,\"eight\"},{9,\"nine\"}};\n    int count[10];\n    for (int i=0;i<10;i++)\n        count[i]=0;\n    string out=\"\",current=\"\";\n    if (numbers.length()>0) numbers=numbers+' ';\n    for (int i=0;i<numbers.length();i++)\n        if (numbers[i]==' ')\n        {\n            count[tonum[current]]+=1;\n            current=\"\";\n        }\n        else current+=numbers[i];\n    for (int i=0;i<10;i++)\n        for (int j=0;j<count[i];j++)\n            out=out+numto[i]+' ';\n    if (out.length()>0) out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = sort_numbers(<FILL_ME>);\n\tassert(result==\"zerofourfiveseveneightnine\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"zerofourfiveseveneightnine\"", "fn": "sort_numbers", "para": "(string numbers)", "pass": false}
{"task_id": "CPP/19", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring sort_numbers(string numbers){\n    map<string,int> tonum={{\"zero\",0},{\"one\",1},{\"two\",2},{\"three\",3},{\"four\",4},{\"five\",5},{\"six\",6},{\"seven\",7},{\"eight\",8},{\"nine\",9}};\n    map<int,string> numto={{0,\"zero\"},{1,\"one\"},{2,\"two\"},{3,\"three\"},{4,\"four\"},{5,\"five\"},{6,\"six\"},{7,\"seven\"},{8,\"eight\"},{9,\"nine\"}};\n    int count[10];\n    for (int i=0;i<10;i++)\n        count[i]=0;\n    string out=\"\",current=\"\";\n    if (numbers.length()>0) numbers=numbers+' ';\n    for (int i=0;i<numbers.length();i++)\n        if (numbers[i]==' ')\n        {\n            count[tonum[current]]+=1;\n            current=\"\";\n        }\n        else current+=numbers[i];\n    for (int i=0;i<10;i++)\n        for (int j=0;j<count[i];j++)\n            out=out+numto[i]+' ';\n    if (out.length()>0) out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = sort_numbers(<FILL_ME>);\n\tassert(result==\"zerofourfiveseveneightnine\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"zerofourfiveseveneightnine\"", "fn": "sort_numbers", "para": "(string numbers)", "pass": false}
{"task_id": "CPP/19", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring sort_numbers(string numbers){\n    map<string,int> tonum={{\"zero\",0},{\"one\",1},{\"two\",2},{\"three\",3},{\"four\",4},{\"five\",5},{\"six\",6},{\"seven\",7},{\"eight\",8},{\"nine\",9}};\n    map<int,string> numto={{0,\"zero\"},{1,\"one\"},{2,\"two\"},{3,\"three\"},{4,\"four\"},{5,\"five\"},{6,\"six\"},{7,\"seven\"},{8,\"eight\"},{9,\"nine\"}};\n    int count[10];\n    for (int i=0;i<10;i++)\n        count[i]=0;\n    string out=\"\",current=\"\";\n    if (numbers.length()>0) numbers=numbers+' ';\n    for (int i=0;i<numbers.length();i++)\n        if (numbers[i]==' ')\n        {\n            count[tonum[current]]+=1;\n            current=\"\";\n        }\n        else current+=numbers[i];\n    for (int i=0;i<10;i++)\n        for (int j=0;j<count[i];j++)\n            out=out+numto[i]+' ';\n    if (out.length()>0) out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = sort_numbers(<FILL_ME>);\n\tassert(result==\"zerofourfiveseveneightnine\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"zerofourfiveseveneightnine\"", "fn": "sort_numbers", "para": "(string numbers)", "pass": false}
{"task_id": "CPP/19", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring sort_numbers(string numbers){\n    map<string,int> tonum={{\"zero\",0},{\"one\",1},{\"two\",2},{\"three\",3},{\"four\",4},{\"five\",5},{\"six\",6},{\"seven\",7},{\"eight\",8},{\"nine\",9}};\n    map<int,string> numto={{0,\"zero\"},{1,\"one\"},{2,\"two\"},{3,\"three\"},{4,\"four\"},{5,\"five\"},{6,\"six\"},{7,\"seven\"},{8,\"eight\"},{9,\"nine\"}};\n    int count[10];\n    for (int i=0;i<10;i++)\n        count[i]=0;\n    string out=\"\",current=\"\";\n    if (numbers.length()>0) numbers=numbers+' ';\n    for (int i=0;i<numbers.length();i++)\n        if (numbers[i]==' ')\n        {\n            count[tonum[current]]+=1;\n            current=\"\";\n        }\n        else current+=numbers[i];\n    for (int i=0;i<10;i++)\n        for (int j=0;j<count[i];j++)\n            out=out+numto[i]+' ';\n    if (out.length()>0) out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = sort_numbers(<FILL_ME>);\n\tassert(result==\"threefivenine\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"three five nine\"", "fn": "sort_numbers", "para": "(string numbers)", "pass": false}
{"task_id": "CPP/19", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring sort_numbers(string numbers){\n    map<string,int> tonum={{\"zero\",0},{\"one\",1},{\"two\",2},{\"three\",3},{\"four\",4},{\"five\",5},{\"six\",6},{\"seven\",7},{\"eight\",8},{\"nine\",9}};\n    map<int,string> numto={{0,\"zero\"},{1,\"one\"},{2,\"two\"},{3,\"three\"},{4,\"four\"},{5,\"five\"},{6,\"six\"},{7,\"seven\"},{8,\"eight\"},{9,\"nine\"}};\n    int count[10];\n    for (int i=0;i<10;i++)\n        count[i]=0;\n    string out=\"\",current=\"\";\n    if (numbers.length()>0) numbers=numbers+' ';\n    for (int i=0;i<numbers.length();i++)\n        if (numbers[i]==' ')\n        {\n            count[tonum[current]]+=1;\n            current=\"\";\n        }\n        else current+=numbers[i];\n    for (int i=0;i<10;i++)\n        for (int j=0;j<count[i];j++)\n            out=out+numto[i]+' ';\n    if (out.length()>0) out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = sort_numbers(<FILL_ME>);\n\tassert(result==\"threefivenine\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"three five nine\"", "fn": "sort_numbers", "para": "(string numbers)", "pass": false}
{"task_id": "CPP/19", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring sort_numbers(string numbers){\n    map<string,int> tonum={{\"zero\",0},{\"one\",1},{\"two\",2},{\"three\",3},{\"four\",4},{\"five\",5},{\"six\",6},{\"seven\",7},{\"eight\",8},{\"nine\",9}};\n    map<int,string> numto={{0,\"zero\"},{1,\"one\"},{2,\"two\"},{3,\"three\"},{4,\"four\"},{5,\"five\"},{6,\"six\"},{7,\"seven\"},{8,\"eight\"},{9,\"nine\"}};\n    int count[10];\n    for (int i=0;i<10;i++)\n        count[i]=0;\n    string out=\"\",current=\"\";\n    if (numbers.length()>0) numbers=numbers+' ';\n    for (int i=0;i<numbers.length();i++)\n        if (numbers[i]==' ')\n        {\n            count[tonum[current]]+=1;\n            current=\"\";\n        }\n        else current+=numbers[i];\n    for (int i=0;i<10;i++)\n        for (int j=0;j<count[i];j++)\n            out=out+numto[i]+' ';\n    if (out.length()>0) out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = sort_numbers(<FILL_ME>);\n\tassert(result==\"threefivenine\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"three five nine\"", "fn": "sort_numbers", "para": "(string numbers)", "pass": false}
{"task_id": "CPP/19", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring sort_numbers(string numbers){\n    map<string,int> tonum={{\"zero\",0},{\"one\",1},{\"two\",2},{\"three\",3},{\"four\",4},{\"five\",5},{\"six\",6},{\"seven\",7},{\"eight\",8},{\"nine\",9}};\n    map<int,string> numto={{0,\"zero\"},{1,\"one\"},{2,\"two\"},{3,\"three\"},{4,\"four\"},{5,\"five\"},{6,\"six\"},{7,\"seven\"},{8,\"eight\"},{9,\"nine\"}};\n    int count[10];\n    for (int i=0;i<10;i++)\n        count[i]=0;\n    string out=\"\",current=\"\";\n    if (numbers.length()>0) numbers=numbers+' ';\n    for (int i=0;i<numbers.length();i++)\n        if (numbers[i]==' ')\n        {\n            count[tonum[current]]+=1;\n            current=\"\";\n        }\n        else current+=numbers[i];\n    for (int i=0;i<10;i++)\n        for (int j=0;j<count[i];j++)\n            out=out+numto[i]+' ';\n    if (out.length()>0) out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = sort_numbers(<FILL_ME>);\n\tassert(result==\"threefivenine\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"three five nine\"", "fn": "sort_numbers", "para": "(string numbers)", "pass": false}
{"task_id": "CPP/19", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring sort_numbers(string numbers){\n    map<string,int> tonum={{\"zero\",0},{\"one\",1},{\"two\",2},{\"three\",3},{\"four\",4},{\"five\",5},{\"six\",6},{\"seven\",7},{\"eight\",8},{\"nine\",9}};\n    map<int,string> numto={{0,\"zero\"},{1,\"one\"},{2,\"two\"},{3,\"three\"},{4,\"four\"},{5,\"five\"},{6,\"six\"},{7,\"seven\"},{8,\"eight\"},{9,\"nine\"}};\n    int count[10];\n    for (int i=0;i<10;i++)\n        count[i]=0;\n    string out=\"\",current=\"\";\n    if (numbers.length()>0) numbers=numbers+' ';\n    for (int i=0;i<numbers.length();i++)\n        if (numbers[i]==' ')\n        {\n            count[tonum[current]]+=1;\n            current=\"\";\n        }\n        else current+=numbers[i];\n    for (int i=0;i<10;i++)\n        for (int j=0;j<count[i];j++)\n            out=out+numto[i]+' ';\n    if (out.length()>0) out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = sort_numbers(<FILL_ME>);\n\tassert(result==\"threefivenine\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"three five nine\"", "fn": "sort_numbers", "para": "(string numbers)", "pass": false}
{"task_id": "CPP/19", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring sort_numbers(string numbers){\n    map<string,int> tonum={{\"zero\",0},{\"one\",1},{\"two\",2},{\"three\",3},{\"four\",4},{\"five\",5},{\"six\",6},{\"seven\",7},{\"eight\",8},{\"nine\",9}};\n    map<int,string> numto={{0,\"zero\"},{1,\"one\"},{2,\"two\"},{3,\"three\"},{4,\"four\"},{5,\"five\"},{6,\"six\"},{7,\"seven\"},{8,\"eight\"},{9,\"nine\"}};\n    int count[10];\n    for (int i=0;i<10;i++)\n        count[i]=0;\n    string out=\"\",current=\"\";\n    if (numbers.length()>0) numbers=numbers+' ';\n    for (int i=0;i<numbers.length();i++)\n        if (numbers[i]==' ')\n        {\n            count[tonum[current]]+=1;\n            current=\"\";\n        }\n        else current+=numbers[i];\n    for (int i=0;i<10;i++)\n        for (int j=0;j<count[i];j++)\n            out=out+numto[i]+' ';\n    if (out.length()>0) out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = sort_numbers(<FILL_ME>);\n\tassert(result==\"three\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"three\"", "fn": "sort_numbers", "para": "(string numbers)", "pass": true}
{"task_id": "CPP/19", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring sort_numbers(string numbers){\n    map<string,int> tonum={{\"zero\",0},{\"one\",1},{\"two\",2},{\"three\",3},{\"four\",4},{\"five\",5},{\"six\",6},{\"seven\",7},{\"eight\",8},{\"nine\",9}};\n    map<int,string> numto={{0,\"zero\"},{1,\"one\"},{2,\"two\"},{3,\"three\"},{4,\"four\"},{5,\"five\"},{6,\"six\"},{7,\"seven\"},{8,\"eight\"},{9,\"nine\"}};\n    int count[10];\n    for (int i=0;i<10;i++)\n        count[i]=0;\n    string out=\"\",current=\"\";\n    if (numbers.length()>0) numbers=numbers+' ';\n    for (int i=0;i<numbers.length();i++)\n        if (numbers[i]==' ')\n        {\n            count[tonum[current]]+=1;\n            current=\"\";\n        }\n        else current+=numbers[i];\n    for (int i=0;i<10;i++)\n        for (int j=0;j<count[i];j++)\n            out=out+numto[i]+' ';\n    if (out.length()>0) out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = sort_numbers(<FILL_ME>);\n\tassert(result==\"three\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"three\"", "fn": "sort_numbers", "para": "(string numbers)", "pass": true}
{"task_id": "CPP/19", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring sort_numbers(string numbers){\n    map<string,int> tonum={{\"zero\",0},{\"one\",1},{\"two\",2},{\"three\",3},{\"four\",4},{\"five\",5},{\"six\",6},{\"seven\",7},{\"eight\",8},{\"nine\",9}};\n    map<int,string> numto={{0,\"zero\"},{1,\"one\"},{2,\"two\"},{3,\"three\"},{4,\"four\"},{5,\"five\"},{6,\"six\"},{7,\"seven\"},{8,\"eight\"},{9,\"nine\"}};\n    int count[10];\n    for (int i=0;i<10;i++)\n        count[i]=0;\n    string out=\"\",current=\"\";\n    if (numbers.length()>0) numbers=numbers+' ';\n    for (int i=0;i<numbers.length();i++)\n        if (numbers[i]==' ')\n        {\n            count[tonum[current]]+=1;\n            current=\"\";\n        }\n        else current+=numbers[i];\n    for (int i=0;i<10;i++)\n        for (int j=0;j<count[i];j++)\n            out=out+numto[i]+' ';\n    if (out.length()>0) out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = sort_numbers(<FILL_ME>);\n\tassert(result==\"three\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"three\"", "fn": "sort_numbers", "para": "(string numbers)", "pass": true}
{"task_id": "CPP/19", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring sort_numbers(string numbers){\n    map<string,int> tonum={{\"zero\",0},{\"one\",1},{\"two\",2},{\"three\",3},{\"four\",4},{\"five\",5},{\"six\",6},{\"seven\",7},{\"eight\",8},{\"nine\",9}};\n    map<int,string> numto={{0,\"zero\"},{1,\"one\"},{2,\"two\"},{3,\"three\"},{4,\"four\"},{5,\"five\"},{6,\"six\"},{7,\"seven\"},{8,\"eight\"},{9,\"nine\"}};\n    int count[10];\n    for (int i=0;i<10;i++)\n        count[i]=0;\n    string out=\"\",current=\"\";\n    if (numbers.length()>0) numbers=numbers+' ';\n    for (int i=0;i<numbers.length();i++)\n        if (numbers[i]==' ')\n        {\n            count[tonum[current]]+=1;\n            current=\"\";\n        }\n        else current+=numbers[i];\n    for (int i=0;i<10;i++)\n        for (int j=0;j<count[i];j++)\n            out=out+numto[i]+' ';\n    if (out.length()>0) out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = sort_numbers(<FILL_ME>);\n\tassert(result==\"three\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"three five two\"", "fn": "sort_numbers", "para": "(string numbers)", "pass": false}
{"task_id": "CPP/19", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring sort_numbers(string numbers){\n    map<string,int> tonum={{\"zero\",0},{\"one\",1},{\"two\",2},{\"three\",3},{\"four\",4},{\"five\",5},{\"six\",6},{\"seven\",7},{\"eight\",8},{\"nine\",9}};\n    map<int,string> numto={{0,\"zero\"},{1,\"one\"},{2,\"two\"},{3,\"three\"},{4,\"four\"},{5,\"five\"},{6,\"six\"},{7,\"seven\"},{8,\"eight\"},{9,\"nine\"}};\n    int count[10];\n    for (int i=0;i<10;i++)\n        count[i]=0;\n    string out=\"\",current=\"\";\n    if (numbers.length()>0) numbers=numbers+' ';\n    for (int i=0;i<numbers.length();i++)\n        if (numbers[i]==' ')\n        {\n            count[tonum[current]]+=1;\n            current=\"\";\n        }\n        else current+=numbers[i];\n    for (int i=0;i<10;i++)\n        for (int j=0;j<count[i];j++)\n            out=out+numto[i]+' ';\n    if (out.length()>0) out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = sort_numbers(<FILL_ME>);\n\tassert(result==\"three\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"three\"", "fn": "sort_numbers", "para": "(string numbers)", "pass": true}
{"task_id": "CPP/19", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring sort_numbers(string numbers){\n    map<string,int> tonum={{\"zero\",0},{\"one\",1},{\"two\",2},{\"three\",3},{\"four\",4},{\"five\",5},{\"six\",6},{\"seven\",7},{\"eight\",8},{\"nine\",9}};\n    map<int,string> numto={{0,\"zero\"},{1,\"one\"},{2,\"two\"},{3,\"three\"},{4,\"four\"},{5,\"five\"},{6,\"six\"},{7,\"seven\"},{8,\"eight\"},{9,\"nine\"}};\n    int count[10];\n    for (int i=0;i<10;i++)\n        count[i]=0;\n    string out=\"\",current=\"\";\n    if (numbers.length()>0) numbers=numbers+' ';\n    for (int i=0;i<numbers.length();i++)\n        if (numbers[i]==' ')\n        {\n            count[tonum[current]]+=1;\n            current=\"\";\n        }\n        else current+=numbers[i];\n    for (int i=0;i<10;i++)\n        for (int j=0;j<count[i];j++)\n            out=out+numto[i]+' ';\n    if (out.length()>0) out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = sort_numbers(<FILL_ME>);\n\tassert(result==\"zeroonetwothreefourfivesix\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"zero one two three four five six\"", "fn": "sort_numbers", "para": "(string numbers)", "pass": false}
{"task_id": "CPP/19", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring sort_numbers(string numbers){\n    map<string,int> tonum={{\"zero\",0},{\"one\",1},{\"two\",2},{\"three\",3},{\"four\",4},{\"five\",5},{\"six\",6},{\"seven\",7},{\"eight\",8},{\"nine\",9}};\n    map<int,string> numto={{0,\"zero\"},{1,\"one\"},{2,\"two\"},{3,\"three\"},{4,\"four\"},{5,\"five\"},{6,\"six\"},{7,\"seven\"},{8,\"eight\"},{9,\"nine\"}};\n    int count[10];\n    for (int i=0;i<10;i++)\n        count[i]=0;\n    string out=\"\",current=\"\";\n    if (numbers.length()>0) numbers=numbers+' ';\n    for (int i=0;i<numbers.length();i++)\n        if (numbers[i]==' ')\n        {\n            count[tonum[current]]+=1;\n            current=\"\";\n        }\n        else current+=numbers[i];\n    for (int i=0;i<10;i++)\n        for (int j=0;j<count[i];j++)\n            out=out+numto[i]+' ';\n    if (out.length()>0) out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = sort_numbers(<FILL_ME>);\n\tassert(result==\"zeroonetwothreefourfivesix\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"zero one two three four five six\"", "fn": "sort_numbers", "para": "(string numbers)", "pass": false}
{"task_id": "CPP/19", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring sort_numbers(string numbers){\n    map<string,int> tonum={{\"zero\",0},{\"one\",1},{\"two\",2},{\"three\",3},{\"four\",4},{\"five\",5},{\"six\",6},{\"seven\",7},{\"eight\",8},{\"nine\",9}};\n    map<int,string> numto={{0,\"zero\"},{1,\"one\"},{2,\"two\"},{3,\"three\"},{4,\"four\"},{5,\"five\"},{6,\"six\"},{7,\"seven\"},{8,\"eight\"},{9,\"nine\"}};\n    int count[10];\n    for (int i=0;i<10;i++)\n        count[i]=0;\n    string out=\"\",current=\"\";\n    if (numbers.length()>0) numbers=numbers+' ';\n    for (int i=0;i<numbers.length();i++)\n        if (numbers[i]==' ')\n        {\n            count[tonum[current]]+=1;\n            current=\"\";\n        }\n        else current+=numbers[i];\n    for (int i=0;i<10;i++)\n        for (int j=0;j<count[i];j++)\n            out=out+numto[i]+' ';\n    if (out.length()>0) out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = sort_numbers(<FILL_ME>);\n\tassert(result==\"zeroonetwothreefourfivesix\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"zero one two three four five six\"", "fn": "sort_numbers", "para": "(string numbers)", "pass": false}
{"task_id": "CPP/19", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring sort_numbers(string numbers){\n    map<string,int> tonum={{\"zero\",0},{\"one\",1},{\"two\",2},{\"three\",3},{\"four\",4},{\"five\",5},{\"six\",6},{\"seven\",7},{\"eight\",8},{\"nine\",9}};\n    map<int,string> numto={{0,\"zero\"},{1,\"one\"},{2,\"two\"},{3,\"three\"},{4,\"four\"},{5,\"five\"},{6,\"six\"},{7,\"seven\"},{8,\"eight\"},{9,\"nine\"}};\n    int count[10];\n    for (int i=0;i<10;i++)\n        count[i]=0;\n    string out=\"\",current=\"\";\n    if (numbers.length()>0) numbers=numbers+' ';\n    for (int i=0;i<numbers.length();i++)\n        if (numbers[i]==' ')\n        {\n            count[tonum[current]]+=1;\n            current=\"\";\n        }\n        else current+=numbers[i];\n    for (int i=0;i<10;i++)\n        for (int j=0;j<count[i];j++)\n            out=out+numto[i]+' ';\n    if (out.length()>0) out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = sort_numbers(<FILL_ME>);\n\tassert(result==\"zeroonetwothreefourfivesix\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"zero one two three four five six\"", "fn": "sort_numbers", "para": "(string numbers)", "pass": false}
{"task_id": "CPP/19", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring sort_numbers(string numbers){\n    map<string,int> tonum={{\"zero\",0},{\"one\",1},{\"two\",2},{\"three\",3},{\"four\",4},{\"five\",5},{\"six\",6},{\"seven\",7},{\"eight\",8},{\"nine\",9}};\n    map<int,string> numto={{0,\"zero\"},{1,\"one\"},{2,\"two\"},{3,\"three\"},{4,\"four\"},{5,\"five\"},{6,\"six\"},{7,\"seven\"},{8,\"eight\"},{9,\"nine\"}};\n    int count[10];\n    for (int i=0;i<10;i++)\n        count[i]=0;\n    string out=\"\",current=\"\";\n    if (numbers.length()>0) numbers=numbers+' ';\n    for (int i=0;i<numbers.length();i++)\n        if (numbers[i]==' ')\n        {\n            count[tonum[current]]+=1;\n            current=\"\";\n        }\n        else current+=numbers[i];\n    for (int i=0;i<10;i++)\n        for (int j=0;j<count[i];j++)\n            out=out+numto[i]+' ';\n    if (out.length()>0) out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = sort_numbers(<FILL_ME>);\n\tassert(result==\"zeroonetwothreefourfivesix\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"zero one two three four five six\"", "fn": "sort_numbers", "para": "(string numbers)", "pass": false}
{"task_id": "CPP/20", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> find_closest_elements(vector<float> numbers){\n    vector<float> out={};\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n        if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))\n            out={numbers[i],numbers[j]};\n    if (out[0]>out[1])\n        out={out[1],out[0]};\n    return out;\n}\nint main(){\n\tauto result = find_closest_elements(<FILL_ME>);\n\tassert(issame(result,{3.9,4.0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{3.8, 3.9, 4.0, 4.1, 4.2}", "fn": "find_closest_elements", "para": "(vector<float> numbers)", "pass": true}
{"task_id": "CPP/20", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> find_closest_elements(vector<float> numbers){\n    vector<float> out={};\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n        if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))\n            out={numbers[i],numbers[j]};\n    if (out[0]>out[1])\n        out={out[1],out[0]};\n    return out;\n}\nint main(){\n\tauto result = find_closest_elements(<FILL_ME>);\n\tassert(issame(result,{3.9,4.0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{3.8, 3.9, 4.0, 4.1, 4.2}", "fn": "find_closest_elements", "para": "(vector<float> numbers)", "pass": true}
{"task_id": "CPP/20", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> find_closest_elements(vector<float> numbers){\n    vector<float> out={};\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n        if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))\n            out={numbers[i],numbers[j]};\n    if (out[0]>out[1])\n        out={out[1],out[0]};\n    return out;\n}\nint main(){\n\tauto result = find_closest_elements(<FILL_ME>);\n\tassert(issame(result,{3.9,4.0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{3.8, 3.9, 4.0, 4.1, 4.2}", "fn": "find_closest_elements", "para": "(vector<float> numbers)", "pass": true}
{"task_id": "CPP/20", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> find_closest_elements(vector<float> numbers){\n    vector<float> out={};\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n        if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))\n            out={numbers[i],numbers[j]};\n    if (out[0]>out[1])\n        out={out[1],out[0]};\n    return out;\n}\nint main(){\n\tauto result = find_closest_elements(<FILL_ME>);\n\tassert(issame(result,{3.9,4.0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{3.8, 3.9, 4.0, 4.1, 4.2}", "fn": "find_closest_elements", "para": "(vector<float> numbers)", "pass": true}
{"task_id": "CPP/20", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> find_closest_elements(vector<float> numbers){\n    vector<float> out={};\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n        if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))\n            out={numbers[i],numbers[j]};\n    if (out[0]>out[1])\n        out={out[1],out[0]};\n    return out;\n}\nint main(){\n\tauto result = find_closest_elements(<FILL_ME>);\n\tassert(issame(result,{3.9,4.0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{3.8, 3.9, 4.0, 4.1, 4.2}", "fn": "find_closest_elements", "para": "(vector<float> numbers)", "pass": true}
{"task_id": "CPP/20", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> find_closest_elements(vector<float> numbers){\n    vector<float> out={};\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n        if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))\n            out={numbers[i],numbers[j]};\n    if (out[0]>out[1])\n        out={out[1],out[0]};\n    return out;\n}\nint main(){\n\tauto result = find_closest_elements(<FILL_ME>);\n\tassert(issame(result,{2.2,3.1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{1.2, 2.2, 3.1, 4.5, 5.6}", "fn": "find_closest_elements", "para": "(vector<float> numbers)", "pass": true}
{"task_id": "CPP/20", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> find_closest_elements(vector<float> numbers){\n    vector<float> out={};\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n        if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))\n            out={numbers[i],numbers[j]};\n    if (out[0]>out[1])\n        out={out[1],out[0]};\n    return out;\n}\nint main(){\n\tauto result = find_closest_elements(<FILL_ME>);\n\tassert(issame(result,{2.2,3.1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{1.2, 2.2, 3.1, 4.5, 5.6}", "fn": "find_closest_elements", "para": "(vector<float> numbers)", "pass": true}
{"task_id": "CPP/20", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> find_closest_elements(vector<float> numbers){\n    vector<float> out={};\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n        if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))\n            out={numbers[i],numbers[j]};\n    if (out[0]>out[1])\n        out={out[1],out[0]};\n    return out;\n}\nint main(){\n\tauto result = find_closest_elements(<FILL_ME>);\n\tassert(issame(result,{2.2,3.1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{1.2, 2.2, 3.1, 4.5, 5.6}", "fn": "find_closest_elements", "para": "(vector<float> numbers)", "pass": true}
{"task_id": "CPP/20", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> find_closest_elements(vector<float> numbers){\n    vector<float> out={};\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n        if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))\n            out={numbers[i],numbers[j]};\n    if (out[0]>out[1])\n        out={out[1],out[0]};\n    return out;\n}\nint main(){\n\tauto result = find_closest_elements(<FILL_ME>);\n\tassert(issame(result,{2.2,3.1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{1.2, 2.2, 3.1, 4.5, 5.6}", "fn": "find_closest_elements", "para": "(vector<float> numbers)", "pass": true}
{"task_id": "CPP/20", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> find_closest_elements(vector<float> numbers){\n    vector<float> out={};\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n        if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))\n            out={numbers[i],numbers[j]};\n    if (out[0]>out[1])\n        out={out[1],out[0]};\n    return out;\n}\nint main(){\n\tauto result = find_closest_elements(<FILL_ME>);\n\tassert(issame(result,{2.2,3.1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{1.2, 2.2, 3.1, 4.5, 5.6}", "fn": "find_closest_elements", "para": "(vector<float> numbers)", "pass": true}
{"task_id": "CPP/20", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> find_closest_elements(vector<float> numbers){\n    vector<float> out={};\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n        if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))\n            out={numbers[i],numbers[j]};\n    if (out[0]>out[1])\n        out={out[1],out[0]};\n    return out;\n}\nint main(){\n\tauto result = find_closest_elements(<FILL_ME>);\n\tassert(issame(result,{5.0,5.9}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{5.0, 5.9}", "fn": "find_closest_elements", "para": "(vector<float> numbers)", "pass": true}
{"task_id": "CPP/20", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> find_closest_elements(vector<float> numbers){\n    vector<float> out={};\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n        if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))\n            out={numbers[i],numbers[j]};\n    if (out[0]>out[1])\n        out={out[1],out[0]};\n    return out;\n}\nint main(){\n\tauto result = find_closest_elements(<FILL_ME>);\n\tassert(issame(result,{5.0,5.9}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{5.0, 5.9}", "fn": "find_closest_elements", "para": "(vector<float> numbers)", "pass": true}
{"task_id": "CPP/20", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> find_closest_elements(vector<float> numbers){\n    vector<float> out={};\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n        if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))\n            out={numbers[i],numbers[j]};\n    if (out[0]>out[1])\n        out={out[1],out[0]};\n    return out;\n}\nint main(){\n\tauto result = find_closest_elements(<FILL_ME>);\n\tassert(issame(result,{5.0,5.9}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{5.0, 5.9}", "fn": "find_closest_elements", "para": "(vector<float> numbers)", "pass": true}
{"task_id": "CPP/20", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> find_closest_elements(vector<float> numbers){\n    vector<float> out={};\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n        if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))\n            out={numbers[i],numbers[j]};\n    if (out[0]>out[1])\n        out={out[1],out[0]};\n    return out;\n}\nint main(){\n\tauto result = find_closest_elements(<FILL_ME>);\n\tassert(issame(result,{5.0,5.9}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{5.0, 5.9}", "fn": "find_closest_elements", "para": "(vector<float> numbers)", "pass": true}
{"task_id": "CPP/20", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> find_closest_elements(vector<float> numbers){\n    vector<float> out={};\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n        if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))\n            out={numbers[i],numbers[j]};\n    if (out[0]>out[1])\n        out={out[1],out[0]};\n    return out;\n}\nint main(){\n\tauto result = find_closest_elements(<FILL_ME>);\n\tassert(issame(result,{5.0,5.9}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{5.0, 5.9, 4.2, 7.8, 5.0, 6.2}", "fn": "find_closest_elements", "para": "(vector<float> numbers)", "pass": false}
{"task_id": "CPP/20", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> find_closest_elements(vector<float> numbers){\n    vector<float> out={};\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n        if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))\n            out={numbers[i],numbers[j]};\n    if (out[0]>out[1])\n        out={out[1],out[0]};\n    return out;\n}\nint main(){\n\tauto result = find_closest_elements(<FILL_ME>);\n\tassert(issame(result,{2.0,2.2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{3.4, 2.0, 5.6, 2.2}", "fn": "find_closest_elements", "para": "(vector<float> numbers)", "pass": true}
{"task_id": "CPP/20", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> find_closest_elements(vector<float> numbers){\n    vector<float> out={};\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n        if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))\n            out={numbers[i],numbers[j]};\n    if (out[0]>out[1])\n        out={out[1],out[0]};\n    return out;\n}\nint main(){\n\tauto result = find_closest_elements(<FILL_ME>);\n\tassert(issame(result,{2.0,2.2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{3.4, 2.0, 5.6, 2.2}", "fn": "find_closest_elements", "para": "(vector<float> numbers)", "pass": true}
{"task_id": "CPP/20", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> find_closest_elements(vector<float> numbers){\n    vector<float> out={};\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n        if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))\n            out={numbers[i],numbers[j]};\n    if (out[0]>out[1])\n        out={out[1],out[0]};\n    return out;\n}\nint main(){\n\tauto result = find_closest_elements(<FILL_ME>);\n\tassert(issame(result,{2.0,2.2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{3.4, 2.0, 5.6, 2.2}", "fn": "find_closest_elements", "para": "(vector<float> numbers)", "pass": true}
{"task_id": "CPP/20", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> find_closest_elements(vector<float> numbers){\n    vector<float> out={};\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n        if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))\n            out={numbers[i],numbers[j]};\n    if (out[0]>out[1])\n        out={out[1],out[0]};\n    return out;\n}\nint main(){\n\tauto result = find_closest_elements(<FILL_ME>);\n\tassert(issame(result,{2.0,2.2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{3.4, 2.0, 5.6, 2.2}", "fn": "find_closest_elements", "para": "(vector<float> numbers)", "pass": true}
{"task_id": "CPP/20", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> find_closest_elements(vector<float> numbers){\n    vector<float> out={};\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n        if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))\n            out={numbers[i],numbers[j]};\n    if (out[0]>out[1])\n        out={out[1],out[0]};\n    return out;\n}\nint main(){\n\tauto result = find_closest_elements(<FILL_ME>);\n\tassert(issame(result,{2.0,2.2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{3.4, 2.0, 5.6, 2.2}", "fn": "find_closest_elements", "para": "(vector<float> numbers)", "pass": true}
{"task_id": "CPP/20", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> find_closest_elements(vector<float> numbers){\n    vector<float> out={};\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n        if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))\n            out={numbers[i],numbers[j]};\n    if (out[0]>out[1])\n        out={out[1],out[0]};\n    return out;\n}\nint main(){\n\tauto result = find_closest_elements(<FILL_ME>);\n\tassert(issame(result,{2.0,2.0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{2.0, 2.0, 3.0}", "fn": "find_closest_elements", "para": "(vector<float> numbers)", "pass": true}
{"task_id": "CPP/20", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> find_closest_elements(vector<float> numbers){\n    vector<float> out={};\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n        if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))\n            out={numbers[i],numbers[j]};\n    if (out[0]>out[1])\n        out={out[1],out[0]};\n    return out;\n}\nint main(){\n\tauto result = find_closest_elements(<FILL_ME>);\n\tassert(issame(result,{2.0,2.0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{2.0, 2.0, 3.0}", "fn": "find_closest_elements", "para": "(vector<float> numbers)", "pass": true}
{"task_id": "CPP/20", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> find_closest_elements(vector<float> numbers){\n    vector<float> out={};\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n        if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))\n            out={numbers[i],numbers[j]};\n    if (out[0]>out[1])\n        out={out[1],out[0]};\n    return out;\n}\nint main(){\n\tauto result = find_closest_elements(<FILL_ME>);\n\tassert(issame(result,{2.0,2.0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{2.0, 2.0, 3.0}", "fn": "find_closest_elements", "para": "(vector<float> numbers)", "pass": true}
{"task_id": "CPP/20", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> find_closest_elements(vector<float> numbers){\n    vector<float> out={};\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n        if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))\n            out={numbers[i],numbers[j]};\n    if (out[0]>out[1])\n        out={out[1],out[0]};\n    return out;\n}\nint main(){\n\tauto result = find_closest_elements(<FILL_ME>);\n\tassert(issame(result,{2.0,2.0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{2.0, 2.0, 3.0}", "fn": "find_closest_elements", "para": "(vector<float> numbers)", "pass": true}
{"task_id": "CPP/20", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> find_closest_elements(vector<float> numbers){\n    vector<float> out={};\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n        if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))\n            out={numbers[i],numbers[j]};\n    if (out[0]>out[1])\n        out={out[1],out[0]};\n    return out;\n}\nint main(){\n\tauto result = find_closest_elements(<FILL_ME>);\n\tassert(issame(result,{2.0,2.0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{2.0, 2.0, 3.0}", "fn": "find_closest_elements", "para": "(vector<float> numbers)", "pass": true}
{"task_id": "CPP/21", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> rescale_to_unit(vector<float> numbers){ \n    float min=100000,max=-100000;\n    for (int i=0;i<numbers.size();i++)\n        {\n            if (numbers[i]<min) min=numbers[i];\n            if (numbers[i]>max) max=numbers[i];\n        }\n    for (int i=0;i<numbers.size();i++)\n        numbers[i]=(numbers[i]-min)/(max-min);\n    return numbers;\n}\nint main(){\n\tauto result = rescale_to_unit(<FILL_ME>);\n\tassert(issame(result,{0.0,1.0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<float>{2.0, 6.0}", "fn": "rescale_to_unit", "para": "(vector<float> numbers)", "pass": true}
{"task_id": "CPP/21", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> rescale_to_unit(vector<float> numbers){ \n    float min=100000,max=-100000;\n    for (int i=0;i<numbers.size();i++)\n        {\n            if (numbers[i]<min) min=numbers[i];\n            if (numbers[i]>max) max=numbers[i];\n        }\n    for (int i=0;i<numbers.size();i++)\n        numbers[i]=(numbers[i]-min)/(max-min);\n    return numbers;\n}\nint main(){\n\tauto result = rescale_to_unit(<FILL_ME>);\n\tassert(issame(result,{0.0,1.0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<float>{2.0, 6.0}", "fn": "rescale_to_unit", "para": "(vector<float> numbers)", "pass": true}
{"task_id": "CPP/21", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> rescale_to_unit(vector<float> numbers){ \n    float min=100000,max=-100000;\n    for (int i=0;i<numbers.size();i++)\n        {\n            if (numbers[i]<min) min=numbers[i];\n            if (numbers[i]>max) max=numbers[i];\n        }\n    for (int i=0;i<numbers.size();i++)\n        numbers[i]=(numbers[i]-min)/(max-min);\n    return numbers;\n}\nint main(){\n\tauto result = rescale_to_unit(<FILL_ME>);\n\tassert(issame(result,{0.0,1.0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<float>{2.0, 6.0}", "fn": "rescale_to_unit", "para": "(vector<float> numbers)", "pass": true}
{"task_id": "CPP/21", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> rescale_to_unit(vector<float> numbers){ \n    float min=100000,max=-100000;\n    for (int i=0;i<numbers.size();i++)\n        {\n            if (numbers[i]<min) min=numbers[i];\n            if (numbers[i]>max) max=numbers[i];\n        }\n    for (int i=0;i<numbers.size();i++)\n        numbers[i]=(numbers[i]-min)/(max-min);\n    return numbers;\n}\nint main(){\n\tauto result = rescale_to_unit(<FILL_ME>);\n\tassert(issame(result,{0.0,1.0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<float>{2.0, 6.0}", "fn": "rescale_to_unit", "para": "(vector<float> numbers)", "pass": true}
{"task_id": "CPP/21", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> rescale_to_unit(vector<float> numbers){ \n    float min=100000,max=-100000;\n    for (int i=0;i<numbers.size();i++)\n        {\n            if (numbers[i]<min) min=numbers[i];\n            if (numbers[i]>max) max=numbers[i];\n        }\n    for (int i=0;i<numbers.size();i++)\n        numbers[i]=(numbers[i]-min)/(max-min);\n    return numbers;\n}\nint main(){\n\tauto result = rescale_to_unit(<FILL_ME>);\n\tassert(issame(result,{0.0,1.0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<float>{2.0, 6.0}", "fn": "rescale_to_unit", "para": "(vector<float> numbers)", "pass": true}
{"task_id": "CPP/21", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> rescale_to_unit(vector<float> numbers){ \n    float min=100000,max=-100000;\n    for (int i=0;i<numbers.size();i++)\n        {\n            if (numbers[i]<min) min=numbers[i];\n            if (numbers[i]>max) max=numbers[i];\n        }\n    for (int i=0;i<numbers.size();i++)\n        numbers[i]=(numbers[i]-min)/(max-min);\n    return numbers;\n}\nint main(){\n\tauto result = rescale_to_unit(<FILL_ME>);\n\tassert(issame(result,{1.0,0.0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{2.0, 1.0}", "fn": "rescale_to_unit", "para": "(vector<float> numbers)", "pass": true}
{"task_id": "CPP/21", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> rescale_to_unit(vector<float> numbers){ \n    float min=100000,max=-100000;\n    for (int i=0;i<numbers.size();i++)\n        {\n            if (numbers[i]<min) min=numbers[i];\n            if (numbers[i]>max) max=numbers[i];\n        }\n    for (int i=0;i<numbers.size();i++)\n        numbers[i]=(numbers[i]-min)/(max-min);\n    return numbers;\n}\nint main(){\n\tauto result = rescale_to_unit(<FILL_ME>);\n\tassert(issame(result,{1.0,0.0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{3.0, 1.0}", "fn": "rescale_to_unit", "para": "(vector<float> numbers)", "pass": true}
{"task_id": "CPP/21", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> rescale_to_unit(vector<float> numbers){ \n    float min=100000,max=-100000;\n    for (int i=0;i<numbers.size();i++)\n        {\n            if (numbers[i]<min) min=numbers[i];\n            if (numbers[i]>max) max=numbers[i];\n        }\n    for (int i=0;i<numbers.size();i++)\n        numbers[i]=(numbers[i]-min)/(max-min);\n    return numbers;\n}\nint main(){\n\tauto result = rescale_to_unit(<FILL_ME>);\n\tassert(issame(result,{1.0,0.0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{3.0, 1.0}", "fn": "rescale_to_unit", "para": "(vector<float> numbers)", "pass": true}
{"task_id": "CPP/21", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> rescale_to_unit(vector<float> numbers){ \n    float min=100000,max=-100000;\n    for (int i=0;i<numbers.size();i++)\n        {\n            if (numbers[i]<min) min=numbers[i];\n            if (numbers[i]>max) max=numbers[i];\n        }\n    for (int i=0;i<numbers.size();i++)\n        numbers[i]=(numbers[i]-min)/(max-min);\n    return numbers;\n}\nint main(){\n\tauto result = rescale_to_unit(<FILL_ME>);\n\tassert(issame(result,{1.0,0.0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{5.0, 3.0}", "fn": "rescale_to_unit", "para": "(vector<float> numbers)", "pass": true}
{"task_id": "CPP/21", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> rescale_to_unit(vector<float> numbers){ \n    float min=100000,max=-100000;\n    for (int i=0;i<numbers.size();i++)\n        {\n            if (numbers[i]<min) min=numbers[i];\n            if (numbers[i]>max) max=numbers[i];\n        }\n    for (int i=0;i<numbers.size();i++)\n        numbers[i]=(numbers[i]-min)/(max-min);\n    return numbers;\n}\nint main(){\n\tauto result = rescale_to_unit(<FILL_ME>);\n\tassert(issame(result,{1.0,0.0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{5.0, 3.0}", "fn": "rescale_to_unit", "para": "(vector<float> numbers)", "pass": true}
{"task_id": "CPP/21", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> rescale_to_unit(vector<float> numbers){ \n    float min=100000,max=-100000;\n    for (int i=0;i<numbers.size();i++)\n        {\n            if (numbers[i]<min) min=numbers[i];\n            if (numbers[i]>max) max=numbers[i];\n        }\n    for (int i=0;i<numbers.size();i++)\n        numbers[i]=(numbers[i]-min)/(max-min);\n    return numbers;\n}\nint main(){\n\tauto result = rescale_to_unit(<FILL_ME>);\n\tassert(issame(result,{0.25,0.0,1.0,0.5,0.75}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{2.0, 1.0, 5.0, 3.0, 4.0}", "fn": "rescale_to_unit", "para": "(vector<float> numbers)", "pass": true}
{"task_id": "CPP/21", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> rescale_to_unit(vector<float> numbers){ \n    float min=100000,max=-100000;\n    for (int i=0;i<numbers.size();i++)\n        {\n            if (numbers[i]<min) min=numbers[i];\n            if (numbers[i]>max) max=numbers[i];\n        }\n    for (int i=0;i<numbers.size();i++)\n        numbers[i]=(numbers[i]-min)/(max-min);\n    return numbers;\n}\nint main(){\n\tauto result = rescale_to_unit(<FILL_ME>);\n\tassert(issame(result,{0.25,0.0,1.0,0.5,0.75}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{2.0, 1.0, 5.0, 3.0, 4.0}", "fn": "rescale_to_unit", "para": "(vector<float> numbers)", "pass": true}
{"task_id": "CPP/21", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> rescale_to_unit(vector<float> numbers){ \n    float min=100000,max=-100000;\n    for (int i=0;i<numbers.size();i++)\n        {\n            if (numbers[i]<min) min=numbers[i];\n            if (numbers[i]>max) max=numbers[i];\n        }\n    for (int i=0;i<numbers.size();i++)\n        numbers[i]=(numbers[i]-min)/(max-min);\n    return numbers;\n}\nint main(){\n\tauto result = rescale_to_unit(<FILL_ME>);\n\tassert(issame(result,{0.25,0.0,1.0,0.5,0.75}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{2.0, 1.0, 5.0, 3.0, 4.0}", "fn": "rescale_to_unit", "para": "(vector<float> numbers)", "pass": true}
{"task_id": "CPP/21", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> rescale_to_unit(vector<float> numbers){ \n    float min=100000,max=-100000;\n    for (int i=0;i<numbers.size();i++)\n        {\n            if (numbers[i]<min) min=numbers[i];\n            if (numbers[i]>max) max=numbers[i];\n        }\n    for (int i=0;i<numbers.size();i++)\n        numbers[i]=(numbers[i]-min)/(max-min);\n    return numbers;\n}\nint main(){\n\tauto result = rescale_to_unit(<FILL_ME>);\n\tassert(issame(result,{0.25,0.0,1.0,0.5,0.75}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{2.0, 1.0, 5.0, 3.0, 4.0}", "fn": "rescale_to_unit", "para": "(vector<float> numbers)", "pass": true}
{"task_id": "CPP/21", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> rescale_to_unit(vector<float> numbers){ \n    float min=100000,max=-100000;\n    for (int i=0;i<numbers.size();i++)\n        {\n            if (numbers[i]<min) min=numbers[i];\n            if (numbers[i]>max) max=numbers[i];\n        }\n    for (int i=0;i<numbers.size();i++)\n        numbers[i]=(numbers[i]-min)/(max-min);\n    return numbers;\n}\nint main(){\n\tauto result = rescale_to_unit(<FILL_ME>);\n\tassert(issame(result,{0.25,0.0,1.0,0.5,0.75}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{2.0, 1.0, 5.0, 3.0, 4.0}", "fn": "rescale_to_unit", "para": "(vector<float> numbers)", "pass": true}
{"task_id": "CPP/21", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> rescale_to_unit(vector<float> numbers){ \n    float min=100000,max=-100000;\n    for (int i=0;i<numbers.size();i++)\n        {\n            if (numbers[i]<min) min=numbers[i];\n            if (numbers[i]>max) max=numbers[i];\n        }\n    for (int i=0;i<numbers.size();i++)\n        numbers[i]=(numbers[i]-min)/(max-min);\n    return numbers;\n}\nint main(){\n\tauto result = rescale_to_unit(<FILL_ME>);\n\tassert(issame(result,{0.0,0.25,0.5,0.75,1.0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{1.0, 2.0, 3.0, 4.0, 5.0}", "fn": "rescale_to_unit", "para": "(vector<float> numbers)", "pass": true}
{"task_id": "CPP/21", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> rescale_to_unit(vector<float> numbers){ \n    float min=100000,max=-100000;\n    for (int i=0;i<numbers.size();i++)\n        {\n            if (numbers[i]<min) min=numbers[i];\n            if (numbers[i]>max) max=numbers[i];\n        }\n    for (int i=0;i<numbers.size();i++)\n        numbers[i]=(numbers[i]-min)/(max-min);\n    return numbers;\n}\nint main(){\n\tauto result = rescale_to_unit(<FILL_ME>);\n\tassert(issame(result,{0.0,0.25,0.5,0.75,1.0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{1.0, 2.0, 3.0, 4.0, 5.0}", "fn": "rescale_to_unit", "para": "(vector<float> numbers)", "pass": true}
{"task_id": "CPP/21", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> rescale_to_unit(vector<float> numbers){ \n    float min=100000,max=-100000;\n    for (int i=0;i<numbers.size();i++)\n        {\n            if (numbers[i]<min) min=numbers[i];\n            if (numbers[i]>max) max=numbers[i];\n        }\n    for (int i=0;i<numbers.size();i++)\n        numbers[i]=(numbers[i]-min)/(max-min);\n    return numbers;\n}\nint main(){\n\tauto result = rescale_to_unit(<FILL_ME>);\n\tassert(issame(result,{0.0,0.25,0.5,0.75,1.0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{1.0, 2.0, 3.0, 4.0, 5.0}", "fn": "rescale_to_unit", "para": "(vector<float> numbers)", "pass": true}
{"task_id": "CPP/21", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> rescale_to_unit(vector<float> numbers){ \n    float min=100000,max=-100000;\n    for (int i=0;i<numbers.size();i++)\n        {\n            if (numbers[i]<min) min=numbers[i];\n            if (numbers[i]>max) max=numbers[i];\n        }\n    for (int i=0;i<numbers.size();i++)\n        numbers[i]=(numbers[i]-min)/(max-min);\n    return numbers;\n}\nint main(){\n\tauto result = rescale_to_unit(<FILL_ME>);\n\tassert(issame(result,{0.0,0.25,0.5,0.75,1.0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{1.0, 2.0, 3.0, 4.0, 5.0}", "fn": "rescale_to_unit", "para": "(vector<float> numbers)", "pass": true}
{"task_id": "CPP/21", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> rescale_to_unit(vector<float> numbers){ \n    float min=100000,max=-100000;\n    for (int i=0;i<numbers.size();i++)\n        {\n            if (numbers[i]<min) min=numbers[i];\n            if (numbers[i]>max) max=numbers[i];\n        }\n    for (int i=0;i<numbers.size();i++)\n        numbers[i]=(numbers[i]-min)/(max-min);\n    return numbers;\n}\nint main(){\n\tauto result = rescale_to_unit(<FILL_ME>);\n\tassert(issame(result,{0.0,0.25,0.5,0.75,1.0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{1.0, 2.0, 3.0, 4.0, 5.0}", "fn": "rescale_to_unit", "para": "(vector<float> numbers)", "pass": true}
{"task_id": "CPP/22", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> filter_integers(list_any values){\n    list_any::iterator it;\n    boost::any anyone;\n    vector<int> out;\n    for (it=values.begin();it!=values.end();it++)\n    {\n         anyone=*it;\n        if( anyone.type() == typeid(int) )\n           out.push_back(boost::any_cast<int>(*it));\n    }\n    return out;\n}\nint main(){\n\tauto result = filter_integers(<FILL_ME>);\n\tassert(issame(result,{3,3,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "list_any{3, \"hello\", 3.14, 3, \"world\"}", "fn": "filter_integers", "para": "(list_any values)", "pass": false}
{"task_id": "CPP/22", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> filter_integers(list_any values){\n    list_any::iterator it;\n    boost::any anyone;\n    vector<int> out;\n    for (it=values.begin();it!=values.end();it++)\n    {\n         anyone=*it;\n        if( anyone.type() == typeid(int) )\n           out.push_back(boost::any_cast<int>(*it));\n    }\n    return out;\n}\nint main(){\n\tauto result = filter_integers(<FILL_ME>);\n\tassert(issame(result,{3,3,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "list_any{3, \"hello\", 3.14, 3, \"world\"}", "fn": "filter_integers", "para": "(list_any values)", "pass": false}
{"task_id": "CPP/22", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> filter_integers(list_any values){\n    list_any::iterator it;\n    boost::any anyone;\n    vector<int> out;\n    for (it=values.begin();it!=values.end();it++)\n    {\n         anyone=*it;\n        if( anyone.type() == typeid(int) )\n           out.push_back(boost::any_cast<int>(*it));\n    }\n    return out;\n}\nint main(){\n\tauto result = filter_integers(<FILL_ME>);\n\tassert(issame(result,{3,3,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "list_any{3, \"hello\", 3.14, 3, \"world\"}", "fn": "filter_integers", "para": "(list_any values)", "pass": false}
{"task_id": "CPP/22", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> filter_integers(list_any values){\n    list_any::iterator it;\n    boost::any anyone;\n    vector<int> out;\n    for (it=values.begin();it!=values.end();it++)\n    {\n         anyone=*it;\n        if( anyone.type() == typeid(int) )\n           out.push_back(boost::any_cast<int>(*it));\n    }\n    return out;\n}\nint main(){\n\tauto result = filter_integers(<FILL_ME>);\n\tassert(issame(result,{3,3,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "list_any{3, \"hello\", 3.14, 3, \"world\"}", "fn": "filter_integers", "para": "(list_any values)", "pass": false}
{"task_id": "CPP/22", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> filter_integers(list_any values){\n    list_any::iterator it;\n    boost::any anyone;\n    vector<int> out;\n    for (it=values.begin();it!=values.end();it++)\n    {\n         anyone=*it;\n        if( anyone.type() == typeid(int) )\n           out.push_back(boost::any_cast<int>(*it));\n    }\n    return out;\n}\nint main(){\n\tauto result = filter_integers(<FILL_ME>);\n\tassert(issame(result,{3,3,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "list_any{3, \"hello\", 3.14, 3, \"world\"}", "fn": "filter_integers", "para": "(list_any values)", "pass": false}
{"task_id": "CPP/22", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> filter_integers(list_any values){\n    list_any::iterator it;\n    boost::any anyone;\n    vector<int> out;\n    for (it=values.begin();it!=values.end();it++)\n    {\n         anyone=*it;\n        if( anyone.type() == typeid(int) )\n           out.push_back(boost::any_cast<int>(*it));\n    }\n    return out;\n}\nint main(){\n\tauto result = filter_integers(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "list_any{1, \"hello\", 3.14, 42}", "fn": "filter_integers", "para": "(list_any values)", "pass": false}
{"task_id": "CPP/22", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> filter_integers(list_any values){\n    list_any::iterator it;\n    boost::any anyone;\n    vector<int> out;\n    for (it=values.begin();it!=values.end();it++)\n    {\n         anyone=*it;\n        if( anyone.type() == typeid(int) )\n           out.push_back(boost::any_cast<int>(*it));\n    }\n    return out;\n}\nint main(){\n\tauto result = filter_integers(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "list_any{1, \"hello\", 3.14, 42}", "fn": "filter_integers", "para": "(list_any values)", "pass": false}
{"task_id": "CPP/22", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> filter_integers(list_any values){\n    list_any::iterator it;\n    boost::any anyone;\n    vector<int> out;\n    for (it=values.begin();it!=values.end();it++)\n    {\n         anyone=*it;\n        if( anyone.type() == typeid(int) )\n           out.push_back(boost::any_cast<int>(*it));\n    }\n    return out;\n}\nint main(){\n\tauto result = filter_integers(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "list_any{1, \"hello\", 3.14, 42}", "fn": "filter_integers", "para": "(list_any values)", "pass": false}
{"task_id": "CPP/22", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> filter_integers(list_any values){\n    list_any::iterator it;\n    boost::any anyone;\n    vector<int> out;\n    for (it=values.begin();it!=values.end();it++)\n    {\n         anyone=*it;\n        if( anyone.type() == typeid(int) )\n           out.push_back(boost::any_cast<int>(*it));\n    }\n    return out;\n}\nint main(){\n\tauto result = filter_integers(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "list_any{1, \"hello\", 3.14, 42}", "fn": "filter_integers", "para": "(list_any values)", "pass": false}
{"task_id": "CPP/22", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> filter_integers(list_any values){\n    list_any::iterator it;\n    boost::any anyone;\n    vector<int> out;\n    for (it=values.begin();it!=values.end();it++)\n    {\n         anyone=*it;\n        if( anyone.type() == typeid(int) )\n           out.push_back(boost::any_cast<int>(*it));\n    }\n    return out;\n}\nint main(){\n\tauto result = filter_integers(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "list_any{1, \"hello\", 3.14, 42}", "fn": "filter_integers", "para": "(list_any values)", "pass": false}
{"task_id": "CPP/22", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> filter_integers(list_any values){\n    list_any::iterator it;\n    boost::any anyone;\n    vector<int> out;\n    for (it=values.begin();it!=values.end();it++)\n    {\n         anyone=*it;\n        if( anyone.type() == typeid(int) )\n           out.push_back(boost::any_cast<int>(*it));\n    }\n    return out;\n}\nint main(){\n\tauto result = filter_integers(<FILL_ME>);\n\tassert(issame(result,{4,9}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "list_any{4, \"hello\", 9, \"world\"}", "fn": "filter_integers", "para": "(list_any values)", "pass": true}
{"task_id": "CPP/22", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> filter_integers(list_any values){\n    list_any::iterator it;\n    boost::any anyone;\n    vector<int> out;\n    for (it=values.begin();it!=values.end();it++)\n    {\n         anyone=*it;\n        if( anyone.type() == typeid(int) )\n           out.push_back(boost::any_cast<int>(*it));\n    }\n    return out;\n}\nint main(){\n\tauto result = filter_integers(<FILL_ME>);\n\tassert(issame(result,{4,9}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "list_any{4, \"hello\", 9, \"world\"}", "fn": "filter_integers", "para": "(list_any values)", "pass": true}
{"task_id": "CPP/22", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> filter_integers(list_any values){\n    list_any::iterator it;\n    boost::any anyone;\n    vector<int> out;\n    for (it=values.begin();it!=values.end();it++)\n    {\n         anyone=*it;\n        if( anyone.type() == typeid(int) )\n           out.push_back(boost::any_cast<int>(*it));\n    }\n    return out;\n}\nint main(){\n\tauto result = filter_integers(<FILL_ME>);\n\tassert(issame(result,{4,9}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "list_any{4, \"hello\", 9, \"world\"}", "fn": "filter_integers", "para": "(list_any values)", "pass": true}
{"task_id": "CPP/22", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> filter_integers(list_any values){\n    list_any::iterator it;\n    boost::any anyone;\n    vector<int> out;\n    for (it=values.begin();it!=values.end();it++)\n    {\n         anyone=*it;\n        if( anyone.type() == typeid(int) )\n           out.push_back(boost::any_cast<int>(*it));\n    }\n    return out;\n}\nint main(){\n\tauto result = filter_integers(<FILL_ME>);\n\tassert(issame(result,{4,9}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "list_any{4, \"hello\", 9, \"world\"}", "fn": "filter_integers", "para": "(list_any values)", "pass": true}
{"task_id": "CPP/22", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> filter_integers(list_any values){\n    list_any::iterator it;\n    boost::any anyone;\n    vector<int> out;\n    for (it=values.begin();it!=values.end();it++)\n    {\n         anyone=*it;\n        if( anyone.type() == typeid(int) )\n           out.push_back(boost::any_cast<int>(*it));\n    }\n    return out;\n}\nint main(){\n\tauto result = filter_integers(<FILL_ME>);\n\tassert(issame(result,{4,9}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n", "filling": "list_any{4, \"hello\", 9, \"world\"}", "fn": "filter_integers", "para": "(list_any values)", "pass": true}
{"task_id": "CPP/23", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint strlen(string str){\n    return str.length();\n}\nint main(){\n\tauto result = strlen(<FILL_ME>);\n\tassert(result==9);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Hello1234\"", "fn": "strlen", "para": "(string str)", "pass": true}
{"task_id": "CPP/23", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint strlen(string str){\n    return str.length();\n}\nint main(){\n\tauto result = strlen(<FILL_ME>);\n\tassert(result==9);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Hello1234\"", "fn": "strlen", "para": "(string str)", "pass": true}
{"task_id": "CPP/23", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint strlen(string str){\n    return str.length();\n}\nint main(){\n\tauto result = strlen(<FILL_ME>);\n\tassert(result==9);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Hello1234\"", "fn": "strlen", "para": "(string str)", "pass": true}
{"task_id": "CPP/23", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint strlen(string str){\n    return str.length();\n}\nint main(){\n\tauto result = strlen(<FILL_ME>);\n\tassert(result==9);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Hello1234\"", "fn": "strlen", "para": "(string str)", "pass": true}
{"task_id": "CPP/23", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint strlen(string str){\n    return str.length();\n}\nint main(){\n\tauto result = strlen(<FILL_ME>);\n\tassert(result==9);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Hello1234\"", "fn": "strlen", "para": "(string str)", "pass": true}
{"task_id": "CPP/23", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint strlen(string str){\n    return str.length();\n}\nint main(){\n\tauto result = strlen(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"a\"", "fn": "strlen", "para": "(string str)", "pass": true}
{"task_id": "CPP/23", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint strlen(string str){\n    return str.length();\n}\nint main(){\n\tauto result = strlen(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"a\"", "fn": "strlen", "para": "(string str)", "pass": true}
{"task_id": "CPP/23", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint strlen(string str){\n    return str.length();\n}\nint main(){\n\tauto result = strlen(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"a\"", "fn": "strlen", "para": "(string str)", "pass": true}
{"task_id": "CPP/23", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint strlen(string str){\n    return str.length();\n}\nint main(){\n\tauto result = strlen(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"a\"", "fn": "strlen", "para": "(string str)", "pass": true}
{"task_id": "CPP/23", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint strlen(string str){\n    return str.length();\n}\nint main(){\n\tauto result = strlen(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"a\"", "fn": "strlen", "para": "(string str)", "pass": true}
{"task_id": "CPP/23", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint strlen(string str){\n    return str.length();\n}\nint main(){\n\tauto result = strlen(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"\"", "fn": "strlen", "para": "(string str)", "pass": true}
{"task_id": "CPP/23", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint strlen(string str){\n    return str.length();\n}\nint main(){\n\tauto result = strlen(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"\"", "fn": "strlen", "para": "(string str)", "pass": true}
{"task_id": "CPP/23", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint strlen(string str){\n    return str.length();\n}\nint main(){\n\tauto result = strlen(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"\"", "fn": "strlen", "para": "(string str)", "pass": true}
{"task_id": "CPP/23", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint strlen(string str){\n    return str.length();\n}\nint main(){\n\tauto result = strlen(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"\"", "fn": "strlen", "para": "(string str)", "pass": true}
{"task_id": "CPP/23", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint strlen(string str){\n    return str.length();\n}\nint main(){\n\tauto result = strlen(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"\"", "fn": "strlen", "para": "(string str)", "pass": true}
{"task_id": "CPP/24", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_divisor(int n){\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0) return  n/i;\n    return 1;\n\n}\nint main(){\n\tauto result = largest_divisor(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "25", "fn": "largest_divisor", "para": "(int n)", "pass": true}
{"task_id": "CPP/24", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_divisor(int n){\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0) return  n/i;\n    return 1;\n\n}\nint main(){\n\tauto result = largest_divisor(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "25", "fn": "largest_divisor", "para": "(int n)", "pass": true}
{"task_id": "CPP/24", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_divisor(int n){\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0) return  n/i;\n    return 1;\n\n}\nint main(){\n\tauto result = largest_divisor(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "25", "fn": "largest_divisor", "para": "(int n)", "pass": true}
{"task_id": "CPP/24", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_divisor(int n){\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0) return  n/i;\n    return 1;\n\n}\nint main(){\n\tauto result = largest_divisor(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "25", "fn": "largest_divisor", "para": "(int n)", "pass": true}
{"task_id": "CPP/24", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_divisor(int n){\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0) return  n/i;\n    return 1;\n\n}\nint main(){\n\tauto result = largest_divisor(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "25", "fn": "largest_divisor", "para": "(int n)", "pass": true}
{"task_id": "CPP/24", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_divisor(int n){\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0) return  n/i;\n    return 1;\n\n}\nint main(){\n\tauto result = largest_divisor(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1", "fn": "largest_divisor", "para": "(int n)", "pass": true}
{"task_id": "CPP/24", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_divisor(int n){\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0) return  n/i;\n    return 1;\n\n}\nint main(){\n\tauto result = largest_divisor(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1", "fn": "largest_divisor", "para": "(int n)", "pass": true}
{"task_id": "CPP/24", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_divisor(int n){\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0) return  n/i;\n    return 1;\n\n}\nint main(){\n\tauto result = largest_divisor(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1", "fn": "largest_divisor", "para": "(int n)", "pass": true}
{"task_id": "CPP/24", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_divisor(int n){\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0) return  n/i;\n    return 1;\n\n}\nint main(){\n\tauto result = largest_divisor(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1", "fn": "largest_divisor", "para": "(int n)", "pass": true}
{"task_id": "CPP/24", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_divisor(int n){\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0) return  n/i;\n    return 1;\n\n}\nint main(){\n\tauto result = largest_divisor(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1", "fn": "largest_divisor", "para": "(int n)", "pass": true}
{"task_id": "CPP/24", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_divisor(int n){\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0) return  n/i;\n    return 1;\n\n}\nint main(){\n\tauto result = largest_divisor(<FILL_ME>);\n\tassert(result==50);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "100", "fn": "largest_divisor", "para": "(int n)", "pass": true}
{"task_id": "CPP/24", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_divisor(int n){\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0) return  n/i;\n    return 1;\n\n}\nint main(){\n\tauto result = largest_divisor(<FILL_ME>);\n\tassert(result==50);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "100", "fn": "largest_divisor", "para": "(int n)", "pass": true}
{"task_id": "CPP/24", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_divisor(int n){\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0) return  n/i;\n    return 1;\n\n}\nint main(){\n\tauto result = largest_divisor(<FILL_ME>);\n\tassert(result==50);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "100", "fn": "largest_divisor", "para": "(int n)", "pass": true}
{"task_id": "CPP/24", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_divisor(int n){\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0) return  n/i;\n    return 1;\n\n}\nint main(){\n\tauto result = largest_divisor(<FILL_ME>);\n\tassert(result==50);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "100", "fn": "largest_divisor", "para": "(int n)", "pass": true}
{"task_id": "CPP/24", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_divisor(int n){\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0) return  n/i;\n    return 1;\n\n}\nint main(){\n\tauto result = largest_divisor(<FILL_ME>);\n\tassert(result==50);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "100", "fn": "largest_divisor", "para": "(int n)", "pass": true}
{"task_id": "CPP/24", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_divisor(int n){\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0) return  n/i;\n    return 1;\n\n}\nint main(){\n\tauto result = largest_divisor(<FILL_ME>);\n\tassert(result==7);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "49", "fn": "largest_divisor", "para": "(int n)", "pass": true}
{"task_id": "CPP/24", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_divisor(int n){\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0) return  n/i;\n    return 1;\n\n}\nint main(){\n\tauto result = largest_divisor(<FILL_ME>);\n\tassert(result==7);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "49", "fn": "largest_divisor", "para": "(int n)", "pass": true}
{"task_id": "CPP/24", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_divisor(int n){\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0) return  n/i;\n    return 1;\n\n}\nint main(){\n\tauto result = largest_divisor(<FILL_ME>);\n\tassert(result==7);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "49", "fn": "largest_divisor", "para": "(int n)", "pass": true}
{"task_id": "CPP/24", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_divisor(int n){\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0) return  n/i;\n    return 1;\n\n}\nint main(){\n\tauto result = largest_divisor(<FILL_ME>);\n\tassert(result==7);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "49", "fn": "largest_divisor", "para": "(int n)", "pass": true}
{"task_id": "CPP/24", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_divisor(int n){\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0) return  n/i;\n    return 1;\n\n}\nint main(){\n\tauto result = largest_divisor(<FILL_ME>);\n\tassert(result==7);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "49", "fn": "largest_divisor", "para": "(int n)", "pass": true}
{"task_id": "CPP/25", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\nint main(){\n\tauto result = factorize(<FILL_ME>);\n\tassert(issame(result,{3,3,19,19}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "1089", "fn": "factorize", "para": "(int n)", "pass": false}
{"task_id": "CPP/25", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\nint main(){\n\tauto result = factorize(<FILL_ME>);\n\tassert(issame(result,{3,3,19,19}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "1089", "fn": "factorize", "para": "(int n)", "pass": false}
{"task_id": "CPP/25", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\nint main(){\n\tauto result = factorize(<FILL_ME>);\n\tassert(issame(result,{3,3,19,19}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "1089", "fn": "factorize", "para": "(int n)", "pass": false}
{"task_id": "CPP/25", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\nint main(){\n\tauto result = factorize(<FILL_ME>);\n\tassert(issame(result,{3,3,19,19}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "1089", "fn": "factorize", "para": "(int n)", "pass": false}
{"task_id": "CPP/25", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\nint main(){\n\tauto result = factorize(<FILL_ME>);\n\tassert(issame(result,{3,3,19,19}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "1089", "fn": "factorize", "para": "(int n)", "pass": false}
{"task_id": "CPP/25", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\nint main(){\n\tauto result = factorize(<FILL_ME>);\n\tassert(issame(result,{2,2,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "8", "fn": "factorize", "para": "(int n)", "pass": true}
{"task_id": "CPP/25", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\nint main(){\n\tauto result = factorize(<FILL_ME>);\n\tassert(issame(result,{2,2,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "8", "fn": "factorize", "para": "(int n)", "pass": true}
{"task_id": "CPP/25", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\nint main(){\n\tauto result = factorize(<FILL_ME>);\n\tassert(issame(result,{2,2,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "8", "fn": "factorize", "para": "(int n)", "pass": true}
{"task_id": "CPP/25", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\nint main(){\n\tauto result = factorize(<FILL_ME>);\n\tassert(issame(result,{2,2,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "8", "fn": "factorize", "para": "(int n)", "pass": true}
{"task_id": "CPP/25", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\nint main(){\n\tauto result = factorize(<FILL_ME>);\n\tassert(issame(result,{2,2,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "8", "fn": "factorize", "para": "(int n)", "pass": true}
{"task_id": "CPP/25", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\nint main(){\n\tauto result = factorize(<FILL_ME>);\n\tassert(issame(result,{3,3,3,19,19,19}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "1048575", "fn": "factorize", "para": "(int n)", "pass": false}
{"task_id": "CPP/25", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\nint main(){\n\tauto result = factorize(<FILL_ME>);\n\tassert(issame(result,{3,3,3,19,19,19}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "324387", "fn": "factorize", "para": "(int n)", "pass": false}
{"task_id": "CPP/25", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\nint main(){\n\tauto result = factorize(<FILL_ME>);\n\tassert(issame(result,{3,3,3,19,19,19}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "1048575", "fn": "factorize", "para": "(int n)", "pass": false}
{"task_id": "CPP/25", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\nint main(){\n\tauto result = factorize(<FILL_ME>);\n\tassert(issame(result,{3,3,3,19,19,19}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "21609", "fn": "factorize", "para": "(int n)", "pass": false}
{"task_id": "CPP/25", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\nint main(){\n\tauto result = factorize(<FILL_ME>);\n\tassert(issame(result,{3,3,3,19,19,19}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "1048575", "fn": "factorize", "para": "(int n)", "pass": false}
{"task_id": "CPP/25", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\nint main(){\n\tauto result = factorize(<FILL_ME>);\n\tassert(issame(result,{3,19,19,19}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "10449", "fn": "factorize", "para": "(int n)", "pass": false}
{"task_id": "CPP/25", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\nint main(){\n\tauto result = factorize(<FILL_ME>);\n\tassert(issame(result,{3,19,19,19}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "10449", "fn": "factorize", "para": "(int n)", "pass": false}
{"task_id": "CPP/25", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\nint main(){\n\tauto result = factorize(<FILL_ME>);\n\tassert(issame(result,{3,19,19,19}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "10449", "fn": "factorize", "para": "(int n)", "pass": false}
{"task_id": "CPP/25", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\nint main(){\n\tauto result = factorize(<FILL_ME>);\n\tassert(issame(result,{3,19,19,19}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "10449", "fn": "factorize", "para": "(int n)", "pass": false}
{"task_id": "CPP/25", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\nint main(){\n\tauto result = factorize(<FILL_ME>);\n\tassert(issame(result,{3,19,19,19}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "10449", "fn": "factorize", "para": "(int n)", "pass": false}
{"task_id": "CPP/25", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\nint main(){\n\tauto result = factorize(<FILL_ME>);\n\tassert(issame(result,{2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "2", "fn": "factorize", "para": "(int n)", "pass": true}
{"task_id": "CPP/25", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\nint main(){\n\tauto result = factorize(<FILL_ME>);\n\tassert(issame(result,{2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "2", "fn": "factorize", "para": "(int n)", "pass": true}
{"task_id": "CPP/25", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\nint main(){\n\tauto result = factorize(<FILL_ME>);\n\tassert(issame(result,{2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "2", "fn": "factorize", "para": "(int n)", "pass": true}
{"task_id": "CPP/25", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\nint main(){\n\tauto result = factorize(<FILL_ME>);\n\tassert(issame(result,{2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "2", "fn": "factorize", "para": "(int n)", "pass": true}
{"task_id": "CPP/25", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\nint main(){\n\tauto result = factorize(<FILL_ME>);\n\tassert(issame(result,{2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "2", "fn": "factorize", "para": "(int n)", "pass": true}
{"task_id": "CPP/25", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\nint main(){\n\tauto result = factorize(<FILL_ME>);\n\tassert(issame(result,{2,3,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "18", "fn": "factorize", "para": "(int n)", "pass": true}
{"task_id": "CPP/25", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\nint main(){\n\tauto result = factorize(<FILL_ME>);\n\tassert(issame(result,{2,3,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "18", "fn": "factorize", "para": "(int n)", "pass": true}
{"task_id": "CPP/25", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\nint main(){\n\tauto result = factorize(<FILL_ME>);\n\tassert(issame(result,{2,3,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "18", "fn": "factorize", "para": "(int n)", "pass": true}
{"task_id": "CPP/25", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\nint main(){\n\tauto result = factorize(<FILL_ME>);\n\tassert(issame(result,{2,3,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "18", "fn": "factorize", "para": "(int n)", "pass": true}
{"task_id": "CPP/25", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\nint main(){\n\tauto result = factorize(<FILL_ME>);\n\tassert(issame(result,{2,3,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "18", "fn": "factorize", "para": "(int n)", "pass": true}
{"task_id": "CPP/25", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\nint main(){\n\tauto result = factorize(<FILL_ME>);\n\tassert(issame(result,{2,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "4", "fn": "factorize", "para": "(int n)", "pass": true}
{"task_id": "CPP/25", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\nint main(){\n\tauto result = factorize(<FILL_ME>);\n\tassert(issame(result,{2,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "4", "fn": "factorize", "para": "(int n)", "pass": true}
{"task_id": "CPP/25", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\nint main(){\n\tauto result = factorize(<FILL_ME>);\n\tassert(issame(result,{2,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "4", "fn": "factorize", "para": "(int n)", "pass": true}
{"task_id": "CPP/25", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\nint main(){\n\tauto result = factorize(<FILL_ME>);\n\tassert(issame(result,{2,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "4", "fn": "factorize", "para": "(int n)", "pass": true}
{"task_id": "CPP/25", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\nint main(){\n\tauto result = factorize(<FILL_ME>);\n\tassert(issame(result,{2,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "4", "fn": "factorize", "para": "(int n)", "pass": true}
{"task_id": "CPP/25", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\nint main(){\n\tauto result = factorize(<FILL_ME>);\n\tassert(issame(result,{3,19}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "57", "fn": "factorize", "para": "(int n)", "pass": true}
{"task_id": "CPP/25", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\nint main(){\n\tauto result = factorize(<FILL_ME>);\n\tassert(issame(result,{3,19}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "57", "fn": "factorize", "para": "(int n)", "pass": true}
{"task_id": "CPP/25", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\nint main(){\n\tauto result = factorize(<FILL_ME>);\n\tassert(issame(result,{3,19}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "57", "fn": "factorize", "para": "(int n)", "pass": true}
{"task_id": "CPP/25", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\nint main(){\n\tauto result = factorize(<FILL_ME>);\n\tassert(issame(result,{3,19}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "57", "fn": "factorize", "para": "(int n)", "pass": true}
{"task_id": "CPP/25", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\nint main(){\n\tauto result = factorize(<FILL_ME>);\n\tassert(issame(result,{3,19}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "57", "fn": "factorize", "para": "(int n)", "pass": true}
{"task_id": "CPP/26", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> remove_duplicates(vector<int> numbers){\n    vector<int> out={};\n    vector<int> has1={};\n    vector<int> has2={};\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;\n        if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())\n        {\n\n            has2.push_back(numbers[i]);\n        }\n        else has1.push_back(numbers[i]);\n    }\n    for (int i=0;i<numbers.size();i++)\n    if (find(has2.begin(),has2.end(),numbers[i])==has2.end())\n        out.push_back(numbers[i]);\n    return out;\n\n\n}\nint main(){\n\tauto result = remove_duplicates(<FILL_ME>);\n\tassert(issame(result,{1,4,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{1, 2, 1, 4, 2, 5}", "fn": "remove_duplicates", "para": "(vector<int> numbers)", "pass": false}
{"task_id": "CPP/26", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> remove_duplicates(vector<int> numbers){\n    vector<int> out={};\n    vector<int> has1={};\n    vector<int> has2={};\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;\n        if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())\n        {\n\n            has2.push_back(numbers[i]);\n        }\n        else has1.push_back(numbers[i]);\n    }\n    for (int i=0;i<numbers.size();i++)\n    if (find(has2.begin(),has2.end(),numbers[i])==has2.end())\n        out.push_back(numbers[i]);\n    return out;\n\n\n}\nint main(){\n\tauto result = remove_duplicates(<FILL_ME>);\n\tassert(issame(result,{1,4,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{1, 2, 1, 4, 2, 5}", "fn": "remove_duplicates", "para": "(vector<int> numbers)", "pass": false}
{"task_id": "CPP/26", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> remove_duplicates(vector<int> numbers){\n    vector<int> out={};\n    vector<int> has1={};\n    vector<int> has2={};\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;\n        if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())\n        {\n\n            has2.push_back(numbers[i]);\n        }\n        else has1.push_back(numbers[i]);\n    }\n    for (int i=0;i<numbers.size();i++)\n    if (find(has2.begin(),has2.end(),numbers[i])==has2.end())\n        out.push_back(numbers[i]);\n    return out;\n\n\n}\nint main(){\n\tauto result = remove_duplicates(<FILL_ME>);\n\tassert(issame(result,{1,4,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, 2, 1, 4, 2, 5}", "fn": "remove_duplicates", "para": "(vector<int> numbers)", "pass": false}
{"task_id": "CPP/26", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> remove_duplicates(vector<int> numbers){\n    vector<int> out={};\n    vector<int> has1={};\n    vector<int> has2={};\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;\n        if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())\n        {\n\n            has2.push_back(numbers[i]);\n        }\n        else has1.push_back(numbers[i]);\n    }\n    for (int i=0;i<numbers.size();i++)\n    if (find(has2.begin(),has2.end(),numbers[i])==has2.end())\n        out.push_back(numbers[i]);\n    return out;\n\n\n}\nint main(){\n\tauto result = remove_duplicates(<FILL_ME>);\n\tassert(issame(result,{1,4,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, 1, 2, 4, 5, 5, 6}", "fn": "remove_duplicates", "para": "(vector<int> numbers)", "pass": false}
{"task_id": "CPP/26", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> remove_duplicates(vector<int> numbers){\n    vector<int> out={};\n    vector<int> has1={};\n    vector<int> has2={};\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;\n        if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())\n        {\n\n            has2.push_back(numbers[i]);\n        }\n        else has1.push_back(numbers[i]);\n    }\n    for (int i=0;i<numbers.size();i++)\n    if (find(has2.begin(),has2.end(),numbers[i])==has2.end())\n        out.push_back(numbers[i]);\n    return out;\n\n\n}\nint main(){\n\tauto result = remove_duplicates(<FILL_ME>);\n\tassert(issame(result,{1,4,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, 1, 4, 5, 5}", "fn": "remove_duplicates", "para": "(vector<int> numbers)", "pass": false}
{"task_id": "CPP/26", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> remove_duplicates(vector<int> numbers){\n    vector<int> out={};\n    vector<int> has1={};\n    vector<int> has2={};\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;\n        if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())\n        {\n\n            has2.push_back(numbers[i]);\n        }\n        else has1.push_back(numbers[i]);\n    }\n    for (int i=0;i<numbers.size();i++)\n    if (find(has2.begin(),has2.end(),numbers[i])==has2.end())\n        out.push_back(numbers[i]);\n    return out;\n\n\n}\nint main(){\n\tauto result = remove_duplicates(<FILL_ME>);\n\tassert(issame(result,{1,2,3,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1,1,2,2,3,3,4,4}", "fn": "remove_duplicates", "para": "(vector<int> numbers)", "pass": false}
{"task_id": "CPP/26", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> remove_duplicates(vector<int> numbers){\n    vector<int> out={};\n    vector<int> has1={};\n    vector<int> has2={};\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;\n        if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())\n        {\n\n            has2.push_back(numbers[i]);\n        }\n        else has1.push_back(numbers[i]);\n    }\n    for (int i=0;i<numbers.size();i++)\n    if (find(has2.begin(),has2.end(),numbers[i])==has2.end())\n        out.push_back(numbers[i]);\n    return out;\n\n\n}\nint main(){\n\tauto result = remove_duplicates(<FILL_ME>);\n\tassert(issame(result,{1,2,3,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1,1,2,2,3,3,4,4}", "fn": "remove_duplicates", "para": "(vector<int> numbers)", "pass": false}
{"task_id": "CPP/26", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> remove_duplicates(vector<int> numbers){\n    vector<int> out={};\n    vector<int> has1={};\n    vector<int> has2={};\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;\n        if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())\n        {\n\n            has2.push_back(numbers[i]);\n        }\n        else has1.push_back(numbers[i]);\n    }\n    for (int i=0;i<numbers.size();i++)\n    if (find(has2.begin(),has2.end(),numbers[i])==has2.end())\n        out.push_back(numbers[i]);\n    return out;\n\n\n}\nint main(){\n\tauto result = remove_duplicates(<FILL_ME>);\n\tassert(issame(result,{1,2,3,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, 2, 3, 4, 1, 2, 5, 6}", "fn": "remove_duplicates", "para": "(vector<int> numbers)", "pass": false}
{"task_id": "CPP/26", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> remove_duplicates(vector<int> numbers){\n    vector<int> out={};\n    vector<int> has1={};\n    vector<int> has2={};\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;\n        if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())\n        {\n\n            has2.push_back(numbers[i]);\n        }\n        else has1.push_back(numbers[i]);\n    }\n    for (int i=0;i<numbers.size();i++)\n    if (find(has2.begin(),has2.end(),numbers[i])==has2.end())\n        out.push_back(numbers[i]);\n    return out;\n\n\n}\nint main(){\n\tauto result = remove_duplicates(<FILL_ME>);\n\tassert(issame(result,{1,2,3,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1,1,2,2,3,3,4,4}", "fn": "remove_duplicates", "para": "(vector<int> numbers)", "pass": false}
{"task_id": "CPP/26", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> remove_duplicates(vector<int> numbers){\n    vector<int> out={};\n    vector<int> has1={};\n    vector<int> has2={};\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;\n        if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())\n        {\n\n            has2.push_back(numbers[i]);\n        }\n        else has1.push_back(numbers[i]);\n    }\n    for (int i=0;i<numbers.size();i++)\n    if (find(has2.begin(),has2.end(),numbers[i])==has2.end())\n        out.push_back(numbers[i]);\n    return out;\n\n\n}\nint main(){\n\tauto result = remove_duplicates(<FILL_ME>);\n\tassert(issame(result,{1,2,3,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, 2, 3, 4, 1, 2, 5, 6}", "fn": "remove_duplicates", "para": "(vector<int> numbers)", "pass": false}
{"task_id": "CPP/26", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> remove_duplicates(vector<int> numbers){\n    vector<int> out={};\n    vector<int> has1={};\n    vector<int> has2={};\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;\n        if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())\n        {\n\n            has2.push_back(numbers[i]);\n        }\n        else has1.push_back(numbers[i]);\n    }\n    for (int i=0;i<numbers.size();i++)\n    if (find(has2.begin(),has2.end(),numbers[i])==has2.end())\n        out.push_back(numbers[i]);\n    return out;\n\n\n}\nint main(){\n\tauto result = remove_duplicates(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{1,2,3,4,5,1,2,3,4,5}", "fn": "remove_duplicates", "para": "(vector<int> numbers)", "pass": true}
{"task_id": "CPP/26", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> remove_duplicates(vector<int> numbers){\n    vector<int> out={};\n    vector<int> has1={};\n    vector<int> has2={};\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;\n        if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())\n        {\n\n            has2.push_back(numbers[i]);\n        }\n        else has1.push_back(numbers[i]);\n    }\n    for (int i=0;i<numbers.size();i++)\n    if (find(has2.begin(),has2.end(),numbers[i])==has2.end())\n        out.push_back(numbers[i]);\n    return out;\n\n\n}\nint main(){\n\tauto result = remove_duplicates(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1,2,3,4,5,1,2,3,4,5}", "fn": "remove_duplicates", "para": "(vector<int> numbers)", "pass": true}
{"task_id": "CPP/26", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> remove_duplicates(vector<int> numbers){\n    vector<int> out={};\n    vector<int> has1={};\n    vector<int> has2={};\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;\n        if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())\n        {\n\n            has2.push_back(numbers[i]);\n        }\n        else has1.push_back(numbers[i]);\n    }\n    for (int i=0;i<numbers.size();i++)\n    if (find(has2.begin(),has2.end(),numbers[i])==has2.end())\n        out.push_back(numbers[i]);\n    return out;\n\n\n}\nint main(){\n\tauto result = remove_duplicates(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{1,2,3,4,4,5,6,6}", "fn": "remove_duplicates", "para": "(vector<int> numbers)", "pass": false}
{"task_id": "CPP/26", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> remove_duplicates(vector<int> numbers){\n    vector<int> out={};\n    vector<int> has1={};\n    vector<int> has2={};\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;\n        if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())\n        {\n\n            has2.push_back(numbers[i]);\n        }\n        else has1.push_back(numbers[i]);\n    }\n    for (int i=0;i<numbers.size();i++)\n    if (find(has2.begin(),has2.end(),numbers[i])==has2.end())\n        out.push_back(numbers[i]);\n    return out;\n\n\n}\nint main(){\n\tauto result = remove_duplicates(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, 2, 3, 4, 4, 5, 6, 6}", "fn": "remove_duplicates", "para": "(vector<int> numbers)", "pass": false}
{"task_id": "CPP/26", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> remove_duplicates(vector<int> numbers){\n    vector<int> out={};\n    vector<int> has1={};\n    vector<int> has2={};\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;\n        if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())\n        {\n\n            has2.push_back(numbers[i]);\n        }\n        else has1.push_back(numbers[i]);\n    }\n    for (int i=0;i<numbers.size();i++)\n    if (find(has2.begin(),has2.end(),numbers[i])==has2.end())\n        out.push_back(numbers[i]);\n    return out;\n\n\n}\nint main(){\n\tauto result = remove_duplicates(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{1,2,3,4,4,5,6,6}", "fn": "remove_duplicates", "para": "(vector<int> numbers)", "pass": false}
{"task_id": "CPP/27", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring filp_case(string str){\n    string out=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        char w=str[i];\n        if (w>=97 and w<=122) {w-=32;}\n        else\n            if (w>=65 and w<=90){ w+=32;}\n        out=out+w;\n    }\n    return out;\n}\nint main(){\n\tauto result = filp_case(<FILL_ME>);\n\tassert(result==\"tHESEVIOLENTDELIGHTSHAVEVIOLENTENDS\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"tHESEVIOLENTDELIGHTSHAVEVIOLENTENDS\"", "fn": "filp_case", "para": "(string str)", "pass": false}
{"task_id": "CPP/27", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring filp_case(string str){\n    string out=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        char w=str[i];\n        if (w>=97 and w<=122) {w-=32;}\n        else\n            if (w>=65 and w<=90){ w+=32;}\n        out=out+w;\n    }\n    return out;\n}\nint main(){\n\tauto result = filp_case(<FILL_ME>);\n\tassert(result==\"tHESEVIOLENTDELIGHTSHAVEVIOLENTENDS\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"tHeSeViOlEnTdElIgHtShAvEvIoLeNtEnDs\"", "fn": "filp_case", "para": "(string str)", "pass": false}
{"task_id": "CPP/27", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring filp_case(string str){\n    string out=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        char w=str[i];\n        if (w>=97 and w<=122) {w-=32;}\n        else\n            if (w>=65 and w<=90){ w+=32;}\n        out=out+w;\n    }\n    return out;\n}\nint main(){\n\tauto result = filp_case(<FILL_ME>);\n\tassert(result==\"tHESEVIOLENTDELIGHTSHAVEVIOLENTENDS\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"", "fn": "filp_case", "para": "(string str)", "pass": false}
{"task_id": "CPP/27", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring filp_case(string str){\n    string out=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        char w=str[i];\n        if (w>=97 and w<=122) {w-=32;}\n        else\n            if (w>=65 and w<=90){ w+=32;}\n        out=out+w;\n    }\n    return out;\n}\nint main(){\n\tauto result = filp_case(<FILL_ME>);\n\tassert(result==\"tHESEVIOLENTDELIGHTSHAVEVIOLENTENDS\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"tHESEVIOLENTDELIGHTSHAVEVIOLENTENDS\"", "fn": "filp_case", "para": "(string str)", "pass": false}
{"task_id": "CPP/27", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring filp_case(string str){\n    string out=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        char w=str[i];\n        if (w>=97 and w<=122) {w-=32;}\n        else\n            if (w>=65 and w<=90){ w+=32;}\n        out=out+w;\n    }\n    return out;\n}\nint main(){\n\tauto result = filp_case(<FILL_ME>);\n\tassert(result==\"tHESEVIOLENTDELIGHTSHAVEVIOLENTENDS\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"tHesE ViOlEnT DeLiGhTs HaVe ViOlEnT EnDs\"", "fn": "filp_case", "para": "(string str)", "pass": false}
{"task_id": "CPP/27", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring filp_case(string str){\n    string out=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        char w=str[i];\n        if (w>=97 and w<=122) {w-=32;}\n        else\n            if (w>=65 and w<=90){ w+=32;}\n        out=out+w;\n    }\n    return out;\n}\nint main(){\n\tauto result = filp_case(<FILL_ME>);\n\tassert(result==\"\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"\"", "fn": "filp_case", "para": "(string str)", "pass": true}
{"task_id": "CPP/27", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring filp_case(string str){\n    string out=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        char w=str[i];\n        if (w>=97 and w<=122) {w-=32;}\n        else\n            if (w>=65 and w<=90){ w+=32;}\n        out=out+w;\n    }\n    return out;\n}\nint main(){\n\tauto result = filp_case(<FILL_ME>);\n\tassert(result==\"\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Hello World\"", "fn": "filp_case", "para": "(string str)", "pass": false}
{"task_id": "CPP/27", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring filp_case(string str){\n    string out=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        char w=str[i];\n        if (w>=97 and w<=122) {w-=32;}\n        else\n            if (w>=65 and w<=90){ w+=32;}\n        out=out+w;\n    }\n    return out;\n}\nint main(){\n\tauto result = filp_case(<FILL_ME>);\n\tassert(result==\"\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Hello World\"", "fn": "filp_case", "para": "(string str)", "pass": false}
{"task_id": "CPP/27", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring filp_case(string str){\n    string out=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        char w=str[i];\n        if (w>=97 and w<=122) {w-=32;}\n        else\n            if (w>=65 and w<=90){ w+=32;}\n        out=out+w;\n    }\n    return out;\n}\nint main(){\n\tauto result = filp_case(<FILL_ME>);\n\tassert(result==\"\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Hello World\"", "fn": "filp_case", "para": "(string str)", "pass": false}
{"task_id": "CPP/27", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring filp_case(string str){\n    string out=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        char w=str[i];\n        if (w>=97 and w<=122) {w-=32;}\n        else\n            if (w>=65 and w<=90){ w+=32;}\n        out=out+w;\n    }\n    return out;\n}\nint main(){\n\tauto result = filp_case(<FILL_ME>);\n\tassert(result==\"\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"\"", "fn": "filp_case", "para": "(string str)", "pass": true}
{"task_id": "CPP/27", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring filp_case(string str){\n    string out=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        char w=str[i];\n        if (w>=97 and w<=122) {w-=32;}\n        else\n            if (w>=65 and w<=90){ w+=32;}\n        out=out+w;\n    }\n    return out;\n}\nint main(){\n\tauto result = filp_case(<FILL_ME>);\n\tassert(result==\"hELLO!\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Hello!\"", "fn": "filp_case", "para": "(string str)", "pass": true}
{"task_id": "CPP/27", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring filp_case(string str){\n    string out=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        char w=str[i];\n        if (w>=97 and w<=122) {w-=32;}\n        else\n            if (w>=65 and w<=90){ w+=32;}\n        out=out+w;\n    }\n    return out;\n}\nint main(){\n\tauto result = filp_case(<FILL_ME>);\n\tassert(result==\"hELLO!\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Hello!\"", "fn": "filp_case", "para": "(string str)", "pass": true}
{"task_id": "CPP/27", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring filp_case(string str){\n    string out=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        char w=str[i];\n        if (w>=97 and w<=122) {w-=32;}\n        else\n            if (w>=65 and w<=90){ w+=32;}\n        out=out+w;\n    }\n    return out;\n}\nint main(){\n\tauto result = filp_case(<FILL_ME>);\n\tassert(result==\"hELLO!\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Hello!\"", "fn": "filp_case", "para": "(string str)", "pass": true}
{"task_id": "CPP/27", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring filp_case(string str){\n    string out=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        char w=str[i];\n        if (w>=97 and w<=122) {w-=32;}\n        else\n            if (w>=65 and w<=90){ w+=32;}\n        out=out+w;\n    }\n    return out;\n}\nint main(){\n\tauto result = filp_case(<FILL_ME>);\n\tassert(result==\"hELLO!\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Hello!\"", "fn": "filp_case", "para": "(string str)", "pass": true}
{"task_id": "CPP/27", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring filp_case(string str){\n    string out=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        char w=str[i];\n        if (w>=97 and w<=122) {w-=32;}\n        else\n            if (w>=65 and w<=90){ w+=32;}\n        out=out+w;\n    }\n    return out;\n}\nint main(){\n\tauto result = filp_case(<FILL_ME>);\n\tassert(result==\"hELLO!\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Hello!\"", "fn": "filp_case", "para": "(string str)", "pass": true}
{"task_id": "CPP/28", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring concatenate(vector<string> strings){\n    string out=\"\";\n    for (int i=0;i<strings.size();i++)\n        out=out+strings[i];\n    return out;\n}\nint main(){\n\tauto result = concatenate(<FILL_ME>);\n\tassert(result==\"\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"Hello\", \"World\"}", "fn": "concatenate", "para": "(vector<string> strings)", "pass": false}
{"task_id": "CPP/28", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring concatenate(vector<string> strings){\n    string out=\"\";\n    for (int i=0;i<strings.size();i++)\n        out=out+strings[i];\n    return out;\n}\nint main(){\n\tauto result = concatenate(<FILL_ME>);\n\tassert(result==\"\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{\"Hello\", \"World\"}", "fn": "concatenate", "para": "(vector<string> strings)", "pass": false}
{"task_id": "CPP/28", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring concatenate(vector<string> strings){\n    string out=\"\";\n    for (int i=0;i<strings.size();i++)\n        out=out+strings[i];\n    return out;\n}\nint main(){\n\tauto result = concatenate(<FILL_ME>);\n\tassert(result==\"\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{\"Hello\", \"World\"}", "fn": "concatenate", "para": "(vector<string> strings)", "pass": false}
{"task_id": "CPP/28", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring concatenate(vector<string> strings){\n    string out=\"\";\n    for (int i=0;i<strings.size();i++)\n        out=out+strings[i];\n    return out;\n}\nint main(){\n\tauto result = concatenate(<FILL_ME>);\n\tassert(result==\"\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"Hello\", \"World\"}", "fn": "concatenate", "para": "(vector<string> strings)", "pass": false}
{"task_id": "CPP/28", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring concatenate(vector<string> strings){\n    string out=\"\";\n    for (int i=0;i<strings.size();i++)\n        out=out+strings[i];\n    return out;\n}\nint main(){\n\tauto result = concatenate(<FILL_ME>);\n\tassert(result==\"\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"Hello\", \"World\"}", "fn": "concatenate", "para": "(vector<string> strings)", "pass": false}
{"task_id": "CPP/28", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring concatenate(vector<string> strings){\n    string out=\"\";\n    for (int i=0;i<strings.size();i++)\n        out=out+strings[i];\n    return out;\n}\nint main(){\n\tauto result = concatenate(<FILL_ME>);\n\tassert(result==\"xyz\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"x\", \"y\", \"z\"}", "fn": "concatenate", "para": "(vector<string> strings)", "pass": true}
{"task_id": "CPP/28", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring concatenate(vector<string> strings){\n    string out=\"\";\n    for (int i=0;i<strings.size();i++)\n        out=out+strings[i];\n    return out;\n}\nint main(){\n\tauto result = concatenate(<FILL_ME>);\n\tassert(result==\"xyz\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{\"x\", \"y\", \"z\"}", "fn": "concatenate", "para": "(vector<string> strings)", "pass": true}
{"task_id": "CPP/28", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring concatenate(vector<string> strings){\n    string out=\"\";\n    for (int i=0;i<strings.size();i++)\n        out=out+strings[i];\n    return out;\n}\nint main(){\n\tauto result = concatenate(<FILL_ME>);\n\tassert(result==\"xyz\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{\"x\", \"y\", \"z\"}", "fn": "concatenate", "para": "(vector<string> strings)", "pass": true}
{"task_id": "CPP/28", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring concatenate(vector<string> strings){\n    string out=\"\";\n    for (int i=0;i<strings.size();i++)\n        out=out+strings[i];\n    return out;\n}\nint main(){\n\tauto result = concatenate(<FILL_ME>);\n\tassert(result==\"xyz\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{\"x\", \"y\", \"z\"}", "fn": "concatenate", "para": "(vector<string> strings)", "pass": true}
{"task_id": "CPP/28", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring concatenate(vector<string> strings){\n    string out=\"\";\n    for (int i=0;i<strings.size();i++)\n        out=out+strings[i];\n    return out;\n}\nint main(){\n\tauto result = concatenate(<FILL_ME>);\n\tassert(result==\"xyz\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{\"x\", \"y\", \"z\"}", "fn": "concatenate", "para": "(vector<string> strings)", "pass": true}
{"task_id": "CPP/28", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring concatenate(vector<string> strings){\n    string out=\"\";\n    for (int i=0;i<strings.size();i++)\n        out=out+strings[i];\n    return out;\n}\nint main(){\n\tauto result = concatenate(<FILL_ME>);\n\tassert(result==\"xyzwk\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"x\", \"y\", \"z\", \"w\", \"k\"}", "fn": "concatenate", "para": "(vector<string> strings)", "pass": true}
{"task_id": "CPP/28", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring concatenate(vector<string> strings){\n    string out=\"\";\n    for (int i=0;i<strings.size();i++)\n        out=out+strings[i];\n    return out;\n}\nint main(){\n\tauto result = concatenate(<FILL_ME>);\n\tassert(result==\"xyzwk\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"xy\",\"z\",\"w\",\"k\"}", "fn": "concatenate", "para": "(vector<string> strings)", "pass": true}
{"task_id": "CPP/28", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring concatenate(vector<string> strings){\n    string out=\"\";\n    for (int i=0;i<strings.size();i++)\n        out=out+strings[i];\n    return out;\n}\nint main(){\n\tauto result = concatenate(<FILL_ME>);\n\tassert(result==\"xyzwk\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{\"xy\",\"z\",\"w\",\"k\"}", "fn": "concatenate", "para": "(vector<string> strings)", "pass": true}
{"task_id": "CPP/28", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring concatenate(vector<string> strings){\n    string out=\"\";\n    for (int i=0;i<strings.size();i++)\n        out=out+strings[i];\n    return out;\n}\nint main(){\n\tauto result = concatenate(<FILL_ME>);\n\tassert(result==\"xyzwk\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"x\", \"y\", \"z\", \"w\", \"k\"}", "fn": "concatenate", "para": "(vector<string> strings)", "pass": true}
{"task_id": "CPP/28", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring concatenate(vector<string> strings){\n    string out=\"\";\n    for (int i=0;i<strings.size();i++)\n        out=out+strings[i];\n    return out;\n}\nint main(){\n\tauto result = concatenate(<FILL_ME>);\n\tassert(result==\"xyzwk\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"xy\",\"z\",\"w\",\"k\"}", "fn": "concatenate", "para": "(vector<string> strings)", "pass": true}
{"task_id": "CPP/29", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n    vector<string> out={};\n    for (int i=0;i<strings.size();i++)\n        if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);\n    return out;\n}\nint main(){\n\tauto result = filter_by_prefix(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<string>{\"apple\", \"banana\", \"orange\", \"grape\"}, \"kiwi\"", "fn": "filter_by_prefix", "para": "(vector<string> strings, string prefix)", "pass": true}
{"task_id": "CPP/29", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n    vector<string> out={};\n    for (int i=0;i<strings.size();i++)\n        if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);\n    return out;\n}\nint main(){\n\tauto result = filter_by_prefix(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"apple\", \"banana\", \"orange\", \"grape\"}, \"kiwi\"", "fn": "filter_by_prefix", "para": "(vector<string> strings, string prefix)", "pass": true}
{"task_id": "CPP/29", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n    vector<string> out={};\n    for (int i=0;i<strings.size();i++)\n        if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);\n    return out;\n}\nint main(){\n\tauto result = filter_by_prefix(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<string>{\"apple\", \"banana\", \"orange\", \"grape\"}, \"kiwi\"", "fn": "filter_by_prefix", "para": "(vector<string> strings, string prefix)", "pass": true}
{"task_id": "CPP/29", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n    vector<string> out={};\n    for (int i=0;i<strings.size();i++)\n        if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);\n    return out;\n}\nint main(){\n\tauto result = filter_by_prefix(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<string>{\"apple\", \"banana\", \"orange\", \"grape\"}, \"kiwi\"", "fn": "filter_by_prefix", "para": "(vector<string> strings, string prefix)", "pass": true}
{"task_id": "CPP/29", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n    vector<string> out={};\n    for (int i=0;i<strings.size();i++)\n        if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);\n    return out;\n}\nint main(){\n\tauto result = filter_by_prefix(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<string>{\"apple\", \"banana\", \"orange\", \"grape\"}, \"kiwi\"", "fn": "filter_by_prefix", "para": "(vector<string> strings, string prefix)", "pass": true}
{"task_id": "CPP/29", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n    vector<string> out={};\n    for (int i=0;i<strings.size();i++)\n        if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);\n    return out;\n}\nint main(){\n\tauto result = filter_by_prefix(<FILL_ME>);\n\tassert(issame(result,{\"xxx\",\"xxxAAA\",\"xxx\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"xxx\",\"xxxAAA\",\"xxx\"}, \"xxx\"", "fn": "filter_by_prefix", "para": "(vector<string> strings, string prefix)", "pass": true}
{"task_id": "CPP/29", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n    vector<string> out={};\n    for (int i=0;i<strings.size();i++)\n        if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);\n    return out;\n}\nint main(){\n\tauto result = filter_by_prefix(<FILL_ME>);\n\tassert(issame(result,{\"xxx\",\"xxxAAA\",\"xxx\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<string>{\"xxx\",\"xxxAAA\",\"xxx\"}, \"xxx\"", "fn": "filter_by_prefix", "para": "(vector<string> strings, string prefix)", "pass": true}
{"task_id": "CPP/29", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n    vector<string> out={};\n    for (int i=0;i<strings.size();i++)\n        if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);\n    return out;\n}\nint main(){\n\tauto result = filter_by_prefix(<FILL_ME>);\n\tassert(issame(result,{\"xxx\",\"xxxAAA\",\"xxx\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"xxx\", \"xxxAAA\", \"xxx\"}, \"xxx\"", "fn": "filter_by_prefix", "para": "(vector<string> strings, string prefix)", "pass": true}
{"task_id": "CPP/29", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n    vector<string> out={};\n    for (int i=0;i<strings.size();i++)\n        if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);\n    return out;\n}\nint main(){\n\tauto result = filter_by_prefix(<FILL_ME>);\n\tassert(issame(result,{\"xxx\",\"xxxAAA\",\"xxx\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"xxx\", \"xxxAAA\", \"xxx\"}, \"xxx\"", "fn": "filter_by_prefix", "para": "(vector<string> strings, string prefix)", "pass": true}
{"task_id": "CPP/29", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n    vector<string> out={};\n    for (int i=0;i<strings.size();i++)\n        if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);\n    return out;\n}\nint main(){\n\tauto result = filter_by_prefix(<FILL_ME>);\n\tassert(issame(result,{\"xxx\",\"xxxAAA\",\"xxx\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"xxx\", \"xxxAAA\", \"xxx\"}, \"xxx\"", "fn": "filter_by_prefix", "para": "(vector<string> strings, string prefix)", "pass": true}
{"task_id": "CPP/30", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> get_positive(vector<float> l){\n    vector<float> out={};\n    for (int i=0;i<l.size();i++)\n        if (l[i]>0) out.push_back(l[i]);\n    return out;\n}\nint main(){\n\tauto result = get_positive(<FILL_ME>);\n\tassert(issame(result,{5,3,2,3,3,9,123,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<float>{5, 3, -2, 0, 2, 3, -3, 9, -4, 123, 1}", "fn": "get_positive", "para": "(vector<float> l)", "pass": false}
{"task_id": "CPP/30", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> get_positive(vector<float> l){\n    vector<float> out={};\n    for (int i=0;i<l.size();i++)\n        if (l[i]>0) out.push_back(l[i]);\n    return out;\n}\nint main(){\n\tauto result = get_positive(<FILL_ME>);\n\tassert(issame(result,{5,3,2,3,3,9,123,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{5, 3, -2, 0, 2, 3, -3, 9, -4, 123, 1}", "fn": "get_positive", "para": "(vector<float> l)", "pass": false}
{"task_id": "CPP/30", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> get_positive(vector<float> l){\n    vector<float> out={};\n    for (int i=0;i<l.size();i++)\n        if (l[i]>0) out.push_back(l[i]);\n    return out;\n}\nint main(){\n\tauto result = get_positive(<FILL_ME>);\n\tassert(issame(result,{5,3,2,3,3,9,123,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<float>{5, 3, -2, 0, 2, 3, -3, 9, -4, 123, 1}", "fn": "get_positive", "para": "(vector<float> l)", "pass": false}
{"task_id": "CPP/30", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> get_positive(vector<float> l){\n    vector<float> out={};\n    for (int i=0;i<l.size();i++)\n        if (l[i]>0) out.push_back(l[i]);\n    return out;\n}\nint main(){\n\tauto result = get_positive(<FILL_ME>);\n\tassert(issame(result,{5,3,2,3,3,9,123,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<float>{5, 3, -2, 0, 2, 3, -3, 9, -4, 123, 1}", "fn": "get_positive", "para": "(vector<float> l)", "pass": false}
{"task_id": "CPP/30", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> get_positive(vector<float> l){\n    vector<float> out={};\n    for (int i=0;i<l.size();i++)\n        if (l[i]>0) out.push_back(l[i]);\n    return out;\n}\nint main(){\n\tauto result = get_positive(<FILL_ME>);\n\tassert(issame(result,{5,3,2,3,3,9,123,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<float>{5, 3, -2, 0, 2, 3, -3, 9, -4, 123, 1}", "fn": "get_positive", "para": "(vector<float> l)", "pass": false}
{"task_id": "CPP/30", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> get_positive(vector<float> l){\n    vector<float> out={};\n    for (int i=0;i<l.size();i++)\n        if (l[i]>0) out.push_back(l[i]);\n    return out;\n}\nint main(){\n\tauto result = get_positive(<FILL_ME>);\n\tassert(issame(result,{4,5,6}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{-1, 2, 0, 4, -5, 6}", "fn": "get_positive", "para": "(vector<float> l)", "pass": false}
{"task_id": "CPP/30", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> get_positive(vector<float> l){\n    vector<float> out={};\n    for (int i=0;i<l.size();i++)\n        if (l[i]>0) out.push_back(l[i]);\n    return out;\n}\nint main(){\n\tauto result = get_positive(<FILL_ME>);\n\tassert(issame(result,{4,5,6}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<float>{-1,2,0,4,-5,6}", "fn": "get_positive", "para": "(vector<float> l)", "pass": false}
{"task_id": "CPP/30", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> get_positive(vector<float> l){\n    vector<float> out={};\n    for (int i=0;i<l.size();i++)\n        if (l[i]>0) out.push_back(l[i]);\n    return out;\n}\nint main(){\n\tauto result = get_positive(<FILL_ME>);\n\tassert(issame(result,{4,5,6}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<float>{-1, 2, -3, 4, 5, 6}", "fn": "get_positive", "para": "(vector<float> l)", "pass": false}
{"task_id": "CPP/30", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> get_positive(vector<float> l){\n    vector<float> out={};\n    for (int i=0;i<l.size();i++)\n        if (l[i]>0) out.push_back(l[i]);\n    return out;\n}\nint main(){\n\tauto result = get_positive(<FILL_ME>);\n\tassert(issame(result,{4,5,6}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<float>{-1, 2, 0, 4, -5, 6}", "fn": "get_positive", "para": "(vector<float> l)", "pass": false}
{"task_id": "CPP/30", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> get_positive(vector<float> l){\n    vector<float> out={};\n    for (int i=0;i<l.size();i++)\n        if (l[i]>0) out.push_back(l[i]);\n    return out;\n}\nint main(){\n\tauto result = get_positive(<FILL_ME>);\n\tassert(issame(result,{4,5,6}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{-1, 2, 0, 4, -5, 6}", "fn": "get_positive", "para": "(vector<float> l)", "pass": false}
{"task_id": "CPP/30", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> get_positive(vector<float> l){\n    vector<float> out={};\n    for (int i=0;i<l.size();i++)\n        if (l[i]>0) out.push_back(l[i]);\n    return out;\n}\nint main(){\n\tauto result = get_positive(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<float>{-1.5, 2.3, -4.5, 6.7, -8.9}", "fn": "get_positive", "para": "(vector<float> l)", "pass": false}
{"task_id": "CPP/30", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> get_positive(vector<float> l){\n    vector<float> out={};\n    for (int i=0;i<l.size();i++)\n        if (l[i]>0) out.push_back(l[i]);\n    return out;\n}\nint main(){\n\tauto result = get_positive(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{-1.5, 2.3, -4.5, 6.7, -8.9}", "fn": "get_positive", "para": "(vector<float> l)", "pass": false}
{"task_id": "CPP/30", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> get_positive(vector<float> l){\n    vector<float> out={};\n    for (int i=0;i<l.size();i++)\n        if (l[i]>0) out.push_back(l[i]);\n    return out;\n}\nint main(){\n\tauto result = get_positive(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<float>{-1.5, 2.3, -4.5, 6.7, -8.9}", "fn": "get_positive", "para": "(vector<float> l)", "pass": false}
{"task_id": "CPP/30", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> get_positive(vector<float> l){\n    vector<float> out={};\n    for (int i=0;i<l.size();i++)\n        if (l[i]>0) out.push_back(l[i]);\n    return out;\n}\nint main(){\n\tauto result = get_positive(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{-1.5, 2.3, -4.5, 6.7, -8.9}", "fn": "get_positive", "para": "(vector<float> l)", "pass": false}
{"task_id": "CPP/30", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> get_positive(vector<float> l){\n    vector<float> out={};\n    for (int i=0;i<l.size();i++)\n        if (l[i]>0) out.push_back(l[i]);\n    return out;\n}\nint main(){\n\tauto result = get_positive(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{-1.5, 2.3, -4.5, 6.7, -8.9}", "fn": "get_positive", "para": "(vector<float> l)", "pass": false}
{"task_id": "CPP/31", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_prime(long long n){\n    if (n<2) return false;\n    for (long long i=2;i*i<=n;i++)\n        if (n%i==0) return false;\n    return true;\n}\nint main(){\n\tauto result = is_prime(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5", "fn": "is_prime", "para": "(long long n)", "pass": true}
{"task_id": "CPP/31", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_prime(long long n){\n    if (n<2) return false;\n    for (long long i=2;i*i<=n;i++)\n        if (n%i==0) return false;\n    return true;\n}\nint main(){\n\tauto result = is_prime(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5", "fn": "is_prime", "para": "(long long n)", "pass": true}
{"task_id": "CPP/31", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_prime(long long n){\n    if (n<2) return false;\n    for (long long i=2;i*i<=n;i++)\n        if (n%i==0) return false;\n    return true;\n}\nint main(){\n\tauto result = is_prime(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5", "fn": "is_prime", "para": "(long long n)", "pass": true}
{"task_id": "CPP/31", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_prime(long long n){\n    if (n<2) return false;\n    for (long long i=2;i*i<=n;i++)\n        if (n%i==0) return false;\n    return true;\n}\nint main(){\n\tauto result = is_prime(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5", "fn": "is_prime", "para": "(long long n)", "pass": true}
{"task_id": "CPP/31", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_prime(long long n){\n    if (n<2) return false;\n    for (long long i=2;i*i<=n;i++)\n        if (n%i==0) return false;\n    return true;\n}\nint main(){\n\tauto result = is_prime(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5", "fn": "is_prime", "para": "(long long n)", "pass": true}
{"task_id": "CPP/31", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_prime(long long n){\n    if (n<2) return false;\n    for (long long i=2;i*i<=n;i++)\n        if (n%i==0) return false;\n    return true;\n}\nint main(){\n\tauto result = is_prime(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "0", "fn": "is_prime", "para": "(long long n)", "pass": true}
{"task_id": "CPP/31", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_prime(long long n){\n    if (n<2) return false;\n    for (long long i=2;i*i<=n;i++)\n        if (n%i==0) return false;\n    return true;\n}\nint main(){\n\tauto result = is_prime(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "0", "fn": "is_prime", "para": "(long long n)", "pass": true}
{"task_id": "CPP/31", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_prime(long long n){\n    if (n<2) return false;\n    for (long long i=2;i*i<=n;i++)\n        if (n%i==0) return false;\n    return true;\n}\nint main(){\n\tauto result = is_prime(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "0", "fn": "is_prime", "para": "(long long n)", "pass": true}
{"task_id": "CPP/31", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_prime(long long n){\n    if (n<2) return false;\n    for (long long i=2;i*i<=n;i++)\n        if (n%i==0) return false;\n    return true;\n}\nint main(){\n\tauto result = is_prime(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "0", "fn": "is_prime", "para": "(long long n)", "pass": true}
{"task_id": "CPP/31", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_prime(long long n){\n    if (n<2) return false;\n    for (long long i=2;i*i<=n;i++)\n        if (n%i==0) return false;\n    return true;\n}\nint main(){\n\tauto result = is_prime(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "0", "fn": "is_prime", "para": "(long long n)", "pass": true}
{"task_id": "CPP/33", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_third(vector<int> l){\n    vector<int> third={};\n    int i;\n    for (i=0;i*3<l.size();i++)\n        third.push_back(l[i*3]);\n    \n    sort(third.begin(),third.end());\n\n    vector<int> out={};\n    for (i=0;i<l.size();i++)\n    {\n        if (i%3==0) {out.push_back(third[i/3]);}\n        else out.push_back(l[i]);\n    }\n    return out;\n\n}\nint main(){\n\tauto result = sort_third(<FILL_ME>);\n\tassert(issame(result,{2,6,9,4,8,3,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{2, 6, 9, 4, 8, 3, 5}", "fn": "sort_third", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/33", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_third(vector<int> l){\n    vector<int> third={};\n    int i;\n    for (i=0;i*3<l.size();i++)\n        third.push_back(l[i*3]);\n    \n    sort(third.begin(),third.end());\n\n    vector<int> out={};\n    for (i=0;i<l.size();i++)\n    {\n        if (i%3==0) {out.push_back(third[i/3]);}\n        else out.push_back(l[i]);\n    }\n    return out;\n\n}\nint main(){\n\tauto result = sort_third(<FILL_ME>);\n\tassert(issame(result,{2,6,9,4,8,3,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{2, 6, 9, 4, 8, 3, 5}", "fn": "sort_third", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/33", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_third(vector<int> l){\n    vector<int> third={};\n    int i;\n    for (i=0;i*3<l.size();i++)\n        third.push_back(l[i*3]);\n    \n    sort(third.begin(),third.end());\n\n    vector<int> out={};\n    for (i=0;i<l.size();i++)\n    {\n        if (i%3==0) {out.push_back(third[i/3]);}\n        else out.push_back(l[i]);\n    }\n    return out;\n\n}\nint main(){\n\tauto result = sort_third(<FILL_ME>);\n\tassert(issame(result,{2,6,9,4,8,3,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{2, 6, 9, 4, 8, 3, 5}", "fn": "sort_third", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/33", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_third(vector<int> l){\n    vector<int> third={};\n    int i;\n    for (i=0;i*3<l.size();i++)\n        third.push_back(l[i*3]);\n    \n    sort(third.begin(),third.end());\n\n    vector<int> out={};\n    for (i=0;i<l.size();i++)\n    {\n        if (i%3==0) {out.push_back(third[i/3]);}\n        else out.push_back(l[i]);\n    }\n    return out;\n\n}\nint main(){\n\tauto result = sort_third(<FILL_ME>);\n\tassert(issame(result,{2,6,9,4,8,3,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{2, 6, 9, 4, 8, 3, 5}", "fn": "sort_third", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/33", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_third(vector<int> l){\n    vector<int> third={};\n    int i;\n    for (i=0;i*3<l.size();i++)\n        third.push_back(l[i*3]);\n    \n    sort(third.begin(),third.end());\n\n    vector<int> out={};\n    for (i=0;i<l.size();i++)\n    {\n        if (i%3==0) {out.push_back(third[i/3]);}\n        else out.push_back(l[i]);\n    }\n    return out;\n\n}\nint main(){\n\tauto result = sort_third(<FILL_ME>);\n\tassert(issame(result,{2,6,9,4,8,3,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{2, 6, 9, 4, 8, 3, 5}", "fn": "sort_third", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/33", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_third(vector<int> l){\n    vector<int> third={};\n    int i;\n    for (i=0;i*3<l.size();i++)\n        third.push_back(l[i*3]);\n    \n    sort(third.begin(),third.end());\n\n    vector<int> out={};\n    for (i=0;i<l.size();i++)\n    {\n        if (i%3==0) {out.push_back(third[i/3]);}\n        else out.push_back(l[i]);\n    }\n    return out;\n\n}\nint main(){\n\tauto result = sort_third(<FILL_ME>);\n\tassert(issame(result,{2,8,3,4,6,9,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{2, 8, 3, 4, 6, 9, 5}", "fn": "sort_third", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/33", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_third(vector<int> l){\n    vector<int> third={};\n    int i;\n    for (i=0;i*3<l.size();i++)\n        third.push_back(l[i*3]);\n    \n    sort(third.begin(),third.end());\n\n    vector<int> out={};\n    for (i=0;i<l.size();i++)\n    {\n        if (i%3==0) {out.push_back(third[i/3]);}\n        else out.push_back(l[i]);\n    }\n    return out;\n\n}\nint main(){\n\tauto result = sort_third(<FILL_ME>);\n\tassert(issame(result,{2,8,3,4,6,9,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{2, 8, 3, 4, 6, 9, 5}", "fn": "sort_third", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/33", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_third(vector<int> l){\n    vector<int> third={};\n    int i;\n    for (i=0;i*3<l.size();i++)\n        third.push_back(l[i*3]);\n    \n    sort(third.begin(),third.end());\n\n    vector<int> out={};\n    for (i=0;i<l.size();i++)\n    {\n        if (i%3==0) {out.push_back(third[i/3]);}\n        else out.push_back(l[i]);\n    }\n    return out;\n\n}\nint main(){\n\tauto result = sort_third(<FILL_ME>);\n\tassert(issame(result,{2,8,3,4,6,9,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{2, 8, 3, 4, 6, 9, 5}", "fn": "sort_third", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/33", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_third(vector<int> l){\n    vector<int> third={};\n    int i;\n    for (i=0;i*3<l.size();i++)\n        third.push_back(l[i*3]);\n    \n    sort(third.begin(),third.end());\n\n    vector<int> out={};\n    for (i=0;i<l.size();i++)\n    {\n        if (i%3==0) {out.push_back(third[i/3]);}\n        else out.push_back(l[i]);\n    }\n    return out;\n\n}\nint main(){\n\tauto result = sort_third(<FILL_ME>);\n\tassert(issame(result,{2,8,3,4,6,9,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{2, 8, 3, 4, 6, 9, 5}", "fn": "sort_third", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/33", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_third(vector<int> l){\n    vector<int> third={};\n    int i;\n    for (i=0;i*3<l.size();i++)\n        third.push_back(l[i*3]);\n    \n    sort(third.begin(),third.end());\n\n    vector<int> out={};\n    for (i=0;i<l.size();i++)\n    {\n        if (i%3==0) {out.push_back(third[i/3]);}\n        else out.push_back(l[i]);\n    }\n    return out;\n\n}\nint main(){\n\tauto result = sort_third(<FILL_ME>);\n\tassert(issame(result,{2,8,3,4,6,9,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{2, 8, 3, 4, 6, 9, 5}", "fn": "sort_third", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/33", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_third(vector<int> l){\n    vector<int> third={};\n    int i;\n    for (i=0;i*3<l.size();i++)\n        third.push_back(l[i*3]);\n    \n    sort(third.begin(),third.end());\n\n    vector<int> out={};\n    for (i=0;i<l.size();i++)\n    {\n        if (i%3==0) {out.push_back(third[i/3]);}\n        else out.push_back(l[i]);\n    }\n    return out;\n\n}\nint main(){\n\tauto result = sort_third(<FILL_ME>);\n\tassert(issame(result,result));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{9, 3, 6, 1, 4, 7, 2, 5, 8}", "fn": "sort_third", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/33", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_third(vector<int> l){\n    vector<int> third={};\n    int i;\n    for (i=0;i*3<l.size();i++)\n        third.push_back(l[i*3]);\n    \n    sort(third.begin(),third.end());\n\n    vector<int> out={};\n    for (i=0;i<l.size();i++)\n    {\n        if (i%3==0) {out.push_back(third[i/3]);}\n        else out.push_back(l[i]);\n    }\n    return out;\n\n}\nint main(){\n\tauto result = sort_third(<FILL_ME>);\n\tassert(issame(result,result));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{9, 3, 6, 1, 4, 7, 2, 5, 8}", "fn": "sort_third", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/33", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_third(vector<int> l){\n    vector<int> third={};\n    int i;\n    for (i=0;i*3<l.size();i++)\n        third.push_back(l[i*3]);\n    \n    sort(third.begin(),third.end());\n\n    vector<int> out={};\n    for (i=0;i<l.size();i++)\n    {\n        if (i%3==0) {out.push_back(third[i/3]);}\n        else out.push_back(l[i]);\n    }\n    return out;\n\n}\nint main(){\n\tauto result = sort_third(<FILL_ME>);\n\tassert(issame(result,result));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{9, 3, 6, 1, 4, 7, 2, 5, 8}", "fn": "sort_third", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/33", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_third(vector<int> l){\n    vector<int> third={};\n    int i;\n    for (i=0;i*3<l.size();i++)\n        third.push_back(l[i*3]);\n    \n    sort(third.begin(),third.end());\n\n    vector<int> out={};\n    for (i=0;i<l.size();i++)\n    {\n        if (i%3==0) {out.push_back(third[i/3]);}\n        else out.push_back(l[i]);\n    }\n    return out;\n\n}\nint main(){\n\tauto result = sort_third(<FILL_ME>);\n\tassert(issame(result,result));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{9, 3, 6, 1, 4, 7, 2, 5, 8}", "fn": "sort_third", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/33", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_third(vector<int> l){\n    vector<int> third={};\n    int i;\n    for (i=0;i*3<l.size();i++)\n        third.push_back(l[i*3]);\n    \n    sort(third.begin(),third.end());\n\n    vector<int> out={};\n    for (i=0;i<l.size();i++)\n    {\n        if (i%3==0) {out.push_back(third[i/3]);}\n        else out.push_back(l[i]);\n    }\n    return out;\n\n}\nint main(){\n\tauto result = sort_third(<FILL_ME>);\n\tassert(issame(result,result));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{9, 3, 6, 1, 4, 7, 2, 5, 8}", "fn": "sort_third", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/33", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_third(vector<int> l){\n    vector<int> third={};\n    int i;\n    for (i=0;i*3<l.size();i++)\n        third.push_back(l[i*3]);\n    \n    sort(third.begin(),third.end());\n\n    vector<int> out={};\n    for (i=0;i<l.size();i++)\n    {\n        if (i%3==0) {out.push_back(third[i/3]);}\n        else out.push_back(l[i]);\n    }\n    return out;\n\n}\nint main(){\n\tauto result = sort_third(<FILL_ME>);\n\tassert(issame(result,{2,6,3,4,8,9,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{2, 6, 3, 4, 8, 9, 5}", "fn": "sort_third", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/33", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_third(vector<int> l){\n    vector<int> third={};\n    int i;\n    for (i=0;i*3<l.size();i++)\n        third.push_back(l[i*3]);\n    \n    sort(third.begin(),third.end());\n\n    vector<int> out={};\n    for (i=0;i<l.size();i++)\n    {\n        if (i%3==0) {out.push_back(third[i/3]);}\n        else out.push_back(l[i]);\n    }\n    return out;\n\n}\nint main(){\n\tauto result = sort_third(<FILL_ME>);\n\tassert(issame(result,{2,6,3,4,8,9,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{2, 6, 3, 4, 8, 9, 5}", "fn": "sort_third", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/33", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_third(vector<int> l){\n    vector<int> third={};\n    int i;\n    for (i=0;i*3<l.size();i++)\n        third.push_back(l[i*3]);\n    \n    sort(third.begin(),third.end());\n\n    vector<int> out={};\n    for (i=0;i<l.size();i++)\n    {\n        if (i%3==0) {out.push_back(third[i/3]);}\n        else out.push_back(l[i]);\n    }\n    return out;\n\n}\nint main(){\n\tauto result = sort_third(<FILL_ME>);\n\tassert(issame(result,{2,6,3,4,8,9,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{2, 6, 3, 4, 8, 9, 5}", "fn": "sort_third", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/33", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_third(vector<int> l){\n    vector<int> third={};\n    int i;\n    for (i=0;i*3<l.size();i++)\n        third.push_back(l[i*3]);\n    \n    sort(third.begin(),third.end());\n\n    vector<int> out={};\n    for (i=0;i<l.size();i++)\n    {\n        if (i%3==0) {out.push_back(third[i/3]);}\n        else out.push_back(l[i]);\n    }\n    return out;\n\n}\nint main(){\n\tauto result = sort_third(<FILL_ME>);\n\tassert(issame(result,{2,6,3,4,8,9,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{2, 6, 3, 4, 8, 9, 5}", "fn": "sort_third", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/33", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_third(vector<int> l){\n    vector<int> third={};\n    int i;\n    for (i=0;i*3<l.size();i++)\n        third.push_back(l[i*3]);\n    \n    sort(third.begin(),third.end());\n\n    vector<int> out={};\n    for (i=0;i<l.size();i++)\n    {\n        if (i%3==0) {out.push_back(third[i/3]);}\n        else out.push_back(l[i]);\n    }\n    return out;\n\n}\nint main(){\n\tauto result = sort_third(<FILL_ME>);\n\tassert(issame(result,{2,6,3,4,8,9,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{2, 6, 3, 4, 8, 9, 5}", "fn": "sort_third", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/33", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_third(vector<int> l){\n    vector<int> third={};\n    int i;\n    for (i=0;i*3<l.size();i++)\n        third.push_back(l[i*3]);\n    \n    sort(third.begin(),third.end());\n\n    vector<int> out={};\n    for (i=0;i<l.size();i++)\n    {\n        if (i%3==0) {out.push_back(third[i/3]);}\n        else out.push_back(l[i]);\n    }\n    return out;\n\n}\nint main(){\n\tauto result = sort_third(<FILL_ME>);\n\tassert(issame(result,{2,6,3,4,8,9,5,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{2, 6, 3, 4, 8, 9, 5, 1}", "fn": "sort_third", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/33", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_third(vector<int> l){\n    vector<int> third={};\n    int i;\n    for (i=0;i*3<l.size();i++)\n        third.push_back(l[i*3]);\n    \n    sort(third.begin(),third.end());\n\n    vector<int> out={};\n    for (i=0;i<l.size();i++)\n    {\n        if (i%3==0) {out.push_back(third[i/3]);}\n        else out.push_back(l[i]);\n    }\n    return out;\n\n}\nint main(){\n\tauto result = sort_third(<FILL_ME>);\n\tassert(issame(result,{2,6,3,4,8,9,5,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{2, 6, 3, 4, 8, 9, 5, 1}", "fn": "sort_third", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/33", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_third(vector<int> l){\n    vector<int> third={};\n    int i;\n    for (i=0;i*3<l.size();i++)\n        third.push_back(l[i*3]);\n    \n    sort(third.begin(),third.end());\n\n    vector<int> out={};\n    for (i=0;i<l.size();i++)\n    {\n        if (i%3==0) {out.push_back(third[i/3]);}\n        else out.push_back(l[i]);\n    }\n    return out;\n\n}\nint main(){\n\tauto result = sort_third(<FILL_ME>);\n\tassert(issame(result,{2,6,3,4,8,9,5,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{2, 6, 3, 4, 8, 9, 5, 1}", "fn": "sort_third", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/33", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_third(vector<int> l){\n    vector<int> third={};\n    int i;\n    for (i=0;i*3<l.size();i++)\n        third.push_back(l[i*3]);\n    \n    sort(third.begin(),third.end());\n\n    vector<int> out={};\n    for (i=0;i<l.size();i++)\n    {\n        if (i%3==0) {out.push_back(third[i/3]);}\n        else out.push_back(l[i]);\n    }\n    return out;\n\n}\nint main(){\n\tauto result = sort_third(<FILL_ME>);\n\tassert(issame(result,{2,6,3,4,8,9,5,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{2, 6, 3, 4, 8, 9, 5, 1}", "fn": "sort_third", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/33", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_third(vector<int> l){\n    vector<int> third={};\n    int i;\n    for (i=0;i*3<l.size();i++)\n        third.push_back(l[i*3]);\n    \n    sort(third.begin(),third.end());\n\n    vector<int> out={};\n    for (i=0;i<l.size();i++)\n    {\n        if (i%3==0) {out.push_back(third[i/3]);}\n        else out.push_back(l[i]);\n    }\n    return out;\n\n}\nint main(){\n\tauto result = sort_third(<FILL_ME>);\n\tassert(issame(result,{2,6,3,4,8,9,5,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{2, 6, 3, 4, 8, 9, 5, 1}", "fn": "sort_third", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/34", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique(vector<int> l){\n    vector<int> out={};\n    for (int i=0;i<l.size();i++)\n        if (find(out.begin(),out.end(),l[i])==out.end())\n            out.push_back(l[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = unique(<FILL_ME>);\n\tassert(issame(result,{0,2,3,5,9,123}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{0, 2, 3, 5, 9, 3, 2, 123}", "fn": "unique", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/34", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique(vector<int> l){\n    vector<int> out={};\n    for (int i=0;i<l.size();i++)\n        if (find(out.begin(),out.end(),l[i])==out.end())\n            out.push_back(l[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = unique(<FILL_ME>);\n\tassert(issame(result,{0,2,3,5,9,123}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{0, 2, 3, 5, 9, 3, 2, 123}", "fn": "unique", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/34", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique(vector<int> l){\n    vector<int> out={};\n    for (int i=0;i<l.size();i++)\n        if (find(out.begin(),out.end(),l[i])==out.end())\n            out.push_back(l[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = unique(<FILL_ME>);\n\tassert(issame(result,{0,2,3,5,9,123}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{0, 2, 3, 5, 9, 3, 2, 123}", "fn": "unique", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/34", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique(vector<int> l){\n    vector<int> out={};\n    for (int i=0;i<l.size();i++)\n        if (find(out.begin(),out.end(),l[i])==out.end())\n            out.push_back(l[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = unique(<FILL_ME>);\n\tassert(issame(result,{0,2,3,5,9,123}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{0, 2, 3, 5, 9, 3, 2, 123}", "fn": "unique", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/34", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique(vector<int> l){\n    vector<int> out={};\n    for (int i=0;i<l.size();i++)\n        if (find(out.begin(),out.end(),l[i])==out.end())\n            out.push_back(l[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = unique(<FILL_ME>);\n\tassert(issame(result,{0,2,3,5,9,123}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{0, 2, 3, 5, 9, 3, 2, 123}", "fn": "unique", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/35", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat max_element(vector<float> l){\n  float max=-10000;\n  for (int i=0;i<l.size();i++)\n  if (max<l[i]) max=l[i];\n  return max;\n\n}\nint main(){\n\tauto result = max_element(<FILL_ME>);\n\tassert(abs(result-3)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{1.5, 2.5, 3.0, 2.0}", "fn": "max_element", "para": "(vector<float> l)", "pass": true}
{"task_id": "CPP/35", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat max_element(vector<float> l){\n  float max=-10000;\n  for (int i=0;i<l.size();i++)\n  if (max<l[i]) max=l[i];\n  return max;\n\n}\nint main(){\n\tauto result = max_element(<FILL_ME>);\n\tassert(abs(result-3)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{1, 2, 3, 4, 5}", "fn": "max_element", "para": "(vector<float> l)", "pass": false}
{"task_id": "CPP/35", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat max_element(vector<float> l){\n  float max=-10000;\n  for (int i=0;i<l.size();i++)\n  if (max<l[i]) max=l[i];\n  return max;\n\n}\nint main(){\n\tauto result = max_element(<FILL_ME>);\n\tassert(abs(result-3)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{1.5, 2.5, 3.0, 2.0}", "fn": "max_element", "para": "(vector<float> l)", "pass": true}
{"task_id": "CPP/35", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat max_element(vector<float> l){\n  float max=-10000;\n  for (int i=0;i<l.size();i++)\n  if (max<l[i]) max=l[i];\n  return max;\n\n}\nint main(){\n\tauto result = max_element(<FILL_ME>);\n\tassert(abs(result-3)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{1.5, 2.5, 3.0, 2.0}", "fn": "max_element", "para": "(vector<float> l)", "pass": true}
{"task_id": "CPP/35", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat max_element(vector<float> l){\n  float max=-10000;\n  for (int i=0;i<l.size();i++)\n  if (max<l[i]) max=l[i];\n  return max;\n\n}\nint main(){\n\tauto result = max_element(<FILL_ME>);\n\tassert(abs(result-3)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{1, 2, 3, 4, 5}", "fn": "max_element", "para": "(vector<float> l)", "pass": false}
{"task_id": "CPP/35", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat max_element(vector<float> l){\n  float max=-10000;\n  for (int i=0;i<l.size();i++)\n  if (max<l[i]) max=l[i];\n  return max;\n\n}\nint main(){\n\tauto result = max_element(<FILL_ME>);\n\tassert(abs(result-124)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{12, 45, 78, 124, 56}", "fn": "max_element", "para": "(vector<float> l)", "pass": true}
{"task_id": "CPP/35", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat max_element(vector<float> l){\n  float max=-10000;\n  for (int i=0;i<l.size();i++)\n  if (max<l[i]) max=l[i];\n  return max;\n\n}\nint main(){\n\tauto result = max_element(<FILL_ME>);\n\tassert(abs(result-124)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{12, 45, 78, 124, 56}", "fn": "max_element", "para": "(vector<float> l)", "pass": true}
{"task_id": "CPP/35", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat max_element(vector<float> l){\n  float max=-10000;\n  for (int i=0;i<l.size();i++)\n  if (max<l[i]) max=l[i];\n  return max;\n\n}\nint main(){\n\tauto result = max_element(<FILL_ME>);\n\tassert(abs(result-124)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{12, 45, 78, 124, 56}", "fn": "max_element", "para": "(vector<float> l)", "pass": true}
{"task_id": "CPP/35", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat max_element(vector<float> l){\n  float max=-10000;\n  for (int i=0;i<l.size();i++)\n  if (max<l[i]) max=l[i];\n  return max;\n\n}\nint main(){\n\tauto result = max_element(<FILL_ME>);\n\tassert(abs(result-124)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{12, 45, 78, 124, 56}", "fn": "max_element", "para": "(vector<float> l)", "pass": true}
{"task_id": "CPP/35", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat max_element(vector<float> l){\n  float max=-10000;\n  for (int i=0;i<l.size();i++)\n  if (max<l[i]) max=l[i];\n  return max;\n\n}\nint main(){\n\tauto result = max_element(<FILL_ME>);\n\tassert(abs(result-124)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{12, 45, 78, 124, 56}", "fn": "max_element", "para": "(vector<float> l)", "pass": true}
{"task_id": "CPP/36", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n    int count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\nint main(){\n\tauto result = fizz_buzz(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "50", "fn": "fizz_buzz", "para": "(int n)", "pass": false}
{"task_id": "CPP/36", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n    int count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\nint main(){\n\tauto result = fizz_buzz(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "30", "fn": "fizz_buzz", "para": "(int n)", "pass": false}
{"task_id": "CPP/36", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n    int count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\nint main(){\n\tauto result = fizz_buzz(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "50", "fn": "fizz_buzz", "para": "(int n)", "pass": false}
{"task_id": "CPP/36", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n    int count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\nint main(){\n\tauto result = fizz_buzz(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "20", "fn": "fizz_buzz", "para": "(int n)", "pass": false}
{"task_id": "CPP/36", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n    int count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\nint main(){\n\tauto result = fizz_buzz(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "100", "fn": "fizz_buzz", "para": "(int n)", "pass": false}
{"task_id": "CPP/36", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n    int count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\nint main(){\n\tauto result = fizz_buzz(<FILL_ME>);\n\tassert(result==8026);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "100000", "fn": "fizz_buzz", "para": "(int n)", "pass": true}
{"task_id": "CPP/36", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n    int count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\nint main(){\n\tauto result = fizz_buzz(<FILL_ME>);\n\tassert(result==8026);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "100000", "fn": "fizz_buzz", "para": "(int n)", "pass": true}
{"task_id": "CPP/36", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n    int count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\nint main(){\n\tauto result = fizz_buzz(<FILL_ME>);\n\tassert(result==8026);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "100000", "fn": "fizz_buzz", "para": "(int n)", "pass": true}
{"task_id": "CPP/36", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n    int count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\nint main(){\n\tauto result = fizz_buzz(<FILL_ME>);\n\tassert(result==8026);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "100000", "fn": "fizz_buzz", "para": "(int n)", "pass": true}
{"task_id": "CPP/36", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n    int count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\nint main(){\n\tauto result = fizz_buzz(<FILL_ME>);\n\tassert(result==8026);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "100000", "fn": "fizz_buzz", "para": "(int n)", "pass": true}
{"task_id": "CPP/36", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n    int count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\nint main(){\n\tauto result = fizz_buzz(<FILL_ME>);\n\tassert(result==6);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "50", "fn": "fizz_buzz", "para": "(int n)", "pass": false}
{"task_id": "CPP/36", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n    int count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\nint main(){\n\tauto result = fizz_buzz(<FILL_ME>);\n\tassert(result==6);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "100", "fn": "fizz_buzz", "para": "(int n)", "pass": false}
{"task_id": "CPP/36", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n    int count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\nint main(){\n\tauto result = fizz_buzz(<FILL_ME>);\n\tassert(result==6);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "71", "fn": "fizz_buzz", "para": "(int n)", "pass": false}
{"task_id": "CPP/36", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n    int count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\nint main(){\n\tauto result = fizz_buzz(<FILL_ME>);\n\tassert(result==6);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "85", "fn": "fizz_buzz", "para": "(int n)", "pass": false}
{"task_id": "CPP/36", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n    int count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\nint main(){\n\tauto result = fizz_buzz(<FILL_ME>);\n\tassert(result==6);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "77", "fn": "fizz_buzz", "para": "(int n)", "pass": false}
{"task_id": "CPP/36", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n    int count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\nint main(){\n\tauto result = fizz_buzz(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "100", "fn": "fizz_buzz", "para": "(int n)", "pass": false}
{"task_id": "CPP/36", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n    int count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\nint main(){\n\tauto result = fizz_buzz(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1", "fn": "fizz_buzz", "para": "(int n)", "pass": true}
{"task_id": "CPP/36", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n    int count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\nint main(){\n\tauto result = fizz_buzz(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "0", "fn": "fizz_buzz", "para": "(int n)", "pass": true}
{"task_id": "CPP/36", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n    int count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\nint main(){\n\tauto result = fizz_buzz(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1", "fn": "fizz_buzz", "para": "(int n)", "pass": true}
{"task_id": "CPP/36", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n    int count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\nint main(){\n\tauto result = fizz_buzz(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10", "fn": "fizz_buzz", "para": "(int n)", "pass": true}
{"task_id": "CPP/36", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n    int count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\nint main(){\n\tauto result = fizz_buzz(<FILL_ME>);\n\tassert(result==192);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1000", "fn": "fizz_buzz", "para": "(int n)", "pass": false}
{"task_id": "CPP/36", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n    int count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\nint main(){\n\tauto result = fizz_buzz(<FILL_ME>);\n\tassert(result==192);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1000", "fn": "fizz_buzz", "para": "(int n)", "pass": false}
{"task_id": "CPP/36", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n    int count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\nint main(){\n\tauto result = fizz_buzz(<FILL_ME>);\n\tassert(result==192);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1000", "fn": "fizz_buzz", "para": "(int n)", "pass": false}
{"task_id": "CPP/36", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n    int count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\nint main(){\n\tauto result = fizz_buzz(<FILL_ME>);\n\tassert(result==192);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1000", "fn": "fizz_buzz", "para": "(int n)", "pass": false}
{"task_id": "CPP/36", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n    int count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\nint main(){\n\tauto result = fizz_buzz(<FILL_ME>);\n\tassert(result==192);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1000", "fn": "fizz_buzz", "para": "(int n)", "pass": false}
{"task_id": "CPP/36", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n    int count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\nint main(){\n\tauto result = fizz_buzz(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "50", "fn": "fizz_buzz", "para": "(int n)", "pass": false}
{"task_id": "CPP/36", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n    int count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\nint main(){\n\tauto result = fizz_buzz(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "100", "fn": "fizz_buzz", "para": "(int n)", "pass": true}
{"task_id": "CPP/36", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n    int count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\nint main(){\n\tauto result = fizz_buzz(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "100", "fn": "fizz_buzz", "para": "(int n)", "pass": true}
{"task_id": "CPP/36", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n    int count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\nint main(){\n\tauto result = fizz_buzz(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "30", "fn": "fizz_buzz", "para": "(int n)", "pass": false}
{"task_id": "CPP/36", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n    int count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\nint main(){\n\tauto result = fizz_buzz(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "100", "fn": "fizz_buzz", "para": "(int n)", "pass": true}
{"task_id": "CPP/36", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n    int count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\nint main(){\n\tauto result = fizz_buzz(<FILL_ME>);\n\tassert(result==639);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10000", "fn": "fizz_buzz", "para": "(int n)", "pass": true}
{"task_id": "CPP/36", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n    int count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\nint main(){\n\tauto result = fizz_buzz(<FILL_ME>);\n\tassert(result==639);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10000", "fn": "fizz_buzz", "para": "(int n)", "pass": true}
{"task_id": "CPP/36", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n    int count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\nint main(){\n\tauto result = fizz_buzz(<FILL_ME>);\n\tassert(result==639);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10000", "fn": "fizz_buzz", "para": "(int n)", "pass": true}
{"task_id": "CPP/36", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n    int count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\nint main(){\n\tauto result = fizz_buzz(<FILL_ME>);\n\tassert(result==639);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10000", "fn": "fizz_buzz", "para": "(int n)", "pass": true}
{"task_id": "CPP/36", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n    int count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\nint main(){\n\tauto result = fizz_buzz(<FILL_ME>);\n\tassert(result==639);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10000", "fn": "fizz_buzz", "para": "(int n)", "pass": true}
{"task_id": "CPP/37", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<float> sort_even(vector<float> l){\n    vector<float> out={};\n    vector<float> even={};\n    for (int i=0;i*2<l.size();i++)\n        even.push_back(l[i*2]);\n    sort(even.begin(),even.end());\n    for (int i=0;i<l.size();i++)\n    {\n        if (i%2==0) out.push_back(even[i/2]);\n        if (i%2==1) out.push_back(l[i]);\n    }\n    return out;\n}\nint main(){\n\tauto result = sort_even(<FILL_ME>);\n\tassert(issame(result,{-10,3,-5,2,-3,3,5,0,9,1,123}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{3, 0, -10, 5, 2, -3, 1, 9, 3, -5, 123}", "fn": "sort_even", "para": "(vector<float> l)", "pass": false}
{"task_id": "CPP/37", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<float> sort_even(vector<float> l){\n    vector<float> out={};\n    vector<float> even={};\n    for (int i=0;i*2<l.size();i++)\n        even.push_back(l[i*2]);\n    sort(even.begin(),even.end());\n    for (int i=0;i<l.size();i++)\n    {\n        if (i%2==0) out.push_back(even[i/2]);\n        if (i%2==1) out.push_back(l[i]);\n    }\n    return out;\n}\nint main(){\n\tauto result = sort_even(<FILL_ME>);\n\tassert(issame(result,{-10,3,-5,2,-3,3,5,0,9,1,123}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{3, 0, -10, 5, 2, -3, 1, 9, 3, -5, 123}", "fn": "sort_even", "para": "(vector<float> l)", "pass": false}
{"task_id": "CPP/37", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<float> sort_even(vector<float> l){\n    vector<float> out={};\n    vector<float> even={};\n    for (int i=0;i*2<l.size();i++)\n        even.push_back(l[i*2]);\n    sort(even.begin(),even.end());\n    for (int i=0;i<l.size();i++)\n    {\n        if (i%2==0) out.push_back(even[i/2]);\n        if (i%2==1) out.push_back(l[i]);\n    }\n    return out;\n}\nint main(){\n\tauto result = sort_even(<FILL_ME>);\n\tassert(issame(result,{-10,3,-5,2,-3,3,5,0,9,1,123}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{-10,3,-5,2,-3,3,5,0,9,1,123}", "fn": "sort_even", "para": "(vector<float> l)", "pass": true}
{"task_id": "CPP/37", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<float> sort_even(vector<float> l){\n    vector<float> out={};\n    vector<float> even={};\n    for (int i=0;i*2<l.size();i++)\n        even.push_back(l[i*2]);\n    sort(even.begin(),even.end());\n    for (int i=0;i<l.size();i++)\n    {\n        if (i%2==0) out.push_back(even[i/2]);\n        if (i%2==1) out.push_back(l[i]);\n    }\n    return out;\n}\nint main(){\n\tauto result = sort_even(<FILL_ME>);\n\tassert(issame(result,{-10,3,-5,2,-3,3,5,0,9,1,123}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{3, 0, -10, 5, 2, -3, 1, 9, 3, -5, 123}", "fn": "sort_even", "para": "(vector<float> l)", "pass": false}
{"task_id": "CPP/37", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<float> sort_even(vector<float> l){\n    vector<float> out={};\n    vector<float> even={};\n    for (int i=0;i*2<l.size();i++)\n        even.push_back(l[i*2]);\n    sort(even.begin(),even.end());\n    for (int i=0;i<l.size();i++)\n    {\n        if (i%2==0) out.push_back(even[i/2]);\n        if (i%2==1) out.push_back(l[i]);\n    }\n    return out;\n}\nint main(){\n\tauto result = sort_even(<FILL_ME>);\n\tassert(issame(result,{-10,3,-5,2,-3,3,5,0,9,1,123}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{-3,1,5,2,-5,3,0,9,-10,3,123}", "fn": "sort_even", "para": "(vector<float> l)", "pass": false}
{"task_id": "CPP/37", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<float> sort_even(vector<float> l){\n    vector<float> out={};\n    vector<float> even={};\n    for (int i=0;i*2<l.size();i++)\n        even.push_back(l[i*2]);\n    sort(even.begin(),even.end());\n    for (int i=0;i<l.size();i++)\n    {\n        if (i%2==0) out.push_back(even[i/2]);\n        if (i%2==1) out.push_back(l[i]);\n    }\n    return out;\n}\nint main(){\n\tauto result = sort_even(<FILL_ME>);\n\tassert(issame(result,{1,2,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{3,1,2}", "fn": "sort_even", "para": "(vector<float> l)", "pass": false}
{"task_id": "CPP/37", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<float> sort_even(vector<float> l){\n    vector<float> out={};\n    vector<float> even={};\n    for (int i=0;i*2<l.size();i++)\n        even.push_back(l[i*2]);\n    sort(even.begin(),even.end());\n    for (int i=0;i<l.size();i++)\n    {\n        if (i%2==0) out.push_back(even[i/2]);\n        if (i%2==1) out.push_back(l[i]);\n    }\n    return out;\n}\nint main(){\n\tauto result = sort_even(<FILL_ME>);\n\tassert(issame(result,{1,2,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{3,1,2}", "fn": "sort_even", "para": "(vector<float> l)", "pass": false}
{"task_id": "CPP/37", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<float> sort_even(vector<float> l){\n    vector<float> out={};\n    vector<float> even={};\n    for (int i=0;i*2<l.size();i++)\n        even.push_back(l[i*2]);\n    sort(even.begin(),even.end());\n    for (int i=0;i<l.size();i++)\n    {\n        if (i%2==0) out.push_back(even[i/2]);\n        if (i%2==1) out.push_back(l[i]);\n    }\n    return out;\n}\nint main(){\n\tauto result = sort_even(<FILL_ME>);\n\tassert(issame(result,{1,2,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{3,2,1}", "fn": "sort_even", "para": "(vector<float> l)", "pass": true}
{"task_id": "CPP/37", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<float> sort_even(vector<float> l){\n    vector<float> out={};\n    vector<float> even={};\n    for (int i=0;i*2<l.size();i++)\n        even.push_back(l[i*2]);\n    sort(even.begin(),even.end());\n    for (int i=0;i<l.size();i++)\n    {\n        if (i%2==0) out.push_back(even[i/2]);\n        if (i%2==1) out.push_back(l[i]);\n    }\n    return out;\n}\nint main(){\n\tauto result = sort_even(<FILL_ME>);\n\tassert(issame(result,{1,2,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{3,1,2}", "fn": "sort_even", "para": "(vector<float> l)", "pass": false}
{"task_id": "CPP/37", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<float> sort_even(vector<float> l){\n    vector<float> out={};\n    vector<float> even={};\n    for (int i=0;i*2<l.size();i++)\n        even.push_back(l[i*2]);\n    sort(even.begin(),even.end());\n    for (int i=0;i<l.size();i++)\n    {\n        if (i%2==0) out.push_back(even[i/2]);\n        if (i%2==1) out.push_back(l[i]);\n    }\n    return out;\n}\nint main(){\n\tauto result = sort_even(<FILL_ME>);\n\tassert(issame(result,{1,2,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{3,1,2}", "fn": "sort_even", "para": "(vector<float> l)", "pass": false}
{"task_id": "CPP/37", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<float> sort_even(vector<float> l){\n    vector<float> out={};\n    vector<float> even={};\n    for (int i=0;i*2<l.size();i++)\n        even.push_back(l[i*2]);\n    sort(even.begin(),even.end());\n    for (int i=0;i<l.size();i++)\n    {\n        if (i%2==0) out.push_back(even[i/2]);\n        if (i%2==1) out.push_back(l[i]);\n    }\n    return out;\n}\nint main(){\n\tauto result = sort_even(<FILL_ME>);\n\tassert(issame(result,{-12,8,3,4,5,2,12,11,23,-10}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{8, 4, 5, 2, 11, 3, 12, -10, -12, 23}", "fn": "sort_even", "para": "(vector<float> l)", "pass": false}
{"task_id": "CPP/37", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<float> sort_even(vector<float> l){\n    vector<float> out={};\n    vector<float> even={};\n    for (int i=0;i*2<l.size();i++)\n        even.push_back(l[i*2]);\n    sort(even.begin(),even.end());\n    for (int i=0;i<l.size();i++)\n    {\n        if (i%2==0) out.push_back(even[i/2]);\n        if (i%2==1) out.push_back(l[i]);\n    }\n    return out;\n}\nint main(){\n\tauto result = sort_even(<FILL_ME>);\n\tassert(issame(result,{-12,8,3,4,5,2,12,11,23,-10}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{8, 4, 5, 2, 11, 3, 12, -10, -12, 23}", "fn": "sort_even", "para": "(vector<float> l)", "pass": false}
{"task_id": "CPP/37", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<float> sort_even(vector<float> l){\n    vector<float> out={};\n    vector<float> even={};\n    for (int i=0;i*2<l.size();i++)\n        even.push_back(l[i*2]);\n    sort(even.begin(),even.end());\n    for (int i=0;i<l.size();i++)\n    {\n        if (i%2==0) out.push_back(even[i/2]);\n        if (i%2==1) out.push_back(l[i]);\n    }\n    return out;\n}\nint main(){\n\tauto result = sort_even(<FILL_ME>);\n\tassert(issame(result,{-12,8,3,4,5,2,12,11,23,-10}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10}", "fn": "sort_even", "para": "(vector<float> l)", "pass": true}
{"task_id": "CPP/37", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<float> sort_even(vector<float> l){\n    vector<float> out={};\n    vector<float> even={};\n    for (int i=0;i*2<l.size();i++)\n        even.push_back(l[i*2]);\n    sort(even.begin(),even.end());\n    for (int i=0;i<l.size();i++)\n    {\n        if (i%2==0) out.push_back(even[i/2]);\n        if (i%2==1) out.push_back(l[i]);\n    }\n    return out;\n}\nint main(){\n\tauto result = sort_even(<FILL_ME>);\n\tassert(issame(result,{-12,8,3,4,5,2,12,11,23,-10}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{8, 4, 5, 2, 11, 3, 12, -10, -12, 23}", "fn": "sort_even", "para": "(vector<float> l)", "pass": false}
{"task_id": "CPP/37", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<float> sort_even(vector<float> l){\n    vector<float> out={};\n    vector<float> even={};\n    for (int i=0;i*2<l.size();i++)\n        even.push_back(l[i*2]);\n    sort(even.begin(),even.end());\n    for (int i=0;i<l.size();i++)\n    {\n        if (i%2==0) out.push_back(even[i/2]);\n        if (i%2==1) out.push_back(l[i]);\n    }\n    return out;\n}\nint main(){\n\tauto result = sort_even(<FILL_ME>);\n\tassert(issame(result,{-12,8,3,4,5,2,12,11,23,-10}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{8, 4, 5, 2, 11, 3, 12, -10, -12, 23}", "fn": "sort_even", "para": "(vector<float> l)", "pass": false}
{"task_id": "CPP/39", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\nint main(){\n\tauto result = prime_fib(<FILL_ME>);\n\tassert(result==433494437);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "43", "fn": "prime_fib", "para": "(int n)", "pass": false}
{"task_id": "CPP/39", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\nint main(){\n\tauto result = prime_fib(<FILL_ME>);\n\tassert(result==433494437);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "43", "fn": "prime_fib", "para": "(int n)", "pass": false}
{"task_id": "CPP/39", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\nint main(){\n\tauto result = prime_fib(<FILL_ME>);\n\tassert(result==433494437);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "43", "fn": "prime_fib", "para": "(int n)", "pass": false}
{"task_id": "CPP/39", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\nint main(){\n\tauto result = prime_fib(<FILL_ME>);\n\tassert(result==433494437);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "24", "fn": "prime_fib", "para": "(int n)", "pass": false}
{"task_id": "CPP/39", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\nint main(){\n\tauto result = prime_fib(<FILL_ME>);\n\tassert(result==433494437);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "24", "fn": "prime_fib", "para": "(int n)", "pass": false}
{"task_id": "CPP/39", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\nint main(){\n\tauto result = prime_fib(<FILL_ME>);\n\tassert(result==1597);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "8", "fn": "prime_fib", "para": "(int n)", "pass": false}
{"task_id": "CPP/39", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\nint main(){\n\tauto result = prime_fib(<FILL_ME>);\n\tassert(result==1597);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "9", "fn": "prime_fib", "para": "(int n)", "pass": false}
{"task_id": "CPP/39", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\nint main(){\n\tauto result = prime_fib(<FILL_ME>);\n\tassert(result==1597);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5", "fn": "prime_fib", "para": "(int n)", "pass": false}
{"task_id": "CPP/39", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\nint main(){\n\tauto result = prime_fib(<FILL_ME>);\n\tassert(result==1597);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "9", "fn": "prime_fib", "para": "(int n)", "pass": false}
{"task_id": "CPP/39", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\nint main(){\n\tauto result = prime_fib(<FILL_ME>);\n\tassert(result==1597);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "9", "fn": "prime_fib", "para": "(int n)", "pass": false}
{"task_id": "CPP/39", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\nint main(){\n\tauto result = prime_fib(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1", "fn": "prime_fib", "para": "(int n)", "pass": true}
{"task_id": "CPP/39", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\nint main(){\n\tauto result = prime_fib(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1", "fn": "prime_fib", "para": "(int n)", "pass": true}
{"task_id": "CPP/39", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\nint main(){\n\tauto result = prime_fib(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1", "fn": "prime_fib", "para": "(int n)", "pass": true}
{"task_id": "CPP/39", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\nint main(){\n\tauto result = prime_fib(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1", "fn": "prime_fib", "para": "(int n)", "pass": true}
{"task_id": "CPP/39", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\nint main(){\n\tauto result = prime_fib(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1", "fn": "prime_fib", "para": "(int n)", "pass": true}
{"task_id": "CPP/39", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\nint main(){\n\tauto result = prime_fib(<FILL_ME>);\n\tassert(result==514229);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "19", "fn": "prime_fib", "para": "(int n)", "pass": false}
{"task_id": "CPP/39", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\nint main(){\n\tauto result = prime_fib(<FILL_ME>);\n\tassert(result==514229);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "20", "fn": "prime_fib", "para": "(int n)", "pass": false}
{"task_id": "CPP/39", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\nint main(){\n\tauto result = prime_fib(<FILL_ME>);\n\tassert(result==514229);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "19", "fn": "prime_fib", "para": "(int n)", "pass": false}
{"task_id": "CPP/39", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\nint main(){\n\tauto result = prime_fib(<FILL_ME>);\n\tassert(result==514229);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "19", "fn": "prime_fib", "para": "(int n)", "pass": false}
{"task_id": "CPP/39", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\nint main(){\n\tauto result = prime_fib(<FILL_ME>);\n\tassert(result==514229);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "20", "fn": "prime_fib", "para": "(int n)", "pass": false}
{"task_id": "CPP/39", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\nint main(){\n\tauto result = prime_fib(<FILL_ME>);\n\tassert(result==28657);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "23", "fn": "prime_fib", "para": "(int n)", "pass": false}
{"task_id": "CPP/39", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\nint main(){\n\tauto result = prime_fib(<FILL_ME>);\n\tassert(result==28657);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "23", "fn": "prime_fib", "para": "(int n)", "pass": false}
{"task_id": "CPP/39", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\nint main(){\n\tauto result = prime_fib(<FILL_ME>);\n\tassert(result==28657);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "23", "fn": "prime_fib", "para": "(int n)", "pass": false}
{"task_id": "CPP/39", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\nint main(){\n\tauto result = prime_fib(<FILL_ME>);\n\tassert(result==28657);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "23", "fn": "prime_fib", "para": "(int n)", "pass": false}
{"task_id": "CPP/39", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\nint main(){\n\tauto result = prime_fib(<FILL_ME>);\n\tassert(result==28657);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "23", "fn": "prime_fib", "para": "(int n)", "pass": false}
{"task_id": "CPP/39", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\nint main(){\n\tauto result = prime_fib(<FILL_ME>);\n\tassert(result==233);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "14", "fn": "prime_fib", "para": "(int n)", "pass": false}
{"task_id": "CPP/39", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\nint main(){\n\tauto result = prime_fib(<FILL_ME>);\n\tassert(result==233);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "13", "fn": "prime_fib", "para": "(int n)", "pass": false}
{"task_id": "CPP/39", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\nint main(){\n\tauto result = prime_fib(<FILL_ME>);\n\tassert(result==233);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "13", "fn": "prime_fib", "para": "(int n)", "pass": false}
{"task_id": "CPP/39", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\nint main(){\n\tauto result = prime_fib(<FILL_ME>);\n\tassert(result==233);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "13", "fn": "prime_fib", "para": "(int n)", "pass": false}
{"task_id": "CPP/39", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\nint main(){\n\tauto result = prime_fib(<FILL_ME>);\n\tassert(result==233);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "13", "fn": "prime_fib", "para": "(int n)", "pass": false}
{"task_id": "CPP/39", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\nint main(){\n\tauto result = prime_fib(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3", "fn": "prime_fib", "para": "(int n)", "pass": true}
{"task_id": "CPP/39", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\nint main(){\n\tauto result = prime_fib(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3", "fn": "prime_fib", "para": "(int n)", "pass": true}
{"task_id": "CPP/39", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\nint main(){\n\tauto result = prime_fib(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3", "fn": "prime_fib", "para": "(int n)", "pass": true}
{"task_id": "CPP/39", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\nint main(){\n\tauto result = prime_fib(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3", "fn": "prime_fib", "para": "(int n)", "pass": true}
{"task_id": "CPP/39", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\nint main(){\n\tauto result = prime_fib(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3", "fn": "prime_fib", "para": "(int n)", "pass": true}
{"task_id": "CPP/39", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\nint main(){\n\tauto result = prime_fib(<FILL_ME>);\n\tassert(result==13);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "7", "fn": "prime_fib", "para": "(int n)", "pass": false}
{"task_id": "CPP/39", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\nint main(){\n\tauto result = prime_fib(<FILL_ME>);\n\tassert(result==13);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "7", "fn": "prime_fib", "para": "(int n)", "pass": false}
{"task_id": "CPP/39", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\nint main(){\n\tauto result = prime_fib(<FILL_ME>);\n\tassert(result==13);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "7", "fn": "prime_fib", "para": "(int n)", "pass": false}
{"task_id": "CPP/39", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\nint main(){\n\tauto result = prime_fib(<FILL_ME>);\n\tassert(result==13);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "7", "fn": "prime_fib", "para": "(int n)", "pass": false}
{"task_id": "CPP/39", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\nint main(){\n\tauto result = prime_fib(<FILL_ME>);\n\tassert(result==13);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "7", "fn": "prime_fib", "para": "(int n)", "pass": false}
{"task_id": "CPP/39", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\nint main(){\n\tauto result = prime_fib(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "2", "fn": "prime_fib", "para": "(int n)", "pass": true}
{"task_id": "CPP/39", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\nint main(){\n\tauto result = prime_fib(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "2", "fn": "prime_fib", "para": "(int n)", "pass": true}
{"task_id": "CPP/39", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\nint main(){\n\tauto result = prime_fib(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "2", "fn": "prime_fib", "para": "(int n)", "pass": true}
{"task_id": "CPP/39", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\nint main(){\n\tauto result = prime_fib(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "2", "fn": "prime_fib", "para": "(int n)", "pass": true}
{"task_id": "CPP/39", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\nint main(){\n\tauto result = prime_fib(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "2", "fn": "prime_fib", "para": "(int n)", "pass": true}
{"task_id": "CPP/39", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\nint main(){\n\tauto result = prime_fib(<FILL_ME>);\n\tassert(result==89);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "11", "fn": "prime_fib", "para": "(int n)", "pass": false}
{"task_id": "CPP/39", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\nint main(){\n\tauto result = prime_fib(<FILL_ME>);\n\tassert(result==89);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "11", "fn": "prime_fib", "para": "(int n)", "pass": false}
{"task_id": "CPP/39", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\nint main(){\n\tauto result = prime_fib(<FILL_ME>);\n\tassert(result==89);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "11", "fn": "prime_fib", "para": "(int n)", "pass": false}
{"task_id": "CPP/39", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\nint main(){\n\tauto result = prime_fib(<FILL_ME>);\n\tassert(result==89);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10", "fn": "prime_fib", "para": "(int n)", "pass": false}
{"task_id": "CPP/39", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\nint main(){\n\tauto result = prime_fib(<FILL_ME>);\n\tassert(result==89);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "11", "fn": "prime_fib", "para": "(int n)", "pass": false}
{"task_id": "CPP/40", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool triples_sum_to_zero(vector<int> l){\n    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    for (int k=j+1;k<l.size();k++)\n        if (l[i]+l[j]+l[k]==0) return true;\n    return false;\n}\nint main(){\n\tauto result = triples_sum_to_zero(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{-1, 0, 1}", "fn": "triples_sum_to_zero", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/40", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool triples_sum_to_zero(vector<int> l){\n    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    for (int k=j+1;k<l.size();k++)\n        if (l[i]+l[j]+l[k]==0) return true;\n    return false;\n}\nint main(){\n\tauto result = triples_sum_to_zero(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{-1, 0, 1}", "fn": "triples_sum_to_zero", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/40", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool triples_sum_to_zero(vector<int> l){\n    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    for (int k=j+1;k<l.size();k++)\n        if (l[i]+l[j]+l[k]==0) return true;\n    return false;\n}\nint main(){\n\tauto result = triples_sum_to_zero(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{-1, 0, 1}", "fn": "triples_sum_to_zero", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/40", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool triples_sum_to_zero(vector<int> l){\n    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    for (int k=j+1;k<l.size();k++)\n        if (l[i]+l[j]+l[k]==0) return true;\n    return false;\n}\nint main(){\n\tauto result = triples_sum_to_zero(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{-1, 0, 1}", "fn": "triples_sum_to_zero", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/40", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool triples_sum_to_zero(vector<int> l){\n    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    for (int k=j+1;k<l.size();k++)\n        if (l[i]+l[j]+l[k]==0) return true;\n    return false;\n}\nint main(){\n\tauto result = triples_sum_to_zero(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{-1, 0, 1}", "fn": "triples_sum_to_zero", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/40", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool triples_sum_to_zero(vector<int> l){\n    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    for (int k=j+1;k<l.size();k++)\n        if (l[i]+l[j]+l[k]==0) return true;\n    return false;\n}\nint main(){\n\tauto result = triples_sum_to_zero(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3}", "fn": "triples_sum_to_zero", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/40", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool triples_sum_to_zero(vector<int> l){\n    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    for (int k=j+1;k<l.size();k++)\n        if (l[i]+l[j]+l[k]==0) return true;\n    return false;\n}\nint main(){\n\tauto result = triples_sum_to_zero(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3}", "fn": "triples_sum_to_zero", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/40", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool triples_sum_to_zero(vector<int> l){\n    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    for (int k=j+1;k<l.size();k++)\n        if (l[i]+l[j]+l[k]==0) return true;\n    return false;\n}\nint main(){\n\tauto result = triples_sum_to_zero(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3}", "fn": "triples_sum_to_zero", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/40", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool triples_sum_to_zero(vector<int> l){\n    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    for (int k=j+1;k<l.size();k++)\n        if (l[i]+l[j]+l[k]==0) return true;\n    return false;\n}\nint main(){\n\tauto result = triples_sum_to_zero(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3}", "fn": "triples_sum_to_zero", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/40", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool triples_sum_to_zero(vector<int> l){\n    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    for (int k=j+1;k<l.size();k++)\n        if (l[i]+l[j]+l[k]==0) return true;\n    return false;\n}\nint main(){\n\tauto result = triples_sum_to_zero(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3}", "fn": "triples_sum_to_zero", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/41", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint car_race_collision(int n){\n    return n*n;\n}\nint main(){\n\tauto result = car_race_collision(<FILL_ME>);\n\tassert(result==16);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "4", "fn": "car_race_collision", "para": "(int n)", "pass": true}
{"task_id": "CPP/41", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint car_race_collision(int n){\n    return n*n;\n}\nint main(){\n\tauto result = car_race_collision(<FILL_ME>);\n\tassert(result==16);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "4", "fn": "car_race_collision", "para": "(int n)", "pass": true}
{"task_id": "CPP/41", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint car_race_collision(int n){\n    return n*n;\n}\nint main(){\n\tauto result = car_race_collision(<FILL_ME>);\n\tassert(result==16);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "4", "fn": "car_race_collision", "para": "(int n)", "pass": true}
{"task_id": "CPP/41", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint car_race_collision(int n){\n    return n*n;\n}\nint main(){\n\tauto result = car_race_collision(<FILL_ME>);\n\tassert(result==16);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "4", "fn": "car_race_collision", "para": "(int n)", "pass": true}
{"task_id": "CPP/41", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint car_race_collision(int n){\n    return n*n;\n}\nint main(){\n\tauto result = car_race_collision(<FILL_ME>);\n\tassert(result==16);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "4", "fn": "car_race_collision", "para": "(int n)", "pass": true}
{"task_id": "CPP/41", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint car_race_collision(int n){\n    return n*n;\n}\nint main(){\n\tauto result = car_race_collision(<FILL_ME>);\n\tassert(result==100);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10", "fn": "car_race_collision", "para": "(int n)", "pass": true}
{"task_id": "CPP/41", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint car_race_collision(int n){\n    return n*n;\n}\nint main(){\n\tauto result = car_race_collision(<FILL_ME>);\n\tassert(result==100);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10", "fn": "car_race_collision", "para": "(int n)", "pass": true}
{"task_id": "CPP/41", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint car_race_collision(int n){\n    return n*n;\n}\nint main(){\n\tauto result = car_race_collision(<FILL_ME>);\n\tassert(result==100);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10", "fn": "car_race_collision", "para": "(int n)", "pass": true}
{"task_id": "CPP/41", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint car_race_collision(int n){\n    return n*n;\n}\nint main(){\n\tauto result = car_race_collision(<FILL_ME>);\n\tassert(result==100);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10", "fn": "car_race_collision", "para": "(int n)", "pass": true}
{"task_id": "CPP/41", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint car_race_collision(int n){\n    return n*n;\n}\nint main(){\n\tauto result = car_race_collision(<FILL_ME>);\n\tassert(result==100);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10", "fn": "car_race_collision", "para": "(int n)", "pass": true}
{"task_id": "CPP/41", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint car_race_collision(int n){\n    return n*n;\n}\nint main(){\n\tauto result = car_race_collision(<FILL_ME>);\n\tassert(result==9);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3", "fn": "car_race_collision", "para": "(int n)", "pass": true}
{"task_id": "CPP/41", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint car_race_collision(int n){\n    return n*n;\n}\nint main(){\n\tauto result = car_race_collision(<FILL_ME>);\n\tassert(result==9);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3", "fn": "car_race_collision", "para": "(int n)", "pass": true}
{"task_id": "CPP/41", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint car_race_collision(int n){\n    return n*n;\n}\nint main(){\n\tauto result = car_race_collision(<FILL_ME>);\n\tassert(result==9);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3", "fn": "car_race_collision", "para": "(int n)", "pass": true}
{"task_id": "CPP/41", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint car_race_collision(int n){\n    return n*n;\n}\nint main(){\n\tauto result = car_race_collision(<FILL_ME>);\n\tassert(result==9);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3", "fn": "car_race_collision", "para": "(int n)", "pass": true}
{"task_id": "CPP/41", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint car_race_collision(int n){\n    return n*n;\n}\nint main(){\n\tauto result = car_race_collision(<FILL_ME>);\n\tassert(result==9);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3", "fn": "car_race_collision", "para": "(int n)", "pass": true}
{"task_id": "CPP/41", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint car_race_collision(int n){\n    return n*n;\n}\nint main(){\n\tauto result = car_race_collision(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "2", "fn": "car_race_collision", "para": "(int n)", "pass": true}
{"task_id": "CPP/41", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint car_race_collision(int n){\n    return n*n;\n}\nint main(){\n\tauto result = car_race_collision(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "2", "fn": "car_race_collision", "para": "(int n)", "pass": true}
{"task_id": "CPP/41", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint car_race_collision(int n){\n    return n*n;\n}\nint main(){\n\tauto result = car_race_collision(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "2", "fn": "car_race_collision", "para": "(int n)", "pass": true}
{"task_id": "CPP/41", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint car_race_collision(int n){\n    return n*n;\n}\nint main(){\n\tauto result = car_race_collision(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "2", "fn": "car_race_collision", "para": "(int n)", "pass": true}
{"task_id": "CPP/41", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint car_race_collision(int n){\n    return n*n;\n}\nint main(){\n\tauto result = car_race_collision(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "2", "fn": "car_race_collision", "para": "(int n)", "pass": true}
{"task_id": "CPP/41", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint car_race_collision(int n){\n    return n*n;\n}\nint main(){\n\tauto result = car_race_collision(<FILL_ME>);\n\tassert(result==64);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "8", "fn": "car_race_collision", "para": "(int n)", "pass": true}
{"task_id": "CPP/41", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint car_race_collision(int n){\n    return n*n;\n}\nint main(){\n\tauto result = car_race_collision(<FILL_ME>);\n\tassert(result==64);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "8", "fn": "car_race_collision", "para": "(int n)", "pass": true}
{"task_id": "CPP/41", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint car_race_collision(int n){\n    return n*n;\n}\nint main(){\n\tauto result = car_race_collision(<FILL_ME>);\n\tassert(result==64);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "8", "fn": "car_race_collision", "para": "(int n)", "pass": true}
{"task_id": "CPP/41", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint car_race_collision(int n){\n    return n*n;\n}\nint main(){\n\tauto result = car_race_collision(<FILL_ME>);\n\tassert(result==64);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "8", "fn": "car_race_collision", "para": "(int n)", "pass": true}
{"task_id": "CPP/41", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint car_race_collision(int n){\n    return n*n;\n}\nint main(){\n\tauto result = car_race_collision(<FILL_ME>);\n\tassert(result==64);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "8", "fn": "car_race_collision", "para": "(int n)", "pass": true}
{"task_id": "CPP/42", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> incr_list(vector<int> l){\n    for (int i=0;i<l.size();i++)\n        l[i]+=1;\n    return l;\n}\nint main(){\n\tauto result = incr_list(<FILL_ME>);\n\tassert(issame(result,{6,3,6,3,4,4,10,1,124}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{5,2,5,2,3,3,9,0,123}", "fn": "incr_list", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/42", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> incr_list(vector<int> l){\n    for (int i=0;i<l.size();i++)\n        l[i]+=1;\n    return l;\n}\nint main(){\n\tauto result = incr_list(<FILL_ME>);\n\tassert(issame(result,{6,3,6,3,4,4,10,1,124}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{5,2,5,2,3,3,9,0,123}", "fn": "incr_list", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/42", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> incr_list(vector<int> l){\n    for (int i=0;i<l.size();i++)\n        l[i]+=1;\n    return l;\n}\nint main(){\n\tauto result = incr_list(<FILL_ME>);\n\tassert(issame(result,{6,3,6,3,4,4,10,1,124}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{5,2,5,2,3,3,9,0,123}", "fn": "incr_list", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/42", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> incr_list(vector<int> l){\n    for (int i=0;i<l.size();i++)\n        l[i]+=1;\n    return l;\n}\nint main(){\n\tauto result = incr_list(<FILL_ME>);\n\tassert(issame(result,{6,3,6,3,4,4,10,1,124}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{5,2,5,2,3,3,9,0,123}", "fn": "incr_list", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/42", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> incr_list(vector<int> l){\n    for (int i=0;i<l.size();i++)\n        l[i]+=1;\n    return l;\n}\nint main(){\n\tauto result = incr_list(<FILL_ME>);\n\tassert(issame(result,{6,3,6,3,4,4,10,1,124}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{5,2,5,2,3,3,9,0,123}", "fn": "incr_list", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/42", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> incr_list(vector<int> l){\n    for (int i=0;i<l.size();i++)\n        l[i]+=1;\n    return l;\n}\nint main(){\n\tauto result = incr_list(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{}", "fn": "incr_list", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/42", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> incr_list(vector<int> l){\n    for (int i=0;i<l.size();i++)\n        l[i]+=1;\n    return l;\n}\nint main(){\n\tauto result = incr_list(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{}", "fn": "incr_list", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/42", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> incr_list(vector<int> l){\n    for (int i=0;i<l.size();i++)\n        l[i]+=1;\n    return l;\n}\nint main(){\n\tauto result = incr_list(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{}", "fn": "incr_list", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/42", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> incr_list(vector<int> l){\n    for (int i=0;i<l.size();i++)\n        l[i]+=1;\n    return l;\n}\nint main(){\n\tauto result = incr_list(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{}", "fn": "incr_list", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/42", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> incr_list(vector<int> l){\n    for (int i=0;i<l.size();i++)\n        l[i]+=1;\n    return l;\n}\nint main(){\n\tauto result = incr_list(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{}", "fn": "incr_list", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/42", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> incr_list(vector<int> l){\n    for (int i=0;i<l.size();i++)\n        l[i]+=1;\n    return l;\n}\nint main(){\n\tauto result = incr_list(<FILL_ME>);\n\tassert(issame(result,{4,3,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{3,2,1}", "fn": "incr_list", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/42", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> incr_list(vector<int> l){\n    for (int i=0;i<l.size();i++)\n        l[i]+=1;\n    return l;\n}\nint main(){\n\tauto result = incr_list(<FILL_ME>);\n\tassert(issame(result,{4,3,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{3,2,1}", "fn": "incr_list", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/42", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> incr_list(vector<int> l){\n    for (int i=0;i<l.size();i++)\n        l[i]+=1;\n    return l;\n}\nint main(){\n\tauto result = incr_list(<FILL_ME>);\n\tassert(issame(result,{4,3,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{3,2,1}", "fn": "incr_list", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/42", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> incr_list(vector<int> l){\n    for (int i=0;i<l.size();i++)\n        l[i]+=1;\n    return l;\n}\nint main(){\n\tauto result = incr_list(<FILL_ME>);\n\tassert(issame(result,{4,3,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{3,2,1}", "fn": "incr_list", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/42", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> incr_list(vector<int> l){\n    for (int i=0;i<l.size();i++)\n        l[i]+=1;\n    return l;\n}\nint main(){\n\tauto result = incr_list(<FILL_ME>);\n\tassert(issame(result,{4,3,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{3,2,1}", "fn": "incr_list", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/43", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool pairs_sum_to_zero(vector<int> l){\n    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    if (l[i]+l[j]==0) return true;\n    return false;\n}\nint main(){\n\tauto result = pairs_sum_to_zero(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, -1}", "fn": "pairs_sum_to_zero", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/43", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool pairs_sum_to_zero(vector<int> l){\n    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    if (l[i]+l[j]==0) return true;\n    return false;\n}\nint main(){\n\tauto result = pairs_sum_to_zero(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, -1}", "fn": "pairs_sum_to_zero", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/43", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool pairs_sum_to_zero(vector<int> l){\n    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    if (l[i]+l[j]==0) return true;\n    return false;\n}\nint main(){\n\tauto result = pairs_sum_to_zero(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, -1}", "fn": "pairs_sum_to_zero", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/43", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool pairs_sum_to_zero(vector<int> l){\n    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    if (l[i]+l[j]==0) return true;\n    return false;\n}\nint main(){\n\tauto result = pairs_sum_to_zero(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, -1}", "fn": "pairs_sum_to_zero", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/43", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool pairs_sum_to_zero(vector<int> l){\n    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    if (l[i]+l[j]==0) return true;\n    return false;\n}\nint main(){\n\tauto result = pairs_sum_to_zero(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{-2, 2}", "fn": "pairs_sum_to_zero", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/43", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool pairs_sum_to_zero(vector<int> l){\n    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    if (l[i]+l[j]==0) return true;\n    return false;\n}\nint main(){\n\tauto result = pairs_sum_to_zero(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5}", "fn": "pairs_sum_to_zero", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/43", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool pairs_sum_to_zero(vector<int> l){\n    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    if (l[i]+l[j]==0) return true;\n    return false;\n}\nint main(){\n\tauto result = pairs_sum_to_zero(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5}", "fn": "pairs_sum_to_zero", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/43", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool pairs_sum_to_zero(vector<int> l){\n    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    if (l[i]+l[j]==0) return true;\n    return false;\n}\nint main(){\n\tauto result = pairs_sum_to_zero(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5}", "fn": "pairs_sum_to_zero", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/43", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool pairs_sum_to_zero(vector<int> l){\n    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    if (l[i]+l[j]==0) return true;\n    return false;\n}\nint main(){\n\tauto result = pairs_sum_to_zero(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{0, 0}", "fn": "pairs_sum_to_zero", "para": "(vector<int> l)", "pass": false}
{"task_id": "CPP/43", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool pairs_sum_to_zero(vector<int> l){\n    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    if (l[i]+l[j]==0) return true;\n    return false;\n}\nint main(){\n\tauto result = pairs_sum_to_zero(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5}", "fn": "pairs_sum_to_zero", "para": "(vector<int> l)", "pass": true}
{"task_id": "CPP/44", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n    string out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x/base;\n    }\n    return out;\n}\nint main(){\n\tauto result = change_base(<FILL_ME>);\n\tassert(result==\"100\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "4, 2", "fn": "change_base", "para": "(int x,int base)", "pass": true}
{"task_id": "CPP/44", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n    string out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x/base;\n    }\n    return out;\n}\nint main(){\n\tauto result = change_base(<FILL_ME>);\n\tassert(result==\"100\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "4, 2", "fn": "change_base", "para": "(int x,int base)", "pass": true}
{"task_id": "CPP/44", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n    string out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x/base;\n    }\n    return out;\n}\nint main(){\n\tauto result = change_base(<FILL_ME>);\n\tassert(result==\"100\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "4, 2", "fn": "change_base", "para": "(int x,int base)", "pass": true}
{"task_id": "CPP/44", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n    string out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x/base;\n    }\n    return out;\n}\nint main(){\n\tauto result = change_base(<FILL_ME>);\n\tassert(result==\"100\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "4, 2", "fn": "change_base", "para": "(int x,int base)", "pass": true}
{"task_id": "CPP/44", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n    string out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x/base;\n    }\n    return out;\n}\nint main(){\n\tauto result = change_base(<FILL_ME>);\n\tassert(result==\"100\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "4, 2", "fn": "change_base", "para": "(int x,int base)", "pass": true}
{"task_id": "CPP/44", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n    string out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x/base;\n    }\n    return out;\n}\nint main(){\n\tauto result = change_base(<FILL_ME>);\n\tassert(result==\"1000\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "8, 2", "fn": "change_base", "para": "(int x,int base)", "pass": true}
{"task_id": "CPP/44", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n    string out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x/base;\n    }\n    return out;\n}\nint main(){\n\tauto result = change_base(<FILL_ME>);\n\tassert(result==\"1000\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "8, 2", "fn": "change_base", "para": "(int x,int base)", "pass": true}
{"task_id": "CPP/44", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n    string out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x/base;\n    }\n    return out;\n}\nint main(){\n\tauto result = change_base(<FILL_ME>);\n\tassert(result==\"1000\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "8, 2", "fn": "change_base", "para": "(int x,int base)", "pass": true}
{"task_id": "CPP/44", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n    string out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x/base;\n    }\n    return out;\n}\nint main(){\n\tauto result = change_base(<FILL_ME>);\n\tassert(result==\"1000\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "8, 2", "fn": "change_base", "para": "(int x,int base)", "pass": true}
{"task_id": "CPP/44", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n    string out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x/base;\n    }\n    return out;\n}\nint main(){\n\tauto result = change_base(<FILL_ME>);\n\tassert(result==\"1000\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "8, 2", "fn": "change_base", "para": "(int x,int base)", "pass": true}
{"task_id": "CPP/44", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n    string out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x/base;\n    }\n    return out;\n}\nint main(){\n\tauto result = change_base(<FILL_ME>);\n\tassert(result==\"22\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10, 2", "fn": "change_base", "para": "(int x,int base)", "pass": false}
{"task_id": "CPP/44", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n    string out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x/base;\n    }\n    return out;\n}\nint main(){\n\tauto result = change_base(<FILL_ME>);\n\tassert(result==\"22\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10, 2", "fn": "change_base", "para": "(int x,int base)", "pass": false}
{"task_id": "CPP/44", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n    string out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x/base;\n    }\n    return out;\n}\nint main(){\n\tauto result = change_base(<FILL_ME>);\n\tassert(result==\"22\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10, 3", "fn": "change_base", "para": "(int x,int base)", "pass": false}
{"task_id": "CPP/44", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n    string out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x/base;\n    }\n    return out;\n}\nint main(){\n\tauto result = change_base(<FILL_ME>);\n\tassert(result==\"22\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10, 2", "fn": "change_base", "para": "(int x,int base)", "pass": false}
{"task_id": "CPP/44", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n    string out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x/base;\n    }\n    return out;\n}\nint main(){\n\tauto result = change_base(<FILL_ME>);\n\tassert(result==\"22\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "22, 2", "fn": "change_base", "para": "(int x,int base)", "pass": false}
{"task_id": "CPP/44", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n    string out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x/base;\n    }\n    return out;\n}\nint main(){\n\tauto result = change_base(<FILL_ME>);\n\tassert(result==\"11101010\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "234, 2", "fn": "change_base", "para": "(int x,int base)", "pass": true}
{"task_id": "CPP/44", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n    string out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x/base;\n    }\n    return out;\n}\nint main(){\n\tauto result = change_base(<FILL_ME>);\n\tassert(result==\"11101010\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "234, 2", "fn": "change_base", "para": "(int x,int base)", "pass": true}
{"task_id": "CPP/44", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n    string out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x/base;\n    }\n    return out;\n}\nint main(){\n\tauto result = change_base(<FILL_ME>);\n\tassert(result==\"11101010\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "234, 2", "fn": "change_base", "para": "(int x,int base)", "pass": true}
{"task_id": "CPP/44", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n    string out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x/base;\n    }\n    return out;\n}\nint main(){\n\tauto result = change_base(<FILL_ME>);\n\tassert(result==\"11101010\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "234, 2", "fn": "change_base", "para": "(int x,int base)", "pass": true}
{"task_id": "CPP/44", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n    string out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x/base;\n    }\n    return out;\n}\nint main(){\n\tauto result = change_base(<FILL_ME>);\n\tassert(result==\"11101010\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "234, 2", "fn": "change_base", "para": "(int x,int base)", "pass": true}
{"task_id": "CPP/44", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n    string out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x/base;\n    }\n    return out;\n}\nint main(){\n\tauto result = change_base(<FILL_ME>);\n\tassert(result==\"111\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "7, 2", "fn": "change_base", "para": "(int x,int base)", "pass": true}
{"task_id": "CPP/44", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n    string out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x/base;\n    }\n    return out;\n}\nint main(){\n\tauto result = change_base(<FILL_ME>);\n\tassert(result==\"111\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "7,2", "fn": "change_base", "para": "(int x,int base)", "pass": true}
{"task_id": "CPP/44", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n    string out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x/base;\n    }\n    return out;\n}\nint main(){\n\tauto result = change_base(<FILL_ME>);\n\tassert(result==\"111\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "7,2", "fn": "change_base", "para": "(int x,int base)", "pass": true}
{"task_id": "CPP/44", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n    string out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x/base;\n    }\n    return out;\n}\nint main(){\n\tauto result = change_base(<FILL_ME>);\n\tassert(result==\"111\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "7, 2", "fn": "change_base", "para": "(int x,int base)", "pass": true}
{"task_id": "CPP/44", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n    string out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x/base;\n    }\n    return out;\n}\nint main(){\n\tauto result = change_base(<FILL_ME>);\n\tassert(result==\"111\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "7, 2", "fn": "change_base", "para": "(int x,int base)", "pass": true}
{"task_id": "CPP/44", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n    string out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x/base;\n    }\n    return out;\n}\nint main(){\n\tauto result = change_base(<FILL_ME>);\n\tassert(result==\"10000\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "16, 2", "fn": "change_base", "para": "(int x,int base)", "pass": true}
{"task_id": "CPP/44", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n    string out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x/base;\n    }\n    return out;\n}\nint main(){\n\tauto result = change_base(<FILL_ME>);\n\tassert(result==\"10000\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "16, 2", "fn": "change_base", "para": "(int x,int base)", "pass": true}
{"task_id": "CPP/44", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n    string out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x/base;\n    }\n    return out;\n}\nint main(){\n\tauto result = change_base(<FILL_ME>);\n\tassert(result==\"10000\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "16, 2", "fn": "change_base", "para": "(int x,int base)", "pass": true}
{"task_id": "CPP/44", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n    string out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x/base;\n    }\n    return out;\n}\nint main(){\n\tauto result = change_base(<FILL_ME>);\n\tassert(result==\"10000\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "16, 2", "fn": "change_base", "para": "(int x,int base)", "pass": true}
{"task_id": "CPP/44", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n    string out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x/base;\n    }\n    return out;\n}\nint main(){\n\tauto result = change_base(<FILL_ME>);\n\tassert(result==\"10000\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "16, 2", "fn": "change_base", "para": "(int x,int base)", "pass": true}
{"task_id": "CPP/45", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float h){\nreturn (a*h)*0.5;\n\n}\nint main(){\n\tauto result = triangle_area(<FILL_ME>);\n\tassert(abs(result-40.0)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "16.0, 5.0", "fn": "triangle_area", "para": "(float a,float h)", "pass": true}
{"task_id": "CPP/45", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float h){\nreturn (a*h)*0.5;\n\n}\nint main(){\n\tauto result = triangle_area(<FILL_ME>);\n\tassert(abs(result-40.0)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "16.0, 5.0", "fn": "triangle_area", "para": "(float a,float h)", "pass": true}
{"task_id": "CPP/45", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float h){\nreturn (a*h)*0.5;\n\n}\nint main(){\n\tauto result = triangle_area(<FILL_ME>);\n\tassert(abs(result-40.0)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "16.0, 5.0", "fn": "triangle_area", "para": "(float a,float h)", "pass": true}
{"task_id": "CPP/45", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float h){\nreturn (a*h)*0.5;\n\n}\nint main(){\n\tauto result = triangle_area(<FILL_ME>);\n\tassert(abs(result-40.0)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "16.0, 5.0", "fn": "triangle_area", "para": "(float a,float h)", "pass": true}
{"task_id": "CPP/45", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float h){\nreturn (a*h)*0.5;\n\n}\nint main(){\n\tauto result = triangle_area(<FILL_ME>);\n\tassert(abs(result-40.0)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "16.0, 5.0", "fn": "triangle_area", "para": "(float a,float h)", "pass": true}
{"task_id": "CPP/45", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float h){\nreturn (a*h)*0.5;\n\n}\nint main(){\n\tauto result = triangle_area(<FILL_ME>);\n\tassert(abs(result-2.0)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "4.0, 1.0", "fn": "triangle_area", "para": "(float a,float h)", "pass": true}
{"task_id": "CPP/45", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float h){\nreturn (a*h)*0.5;\n\n}\nint main(){\n\tauto result = triangle_area(<FILL_ME>);\n\tassert(abs(result-2.0)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "4.0, 1.0", "fn": "triangle_area", "para": "(float a,float h)", "pass": true}
{"task_id": "CPP/45", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float h){\nreturn (a*h)*0.5;\n\n}\nint main(){\n\tauto result = triangle_area(<FILL_ME>);\n\tassert(abs(result-2.0)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "4.0, 1.0", "fn": "triangle_area", "para": "(float a,float h)", "pass": true}
{"task_id": "CPP/45", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float h){\nreturn (a*h)*0.5;\n\n}\nint main(){\n\tauto result = triangle_area(<FILL_ME>);\n\tassert(abs(result-2.0)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "4.0, 1.0", "fn": "triangle_area", "para": "(float a,float h)", "pass": true}
{"task_id": "CPP/45", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float h){\nreturn (a*h)*0.5;\n\n}\nint main(){\n\tauto result = triangle_area(<FILL_ME>);\n\tassert(abs(result-2.0)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "4.0, 1.0", "fn": "triangle_area", "para": "(float a,float h)", "pass": true}
{"task_id": "CPP/45", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float h){\nreturn (a*h)*0.5;\n\n}\nint main(){\n\tauto result = triangle_area(<FILL_ME>);\n\tassert(abs(result-7.5)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5,3", "fn": "triangle_area", "para": "(float a,float h)", "pass": true}
{"task_id": "CPP/45", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float h){\nreturn (a*h)*0.5;\n\n}\nint main(){\n\tauto result = triangle_area(<FILL_ME>);\n\tassert(abs(result-7.5)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5,3", "fn": "triangle_area", "para": "(float a,float h)", "pass": true}
{"task_id": "CPP/45", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float h){\nreturn (a*h)*0.5;\n\n}\nint main(){\n\tauto result = triangle_area(<FILL_ME>);\n\tassert(abs(result-7.5)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5, 3", "fn": "triangle_area", "para": "(float a,float h)", "pass": true}
{"task_id": "CPP/45", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float h){\nreturn (a*h)*0.5;\n\n}\nint main(){\n\tauto result = triangle_area(<FILL_ME>);\n\tassert(abs(result-7.5)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5,3", "fn": "triangle_area", "para": "(float a,float h)", "pass": true}
{"task_id": "CPP/45", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float h){\nreturn (a*h)*0.5;\n\n}\nint main(){\n\tauto result = triangle_area(<FILL_ME>);\n\tassert(abs(result-7.5)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5, 3", "fn": "triangle_area", "para": "(float a,float h)", "pass": true}
{"task_id": "CPP/46", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib4(int n){\n    int f[100];\n    f[0]=0;\n    f[1]=0;\n    f[2]=2;\n    f[3]=0;\n    for (int i=4;i<=n;i++)\n    {\n        f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];\n    }\n    return f[n];\n}\nint main(){\n\tauto result = fib4(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "6", "fn": "fib4", "para": "(int n)", "pass": false}
{"task_id": "CPP/46", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib4(int n){\n    int f[100];\n    f[0]=0;\n    f[1]=0;\n    f[2]=2;\n    f[3]=0;\n    for (int i=4;i<=n;i++)\n    {\n        f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];\n    }\n    return f[n];\n}\nint main(){\n\tauto result = fib4(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5", "fn": "fib4", "para": "(int n)", "pass": true}
{"task_id": "CPP/46", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib4(int n){\n    int f[100];\n    f[0]=0;\n    f[1]=0;\n    f[2]=2;\n    f[3]=0;\n    for (int i=4;i<=n;i++)\n    {\n        f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];\n    }\n    return f[n];\n}\nint main(){\n\tauto result = fib4(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5", "fn": "fib4", "para": "(int n)", "pass": true}
{"task_id": "CPP/46", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib4(int n){\n    int f[100];\n    f[0]=0;\n    f[1]=0;\n    f[2]=2;\n    f[3]=0;\n    for (int i=4;i<=n;i++)\n    {\n        f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];\n    }\n    return f[n];\n}\nint main(){\n\tauto result = fib4(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5", "fn": "fib4", "para": "(int n)", "pass": true}
{"task_id": "CPP/46", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib4(int n){\n    int f[100];\n    f[0]=0;\n    f[1]=0;\n    f[2]=2;\n    f[3]=0;\n    for (int i=4;i<=n;i++)\n    {\n        f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];\n    }\n    return f[n];\n}\nint main(){\n\tauto result = fib4(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5", "fn": "fib4", "para": "(int n)", "pass": true}
{"task_id": "CPP/46", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib4(int n){\n    int f[100];\n    f[0]=0;\n    f[1]=0;\n    f[2]=2;\n    f[3]=0;\n    for (int i=4;i<=n;i++)\n    {\n        f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];\n    }\n    return f[n];\n}\nint main(){\n\tauto result = fib4(<FILL_ME>);\n\tassert(result==104);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "7", "fn": "fib4", "para": "(int n)", "pass": false}
{"task_id": "CPP/46", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib4(int n){\n    int f[100];\n    f[0]=0;\n    f[1]=0;\n    f[2]=2;\n    f[3]=0;\n    for (int i=4;i<=n;i++)\n    {\n        f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];\n    }\n    return f[n];\n}\nint main(){\n\tauto result = fib4(<FILL_ME>);\n\tassert(result==104);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "6", "fn": "fib4", "para": "(int n)", "pass": false}
{"task_id": "CPP/46", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib4(int n){\n    int f[100];\n    f[0]=0;\n    f[1]=0;\n    f[2]=2;\n    f[3]=0;\n    for (int i=4;i<=n;i++)\n    {\n        f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];\n    }\n    return f[n];\n}\nint main(){\n\tauto result = fib4(<FILL_ME>);\n\tassert(result==104);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "7", "fn": "fib4", "para": "(int n)", "pass": false}
{"task_id": "CPP/46", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib4(int n){\n    int f[100];\n    f[0]=0;\n    f[1]=0;\n    f[2]=2;\n    f[3]=0;\n    for (int i=4;i<=n;i++)\n    {\n        f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];\n    }\n    return f[n];\n}\nint main(){\n\tauto result = fib4(<FILL_ME>);\n\tassert(result==104);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "7", "fn": "fib4", "para": "(int n)", "pass": false}
{"task_id": "CPP/46", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib4(int n){\n    int f[100];\n    f[0]=0;\n    f[1]=0;\n    f[2]=2;\n    f[3]=0;\n    for (int i=4;i<=n;i++)\n    {\n        f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];\n    }\n    return f[n];\n}\nint main(){\n\tauto result = fib4(<FILL_ME>);\n\tassert(result==104);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10", "fn": "fib4", "para": "(int n)", "pass": true}
{"task_id": "CPP/46", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib4(int n){\n    int f[100];\n    f[0]=0;\n    f[1]=0;\n    f[2]=2;\n    f[3]=0;\n    for (int i=4;i<=n;i++)\n    {\n        f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];\n    }\n    return f[n];\n}\nint main(){\n\tauto result = fib4(<FILL_ME>);\n\tassert(result==386);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10", "fn": "fib4", "para": "(int n)", "pass": false}
{"task_id": "CPP/46", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib4(int n){\n    int f[100];\n    f[0]=0;\n    f[1]=0;\n    f[2]=2;\n    f[3]=0;\n    for (int i=4;i<=n;i++)\n    {\n        f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];\n    }\n    return f[n];\n}\nint main(){\n\tauto result = fib4(<FILL_ME>);\n\tassert(result==386);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10", "fn": "fib4", "para": "(int n)", "pass": false}
{"task_id": "CPP/46", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib4(int n){\n    int f[100];\n    f[0]=0;\n    f[1]=0;\n    f[2]=2;\n    f[3]=0;\n    for (int i=4;i<=n;i++)\n    {\n        f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];\n    }\n    return f[n];\n}\nint main(){\n\tauto result = fib4(<FILL_ME>);\n\tassert(result==386);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10", "fn": "fib4", "para": "(int n)", "pass": false}
{"task_id": "CPP/46", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib4(int n){\n    int f[100];\n    f[0]=0;\n    f[1]=0;\n    f[2]=2;\n    f[3]=0;\n    for (int i=4;i<=n;i++)\n    {\n        f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];\n    }\n    return f[n];\n}\nint main(){\n\tauto result = fib4(<FILL_ME>);\n\tassert(result==386);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10", "fn": "fib4", "para": "(int n)", "pass": false}
{"task_id": "CPP/46", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib4(int n){\n    int f[100];\n    f[0]=0;\n    f[1]=0;\n    f[2]=2;\n    f[3]=0;\n    for (int i=4;i<=n;i++)\n    {\n        f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];\n    }\n    return f[n];\n}\nint main(){\n\tauto result = fib4(<FILL_ME>);\n\tassert(result==386);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10", "fn": "fib4", "para": "(int n)", "pass": false}
{"task_id": "CPP/46", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib4(int n){\n    int f[100];\n    f[0]=0;\n    f[1]=0;\n    f[2]=2;\n    f[3]=0;\n    for (int i=4;i<=n;i++)\n    {\n        f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];\n    }\n    return f[n];\n}\nint main(){\n\tauto result = fib4(<FILL_ME>);\n\tassert(result==28);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "8", "fn": "fib4", "para": "(int n)", "pass": true}
{"task_id": "CPP/46", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib4(int n){\n    int f[100];\n    f[0]=0;\n    f[1]=0;\n    f[2]=2;\n    f[3]=0;\n    for (int i=4;i<=n;i++)\n    {\n        f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];\n    }\n    return f[n];\n}\nint main(){\n\tauto result = fib4(<FILL_ME>);\n\tassert(result==28);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "8", "fn": "fib4", "para": "(int n)", "pass": true}
{"task_id": "CPP/46", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib4(int n){\n    int f[100];\n    f[0]=0;\n    f[1]=0;\n    f[2]=2;\n    f[3]=0;\n    for (int i=4;i<=n;i++)\n    {\n        f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];\n    }\n    return f[n];\n}\nint main(){\n\tauto result = fib4(<FILL_ME>);\n\tassert(result==28);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "8", "fn": "fib4", "para": "(int n)", "pass": true}
{"task_id": "CPP/46", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib4(int n){\n    int f[100];\n    f[0]=0;\n    f[1]=0;\n    f[2]=2;\n    f[3]=0;\n    for (int i=4;i<=n;i++)\n    {\n        f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];\n    }\n    return f[n];\n}\nint main(){\n\tauto result = fib4(<FILL_ME>);\n\tassert(result==28);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "6", "fn": "fib4", "para": "(int n)", "pass": false}
{"task_id": "CPP/46", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib4(int n){\n    int f[100];\n    f[0]=0;\n    f[1]=0;\n    f[2]=2;\n    f[3]=0;\n    for (int i=4;i<=n;i++)\n    {\n        f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];\n    }\n    return f[n];\n}\nint main(){\n\tauto result = fib4(<FILL_ME>);\n\tassert(result==28);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "6", "fn": "fib4", "para": "(int n)", "pass": false}
{"task_id": "CPP/47", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\n    sort(l.begin(),l.end());\n    if (l.size()%2==1) return l[l.size()/2];\n    return 0.5*(l[l.size()/2]+l[l.size()/2-1]);\n}\nint main(){\n\tauto result = median(<FILL_ME>);\n\tassert(abs(result-5)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{3, 5, 7}", "fn": "median", "para": "(vector<float> l)", "pass": true}
{"task_id": "CPP/47", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\n    sort(l.begin(),l.end());\n    if (l.size()%2==1) return l[l.size()/2];\n    return 0.5*(l[l.size()/2]+l[l.size()/2-1]);\n}\nint main(){\n\tauto result = median(<FILL_ME>);\n\tassert(abs(result-5)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{3,5,7}", "fn": "median", "para": "(vector<float> l)", "pass": true}
{"task_id": "CPP/47", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\n    sort(l.begin(),l.end());\n    if (l.size()%2==1) return l[l.size()/2];\n    return 0.5*(l[l.size()/2]+l[l.size()/2-1]);\n}\nint main(){\n\tauto result = median(<FILL_ME>);\n\tassert(abs(result-5)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{3,5,7}", "fn": "median", "para": "(vector<float> l)", "pass": true}
{"task_id": "CPP/47", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\n    sort(l.begin(),l.end());\n    if (l.size()%2==1) return l[l.size()/2];\n    return 0.5*(l[l.size()/2]+l[l.size()/2-1]);\n}\nint main(){\n\tauto result = median(<FILL_ME>);\n\tassert(abs(result-5)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{3,5,7}", "fn": "median", "para": "(vector<float> l)", "pass": true}
{"task_id": "CPP/47", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\n    sort(l.begin(),l.end());\n    if (l.size()%2==1) return l[l.size()/2];\n    return 0.5*(l[l.size()/2]+l[l.size()/2-1]);\n}\nint main(){\n\tauto result = median(<FILL_ME>);\n\tassert(abs(result-5)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{3,5,7}", "fn": "median", "para": "(vector<float> l)", "pass": true}
{"task_id": "CPP/47", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\n    sort(l.begin(),l.end());\n    if (l.size()%2==1) return l[l.size()/2];\n    return 0.5*(l[l.size()/2]+l[l.size()/2-1]);\n}\nint main(){\n\tauto result = median(<FILL_ME>);\n\tassert(abs(result-7)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{5,7,9}", "fn": "median", "para": "(vector<float> l)", "pass": true}
{"task_id": "CPP/47", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\n    sort(l.begin(),l.end());\n    if (l.size()%2==1) return l[l.size()/2];\n    return 0.5*(l[l.size()/2]+l[l.size()/2-1]);\n}\nint main(){\n\tauto result = median(<FILL_ME>);\n\tassert(abs(result-7)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{5,7,9}", "fn": "median", "para": "(vector<float> l)", "pass": true}
{"task_id": "CPP/47", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\n    sort(l.begin(),l.end());\n    if (l.size()%2==1) return l[l.size()/2];\n    return 0.5*(l[l.size()/2]+l[l.size()/2-1]);\n}\nint main(){\n\tauto result = median(<FILL_ME>);\n\tassert(abs(result-7)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{5, 7, 9}", "fn": "median", "para": "(vector<float> l)", "pass": true}
{"task_id": "CPP/47", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\n    sort(l.begin(),l.end());\n    if (l.size()%2==1) return l[l.size()/2];\n    return 0.5*(l[l.size()/2]+l[l.size()/2-1]);\n}\nint main(){\n\tauto result = median(<FILL_ME>);\n\tassert(abs(result-7)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{5,7,9}", "fn": "median", "para": "(vector<float> l)", "pass": true}
{"task_id": "CPP/47", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\n    sort(l.begin(),l.end());\n    if (l.size()%2==1) return l[l.size()/2];\n    return 0.5*(l[l.size()/2]+l[l.size()/2-1]);\n}\nint main(){\n\tauto result = median(<FILL_ME>);\n\tassert(abs(result-7)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{5,7,9}", "fn": "median", "para": "(vector<float> l)", "pass": true}
{"task_id": "CPP/47", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\n    sort(l.begin(),l.end());\n    if (l.size()%2==1) return l[l.size()/2];\n    return 0.5*(l[l.size()/2]+l[l.size()/2-1]);\n}\nint main(){\n\tauto result = median(<FILL_ME>);\n\tassert(abs(result-8.0)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{6.0, 7.0, 8.0, 9.0, 10.0}", "fn": "median", "para": "(vector<float> l)", "pass": true}
{"task_id": "CPP/47", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\n    sort(l.begin(),l.end());\n    if (l.size()%2==1) return l[l.size()/2];\n    return 0.5*(l[l.size()/2]+l[l.size()/2-1]);\n}\nint main(){\n\tauto result = median(<FILL_ME>);\n\tassert(abs(result-8.0)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{6.0, 7.0, 8.0, 9.0, 10.0}", "fn": "median", "para": "(vector<float> l)", "pass": true}
{"task_id": "CPP/47", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\n    sort(l.begin(),l.end());\n    if (l.size()%2==1) return l[l.size()/2];\n    return 0.5*(l[l.size()/2]+l[l.size()/2-1]);\n}\nint main(){\n\tauto result = median(<FILL_ME>);\n\tassert(abs(result-8.0)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{6.0, 7.0, 8.0, 9.0, 10.0}", "fn": "median", "para": "(vector<float> l)", "pass": true}
{"task_id": "CPP/47", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\n    sort(l.begin(),l.end());\n    if (l.size()%2==1) return l[l.size()/2];\n    return 0.5*(l[l.size()/2]+l[l.size()/2-1]);\n}\nint main(){\n\tauto result = median(<FILL_ME>);\n\tassert(abs(result-8.0)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{6.0, 7.0, 8.0, 9.0, 10.0}", "fn": "median", "para": "(vector<float> l)", "pass": true}
{"task_id": "CPP/47", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\n    sort(l.begin(),l.end());\n    if (l.size()%2==1) return l[l.size()/2];\n    return 0.5*(l[l.size()/2]+l[l.size()/2-1]);\n}\nint main(){\n\tauto result = median(<FILL_ME>);\n\tassert(abs(result-8.0)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{6.0, 7.0, 8.0, 9.0, 10.0}", "fn": "median", "para": "(vector<float> l)", "pass": true}
{"task_id": "CPP/47", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\n    sort(l.begin(),l.end());\n    if (l.size()%2==1) return l[l.size()/2];\n    return 0.5*(l[l.size()/2]+l[l.size()/2-1]);\n}\nint main(){\n\tauto result = median(<FILL_ME>);\n\tassert(abs(result-3)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{1, 2, 3, 4, 5}", "fn": "median", "para": "(vector<float> l)", "pass": true}
{"task_id": "CPP/47", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\n    sort(l.begin(),l.end());\n    if (l.size()%2==1) return l[l.size()/2];\n    return 0.5*(l[l.size()/2]+l[l.size()/2-1]);\n}\nint main(){\n\tauto result = median(<FILL_ME>);\n\tassert(abs(result-3)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{1,2,3,4,5}", "fn": "median", "para": "(vector<float> l)", "pass": true}
{"task_id": "CPP/47", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\n    sort(l.begin(),l.end());\n    if (l.size()%2==1) return l[l.size()/2];\n    return 0.5*(l[l.size()/2]+l[l.size()/2-1]);\n}\nint main(){\n\tauto result = median(<FILL_ME>);\n\tassert(abs(result-3)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{1,2,3,4,5}", "fn": "median", "para": "(vector<float> l)", "pass": true}
{"task_id": "CPP/47", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\n    sort(l.begin(),l.end());\n    if (l.size()%2==1) return l[l.size()/2];\n    return 0.5*(l[l.size()/2]+l[l.size()/2-1]);\n}\nint main(){\n\tauto result = median(<FILL_ME>);\n\tassert(abs(result-3)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{1,2,3,4,5}", "fn": "median", "para": "(vector<float> l)", "pass": true}
{"task_id": "CPP/47", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\n    sort(l.begin(),l.end());\n    if (l.size()%2==1) return l[l.size()/2];\n    return 0.5*(l[l.size()/2]+l[l.size()/2-1]);\n}\nint main(){\n\tauto result = median(<FILL_ME>);\n\tassert(abs(result-3)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{1,2,3,4,5}", "fn": "median", "para": "(vector<float> l)", "pass": true}
{"task_id": "CPP/47", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\n    sort(l.begin(),l.end());\n    if (l.size()%2==1) return l[l.size()/2];\n    return 0.5*(l[l.size()/2]+l[l.size()/2-1]);\n}\nint main(){\n\tauto result = median(<FILL_ME>);\n\tassert(abs(result-5.5)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{4.0, 5.0, 6.0, 7.0}", "fn": "median", "para": "(vector<float> l)", "pass": true}
{"task_id": "CPP/47", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\n    sort(l.begin(),l.end());\n    if (l.size()%2==1) return l[l.size()/2];\n    return 0.5*(l[l.size()/2]+l[l.size()/2-1]);\n}\nint main(){\n\tauto result = median(<FILL_ME>);\n\tassert(abs(result-5.5)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{4.0, 5.0, 6.0, 7.0}", "fn": "median", "para": "(vector<float> l)", "pass": true}
{"task_id": "CPP/47", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\n    sort(l.begin(),l.end());\n    if (l.size()%2==1) return l[l.size()/2];\n    return 0.5*(l[l.size()/2]+l[l.size()/2-1]);\n}\nint main(){\n\tauto result = median(<FILL_ME>);\n\tassert(abs(result-5.5)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{4.0, 5.0, 6.0, 7.0}", "fn": "median", "para": "(vector<float> l)", "pass": true}
{"task_id": "CPP/47", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\n    sort(l.begin(),l.end());\n    if (l.size()%2==1) return l[l.size()/2];\n    return 0.5*(l[l.size()/2]+l[l.size()/2-1]);\n}\nint main(){\n\tauto result = median(<FILL_ME>);\n\tassert(abs(result-5.5)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{4.0, 5.0, 6.0, 7.0}", "fn": "median", "para": "(vector<float> l)", "pass": true}
{"task_id": "CPP/47", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\n    sort(l.begin(),l.end());\n    if (l.size()%2==1) return l[l.size()/2];\n    return 0.5*(l[l.size()/2]+l[l.size()/2-1]);\n}\nint main(){\n\tauto result = median(<FILL_ME>);\n\tassert(abs(result-5.5)<1e-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{4.0, 5.0, 6.0, 7.0}", "fn": "median", "para": "(vector<float> l)", "pass": true}
{"task_id": "CPP/48", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_palindrome(string text){\n    string pr(text.rbegin(),text.rend());\n    return pr==text;\n}\nint main(){\n\tauto result = is_palindrome(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"racecar\"", "fn": "is_palindrome", "para": "(string text)", "pass": true}
{"task_id": "CPP/48", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_palindrome(string text){\n    string pr(text.rbegin(),text.rend());\n    return pr==text;\n}\nint main(){\n\tauto result = is_palindrome(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"racecar\"", "fn": "is_palindrome", "para": "(string text)", "pass": true}
{"task_id": "CPP/48", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_palindrome(string text){\n    string pr(text.rbegin(),text.rend());\n    return pr==text;\n}\nint main(){\n\tauto result = is_palindrome(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"racecar\"", "fn": "is_palindrome", "para": "(string text)", "pass": true}
{"task_id": "CPP/48", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_palindrome(string text){\n    string pr(text.rbegin(),text.rend());\n    return pr==text;\n}\nint main(){\n\tauto result = is_palindrome(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"racecar\"", "fn": "is_palindrome", "para": "(string text)", "pass": true}
{"task_id": "CPP/48", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_palindrome(string text){\n    string pr(text.rbegin(),text.rend());\n    return pr==text;\n}\nint main(){\n\tauto result = is_palindrome(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"racecar\"", "fn": "is_palindrome", "para": "(string text)", "pass": true}
{"task_id": "CPP/48", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_palindrome(string text){\n    string pr(text.rbegin(),text.rend());\n    return pr==text;\n}\nint main(){\n\tauto result = is_palindrome(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\"", "fn": "is_palindrome", "para": "(string text)", "pass": true}
{"task_id": "CPP/48", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_palindrome(string text){\n    string pr(text.rbegin(),text.rend());\n    return pr==text;\n}\nint main(){\n\tauto result = is_palindrome(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\"", "fn": "is_palindrome", "para": "(string text)", "pass": true}
{"task_id": "CPP/48", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_palindrome(string text){\n    string pr(text.rbegin(),text.rend());\n    return pr==text;\n}\nint main(){\n\tauto result = is_palindrome(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\"", "fn": "is_palindrome", "para": "(string text)", "pass": true}
{"task_id": "CPP/48", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_palindrome(string text){\n    string pr(text.rbegin(),text.rend());\n    return pr==text;\n}\nint main(){\n\tauto result = is_palindrome(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\"", "fn": "is_palindrome", "para": "(string text)", "pass": true}
{"task_id": "CPP/48", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_palindrome(string text){\n    string pr(text.rbegin(),text.rend());\n    return pr==text;\n}\nint main(){\n\tauto result = is_palindrome(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\"", "fn": "is_palindrome", "para": "(string text)", "pass": true}
{"task_id": "CPP/49", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint modp(int n,int p){\n    int out=1;\n    for (int i=0;i<n;i++)\n        out=(out*2)%p;\n    return out;\n}\nint main(){\n\tauto result = modp(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "0, 3", "fn": "modp", "para": "(int n,int p)", "pass": true}
{"task_id": "CPP/49", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint modp(int n,int p){\n    int out=1;\n    for (int i=0;i<n;i++)\n        out=(out*2)%p;\n    return out;\n}\nint main(){\n\tauto result = modp(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "0, 3", "fn": "modp", "para": "(int n,int p)", "pass": true}
{"task_id": "CPP/49", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint modp(int n,int p){\n    int out=1;\n    for (int i=0;i<n;i++)\n        out=(out*2)%p;\n    return out;\n}\nint main(){\n\tauto result = modp(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "0, 3", "fn": "modp", "para": "(int n,int p)", "pass": true}
{"task_id": "CPP/49", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint modp(int n,int p){\n    int out=1;\n    for (int i=0;i<n;i++)\n        out=(out*2)%p;\n    return out;\n}\nint main(){\n\tauto result = modp(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "0, 3", "fn": "modp", "para": "(int n,int p)", "pass": true}
{"task_id": "CPP/49", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint modp(int n,int p){\n    int out=1;\n    for (int i=0;i<n;i++)\n        out=(out*2)%p;\n    return out;\n}\nint main(){\n\tauto result = modp(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "0, 3", "fn": "modp", "para": "(int n,int p)", "pass": true}
{"task_id": "CPP/49", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint modp(int n,int p){\n    int out=1;\n    for (int i=0;i<n;i++)\n        out=(out*2)%p;\n    return out;\n}\nint main(){\n\tauto result = modp(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1,3", "fn": "modp", "para": "(int n,int p)", "pass": true}
{"task_id": "CPP/49", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint modp(int n,int p){\n    int out=1;\n    for (int i=0;i<n;i++)\n        out=(out*2)%p;\n    return out;\n}\nint main(){\n\tauto result = modp(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1,3", "fn": "modp", "para": "(int n,int p)", "pass": true}
{"task_id": "CPP/49", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint modp(int n,int p){\n    int out=1;\n    for (int i=0;i<n;i++)\n        out=(out*2)%p;\n    return out;\n}\nint main(){\n\tauto result = modp(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1,3", "fn": "modp", "para": "(int n,int p)", "pass": true}
{"task_id": "CPP/49", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint modp(int n,int p){\n    int out=1;\n    for (int i=0;i<n;i++)\n        out=(out*2)%p;\n    return out;\n}\nint main(){\n\tauto result = modp(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1,3", "fn": "modp", "para": "(int n,int p)", "pass": true}
{"task_id": "CPP/49", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint modp(int n,int p){\n    int out=1;\n    for (int i=0;i<n;i++)\n        out=(out*2)%p;\n    return out;\n}\nint main(){\n\tauto result = modp(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1,3", "fn": "modp", "para": "(int n,int p)", "pass": true}
{"task_id": "CPP/49", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint modp(int n,int p){\n    int out=1;\n    for (int i=0;i<n;i++)\n        out=(out*2)%p;\n    return out;\n}\nint main(){\n\tauto result = modp(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "2, 5", "fn": "modp", "para": "(int n,int p)", "pass": true}
{"task_id": "CPP/49", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint modp(int n,int p){\n    int out=1;\n    for (int i=0;i<n;i++)\n        out=(out*2)%p;\n    return out;\n}\nint main(){\n\tauto result = modp(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "2, 5", "fn": "modp", "para": "(int n,int p)", "pass": true}
{"task_id": "CPP/49", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint modp(int n,int p){\n    int out=1;\n    for (int i=0;i<n;i++)\n        out=(out*2)%p;\n    return out;\n}\nint main(){\n\tauto result = modp(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "2, 5", "fn": "modp", "para": "(int n,int p)", "pass": true}
{"task_id": "CPP/49", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint modp(int n,int p){\n    int out=1;\n    for (int i=0;i<n;i++)\n        out=(out*2)%p;\n    return out;\n}\nint main(){\n\tauto result = modp(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "2, 5", "fn": "modp", "para": "(int n,int p)", "pass": true}
{"task_id": "CPP/49", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint modp(int n,int p){\n    int out=1;\n    for (int i=0;i<n;i++)\n        out=(out*2)%p;\n    return out;\n}\nint main(){\n\tauto result = modp(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "2, 5", "fn": "modp", "para": "(int n,int p)", "pass": true}
{"task_id": "CPP/49", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint modp(int n,int p){\n    int out=1;\n    for (int i=0;i<n;i++)\n        out=(out*2)%p;\n    return out;\n}\nint main(){\n\tauto result = modp(<FILL_ME>);\n\tassert(result==8);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3, 13", "fn": "modp", "para": "(int n,int p)", "pass": true}
{"task_id": "CPP/49", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint modp(int n,int p){\n    int out=1;\n    for (int i=0;i<n;i++)\n        out=(out*2)%p;\n    return out;\n}\nint main(){\n\tauto result = modp(<FILL_ME>);\n\tassert(result==8);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3, 13", "fn": "modp", "para": "(int n,int p)", "pass": true}
{"task_id": "CPP/49", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint modp(int n,int p){\n    int out=1;\n    for (int i=0;i<n;i++)\n        out=(out*2)%p;\n    return out;\n}\nint main(){\n\tauto result = modp(<FILL_ME>);\n\tassert(result==8);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3, 13", "fn": "modp", "para": "(int n,int p)", "pass": true}
{"task_id": "CPP/49", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint modp(int n,int p){\n    int out=1;\n    for (int i=0;i<n;i++)\n        out=(out*2)%p;\n    return out;\n}\nint main(){\n\tauto result = modp(<FILL_ME>);\n\tassert(result==8);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3, 13", "fn": "modp", "para": "(int n,int p)", "pass": true}
{"task_id": "CPP/49", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint modp(int n,int p){\n    int out=1;\n    for (int i=0;i<n;i++)\n        out=(out*2)%p;\n    return out;\n}\nint main(){\n\tauto result = modp(<FILL_ME>);\n\tassert(result==8);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3, 13", "fn": "modp", "para": "(int n,int p)", "pass": true}
{"task_id": "CPP/49", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint modp(int n,int p){\n    int out=1;\n    for (int i=0;i<n;i++)\n        out=(out*2)%p;\n    return out;\n}\nint main(){\n\tauto result = modp(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "2, 5", "fn": "modp", "para": "(int n,int p)", "pass": false}
{"task_id": "CPP/49", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint modp(int n,int p){\n    int out=1;\n    for (int i=0;i<n;i++)\n        out=(out*2)%p;\n    return out;\n}\nint main(){\n\tauto result = modp(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "2, 5", "fn": "modp", "para": "(int n,int p)", "pass": false}
{"task_id": "CPP/49", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint modp(int n,int p){\n    int out=1;\n    for (int i=0;i<n;i++)\n        out=(out*2)%p;\n    return out;\n}\nint main(){\n\tauto result = modp(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "2, 5", "fn": "modp", "para": "(int n,int p)", "pass": false}
{"task_id": "CPP/49", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint modp(int n,int p){\n    int out=1;\n    for (int i=0;i<n;i++)\n        out=(out*2)%p;\n    return out;\n}\nint main(){\n\tauto result = modp(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "2,3", "fn": "modp", "para": "(int n,int p)", "pass": false}
{"task_id": "CPP/49", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint modp(int n,int p){\n    int out=1;\n    for (int i=0;i<n;i++)\n        out=(out*2)%p;\n    return out;\n}\nint main(){\n\tauto result = modp(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "2, 5", "fn": "modp", "para": "(int n,int p)", "pass": false}
{"task_id": "CPP/51", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring remove_vowels(string text){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=0;i<text.length();i++)\n        if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())\n            out=out+text[i];\n    return out;\n\n}\nint main(){\n\tauto result = remove_vowels(<FILL_ME>);\n\tassert(result==\"\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"\"", "fn": "remove_vowels", "para": "(string text)", "pass": true}
{"task_id": "CPP/51", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring remove_vowels(string text){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=0;i<text.length();i++)\n        if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())\n            out=out+text[i];\n    return out;\n\n}\nint main(){\n\tauto result = remove_vowels(<FILL_ME>);\n\tassert(result==\"\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"\"", "fn": "remove_vowels", "para": "(string text)", "pass": true}
{"task_id": "CPP/51", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring remove_vowels(string text){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=0;i<text.length();i++)\n        if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())\n            out=out+text[i];\n    return out;\n\n}\nint main(){\n\tauto result = remove_vowels(<FILL_ME>);\n\tassert(result==\"\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"\"", "fn": "remove_vowels", "para": "(string text)", "pass": true}
{"task_id": "CPP/51", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring remove_vowels(string text){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=0;i<text.length();i++)\n        if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())\n            out=out+text[i];\n    return out;\n\n}\nint main(){\n\tauto result = remove_vowels(<FILL_ME>);\n\tassert(result==\"\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"\"", "fn": "remove_vowels", "para": "(string text)", "pass": true}
{"task_id": "CPP/51", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring remove_vowels(string text){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=0;i<text.length();i++)\n        if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())\n            out=out+text[i];\n    return out;\n\n}\nint main(){\n\tauto result = remove_vowels(<FILL_ME>);\n\tassert(result==\"\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"\"", "fn": "remove_vowels", "para": "(string text)", "pass": true}
{"task_id": "CPP/51", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring remove_vowels(string text){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=0;i<text.length();i++)\n        if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())\n            out=out+text[i];\n    return out;\n\n}\nint main(){\n\tauto result = remove_vowels(<FILL_ME>);\n\tassert(result==\"bcdf\\nghjklm\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Abcdef\\nghijklm\"", "fn": "remove_vowels", "para": "(string text)", "pass": true}
{"task_id": "CPP/51", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring remove_vowels(string text){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=0;i<text.length();i++)\n        if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())\n            out=out+text[i];\n    return out;\n\n}\nint main(){\n\tauto result = remove_vowels(<FILL_ME>);\n\tassert(result==\"bcdf\\nghjklm\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Abcdef\\nghijklm\"", "fn": "remove_vowels", "para": "(string text)", "pass": true}
{"task_id": "CPP/51", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring remove_vowels(string text){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=0;i<text.length();i++)\n        if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())\n            out=out+text[i];\n    return out;\n\n}\nint main(){\n\tauto result = remove_vowels(<FILL_ME>);\n\tassert(result==\"bcdf\\nghjklm\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Abcdef\\nghijklm\"", "fn": "remove_vowels", "para": "(string text)", "pass": true}
{"task_id": "CPP/51", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring remove_vowels(string text){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=0;i<text.length();i++)\n        if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())\n            out=out+text[i];\n    return out;\n\n}\nint main(){\n\tauto result = remove_vowels(<FILL_ME>);\n\tassert(result==\"bcdf\\nghjklm\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Abcdef\\nghijklm\"", "fn": "remove_vowels", "para": "(string text)", "pass": true}
{"task_id": "CPP/51", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring remove_vowels(string text){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=0;i<text.length();i++)\n        if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())\n            out=out+text[i];\n    return out;\n\n}\nint main(){\n\tauto result = remove_vowels(<FILL_ME>);\n\tassert(result==\"bcdf\\nghjklm\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Abcdef\\nghijklm\"", "fn": "remove_vowels", "para": "(string text)", "pass": true}
{"task_id": "CPP/51", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring remove_vowels(string text){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=0;i<text.length();i++)\n        if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())\n            out=out+text[i];\n    return out;\n\n}\nint main(){\n\tauto result = remove_vowels(<FILL_ME>);\n\tassert(result==\"ybcd\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"yaebcoidu\"", "fn": "remove_vowels", "para": "(string text)", "pass": true}
{"task_id": "CPP/51", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring remove_vowels(string text){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=0;i<text.length();i++)\n        if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())\n            out=out+text[i];\n    return out;\n\n}\nint main(){\n\tauto result = remove_vowels(<FILL_ME>);\n\tassert(result==\"ybcd\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"yaebcoidu\"", "fn": "remove_vowels", "para": "(string text)", "pass": true}
{"task_id": "CPP/51", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring remove_vowels(string text){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=0;i<text.length();i++)\n        if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())\n            out=out+text[i];\n    return out;\n\n}\nint main(){\n\tauto result = remove_vowels(<FILL_ME>);\n\tassert(result==\"ybcd\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"yaebcoidu\"", "fn": "remove_vowels", "para": "(string text)", "pass": true}
{"task_id": "CPP/51", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring remove_vowels(string text){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=0;i<text.length();i++)\n        if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())\n            out=out+text[i];\n    return out;\n\n}\nint main(){\n\tauto result = remove_vowels(<FILL_ME>);\n\tassert(result==\"ybcd\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"yaebcoidu\"", "fn": "remove_vowels", "para": "(string text)", "pass": true}
{"task_id": "CPP/51", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring remove_vowels(string text){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=0;i<text.length();i++)\n        if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())\n            out=out+text[i];\n    return out;\n\n}\nint main(){\n\tauto result = remove_vowels(<FILL_ME>);\n\tassert(result==\"ybcd\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"yaebcoidu\"", "fn": "remove_vowels", "para": "(string text)", "pass": true}
{"task_id": "CPP/51", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring remove_vowels(string text){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=0;i<text.length();i++)\n        if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())\n            out=out+text[i];\n    return out;\n\n}\nint main(){\n\tauto result = remove_vowels(<FILL_ME>);\n\tassert(result==\"fdcb\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"abcdefgh\"", "fn": "remove_vowels", "para": "(string text)", "pass": false}
{"task_id": "CPP/51", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring remove_vowels(string text){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=0;i<text.length();i++)\n        if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())\n            out=out+text[i];\n    return out;\n\n}\nint main(){\n\tauto result = remove_vowels(<FILL_ME>);\n\tassert(result==\"fdcb\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"abcdefg\"", "fn": "remove_vowels", "para": "(string text)", "pass": false}
{"task_id": "CPP/51", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring remove_vowels(string text){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=0;i<text.length();i++)\n        if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())\n            out=out+text[i];\n    return out;\n\n}\nint main(){\n\tauto result = remove_vowels(<FILL_ME>);\n\tassert(result==\"fdcb\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"abcdefg\"", "fn": "remove_vowels", "para": "(string text)", "pass": false}
{"task_id": "CPP/51", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring remove_vowels(string text){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=0;i<text.length();i++)\n        if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())\n            out=out+text[i];\n    return out;\n\n}\nint main(){\n\tauto result = remove_vowels(<FILL_ME>);\n\tassert(result==\"fdcb\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"abcdefg\"", "fn": "remove_vowels", "para": "(string text)", "pass": false}
{"task_id": "CPP/51", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring remove_vowels(string text){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=0;i<text.length();i++)\n        if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())\n            out=out+text[i];\n    return out;\n\n}\nint main(){\n\tauto result = remove_vowels(<FILL_ME>);\n\tassert(result==\"fdcb\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"abcdefg\"", "fn": "remove_vowels", "para": "(string text)", "pass": false}
{"task_id": "CPP/51", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring remove_vowels(string text){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=0;i<text.length();i++)\n        if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())\n            out=out+text[i];\n    return out;\n\n}\nint main(){\n\tauto result = remove_vowels(<FILL_ME>);\n\tassert(result==\"cB\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"cAeBiOu\"", "fn": "remove_vowels", "para": "(string text)", "pass": true}
{"task_id": "CPP/51", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring remove_vowels(string text){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=0;i<text.length();i++)\n        if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())\n            out=out+text[i];\n    return out;\n\n}\nint main(){\n\tauto result = remove_vowels(<FILL_ME>);\n\tassert(result==\"cB\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"cAeBiOu\"", "fn": "remove_vowels", "para": "(string text)", "pass": true}
{"task_id": "CPP/51", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring remove_vowels(string text){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=0;i<text.length();i++)\n        if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())\n            out=out+text[i];\n    return out;\n\n}\nint main(){\n\tauto result = remove_vowels(<FILL_ME>);\n\tassert(result==\"cB\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"cAeBiOu\"", "fn": "remove_vowels", "para": "(string text)", "pass": true}
{"task_id": "CPP/51", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring remove_vowels(string text){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=0;i<text.length();i++)\n        if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())\n            out=out+text[i];\n    return out;\n\n}\nint main(){\n\tauto result = remove_vowels(<FILL_ME>);\n\tassert(result==\"cB\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"cAeBiOu\"", "fn": "remove_vowels", "para": "(string text)", "pass": true}
{"task_id": "CPP/51", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring remove_vowels(string text){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=0;i<text.length();i++)\n        if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())\n            out=out+text[i];\n    return out;\n\n}\nint main(){\n\tauto result = remove_vowels(<FILL_ME>);\n\tassert(result==\"cB\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"cAeBiOu\"", "fn": "remove_vowels", "para": "(string text)", "pass": true}
{"task_id": "CPP/52", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool below_threshold(vector<int>l, int t){\n    for (int i=0;i<l.size();i++)\n        if (l[i]>=t) return false;\n    return true;\n}\nint main(){\n\tauto result = below_threshold(<FILL_ME>);\n\tassert(not(result));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5}, 6", "fn": "below_threshold", "para": "(vector<int>l, int t)", "pass": false}
{"task_id": "CPP/52", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool below_threshold(vector<int>l, int t){\n    for (int i=0;i<l.size();i++)\n        if (l[i]>=t) return false;\n    return true;\n}\nint main(){\n\tauto result = below_threshold(<FILL_ME>);\n\tassert(not(result));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5}, 6", "fn": "below_threshold", "para": "(vector<int>l, int t)", "pass": false}
{"task_id": "CPP/52", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool below_threshold(vector<int>l, int t){\n    for (int i=0;i<l.size();i++)\n        if (l[i]>=t) return false;\n    return true;\n}\nint main(){\n\tauto result = below_threshold(<FILL_ME>);\n\tassert(not(result));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5}, 6", "fn": "below_threshold", "para": "(vector<int>l, int t)", "pass": false}
{"task_id": "CPP/52", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool below_threshold(vector<int>l, int t){\n    for (int i=0;i<l.size();i++)\n        if (l[i]>=t) return false;\n    return true;\n}\nint main(){\n\tauto result = below_threshold(<FILL_ME>);\n\tassert(not(result));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5}, 6", "fn": "below_threshold", "para": "(vector<int>l, int t)", "pass": false}
{"task_id": "CPP/52", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool below_threshold(vector<int>l, int t){\n    for (int i=0;i<l.size();i++)\n        if (l[i]>=t) return false;\n    return true;\n}\nint main(){\n\tauto result = below_threshold(<FILL_ME>);\n\tassert(not(result));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5}, 6", "fn": "below_threshold", "para": "(vector<int>l, int t)", "pass": false}
{"task_id": "CPP/52", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool below_threshold(vector<int>l, int t){\n    for (int i=0;i<l.size();i++)\n        if (l[i]>=t) return false;\n    return true;\n}\nint main(){\n\tauto result = below_threshold(<FILL_ME>);\n\tassert(result);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5}, 10", "fn": "below_threshold", "para": "(vector<int>l, int t)", "pass": true}
{"task_id": "CPP/52", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool below_threshold(vector<int>l, int t){\n    for (int i=0;i<l.size();i++)\n        if (l[i]>=t) return false;\n    return true;\n}\nint main(){\n\tauto result = below_threshold(<FILL_ME>);\n\tassert(result);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5}, 10", "fn": "below_threshold", "para": "(vector<int>l, int t)", "pass": true}
{"task_id": "CPP/52", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool below_threshold(vector<int>l, int t){\n    for (int i=0;i<l.size();i++)\n        if (l[i]>=t) return false;\n    return true;\n}\nint main(){\n\tauto result = below_threshold(<FILL_ME>);\n\tassert(result);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5}, 10", "fn": "below_threshold", "para": "(vector<int>l, int t)", "pass": true}
{"task_id": "CPP/52", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool below_threshold(vector<int>l, int t){\n    for (int i=0;i<l.size();i++)\n        if (l[i]>=t) return false;\n    return true;\n}\nint main(){\n\tauto result = below_threshold(<FILL_ME>);\n\tassert(result);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5}, 6", "fn": "below_threshold", "para": "(vector<int>l, int t)", "pass": true}
{"task_id": "CPP/52", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool below_threshold(vector<int>l, int t){\n    for (int i=0;i<l.size();i++)\n        if (l[i]>=t) return false;\n    return true;\n}\nint main(){\n\tauto result = below_threshold(<FILL_ME>);\n\tassert(result);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5}, 10", "fn": "below_threshold", "para": "(vector<int>l, int t)", "pass": true}
{"task_id": "CPP/53", "code": "#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\nint add(int x,int y){\n    return x+y;\n}\nint main(){\n\tauto result = add(<FILL_ME>);\n\tassert(result==12);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3, 9", "fn": "add", "para": "(int x,int y)", "pass": true}
{"task_id": "CPP/53", "code": "#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\nint add(int x,int y){\n    return x+y;\n}\nint main(){\n\tauto result = add(<FILL_ME>);\n\tassert(result==12);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3, 9", "fn": "add", "para": "(int x,int y)", "pass": true}
{"task_id": "CPP/53", "code": "#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\nint add(int x,int y){\n    return x+y;\n}\nint main(){\n\tauto result = add(<FILL_ME>);\n\tassert(result==12);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "6, 6", "fn": "add", "para": "(int x,int y)", "pass": true}
{"task_id": "CPP/53", "code": "#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\nint add(int x,int y){\n    return x+y;\n}\nint main(){\n\tauto result = add(<FILL_ME>);\n\tassert(result==12);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "6, 6", "fn": "add", "para": "(int x,int y)", "pass": true}
{"task_id": "CPP/53", "code": "#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\nint add(int x,int y){\n    return x+y;\n}\nint main(){\n\tauto result = add(<FILL_ME>);\n\tassert(result==12);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3, 9", "fn": "add", "para": "(int x,int y)", "pass": true}
{"task_id": "CPP/53", "code": "#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\nint add(int x,int y){\n    return x+y;\n}\nint main(){\n\tauto result = add(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "2, 3", "fn": "add", "para": "(int x,int y)", "pass": true}
{"task_id": "CPP/53", "code": "#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\nint add(int x,int y){\n    return x+y;\n}\nint main(){\n\tauto result = add(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "2, 3", "fn": "add", "para": "(int x,int y)", "pass": true}
{"task_id": "CPP/53", "code": "#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\nint add(int x,int y){\n    return x+y;\n}\nint main(){\n\tauto result = add(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "2, 3", "fn": "add", "para": "(int x,int y)", "pass": true}
{"task_id": "CPP/53", "code": "#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\nint add(int x,int y){\n    return x+y;\n}\nint main(){\n\tauto result = add(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "2, 3", "fn": "add", "para": "(int x,int y)", "pass": true}
{"task_id": "CPP/53", "code": "#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\nint add(int x,int y){\n    return x+y;\n}\nint main(){\n\tauto result = add(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "2, 3", "fn": "add", "para": "(int x,int y)", "pass": true}
{"task_id": "CPP/53", "code": "#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\nint add(int x,int y){\n    return x+y;\n}\nint main(){\n\tauto result = add(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1,0", "fn": "add", "para": "(int x,int y)", "pass": true}
{"task_id": "CPP/53", "code": "#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\nint add(int x,int y){\n    return x+y;\n}\nint main(){\n\tauto result = add(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1,0", "fn": "add", "para": "(int x,int y)", "pass": true}
{"task_id": "CPP/53", "code": "#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\nint add(int x,int y){\n    return x+y;\n}\nint main(){\n\tauto result = add(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1,0", "fn": "add", "para": "(int x,int y)", "pass": true}
{"task_id": "CPP/53", "code": "#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\nint add(int x,int y){\n    return x+y;\n}\nint main(){\n\tauto result = add(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1,0", "fn": "add", "para": "(int x,int y)", "pass": true}
{"task_id": "CPP/53", "code": "#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\nint add(int x,int y){\n    return x+y;\n}\nint main(){\n\tauto result = add(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1,0", "fn": "add", "para": "(int x,int y)", "pass": true}
{"task_id": "CPP/54", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool same_chars(string s0,string s1){\n    for (int i=0;i<s0.length();i++)\n    if (find(s1.begin(),s1.end(),s0[i])==s1.end())\n        return false;\n    for (int i=0;i<s1.length();i++)\n    if (find(s0.begin(),s0.end(),s1[i])==s0.end())\n        return false;\n    return true;   \n}\nint main(){\n\tauto result = same_chars(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\", \"ohell\"", "fn": "same_chars", "para": "(string s0,string s1)", "pass": true}
{"task_id": "CPP/54", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool same_chars(string s0,string s1){\n    for (int i=0;i<s0.length();i++)\n    if (find(s1.begin(),s1.end(),s0[i])==s1.end())\n        return false;\n    for (int i=0;i<s1.length();i++)\n    if (find(s0.begin(),s0.end(),s1[i])==s0.end())\n        return false;\n    return true;   \n}\nint main(){\n\tauto result = same_chars(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\",\"ohell\"", "fn": "same_chars", "para": "(string s0,string s1)", "pass": true}
{"task_id": "CPP/54", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool same_chars(string s0,string s1){\n    for (int i=0;i<s0.length();i++)\n    if (find(s1.begin(),s1.end(),s0[i])==s1.end())\n        return false;\n    for (int i=0;i<s1.length();i++)\n    if (find(s0.begin(),s0.end(),s1[i])==s0.end())\n        return false;\n    return true;   \n}\nint main(){\n\tauto result = same_chars(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\", \"ohell\"", "fn": "same_chars", "para": "(string s0,string s1)", "pass": true}
{"task_id": "CPP/54", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool same_chars(string s0,string s1){\n    for (int i=0;i<s0.length();i++)\n    if (find(s1.begin(),s1.end(),s0[i])==s1.end())\n        return false;\n    for (int i=0;i<s1.length();i++)\n    if (find(s0.begin(),s0.end(),s1[i])==s0.end())\n        return false;\n    return true;   \n}\nint main(){\n\tauto result = same_chars(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\", \"ohell\"", "fn": "same_chars", "para": "(string s0,string s1)", "pass": true}
{"task_id": "CPP/54", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool same_chars(string s0,string s1){\n    for (int i=0;i<s0.length();i++)\n    if (find(s1.begin(),s1.end(),s0[i])==s1.end())\n        return false;\n    for (int i=0;i<s1.length();i++)\n    if (find(s0.begin(),s0.end(),s1[i])==s0.end())\n        return false;\n    return true;   \n}\nint main(){\n\tauto result = same_chars(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\", \"ohell\"", "fn": "same_chars", "para": "(string s0,string s1)", "pass": true}
{"task_id": "CPP/54", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool same_chars(string s0,string s1){\n    for (int i=0;i<s0.length();i++)\n    if (find(s1.begin(),s1.end(),s0[i])==s1.end())\n        return false;\n    for (int i=0;i<s1.length();i++)\n    if (find(s0.begin(),s0.end(),s1[i])==s0.end())\n        return false;\n    return true;   \n}\nint main(){\n\tauto result = same_chars(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\", \"world\"", "fn": "same_chars", "para": "(string s0,string s1)", "pass": true}
{"task_id": "CPP/54", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool same_chars(string s0,string s1){\n    for (int i=0;i<s0.length();i++)\n    if (find(s1.begin(),s1.end(),s0[i])==s1.end())\n        return false;\n    for (int i=0;i<s1.length();i++)\n    if (find(s0.begin(),s0.end(),s1[i])==s0.end())\n        return false;\n    return true;   \n}\nint main(){\n\tauto result = same_chars(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\", \"world\"", "fn": "same_chars", "para": "(string s0,string s1)", "pass": true}
{"task_id": "CPP/54", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool same_chars(string s0,string s1){\n    for (int i=0;i<s0.length();i++)\n    if (find(s1.begin(),s1.end(),s0[i])==s1.end())\n        return false;\n    for (int i=0;i<s1.length();i++)\n    if (find(s0.begin(),s0.end(),s1[i])==s0.end())\n        return false;\n    return true;   \n}\nint main(){\n\tauto result = same_chars(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\", \"world\"", "fn": "same_chars", "para": "(string s0,string s1)", "pass": true}
{"task_id": "CPP/54", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool same_chars(string s0,string s1){\n    for (int i=0;i<s0.length();i++)\n    if (find(s1.begin(),s1.end(),s0[i])==s1.end())\n        return false;\n    for (int i=0;i<s1.length();i++)\n    if (find(s0.begin(),s0.end(),s1[i])==s0.end())\n        return false;\n    return true;   \n}\nint main(){\n\tauto result = same_chars(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\",\"world\"", "fn": "same_chars", "para": "(string s0,string s1)", "pass": true}
{"task_id": "CPP/54", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool same_chars(string s0,string s1){\n    for (int i=0;i<s0.length();i++)\n    if (find(s1.begin(),s1.end(),s0[i])==s1.end())\n        return false;\n    for (int i=0;i<s1.length();i++)\n    if (find(s0.begin(),s0.end(),s1[i])==s0.end())\n        return false;\n    return true;   \n}\nint main(){\n\tauto result = same_chars(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\", \"world\"", "fn": "same_chars", "para": "(string s0,string s1)", "pass": true}
{"task_id": "CPP/55", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib(int n){\n    int f[1000];\n    f[0]=0;f[1]=1;\n    for (int i=2;i<=n; i++)\n    f[i]=f[i-1]+f[i-2];\n    return f[n];\n}\nint main(){\n\tauto result = fib(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1", "fn": "fib", "para": "(int n)", "pass": true}
{"task_id": "CPP/55", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib(int n){\n    int f[1000];\n    f[0]=0;f[1]=1;\n    for (int i=2;i<=n; i++)\n    f[i]=f[i-1]+f[i-2];\n    return f[n];\n}\nint main(){\n\tauto result = fib(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1", "fn": "fib", "para": "(int n)", "pass": true}
{"task_id": "CPP/55", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib(int n){\n    int f[1000];\n    f[0]=0;f[1]=1;\n    for (int i=2;i<=n; i++)\n    f[i]=f[i-1]+f[i-2];\n    return f[n];\n}\nint main(){\n\tauto result = fib(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1", "fn": "fib", "para": "(int n)", "pass": true}
{"task_id": "CPP/55", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib(int n){\n    int f[1000];\n    f[0]=0;f[1]=1;\n    for (int i=2;i<=n; i++)\n    f[i]=f[i-1]+f[i-2];\n    return f[n];\n}\nint main(){\n\tauto result = fib(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1", "fn": "fib", "para": "(int n)", "pass": true}
{"task_id": "CPP/55", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib(int n){\n    int f[1000];\n    f[0]=0;f[1]=1;\n    for (int i=2;i<=n; i++)\n    f[i]=f[i-1]+f[i-2];\n    return f[n];\n}\nint main(){\n\tauto result = fib(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1", "fn": "fib", "para": "(int n)", "pass": true}
{"task_id": "CPP/55", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib(int n){\n    int f[1000];\n    f[0]=0;f[1]=1;\n    for (int i=2;i<=n; i++)\n    f[i]=f[i-1]+f[i-2];\n    return f[n];\n}\nint main(){\n\tauto result = fib(<FILL_ME>);\n\tassert(result==55);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10", "fn": "fib", "para": "(int n)", "pass": true}
{"task_id": "CPP/55", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib(int n){\n    int f[1000];\n    f[0]=0;f[1]=1;\n    for (int i=2;i<=n; i++)\n    f[i]=f[i-1]+f[i-2];\n    return f[n];\n}\nint main(){\n\tauto result = fib(<FILL_ME>);\n\tassert(result==55);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10", "fn": "fib", "para": "(int n)", "pass": true}
{"task_id": "CPP/55", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib(int n){\n    int f[1000];\n    f[0]=0;f[1]=1;\n    for (int i=2;i<=n; i++)\n    f[i]=f[i-1]+f[i-2];\n    return f[n];\n}\nint main(){\n\tauto result = fib(<FILL_ME>);\n\tassert(result==55);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10", "fn": "fib", "para": "(int n)", "pass": true}
{"task_id": "CPP/55", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib(int n){\n    int f[1000];\n    f[0]=0;f[1]=1;\n    for (int i=2;i<=n; i++)\n    f[i]=f[i-1]+f[i-2];\n    return f[n];\n}\nint main(){\n\tauto result = fib(<FILL_ME>);\n\tassert(result==55);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10", "fn": "fib", "para": "(int n)", "pass": true}
{"task_id": "CPP/55", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib(int n){\n    int f[1000];\n    f[0]=0;f[1]=1;\n    for (int i=2;i<=n; i++)\n    f[i]=f[i-1]+f[i-2];\n    return f[n];\n}\nint main(){\n\tauto result = fib(<FILL_ME>);\n\tassert(result==55);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10", "fn": "fib", "para": "(int n)", "pass": true}
{"task_id": "CPP/55", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib(int n){\n    int f[1000];\n    f[0]=0;f[1]=1;\n    for (int i=2;i<=n; i++)\n    f[i]=f[i-1]+f[i-2];\n    return f[n];\n}\nint main(){\n\tauto result = fib(<FILL_ME>);\n\tassert(result==21);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "8", "fn": "fib", "para": "(int n)", "pass": true}
{"task_id": "CPP/55", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib(int n){\n    int f[1000];\n    f[0]=0;f[1]=1;\n    for (int i=2;i<=n; i++)\n    f[i]=f[i-1]+f[i-2];\n    return f[n];\n}\nint main(){\n\tauto result = fib(<FILL_ME>);\n\tassert(result==21);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "8", "fn": "fib", "para": "(int n)", "pass": true}
{"task_id": "CPP/55", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib(int n){\n    int f[1000];\n    f[0]=0;f[1]=1;\n    for (int i=2;i<=n; i++)\n    f[i]=f[i-1]+f[i-2];\n    return f[n];\n}\nint main(){\n\tauto result = fib(<FILL_ME>);\n\tassert(result==21);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "8", "fn": "fib", "para": "(int n)", "pass": true}
{"task_id": "CPP/55", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib(int n){\n    int f[1000];\n    f[0]=0;f[1]=1;\n    for (int i=2;i<=n; i++)\n    f[i]=f[i-1]+f[i-2];\n    return f[n];\n}\nint main(){\n\tauto result = fib(<FILL_ME>);\n\tassert(result==21);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "8", "fn": "fib", "para": "(int n)", "pass": true}
{"task_id": "CPP/55", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib(int n){\n    int f[1000];\n    f[0]=0;f[1]=1;\n    for (int i=2;i<=n; i++)\n    f[i]=f[i-1]+f[i-2];\n    return f[n];\n}\nint main(){\n\tauto result = fib(<FILL_ME>);\n\tassert(result==21);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "8", "fn": "fib", "para": "(int n)", "pass": true}
{"task_id": "CPP/55", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib(int n){\n    int f[1000];\n    f[0]=0;f[1]=1;\n    for (int i=2;i<=n; i++)\n    f[i]=f[i-1]+f[i-2];\n    return f[n];\n}\nint main(){\n\tauto result = fib(<FILL_ME>);\n\tassert(result==144);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "12", "fn": "fib", "para": "(int n)", "pass": true}
{"task_id": "CPP/55", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib(int n){\n    int f[1000];\n    f[0]=0;f[1]=1;\n    for (int i=2;i<=n; i++)\n    f[i]=f[i-1]+f[i-2];\n    return f[n];\n}\nint main(){\n\tauto result = fib(<FILL_ME>);\n\tassert(result==144);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "12", "fn": "fib", "para": "(int n)", "pass": true}
{"task_id": "CPP/55", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib(int n){\n    int f[1000];\n    f[0]=0;f[1]=1;\n    for (int i=2;i<=n; i++)\n    f[i]=f[i-1]+f[i-2];\n    return f[n];\n}\nint main(){\n\tauto result = fib(<FILL_ME>);\n\tassert(result==144);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "12", "fn": "fib", "para": "(int n)", "pass": true}
{"task_id": "CPP/55", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib(int n){\n    int f[1000];\n    f[0]=0;f[1]=1;\n    for (int i=2;i<=n; i++)\n    f[i]=f[i-1]+f[i-2];\n    return f[n];\n}\nint main(){\n\tauto result = fib(<FILL_ME>);\n\tassert(result==144);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "12", "fn": "fib", "para": "(int n)", "pass": true}
{"task_id": "CPP/55", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib(int n){\n    int f[1000];\n    f[0]=0;f[1]=1;\n    for (int i=2;i<=n; i++)\n    f[i]=f[i-1]+f[i-2];\n    return f[n];\n}\nint main(){\n\tauto result = fib(<FILL_ME>);\n\tassert(result==144);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "12", "fn": "fib", "para": "(int n)", "pass": true}
{"task_id": "CPP/55", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib(int n){\n    int f[1000];\n    f[0]=0;f[1]=1;\n    for (int i=2;i<=n; i++)\n    f[i]=f[i-1]+f[i-2];\n    return f[n];\n}\nint main(){\n\tauto result = fib(<FILL_ME>);\n\tassert(result==89);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "11", "fn": "fib", "para": "(int n)", "pass": true}
{"task_id": "CPP/55", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib(int n){\n    int f[1000];\n    f[0]=0;f[1]=1;\n    for (int i=2;i<=n; i++)\n    f[i]=f[i-1]+f[i-2];\n    return f[n];\n}\nint main(){\n\tauto result = fib(<FILL_ME>);\n\tassert(result==89);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "11", "fn": "fib", "para": "(int n)", "pass": true}
{"task_id": "CPP/55", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib(int n){\n    int f[1000];\n    f[0]=0;f[1]=1;\n    for (int i=2;i<=n; i++)\n    f[i]=f[i-1]+f[i-2];\n    return f[n];\n}\nint main(){\n\tauto result = fib(<FILL_ME>);\n\tassert(result==89);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "11", "fn": "fib", "para": "(int n)", "pass": true}
{"task_id": "CPP/55", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib(int n){\n    int f[1000];\n    f[0]=0;f[1]=1;\n    for (int i=2;i<=n; i++)\n    f[i]=f[i-1]+f[i-2];\n    return f[n];\n}\nint main(){\n\tauto result = fib(<FILL_ME>);\n\tassert(result==89);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "11", "fn": "fib", "para": "(int n)", "pass": true}
{"task_id": "CPP/55", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib(int n){\n    int f[1000];\n    f[0]=0;f[1]=1;\n    for (int i=2;i<=n; i++)\n    f[i]=f[i-1]+f[i-2];\n    return f[n];\n}\nint main(){\n\tauto result = fib(<FILL_ME>);\n\tassert(result==89);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "11", "fn": "fib", "para": "(int n)", "pass": true}
{"task_id": "CPP/56", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='<') level+=1;\n        if (brackets[i]=='>') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\nint main(){\n\tauto result = correct_bracketing(<FILL_ME>);\n\tassert(not(result));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"<<<>>>\"", "fn": "correct_bracketing", "para": "(string brackets)", "pass": false}
{"task_id": "CPP/56", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='<') level+=1;\n        if (brackets[i]=='>') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\nint main(){\n\tauto result = correct_bracketing(<FILL_ME>);\n\tassert(not(result));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"<<<>>>\"", "fn": "correct_bracketing", "para": "(string brackets)", "pass": false}
{"task_id": "CPP/56", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='<') level+=1;\n        if (brackets[i]=='>') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\nint main(){\n\tauto result = correct_bracketing(<FILL_ME>);\n\tassert(not(result));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"<<<>>>\"", "fn": "correct_bracketing", "para": "(string brackets)", "pass": false}
{"task_id": "CPP/56", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='<') level+=1;\n        if (brackets[i]=='>') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\nint main(){\n\tauto result = correct_bracketing(<FILL_ME>);\n\tassert(not(result));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"<<<>>>\"", "fn": "correct_bracketing", "para": "(string brackets)", "pass": false}
{"task_id": "CPP/56", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='<') level+=1;\n        if (brackets[i]=='>') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\nint main(){\n\tauto result = correct_bracketing(<FILL_ME>);\n\tassert(not(result));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"<<<>>>\"", "fn": "correct_bracketing", "para": "(string brackets)", "pass": false}
{"task_id": "CPP/56", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='<') level+=1;\n        if (brackets[i]=='>') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\nint main(){\n\tauto result = correct_bracketing(<FILL_ME>);\n\tassert(result);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"<<<>>>\"", "fn": "correct_bracketing", "para": "(string brackets)", "pass": true}
{"task_id": "CPP/56", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='<') level+=1;\n        if (brackets[i]=='>') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\nint main(){\n\tauto result = correct_bracketing(<FILL_ME>);\n\tassert(result);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"<<<>>>\"", "fn": "correct_bracketing", "para": "(string brackets)", "pass": true}
{"task_id": "CPP/56", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='<') level+=1;\n        if (brackets[i]=='>') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\nint main(){\n\tauto result = correct_bracketing(<FILL_ME>);\n\tassert(result);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"<<<>>>\"", "fn": "correct_bracketing", "para": "(string brackets)", "pass": true}
{"task_id": "CPP/56", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='<') level+=1;\n        if (brackets[i]=='>') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\nint main(){\n\tauto result = correct_bracketing(<FILL_ME>);\n\tassert(result);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"<<<>>>\"", "fn": "correct_bracketing", "para": "(string brackets)", "pass": true}
{"task_id": "CPP/56", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='<') level+=1;\n        if (brackets[i]=='>') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\nint main(){\n\tauto result = correct_bracketing(<FILL_ME>);\n\tassert(result);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"<<<>>>\"", "fn": "correct_bracketing", "para": "(string brackets)", "pass": true}
{"task_id": "CPP/57", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool monotonic(vector<float> l){\n    int incr,decr;\n    incr=0;decr=0;\n    for (int i=1;i<l.size();i++)\n    {\n        if (l[i]>l[i-1]) incr=1;\n        if (l[i]<l[i-1]) decr=1;\n    }\n    if (incr+decr==2) return false;\n    return true;\n}\nint main(){\n\tauto result = monotonic(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{1.0, 2.0, 3.0, 4.0}", "fn": "monotonic", "para": "(vector<float> l)", "pass": true}
{"task_id": "CPP/57", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool monotonic(vector<float> l){\n    int incr,decr;\n    incr=0;decr=0;\n    for (int i=1;i<l.size();i++)\n    {\n        if (l[i]>l[i-1]) incr=1;\n        if (l[i]<l[i-1]) decr=1;\n    }\n    if (incr+decr==2) return false;\n    return true;\n}\nint main(){\n\tauto result = monotonic(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{1.0, 2.0, 3.0, 4.0}", "fn": "monotonic", "para": "(vector<float> l)", "pass": true}
{"task_id": "CPP/57", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool monotonic(vector<float> l){\n    int incr,decr;\n    incr=0;decr=0;\n    for (int i=1;i<l.size();i++)\n    {\n        if (l[i]>l[i-1]) incr=1;\n        if (l[i]<l[i-1]) decr=1;\n    }\n    if (incr+decr==2) return false;\n    return true;\n}\nint main(){\n\tauto result = monotonic(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{1.0, 2.0, 3.0, 4.0}", "fn": "monotonic", "para": "(vector<float> l)", "pass": true}
{"task_id": "CPP/57", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool monotonic(vector<float> l){\n    int incr,decr;\n    incr=0;decr=0;\n    for (int i=1;i<l.size();i++)\n    {\n        if (l[i]>l[i-1]) incr=1;\n        if (l[i]<l[i-1]) decr=1;\n    }\n    if (incr+decr==2) return false;\n    return true;\n}\nint main(){\n\tauto result = monotonic(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{1.0, 2.0, 3.0, 4.0}", "fn": "monotonic", "para": "(vector<float> l)", "pass": true}
{"task_id": "CPP/57", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool monotonic(vector<float> l){\n    int incr,decr;\n    incr=0;decr=0;\n    for (int i=1;i<l.size();i++)\n    {\n        if (l[i]>l[i-1]) incr=1;\n        if (l[i]<l[i-1]) decr=1;\n    }\n    if (incr+decr==2) return false;\n    return true;\n}\nint main(){\n\tauto result = monotonic(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{1.0, 2.0, 3.0, 4.0}", "fn": "monotonic", "para": "(vector<float> l)", "pass": true}
{"task_id": "CPP/57", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool monotonic(vector<float> l){\n    int incr,decr;\n    incr=0;decr=0;\n    for (int i=1;i<l.size();i++)\n    {\n        if (l[i]>l[i-1]) incr=1;\n        if (l[i]<l[i-1]) decr=1;\n    }\n    if (incr+decr==2) return false;\n    return true;\n}\nint main(){\n\tauto result = monotonic(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{5.6, 3.2, 2.1}", "fn": "monotonic", "para": "(vector<float> l)", "pass": false}
{"task_id": "CPP/57", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool monotonic(vector<float> l){\n    int incr,decr;\n    incr=0;decr=0;\n    for (int i=1;i<l.size();i++)\n    {\n        if (l[i]>l[i-1]) incr=1;\n        if (l[i]<l[i-1]) decr=1;\n    }\n    if (incr+decr==2) return false;\n    return true;\n}\nint main(){\n\tauto result = monotonic(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{5.6, 3.2, 2.1}", "fn": "monotonic", "para": "(vector<float> l)", "pass": false}
{"task_id": "CPP/57", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool monotonic(vector<float> l){\n    int incr,decr;\n    incr=0;decr=0;\n    for (int i=1;i<l.size();i++)\n    {\n        if (l[i]>l[i-1]) incr=1;\n        if (l[i]<l[i-1]) decr=1;\n    }\n    if (incr+decr==2) return false;\n    return true;\n}\nint main(){\n\tauto result = monotonic(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{5.6, 3.2, 2.1}", "fn": "monotonic", "para": "(vector<float> l)", "pass": false}
{"task_id": "CPP/57", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool monotonic(vector<float> l){\n    int incr,decr;\n    incr=0;decr=0;\n    for (int i=1;i<l.size();i++)\n    {\n        if (l[i]>l[i-1]) incr=1;\n        if (l[i]<l[i-1]) decr=1;\n    }\n    if (incr+decr==2) return false;\n    return true;\n}\nint main(){\n\tauto result = monotonic(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{5.6, 3.2, 2.1}", "fn": "monotonic", "para": "(vector<float> l)", "pass": false}
{"task_id": "CPP/57", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool monotonic(vector<float> l){\n    int incr,decr;\n    incr=0;decr=0;\n    for (int i=1;i<l.size();i++)\n    {\n        if (l[i]>l[i-1]) incr=1;\n        if (l[i]<l[i-1]) decr=1;\n    }\n    if (incr+decr==2) return false;\n    return true;\n}\nint main(){\n\tauto result = monotonic(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{5.6, 3.2, 2.1}", "fn": "monotonic", "para": "(vector<float> l)", "pass": false}
{"task_id": "CPP/58", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> common(vector<int> l1,vector<int> l2){\n    vector<int> out={};\n    for (int i=0;i<l1.size();i++)\n        if (find(out.begin(),out.end(),l1[i])==out.end())\n            if (find(l2.begin(),l2.end(),l1[i])!=l2.end())\n                out.push_back(l1[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = common(<FILL_ME>);\n\tassert(issame(result,{1,5,653}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{1, 2, 3, 4, 5, 653}, vector<int>{5, 1, 653}", "fn": "common", "para": "(vector<int> l1,vector<int> l2)", "pass": true}
{"task_id": "CPP/58", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> common(vector<int> l1,vector<int> l2){\n    vector<int> out={};\n    for (int i=0;i<l1.size();i++)\n        if (find(out.begin(),out.end(),l1[i])==out.end())\n            if (find(l2.begin(),l2.end(),l1[i])!=l2.end())\n                out.push_back(l1[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = common(<FILL_ME>);\n\tassert(issame(result,{1,5,653}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{1, 2, 3, 4, 5, 653}, vector<int>{5, 1, 653}", "fn": "common", "para": "(vector<int> l1,vector<int> l2)", "pass": true}
{"task_id": "CPP/58", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> common(vector<int> l1,vector<int> l2){\n    vector<int> out={};\n    for (int i=0;i<l1.size();i++)\n        if (find(out.begin(),out.end(),l1[i])==out.end())\n            if (find(l2.begin(),l2.end(),l1[i])!=l2.end())\n                out.push_back(l1[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = common(<FILL_ME>);\n\tassert(issame(result,{1,5,653}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, 2, 3, 4, 5, 653}, {5, 1, 653}", "fn": "common", "para": "(vector<int> l1,vector<int> l2)", "pass": true}
{"task_id": "CPP/58", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> common(vector<int> l1,vector<int> l2){\n    vector<int> out={};\n    for (int i=0;i<l1.size();i++)\n        if (find(out.begin(),out.end(),l1[i])==out.end())\n            if (find(l2.begin(),l2.end(),l1[i])!=l2.end())\n                out.push_back(l1[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = common(<FILL_ME>);\n\tassert(issame(result,{1,5,653}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, 2, 3, 4, 5, 653}, {5, 1, 653}", "fn": "common", "para": "(vector<int> l1,vector<int> l2)", "pass": true}
{"task_id": "CPP/58", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> common(vector<int> l1,vector<int> l2){\n    vector<int> out={};\n    for (int i=0;i<l1.size();i++)\n        if (find(out.begin(),out.end(),l1[i])==out.end())\n            if (find(l2.begin(),l2.end(),l1[i])!=l2.end())\n                out.push_back(l1[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = common(<FILL_ME>);\n\tassert(issame(result,{1,5,653}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, 2, 3, 4, 5, 653}, {5, 1, 653}", "fn": "common", "para": "(vector<int> l1,vector<int> l2)", "pass": true}
{"task_id": "CPP/58", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> common(vector<int> l1,vector<int> l2){\n    vector<int> out={};\n    for (int i=0;i<l1.size();i++)\n        if (find(out.begin(),out.end(),l1[i])==out.end())\n            if (find(l2.begin(),l2.end(),l1[i])!=l2.end())\n                out.push_back(l1[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = common(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, 2, 3}, {4, 5, 6}", "fn": "common", "para": "(vector<int> l1,vector<int> l2)", "pass": true}
{"task_id": "CPP/58", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> common(vector<int> l1,vector<int> l2){\n    vector<int> out={};\n    for (int i=0;i<l1.size();i++)\n        if (find(out.begin(),out.end(),l1[i])==out.end())\n            if (find(l2.begin(),l2.end(),l1[i])!=l2.end())\n                out.push_back(l1[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = common(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, 2, 3}, {4, 5, 6}", "fn": "common", "para": "(vector<int> l1,vector<int> l2)", "pass": true}
{"task_id": "CPP/58", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> common(vector<int> l1,vector<int> l2){\n    vector<int> out={};\n    for (int i=0;i<l1.size();i++)\n        if (find(out.begin(),out.end(),l1[i])==out.end())\n            if (find(l2.begin(),l2.end(),l1[i])!=l2.end())\n                out.push_back(l1[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = common(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, 2, 3}, {4, 5, 6}", "fn": "common", "para": "(vector<int> l1,vector<int> l2)", "pass": true}
{"task_id": "CPP/58", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> common(vector<int> l1,vector<int> l2){\n    vector<int> out={};\n    for (int i=0;i<l1.size();i++)\n        if (find(out.begin(),out.end(),l1[i])==out.end())\n            if (find(l2.begin(),l2.end(),l1[i])!=l2.end())\n                out.push_back(l1[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = common(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, 2, 3}, {4, 5, 6}", "fn": "common", "para": "(vector<int> l1,vector<int> l2)", "pass": true}
{"task_id": "CPP/58", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> common(vector<int> l1,vector<int> l2){\n    vector<int> out={};\n    for (int i=0;i<l1.size();i++)\n        if (find(out.begin(),out.end(),l1[i])==out.end())\n            if (find(l2.begin(),l2.end(),l1[i])!=l2.end())\n                out.push_back(l1[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = common(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, 2, 3}, {4, 5, 6}", "fn": "common", "para": "(vector<int> l1,vector<int> l2)", "pass": true}
{"task_id": "CPP/58", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> common(vector<int> l1,vector<int> l2){\n    vector<int> out={};\n    for (int i=0;i<l1.size();i++)\n        if (find(out.begin(),out.end(),l1[i])==out.end())\n            if (find(l2.begin(),l2.end(),l1[i])!=l2.end())\n                out.push_back(l1[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = common(<FILL_ME>);\n\tassert(issame(result,{2,3,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1,2,3,4,5},{2,3,4,6}", "fn": "common", "para": "(vector<int> l1,vector<int> l2)", "pass": true}
{"task_id": "CPP/58", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> common(vector<int> l1,vector<int> l2){\n    vector<int> out={};\n    for (int i=0;i<l1.size();i++)\n        if (find(out.begin(),out.end(),l1[i])==out.end())\n            if (find(l2.begin(),l2.end(),l1[i])!=l2.end())\n                out.push_back(l1[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = common(<FILL_ME>);\n\tassert(issame(result,{2,3,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1,2,3,4,5},{2,3,4,6}", "fn": "common", "para": "(vector<int> l1,vector<int> l2)", "pass": true}
{"task_id": "CPP/58", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> common(vector<int> l1,vector<int> l2){\n    vector<int> out={};\n    for (int i=0;i<l1.size();i++)\n        if (find(out.begin(),out.end(),l1[i])==out.end())\n            if (find(l2.begin(),l2.end(),l1[i])!=l2.end())\n                out.push_back(l1[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = common(<FILL_ME>);\n\tassert(issame(result,{2,3,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1,2,3,4,5},{2,3,4,6}", "fn": "common", "para": "(vector<int> l1,vector<int> l2)", "pass": true}
{"task_id": "CPP/58", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> common(vector<int> l1,vector<int> l2){\n    vector<int> out={};\n    for (int i=0;i<l1.size();i++)\n        if (find(out.begin(),out.end(),l1[i])==out.end())\n            if (find(l2.begin(),l2.end(),l1[i])!=l2.end())\n                out.push_back(l1[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = common(<FILL_ME>);\n\tassert(issame(result,{2,3,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1,2,3,4,5}, {2,3,4,6}", "fn": "common", "para": "(vector<int> l1,vector<int> l2)", "pass": true}
{"task_id": "CPP/58", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> common(vector<int> l1,vector<int> l2){\n    vector<int> out={};\n    for (int i=0;i<l1.size();i++)\n        if (find(out.begin(),out.end(),l1[i])==out.end())\n            if (find(l2.begin(),l2.end(),l1[i])!=l2.end())\n                out.push_back(l1[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = common(<FILL_ME>);\n\tassert(issame(result,{2,3,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1,2,3,4,5},{2,3,4,6}", "fn": "common", "para": "(vector<int> l1,vector<int> l2)", "pass": true}
{"task_id": "CPP/58", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> common(vector<int> l1,vector<int> l2){\n    vector<int> out={};\n    for (int i=0;i<l1.size();i++)\n        if (find(out.begin(),out.end(),l1[i])==out.end())\n            if (find(l2.begin(),l2.end(),l1[i])!=l2.end())\n                out.push_back(l1[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = common(<FILL_ME>);\n\tassert(issame(result,{2,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1,2,3,4,5},{2,3,6}", "fn": "common", "para": "(vector<int> l1,vector<int> l2)", "pass": true}
{"task_id": "CPP/58", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> common(vector<int> l1,vector<int> l2){\n    vector<int> out={};\n    for (int i=0;i<l1.size();i++)\n        if (find(out.begin(),out.end(),l1[i])==out.end())\n            if (find(l2.begin(),l2.end(),l1[i])!=l2.end())\n                out.push_back(l1[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = common(<FILL_ME>);\n\tassert(issame(result,{2,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1,2,3,4,5},{2,3,6}", "fn": "common", "para": "(vector<int> l1,vector<int> l2)", "pass": true}
{"task_id": "CPP/58", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> common(vector<int> l1,vector<int> l2){\n    vector<int> out={};\n    for (int i=0;i<l1.size();i++)\n        if (find(out.begin(),out.end(),l1[i])==out.end())\n            if (find(l2.begin(),l2.end(),l1[i])!=l2.end())\n                out.push_back(l1[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = common(<FILL_ME>);\n\tassert(issame(result,{2,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1,2,3,4,5},{2,3,6}", "fn": "common", "para": "(vector<int> l1,vector<int> l2)", "pass": true}
{"task_id": "CPP/58", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> common(vector<int> l1,vector<int> l2){\n    vector<int> out={};\n    for (int i=0;i<l1.size();i++)\n        if (find(out.begin(),out.end(),l1[i])==out.end())\n            if (find(l2.begin(),l2.end(),l1[i])!=l2.end())\n                out.push_back(l1[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = common(<FILL_ME>);\n\tassert(issame(result,{2,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1,2,3,4,5},{2,3,6}", "fn": "common", "para": "(vector<int> l1,vector<int> l2)", "pass": true}
{"task_id": "CPP/58", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> common(vector<int> l1,vector<int> l2){\n    vector<int> out={};\n    for (int i=0;i<l1.size();i++)\n        if (find(out.begin(),out.end(),l1[i])==out.end())\n            if (find(l2.begin(),l2.end(),l1[i])!=l2.end())\n                out.push_back(l1[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = common(<FILL_ME>);\n\tassert(issame(result,{2,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1,2,3,4,5},{2,3,6}", "fn": "common", "para": "(vector<int> l1,vector<int> l2)", "pass": true}
{"task_id": "CPP/59", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_prime_factor(int n){\n    for (int i=2;i*i<=n;i++)\n    while (n%i==0 and n>i)  n=n/i;\n    return n;\n}\nint main(){\n\tauto result = largest_prime_factor(<FILL_ME>);\n\tassert(result==29);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "29", "fn": "largest_prime_factor", "para": "(int n)", "pass": true}
{"task_id": "CPP/59", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_prime_factor(int n){\n    for (int i=2;i*i<=n;i++)\n    while (n%i==0 and n>i)  n=n/i;\n    return n;\n}\nint main(){\n\tauto result = largest_prime_factor(<FILL_ME>);\n\tassert(result==29);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "29", "fn": "largest_prime_factor", "para": "(int n)", "pass": true}
{"task_id": "CPP/59", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_prime_factor(int n){\n    for (int i=2;i*i<=n;i++)\n    while (n%i==0 and n>i)  n=n/i;\n    return n;\n}\nint main(){\n\tauto result = largest_prime_factor(<FILL_ME>);\n\tassert(result==29);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "29", "fn": "largest_prime_factor", "para": "(int n)", "pass": true}
{"task_id": "CPP/59", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_prime_factor(int n){\n    for (int i=2;i*i<=n;i++)\n    while (n%i==0 and n>i)  n=n/i;\n    return n;\n}\nint main(){\n\tauto result = largest_prime_factor(<FILL_ME>);\n\tassert(result==29);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "29", "fn": "largest_prime_factor", "para": "(int n)", "pass": true}
{"task_id": "CPP/59", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_prime_factor(int n){\n    for (int i=2;i*i<=n;i++)\n    while (n%i==0 and n>i)  n=n/i;\n    return n;\n}\nint main(){\n\tauto result = largest_prime_factor(<FILL_ME>);\n\tassert(result==29);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "29", "fn": "largest_prime_factor", "para": "(int n)", "pass": true}
{"task_id": "CPP/59", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_prime_factor(int n){\n    for (int i=2;i*i<=n;i++)\n    while (n%i==0 and n>i)  n=n/i;\n    return n;\n}\nint main(){\n\tauto result = largest_prime_factor(<FILL_ME>);\n\tassert(result==7);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "21", "fn": "largest_prime_factor", "para": "(int n)", "pass": true}
{"task_id": "CPP/59", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_prime_factor(int n){\n    for (int i=2;i*i<=n;i++)\n    while (n%i==0 and n>i)  n=n/i;\n    return n;\n}\nint main(){\n\tauto result = largest_prime_factor(<FILL_ME>);\n\tassert(result==7);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "21", "fn": "largest_prime_factor", "para": "(int n)", "pass": true}
{"task_id": "CPP/59", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_prime_factor(int n){\n    for (int i=2;i*i<=n;i++)\n    while (n%i==0 and n>i)  n=n/i;\n    return n;\n}\nint main(){\n\tauto result = largest_prime_factor(<FILL_ME>);\n\tassert(result==7);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "21", "fn": "largest_prime_factor", "para": "(int n)", "pass": true}
{"task_id": "CPP/59", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_prime_factor(int n){\n    for (int i=2;i*i<=n;i++)\n    while (n%i==0 and n>i)  n=n/i;\n    return n;\n}\nint main(){\n\tauto result = largest_prime_factor(<FILL_ME>);\n\tassert(result==7);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "21", "fn": "largest_prime_factor", "para": "(int n)", "pass": true}
{"task_id": "CPP/59", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_prime_factor(int n){\n    for (int i=2;i*i<=n;i++)\n    while (n%i==0 and n>i)  n=n/i;\n    return n;\n}\nint main(){\n\tauto result = largest_prime_factor(<FILL_ME>);\n\tassert(result==7);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "21", "fn": "largest_prime_factor", "para": "(int n)", "pass": true}
{"task_id": "CPP/59", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_prime_factor(int n){\n    for (int i=2;i*i<=n;i++)\n    while (n%i==0 and n>i)  n=n/i;\n    return n;\n}\nint main(){\n\tauto result = largest_prime_factor(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10", "fn": "largest_prime_factor", "para": "(int n)", "pass": true}
{"task_id": "CPP/59", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_prime_factor(int n){\n    for (int i=2;i*i<=n;i++)\n    while (n%i==0 and n>i)  n=n/i;\n    return n;\n}\nint main(){\n\tauto result = largest_prime_factor(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10", "fn": "largest_prime_factor", "para": "(int n)", "pass": true}
{"task_id": "CPP/59", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_prime_factor(int n){\n    for (int i=2;i*i<=n;i++)\n    while (n%i==0 and n>i)  n=n/i;\n    return n;\n}\nint main(){\n\tauto result = largest_prime_factor(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10", "fn": "largest_prime_factor", "para": "(int n)", "pass": true}
{"task_id": "CPP/59", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_prime_factor(int n){\n    for (int i=2;i*i<=n;i++)\n    while (n%i==0 and n>i)  n=n/i;\n    return n;\n}\nint main(){\n\tauto result = largest_prime_factor(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10", "fn": "largest_prime_factor", "para": "(int n)", "pass": true}
{"task_id": "CPP/59", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_prime_factor(int n){\n    for (int i=2;i*i<=n;i++)\n    while (n%i==0 and n>i)  n=n/i;\n    return n;\n}\nint main(){\n\tauto result = largest_prime_factor(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10", "fn": "largest_prime_factor", "para": "(int n)", "pass": true}
{"task_id": "CPP/59", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_prime_factor(int n){\n    for (int i=2;i*i<=n;i++)\n    while (n%i==0 and n>i)  n=n/i;\n    return n;\n}\nint main(){\n\tauto result = largest_prime_factor(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "6", "fn": "largest_prime_factor", "para": "(int n)", "pass": true}
{"task_id": "CPP/59", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_prime_factor(int n){\n    for (int i=2;i*i<=n;i++)\n    while (n%i==0 and n>i)  n=n/i;\n    return n;\n}\nint main(){\n\tauto result = largest_prime_factor(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "6", "fn": "largest_prime_factor", "para": "(int n)", "pass": true}
{"task_id": "CPP/59", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_prime_factor(int n){\n    for (int i=2;i*i<=n;i++)\n    while (n%i==0 and n>i)  n=n/i;\n    return n;\n}\nint main(){\n\tauto result = largest_prime_factor(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "6", "fn": "largest_prime_factor", "para": "(int n)", "pass": true}
{"task_id": "CPP/59", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_prime_factor(int n){\n    for (int i=2;i*i<=n;i++)\n    while (n%i==0 and n>i)  n=n/i;\n    return n;\n}\nint main(){\n\tauto result = largest_prime_factor(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "6", "fn": "largest_prime_factor", "para": "(int n)", "pass": true}
{"task_id": "CPP/59", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_prime_factor(int n){\n    for (int i=2;i*i<=n;i++)\n    while (n%i==0 and n>i)  n=n/i;\n    return n;\n}\nint main(){\n\tauto result = largest_prime_factor(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "6", "fn": "largest_prime_factor", "para": "(int n)", "pass": true}
{"task_id": "CPP/59", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_prime_factor(int n){\n    for (int i=2;i*i<=n;i++)\n    while (n%i==0 and n>i)  n=n/i;\n    return n;\n}\nint main(){\n\tauto result = largest_prime_factor(<FILL_ME>);\n\tassert(result==11);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "121", "fn": "largest_prime_factor", "para": "(int n)", "pass": true}
{"task_id": "CPP/59", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_prime_factor(int n){\n    for (int i=2;i*i<=n;i++)\n    while (n%i==0 and n>i)  n=n/i;\n    return n;\n}\nint main(){\n\tauto result = largest_prime_factor(<FILL_ME>);\n\tassert(result==11);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "121", "fn": "largest_prime_factor", "para": "(int n)", "pass": true}
{"task_id": "CPP/59", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_prime_factor(int n){\n    for (int i=2;i*i<=n;i++)\n    while (n%i==0 and n>i)  n=n/i;\n    return n;\n}\nint main(){\n\tauto result = largest_prime_factor(<FILL_ME>);\n\tassert(result==11);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "121", "fn": "largest_prime_factor", "para": "(int n)", "pass": true}
{"task_id": "CPP/59", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_prime_factor(int n){\n    for (int i=2;i*i<=n;i++)\n    while (n%i==0 and n>i)  n=n/i;\n    return n;\n}\nint main(){\n\tauto result = largest_prime_factor(<FILL_ME>);\n\tassert(result==11);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "121", "fn": "largest_prime_factor", "para": "(int n)", "pass": true}
{"task_id": "CPP/59", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_prime_factor(int n){\n    for (int i=2;i*i<=n;i++)\n    while (n%i==0 and n>i)  n=n/i;\n    return n;\n}\nint main(){\n\tauto result = largest_prime_factor(<FILL_ME>);\n\tassert(result==11);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "121", "fn": "largest_prime_factor", "para": "(int n)", "pass": true}
{"task_id": "CPP/60", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint sum_to_n(int n){\n    return n*(n+1)/2;\n}\nint main(){\n\tauto result = sum_to_n(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1", "fn": "sum_to_n", "para": "(int n)", "pass": true}
{"task_id": "CPP/60", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint sum_to_n(int n){\n    return n*(n+1)/2;\n}\nint main(){\n\tauto result = sum_to_n(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1", "fn": "sum_to_n", "para": "(int n)", "pass": true}
{"task_id": "CPP/60", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint sum_to_n(int n){\n    return n*(n+1)/2;\n}\nint main(){\n\tauto result = sum_to_n(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1", "fn": "sum_to_n", "para": "(int n)", "pass": true}
{"task_id": "CPP/60", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint sum_to_n(int n){\n    return n*(n+1)/2;\n}\nint main(){\n\tauto result = sum_to_n(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1", "fn": "sum_to_n", "para": "(int n)", "pass": true}
{"task_id": "CPP/60", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint sum_to_n(int n){\n    return n*(n+1)/2;\n}\nint main(){\n\tauto result = sum_to_n(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1", "fn": "sum_to_n", "para": "(int n)", "pass": true}
{"task_id": "CPP/60", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint sum_to_n(int n){\n    return n*(n+1)/2;\n}\nint main(){\n\tauto result = sum_to_n(<FILL_ME>);\n\tassert(result==21);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "6", "fn": "sum_to_n", "para": "(int n)", "pass": true}
{"task_id": "CPP/60", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint sum_to_n(int n){\n    return n*(n+1)/2;\n}\nint main(){\n\tauto result = sum_to_n(<FILL_ME>);\n\tassert(result==21);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "6", "fn": "sum_to_n", "para": "(int n)", "pass": true}
{"task_id": "CPP/60", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint sum_to_n(int n){\n    return n*(n+1)/2;\n}\nint main(){\n\tauto result = sum_to_n(<FILL_ME>);\n\tassert(result==21);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "6", "fn": "sum_to_n", "para": "(int n)", "pass": true}
{"task_id": "CPP/60", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint sum_to_n(int n){\n    return n*(n+1)/2;\n}\nint main(){\n\tauto result = sum_to_n(<FILL_ME>);\n\tassert(result==21);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "6", "fn": "sum_to_n", "para": "(int n)", "pass": true}
{"task_id": "CPP/60", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint sum_to_n(int n){\n    return n*(n+1)/2;\n}\nint main(){\n\tauto result = sum_to_n(<FILL_ME>);\n\tassert(result==21);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "6", "fn": "sum_to_n", "para": "(int n)", "pass": true}
{"task_id": "CPP/60", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint sum_to_n(int n){\n    return n*(n+1)/2;\n}\nint main(){\n\tauto result = sum_to_n(<FILL_ME>);\n\tassert(result==465);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "30", "fn": "sum_to_n", "para": "(int n)", "pass": true}
{"task_id": "CPP/60", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint sum_to_n(int n){\n    return n*(n+1)/2;\n}\nint main(){\n\tauto result = sum_to_n(<FILL_ME>);\n\tassert(result==465);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "30", "fn": "sum_to_n", "para": "(int n)", "pass": true}
{"task_id": "CPP/60", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint sum_to_n(int n){\n    return n*(n+1)/2;\n}\nint main(){\n\tauto result = sum_to_n(<FILL_ME>);\n\tassert(result==465);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "30", "fn": "sum_to_n", "para": "(int n)", "pass": true}
{"task_id": "CPP/60", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint sum_to_n(int n){\n    return n*(n+1)/2;\n}\nint main(){\n\tauto result = sum_to_n(<FILL_ME>);\n\tassert(result==465);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "30", "fn": "sum_to_n", "para": "(int n)", "pass": true}
{"task_id": "CPP/60", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint sum_to_n(int n){\n    return n*(n+1)/2;\n}\nint main(){\n\tauto result = sum_to_n(<FILL_ME>);\n\tassert(result==465);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "30", "fn": "sum_to_n", "para": "(int n)", "pass": true}
{"task_id": "CPP/60", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint sum_to_n(int n){\n    return n*(n+1)/2;\n}\nint main(){\n\tauto result = sum_to_n(<FILL_ME>);\n\tassert(result==66);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "11", "fn": "sum_to_n", "para": "(int n)", "pass": true}
{"task_id": "CPP/60", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint sum_to_n(int n){\n    return n*(n+1)/2;\n}\nint main(){\n\tauto result = sum_to_n(<FILL_ME>);\n\tassert(result==66);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "11", "fn": "sum_to_n", "para": "(int n)", "pass": true}
{"task_id": "CPP/60", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint sum_to_n(int n){\n    return n*(n+1)/2;\n}\nint main(){\n\tauto result = sum_to_n(<FILL_ME>);\n\tassert(result==66);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "11", "fn": "sum_to_n", "para": "(int n)", "pass": true}
{"task_id": "CPP/60", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint sum_to_n(int n){\n    return n*(n+1)/2;\n}\nint main(){\n\tauto result = sum_to_n(<FILL_ME>);\n\tassert(result==66);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "11", "fn": "sum_to_n", "para": "(int n)", "pass": true}
{"task_id": "CPP/60", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint sum_to_n(int n){\n    return n*(n+1)/2;\n}\nint main(){\n\tauto result = sum_to_n(<FILL_ME>);\n\tassert(result==66);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "11", "fn": "sum_to_n", "para": "(int n)", "pass": true}
{"task_id": "CPP/60", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint sum_to_n(int n){\n    return n*(n+1)/2;\n}\nint main(){\n\tauto result = sum_to_n(<FILL_ME>);\n\tassert(result==5050);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "100", "fn": "sum_to_n", "para": "(int n)", "pass": true}
{"task_id": "CPP/60", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint sum_to_n(int n){\n    return n*(n+1)/2;\n}\nint main(){\n\tauto result = sum_to_n(<FILL_ME>);\n\tassert(result==5050);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "100", "fn": "sum_to_n", "para": "(int n)", "pass": true}
{"task_id": "CPP/60", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint sum_to_n(int n){\n    return n*(n+1)/2;\n}\nint main(){\n\tauto result = sum_to_n(<FILL_ME>);\n\tassert(result==5050);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "100", "fn": "sum_to_n", "para": "(int n)", "pass": true}
{"task_id": "CPP/60", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint sum_to_n(int n){\n    return n*(n+1)/2;\n}\nint main(){\n\tauto result = sum_to_n(<FILL_ME>);\n\tassert(result==5050);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "100", "fn": "sum_to_n", "para": "(int n)", "pass": true}
{"task_id": "CPP/60", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint sum_to_n(int n){\n    return n*(n+1)/2;\n}\nint main(){\n\tauto result = sum_to_n(<FILL_ME>);\n\tassert(result==5050);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "100", "fn": "sum_to_n", "para": "(int n)", "pass": true}
{"task_id": "CPP/61", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='(') level+=1;\n        if (brackets[i]==')') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\nint main(){\n\tauto result = correct_bracketing(<FILL_ME>);\n\tassert(not(result));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"(((())\"", "fn": "correct_bracketing", "para": "(string brackets)", "pass": true}
{"task_id": "CPP/61", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='(') level+=1;\n        if (brackets[i]==')') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\nint main(){\n\tauto result = correct_bracketing(<FILL_ME>);\n\tassert(not(result));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"(((())\"", "fn": "correct_bracketing", "para": "(string brackets)", "pass": true}
{"task_id": "CPP/61", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='(') level+=1;\n        if (brackets[i]==')') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\nint main(){\n\tauto result = correct_bracketing(<FILL_ME>);\n\tassert(not(result));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"(((())\"", "fn": "correct_bracketing", "para": "(string brackets)", "pass": true}
{"task_id": "CPP/61", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='(') level+=1;\n        if (brackets[i]==')') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\nint main(){\n\tauto result = correct_bracketing(<FILL_ME>);\n\tassert(not(result));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"(((())\"", "fn": "correct_bracketing", "para": "(string brackets)", "pass": true}
{"task_id": "CPP/61", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='(') level+=1;\n        if (brackets[i]==')') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\nint main(){\n\tauto result = correct_bracketing(<FILL_ME>);\n\tassert(not(result));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"(((())\"", "fn": "correct_bracketing", "para": "(string brackets)", "pass": true}
{"task_id": "CPP/61", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='(') level+=1;\n        if (brackets[i]==')') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\nint main(){\n\tauto result = correct_bracketing(<FILL_ME>);\n\tassert(result);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"((()))\"", "fn": "correct_bracketing", "para": "(string brackets)", "pass": true}
{"task_id": "CPP/61", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='(') level+=1;\n        if (brackets[i]==')') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\nint main(){\n\tauto result = correct_bracketing(<FILL_ME>);\n\tassert(result);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"((()))\"", "fn": "correct_bracketing", "para": "(string brackets)", "pass": true}
{"task_id": "CPP/61", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='(') level+=1;\n        if (brackets[i]==')') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\nint main(){\n\tauto result = correct_bracketing(<FILL_ME>);\n\tassert(result);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"((()))\"", "fn": "correct_bracketing", "para": "(string brackets)", "pass": true}
{"task_id": "CPP/61", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='(') level+=1;\n        if (brackets[i]==')') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\nint main(){\n\tauto result = correct_bracketing(<FILL_ME>);\n\tassert(result);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"((()))\"", "fn": "correct_bracketing", "para": "(string brackets)", "pass": true}
{"task_id": "CPP/61", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='(') level+=1;\n        if (brackets[i]==')') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\nint main(){\n\tauto result = correct_bracketing(<FILL_ME>);\n\tassert(result);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"((()))\"", "fn": "correct_bracketing", "para": "(string brackets)", "pass": true}
{"task_id": "CPP/62", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> derivative(vector<float> xs){\n    vector<float> out={};\n    for (int i=1;i<xs.size();i++)\n        out.push_back(i*xs[i]);\n    return out;\n}\nint main(){\n\tauto result = derivative(<FILL_ME>);\n\tassert(issame(result,{2,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, 2}", "fn": "derivative", "para": "(vector<float> xs)", "pass": false}
{"task_id": "CPP/62", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> derivative(vector<float> xs){\n    vector<float> out={};\n    for (int i=1;i<xs.size();i++)\n        out.push_back(i*xs[i]);\n    return out;\n}\nint main(){\n\tauto result = derivative(<FILL_ME>);\n\tassert(issame(result,{2,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, 2}", "fn": "derivative", "para": "(vector<float> xs)", "pass": false}
{"task_id": "CPP/62", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> derivative(vector<float> xs){\n    vector<float> out={};\n    for (int i=1;i<xs.size();i++)\n        out.push_back(i*xs[i]);\n    return out;\n}\nint main(){\n\tauto result = derivative(<FILL_ME>);\n\tassert(issame(result,{2,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, 2}", "fn": "derivative", "para": "(vector<float> xs)", "pass": false}
{"task_id": "CPP/62", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> derivative(vector<float> xs){\n    vector<float> out={};\n    for (int i=1;i<xs.size();i++)\n        out.push_back(i*xs[i]);\n    return out;\n}\nint main(){\n\tauto result = derivative(<FILL_ME>);\n\tassert(issame(result,{2,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<float>{1, 2}", "fn": "derivative", "para": "(vector<float> xs)", "pass": false}
{"task_id": "CPP/62", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> derivative(vector<float> xs){\n    vector<float> out={};\n    for (int i=1;i<xs.size();i++)\n        out.push_back(i*xs[i]);\n    return out;\n}\nint main(){\n\tauto result = derivative(<FILL_ME>);\n\tassert(issame(result,{2,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, 2}", "fn": "derivative", "para": "(vector<float> xs)", "pass": false}
{"task_id": "CPP/62", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> derivative(vector<float> xs){\n    vector<float> out={};\n    for (int i=1;i<xs.size();i++)\n        out.push_back(i*xs[i]);\n    return out;\n}\nint main(){\n\tauto result = derivative(<FILL_ME>);\n\tassert(issame(result,{2,6}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, 2, 3}", "fn": "derivative", "para": "(vector<float> xs)", "pass": true}
{"task_id": "CPP/62", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> derivative(vector<float> xs){\n    vector<float> out={};\n    for (int i=1;i<xs.size();i++)\n        out.push_back(i*xs[i]);\n    return out;\n}\nint main(){\n\tauto result = derivative(<FILL_ME>);\n\tassert(issame(result,{2,6}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{1,2,3}", "fn": "derivative", "para": "(vector<float> xs)", "pass": true}
{"task_id": "CPP/62", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> derivative(vector<float> xs){\n    vector<float> out={};\n    for (int i=1;i<xs.size();i++)\n        out.push_back(i*xs[i]);\n    return out;\n}\nint main(){\n\tauto result = derivative(<FILL_ME>);\n\tassert(issame(result,{2,6}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, 2, 3}", "fn": "derivative", "para": "(vector<float> xs)", "pass": true}
{"task_id": "CPP/62", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> derivative(vector<float> xs){\n    vector<float> out={};\n    for (int i=1;i<xs.size();i++)\n        out.push_back(i*xs[i]);\n    return out;\n}\nint main(){\n\tauto result = derivative(<FILL_ME>);\n\tassert(issame(result,{2,6}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, 2, 3}", "fn": "derivative", "para": "(vector<float> xs)", "pass": true}
{"task_id": "CPP/62", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> derivative(vector<float> xs){\n    vector<float> out={};\n    for (int i=1;i<xs.size();i++)\n        out.push_back(i*xs[i]);\n    return out;\n}\nint main(){\n\tauto result = derivative(<FILL_ME>);\n\tassert(issame(result,{2,6}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{1,2,3}", "fn": "derivative", "para": "(vector<float> xs)", "pass": true}
{"task_id": "CPP/62", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> derivative(vector<float> xs){\n    vector<float> out={};\n    for (int i=1;i<xs.size();i++)\n        out.push_back(i*xs[i]);\n    return out;\n}\nint main(){\n\tauto result = derivative(<FILL_ME>);\n\tassert(issame(result,{2,2,0,16}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<float>{1, 2, 0, 4}", "fn": "derivative", "para": "(vector<float> xs)", "pass": false}
{"task_id": "CPP/62", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> derivative(vector<float> xs){\n    vector<float> out={};\n    for (int i=1;i<xs.size();i++)\n        out.push_back(i*xs[i]);\n    return out;\n}\nint main(){\n\tauto result = derivative(<FILL_ME>);\n\tassert(issame(result,{2,2,0,16}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, 2, 0, 4}", "fn": "derivative", "para": "(vector<float> xs)", "pass": false}
{"task_id": "CPP/62", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> derivative(vector<float> xs){\n    vector<float> out={};\n    for (int i=1;i<xs.size();i++)\n        out.push_back(i*xs[i]);\n    return out;\n}\nint main(){\n\tauto result = derivative(<FILL_ME>);\n\tassert(issame(result,{2,2,0,16}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<float>{1, 2, 0, 4}", "fn": "derivative", "para": "(vector<float> xs)", "pass": false}
{"task_id": "CPP/62", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> derivative(vector<float> xs){\n    vector<float> out={};\n    for (int i=1;i<xs.size();i++)\n        out.push_back(i*xs[i]);\n    return out;\n}\nint main(){\n\tauto result = derivative(<FILL_ME>);\n\tassert(issame(result,{2,2,0,16}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<float>{1, 2, 0, 4}", "fn": "derivative", "para": "(vector<float> xs)", "pass": false}
{"task_id": "CPP/62", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> derivative(vector<float> xs){\n    vector<float> out={};\n    for (int i=1;i<xs.size();i++)\n        out.push_back(i*xs[i]);\n    return out;\n}\nint main(){\n\tauto result = derivative(<FILL_ME>);\n\tassert(issame(result,{2,2,0,16}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<float>{1, 2, 0, 4}", "fn": "derivative", "para": "(vector<float> xs)", "pass": false}
{"task_id": "CPP/62", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> derivative(vector<float> xs){\n    vector<float> out={};\n    for (int i=1;i<xs.size();i++)\n        out.push_back(i*xs[i]);\n    return out;\n}\nint main(){\n\tauto result = derivative(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<float>{}", "fn": "derivative", "para": "(vector<float> xs)", "pass": true}
{"task_id": "CPP/62", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> derivative(vector<float> xs){\n    vector<float> out={};\n    for (int i=1;i<xs.size();i++)\n        out.push_back(i*xs[i]);\n    return out;\n}\nint main(){\n\tauto result = derivative(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<float>{}", "fn": "derivative", "para": "(vector<float> xs)", "pass": true}
{"task_id": "CPP/62", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> derivative(vector<float> xs){\n    vector<float> out={};\n    for (int i=1;i<xs.size();i++)\n        out.push_back(i*xs[i]);\n    return out;\n}\nint main(){\n\tauto result = derivative(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<float>{2.0, 3.0, 4.0, 5.0}", "fn": "derivative", "para": "(vector<float> xs)", "pass": false}
{"task_id": "CPP/62", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> derivative(vector<float> xs){\n    vector<float> out={};\n    for (int i=1;i<xs.size();i++)\n        out.push_back(i*xs[i]);\n    return out;\n}\nint main(){\n\tauto result = derivative(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<float>{}", "fn": "derivative", "para": "(vector<float> xs)", "pass": true}
{"task_id": "CPP/62", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> derivative(vector<float> xs){\n    vector<float> out={};\n    for (int i=1;i<xs.size();i++)\n        out.push_back(i*xs[i]);\n    return out;\n}\nint main(){\n\tauto result = derivative(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<float>{}", "fn": "derivative", "para": "(vector<float> xs)", "pass": true}
{"task_id": "CPP/62", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> derivative(vector<float> xs){\n    vector<float> out={};\n    for (int i=1;i<xs.size();i++)\n        out.push_back(i*xs[i]);\n    return out;\n}\nint main(){\n\tauto result = derivative(<FILL_ME>);\n\tassert(issame(result,{1,4,12,20}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, 2, 3, 4}", "fn": "derivative", "para": "(vector<float> xs)", "pass": false}
{"task_id": "CPP/62", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> derivative(vector<float> xs){\n    vector<float> out={};\n    for (int i=1;i<xs.size();i++)\n        out.push_back(i*xs[i]);\n    return out;\n}\nint main(){\n\tauto result = derivative(<FILL_ME>);\n\tassert(issame(result,{1,4,12,20}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{1,2,3,4}", "fn": "derivative", "para": "(vector<float> xs)", "pass": false}
{"task_id": "CPP/62", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> derivative(vector<float> xs){\n    vector<float> out={};\n    for (int i=1;i<xs.size();i++)\n        out.push_back(i*xs[i]);\n    return out;\n}\nint main(){\n\tauto result = derivative(<FILL_ME>);\n\tassert(issame(result,{1,4,12,20}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{1,2,3,4}", "fn": "derivative", "para": "(vector<float> xs)", "pass": false}
{"task_id": "CPP/62", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> derivative(vector<float> xs){\n    vector<float> out={};\n    for (int i=1;i<xs.size();i++)\n        out.push_back(i*xs[i]);\n    return out;\n}\nint main(){\n\tauto result = derivative(<FILL_ME>);\n\tassert(issame(result,{1,4,12,20}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{1,2,3,4}", "fn": "derivative", "para": "(vector<float> xs)", "pass": false}
{"task_id": "CPP/62", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> derivative(vector<float> xs){\n    vector<float> out={};\n    for (int i=1;i<xs.size();i++)\n        out.push_back(i*xs[i]);\n    return out;\n}\nint main(){\n\tauto result = derivative(<FILL_ME>);\n\tassert(issame(result,{1,4,12,20}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, 2, 3, 4}", "fn": "derivative", "para": "(vector<float> xs)", "pass": false}
{"task_id": "CPP/63", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\nint main(){\n\tauto result = fibfib(<FILL_ME>);\n\tassert(result==24);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "8", "fn": "fibfib", "para": "(int n)", "pass": true}
{"task_id": "CPP/63", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\nint main(){\n\tauto result = fibfib(<FILL_ME>);\n\tassert(result==24);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "8", "fn": "fibfib", "para": "(int n)", "pass": true}
{"task_id": "CPP/63", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\nint main(){\n\tauto result = fibfib(<FILL_ME>);\n\tassert(result==24);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "8", "fn": "fibfib", "para": "(int n)", "pass": true}
{"task_id": "CPP/63", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\nint main(){\n\tauto result = fibfib(<FILL_ME>);\n\tassert(result==24);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "8", "fn": "fibfib", "para": "(int n)", "pass": true}
{"task_id": "CPP/63", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\nint main(){\n\tauto result = fibfib(<FILL_ME>);\n\tassert(result==24);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "8", "fn": "fibfib", "para": "(int n)", "pass": true}
{"task_id": "CPP/63", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\nint main(){\n\tauto result = fibfib(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "2", "fn": "fibfib", "para": "(int n)", "pass": true}
{"task_id": "CPP/63", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\nint main(){\n\tauto result = fibfib(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "2", "fn": "fibfib", "para": "(int n)", "pass": true}
{"task_id": "CPP/63", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\nint main(){\n\tauto result = fibfib(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "2", "fn": "fibfib", "para": "(int n)", "pass": true}
{"task_id": "CPP/63", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\nint main(){\n\tauto result = fibfib(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "2", "fn": "fibfib", "para": "(int n)", "pass": true}
{"task_id": "CPP/63", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\nint main(){\n\tauto result = fibfib(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "2", "fn": "fibfib", "para": "(int n)", "pass": true}
{"task_id": "CPP/63", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\nint main(){\n\tauto result = fibfib(<FILL_ME>);\n\tassert(result==81);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5", "fn": "fibfib", "para": "(int n)", "pass": false}
{"task_id": "CPP/63", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\nint main(){\n\tauto result = fibfib(<FILL_ME>);\n\tassert(result==81);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10", "fn": "fibfib", "para": "(int n)", "pass": true}
{"task_id": "CPP/63", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\nint main(){\n\tauto result = fibfib(<FILL_ME>);\n\tassert(result==81);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10", "fn": "fibfib", "para": "(int n)", "pass": true}
{"task_id": "CPP/63", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\nint main(){\n\tauto result = fibfib(<FILL_ME>);\n\tassert(result==81);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10", "fn": "fibfib", "para": "(int n)", "pass": true}
{"task_id": "CPP/63", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\nint main(){\n\tauto result = fibfib(<FILL_ME>);\n\tassert(result==81);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10", "fn": "fibfib", "para": "(int n)", "pass": true}
{"task_id": "CPP/63", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\nint main(){\n\tauto result = fibfib(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5", "fn": "fibfib", "para": "(int n)", "pass": true}
{"task_id": "CPP/63", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\nint main(){\n\tauto result = fibfib(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5", "fn": "fibfib", "para": "(int n)", "pass": true}
{"task_id": "CPP/63", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\nint main(){\n\tauto result = fibfib(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5", "fn": "fibfib", "para": "(int n)", "pass": true}
{"task_id": "CPP/63", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\nint main(){\n\tauto result = fibfib(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5", "fn": "fibfib", "para": "(int n)", "pass": true}
{"task_id": "CPP/63", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\nint main(){\n\tauto result = fibfib(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5", "fn": "fibfib", "para": "(int n)", "pass": true}
{"task_id": "CPP/63", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\nint main(){\n\tauto result = fibfib(<FILL_ME>);\n\tassert(result==927);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "20", "fn": "fibfib", "para": "(int n)", "pass": false}
{"task_id": "CPP/63", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\nint main(){\n\tauto result = fibfib(<FILL_ME>);\n\tassert(result==927);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "19", "fn": "fibfib", "para": "(int n)", "pass": false}
{"task_id": "CPP/63", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\nint main(){\n\tauto result = fibfib(<FILL_ME>);\n\tassert(result==927);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "20", "fn": "fibfib", "para": "(int n)", "pass": false}
{"task_id": "CPP/63", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\nint main(){\n\tauto result = fibfib(<FILL_ME>);\n\tassert(result==927);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "20", "fn": "fibfib", "para": "(int n)", "pass": false}
{"task_id": "CPP/63", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\nint main(){\n\tauto result = fibfib(<FILL_ME>);\n\tassert(result==927);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "20", "fn": "fibfib", "para": "(int n)", "pass": false}
{"task_id": "CPP/63", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\nint main(){\n\tauto result = fibfib(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1", "fn": "fibfib", "para": "(int n)", "pass": true}
{"task_id": "CPP/63", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\nint main(){\n\tauto result = fibfib(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1", "fn": "fibfib", "para": "(int n)", "pass": true}
{"task_id": "CPP/63", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\nint main(){\n\tauto result = fibfib(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1", "fn": "fibfib", "para": "(int n)", "pass": true}
{"task_id": "CPP/63", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\nint main(){\n\tauto result = fibfib(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1", "fn": "fibfib", "para": "(int n)", "pass": true}
{"task_id": "CPP/63", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\nint main(){\n\tauto result = fibfib(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1", "fn": "fibfib", "para": "(int n)", "pass": true}
{"task_id": "CPP/63", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\nint main(){\n\tauto result = fibfib(<FILL_ME>);\n\tassert(result==274);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "11", "fn": "fibfib", "para": "(int n)", "pass": false}
{"task_id": "CPP/63", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\nint main(){\n\tauto result = fibfib(<FILL_ME>);\n\tassert(result==274);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "15", "fn": "fibfib", "para": "(int n)", "pass": false}
{"task_id": "CPP/63", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\nint main(){\n\tauto result = fibfib(<FILL_ME>);\n\tassert(result==274);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "15", "fn": "fibfib", "para": "(int n)", "pass": false}
{"task_id": "CPP/63", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\nint main(){\n\tauto result = fibfib(<FILL_ME>);\n\tassert(result==274);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "15", "fn": "fibfib", "para": "(int n)", "pass": false}
{"task_id": "CPP/63", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\nint main(){\n\tauto result = fibfib(<FILL_ME>);\n\tassert(result==274);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "11", "fn": "fibfib", "para": "(int n)", "pass": false}
{"task_id": "CPP/64", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint vowels_count(string s){\n    string vowels=\"aeiouAEIOU\";\n    int count=0;\n    for (int i=0;i<s.length();i++)\n    if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())\n        count+=1;\n    if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;\n    return count;\n}\nint main(){\n\tauto result = vowels_count(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hi\"", "fn": "vowels_count", "para": "(string s)", "pass": true}
{"task_id": "CPP/64", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint vowels_count(string s){\n    string vowels=\"aeiouAEIOU\";\n    int count=0;\n    for (int i=0;i<s.length();i++)\n    if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())\n        count+=1;\n    if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;\n    return count;\n}\nint main(){\n\tauto result = vowels_count(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\"", "fn": "vowels_count", "para": "(string s)", "pass": false}
{"task_id": "CPP/64", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint vowels_count(string s){\n    string vowels=\"aeiouAEIOU\";\n    int count=0;\n    for (int i=0;i<s.length();i++)\n    if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())\n        count+=1;\n    if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;\n    return count;\n}\nint main(){\n\tauto result = vowels_count(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\"", "fn": "vowels_count", "para": "(string s)", "pass": false}
{"task_id": "CPP/64", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint vowels_count(string s){\n    string vowels=\"aeiouAEIOU\";\n    int count=0;\n    for (int i=0;i<s.length();i++)\n    if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())\n        count+=1;\n    if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;\n    return count;\n}\nint main(){\n\tauto result = vowels_count(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\"", "fn": "vowels_count", "para": "(string s)", "pass": false}
{"task_id": "CPP/64", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint vowels_count(string s){\n    string vowels=\"aeiouAEIOU\";\n    int count=0;\n    for (int i=0;i<s.length();i++)\n    if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())\n        count+=1;\n    if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;\n    return count;\n}\nint main(){\n\tauto result = vowels_count(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\"", "fn": "vowels_count", "para": "(string s)", "pass": false}
{"task_id": "CPP/64", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint vowels_count(string s){\n    string vowels=\"aeiouAEIOU\";\n    int count=0;\n    for (int i=0;i<s.length();i++)\n    if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())\n        count+=1;\n    if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;\n    return count;\n}\nint main(){\n\tauto result = vowels_count(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Hello\"", "fn": "vowels_count", "para": "(string s)", "pass": true}
{"task_id": "CPP/64", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint vowels_count(string s){\n    string vowels=\"aeiouAEIOU\";\n    int count=0;\n    for (int i=0;i<s.length();i++)\n    if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())\n        count+=1;\n    if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;\n    return count;\n}\nint main(){\n\tauto result = vowels_count(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Hello\"", "fn": "vowels_count", "para": "(string s)", "pass": true}
{"task_id": "CPP/64", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint vowels_count(string s){\n    string vowels=\"aeiouAEIOU\";\n    int count=0;\n    for (int i=0;i<s.length();i++)\n    if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())\n        count+=1;\n    if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;\n    return count;\n}\nint main(){\n\tauto result = vowels_count(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Hello\"", "fn": "vowels_count", "para": "(string s)", "pass": true}
{"task_id": "CPP/64", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint vowels_count(string s){\n    string vowels=\"aeiouAEIOU\";\n    int count=0;\n    for (int i=0;i<s.length();i++)\n    if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())\n        count+=1;\n    if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;\n    return count;\n}\nint main(){\n\tauto result = vowels_count(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Hello\"", "fn": "vowels_count", "para": "(string s)", "pass": true}
{"task_id": "CPP/64", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint vowels_count(string s){\n    string vowels=\"aeiouAEIOU\";\n    int count=0;\n    for (int i=0;i<s.length();i++)\n    if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())\n        count+=1;\n    if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;\n    return count;\n}\nint main(){\n\tauto result = vowels_count(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Hello\"", "fn": "vowels_count", "para": "(string s)", "pass": true}
{"task_id": "CPP/64", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint vowels_count(string s){\n    string vowels=\"aeiouAEIOU\";\n    int count=0;\n    for (int i=0;i<s.length();i++)\n    if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())\n        count+=1;\n    if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;\n    return count;\n}\nint main(){\n\tauto result = vowels_count(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Hello\"", "fn": "vowels_count", "para": "(string s)", "pass": false}
{"task_id": "CPP/64", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint vowels_count(string s){\n    string vowels=\"aeiouAEIOU\";\n    int count=0;\n    for (int i=0;i<s.length();i++)\n    if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())\n        count+=1;\n    if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;\n    return count;\n}\nint main(){\n\tauto result = vowels_count(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"apple\"", "fn": "vowels_count", "para": "(string s)", "pass": false}
{"task_id": "CPP/64", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint vowels_count(string s){\n    string vowels=\"aeiouAEIOU\";\n    int count=0;\n    for (int i=0;i<s.length();i++)\n    if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())\n        count+=1;\n    if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;\n    return count;\n}\nint main(){\n\tauto result = vowels_count(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Hello\"", "fn": "vowels_count", "para": "(string s)", "pass": false}
{"task_id": "CPP/64", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint vowels_count(string s){\n    string vowels=\"aeiouAEIOU\";\n    int count=0;\n    for (int i=0;i<s.length();i++)\n    if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())\n        count+=1;\n    if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;\n    return count;\n}\nint main(){\n\tauto result = vowels_count(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Hello\"", "fn": "vowels_count", "para": "(string s)", "pass": false}
{"task_id": "CPP/64", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint vowels_count(string s){\n    string vowels=\"aeiouAEIOU\";\n    int count=0;\n    for (int i=0;i<s.length();i++)\n    if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())\n        count+=1;\n    if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;\n    return count;\n}\nint main(){\n\tauto result = vowels_count(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"programming\"", "fn": "vowels_count", "para": "(string s)", "pass": true}
{"task_id": "CPP/65", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring circular_shift(int x,int shift){\n    string xs;\n    xs=to_string(x);\n    if (xs.length()<shift)\n    {\n        string s(xs.rbegin(),xs.rend());\n        return s;\n    }\n    xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);\n    return xs;\n}\nint main(){\n\tauto result = circular_shift(<FILL_ME>);\n\tassert(result==\"12\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "21, 1", "fn": "circular_shift", "para": "(int x,int shift)", "pass": true}
{"task_id": "CPP/65", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring circular_shift(int x,int shift){\n    string xs;\n    xs=to_string(x);\n    if (xs.length()<shift)\n    {\n        string s(xs.rbegin(),xs.rend());\n        return s;\n    }\n    xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);\n    return xs;\n}\nint main(){\n\tauto result = circular_shift(<FILL_ME>);\n\tassert(result==\"12\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "21, 1", "fn": "circular_shift", "para": "(int x,int shift)", "pass": true}
{"task_id": "CPP/65", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring circular_shift(int x,int shift){\n    string xs;\n    xs=to_string(x);\n    if (xs.length()<shift)\n    {\n        string s(xs.rbegin(),xs.rend());\n        return s;\n    }\n    xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);\n    return xs;\n}\nint main(){\n\tauto result = circular_shift(<FILL_ME>);\n\tassert(result==\"12\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "12, 1", "fn": "circular_shift", "para": "(int x,int shift)", "pass": false}
{"task_id": "CPP/65", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring circular_shift(int x,int shift){\n    string xs;\n    xs=to_string(x);\n    if (xs.length()<shift)\n    {\n        string s(xs.rbegin(),xs.rend());\n        return s;\n    }\n    xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);\n    return xs;\n}\nint main(){\n\tauto result = circular_shift(<FILL_ME>);\n\tassert(result==\"12\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "21, 1", "fn": "circular_shift", "para": "(int x,int shift)", "pass": true}
{"task_id": "CPP/65", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring circular_shift(int x,int shift){\n    string xs;\n    xs=to_string(x);\n    if (xs.length()<shift)\n    {\n        string s(xs.rbegin(),xs.rend());\n        return s;\n    }\n    xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);\n    return xs;\n}\nint main(){\n\tauto result = circular_shift(<FILL_ME>);\n\tassert(result==\"12\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "21, 1", "fn": "circular_shift", "para": "(int x,int shift)", "pass": true}
{"task_id": "CPP/65", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring circular_shift(int x,int shift){\n    string xs;\n    xs=to_string(x);\n    if (xs.length()<shift)\n    {\n        string s(xs.rbegin(),xs.rend());\n        return s;\n    }\n    xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);\n    return xs;\n}\nint main(){\n\tauto result = circular_shift(<FILL_ME>);\n\tassert(result==\"11\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "11, 0", "fn": "circular_shift", "para": "(int x,int shift)", "pass": true}
{"task_id": "CPP/65", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring circular_shift(int x,int shift){\n    string xs;\n    xs=to_string(x);\n    if (xs.length()<shift)\n    {\n        string s(xs.rbegin(),xs.rend());\n        return s;\n    }\n    xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);\n    return xs;\n}\nint main(){\n\tauto result = circular_shift(<FILL_ME>);\n\tassert(result==\"11\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "11, 0", "fn": "circular_shift", "para": "(int x,int shift)", "pass": true}
{"task_id": "CPP/65", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring circular_shift(int x,int shift){\n    string xs;\n    xs=to_string(x);\n    if (xs.length()<shift)\n    {\n        string s(xs.rbegin(),xs.rend());\n        return s;\n    }\n    xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);\n    return xs;\n}\nint main(){\n\tauto result = circular_shift(<FILL_ME>);\n\tassert(result==\"11\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "11, 0", "fn": "circular_shift", "para": "(int x,int shift)", "pass": true}
{"task_id": "CPP/65", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring circular_shift(int x,int shift){\n    string xs;\n    xs=to_string(x);\n    if (xs.length()<shift)\n    {\n        string s(xs.rbegin(),xs.rend());\n        return s;\n    }\n    xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);\n    return xs;\n}\nint main(){\n\tauto result = circular_shift(<FILL_ME>);\n\tassert(result==\"11\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "11, 0", "fn": "circular_shift", "para": "(int x,int shift)", "pass": true}
{"task_id": "CPP/65", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring circular_shift(int x,int shift){\n    string xs;\n    xs=to_string(x);\n    if (xs.length()<shift)\n    {\n        string s(xs.rbegin(),xs.rend());\n        return s;\n    }\n    xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);\n    return xs;\n}\nint main(){\n\tauto result = circular_shift(<FILL_ME>);\n\tassert(result==\"11\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "11, 0", "fn": "circular_shift", "para": "(int x,int shift)", "pass": true}
{"task_id": "CPP/65", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring circular_shift(int x,int shift){\n    string xs;\n    xs=to_string(x);\n    if (xs.length()<shift)\n    {\n        string s(xs.rbegin(),xs.rend());\n        return s;\n    }\n    xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);\n    return xs;\n}\nint main(){\n\tauto result = circular_shift(<FILL_ME>);\n\tassert(result==\"79\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "97, 1", "fn": "circular_shift", "para": "(int x,int shift)", "pass": true}
{"task_id": "CPP/65", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring circular_shift(int x,int shift){\n    string xs;\n    xs=to_string(x);\n    if (xs.length()<shift)\n    {\n        string s(xs.rbegin(),xs.rend());\n        return s;\n    }\n    xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);\n    return xs;\n}\nint main(){\n\tauto result = circular_shift(<FILL_ME>);\n\tassert(result==\"79\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "97, 1", "fn": "circular_shift", "para": "(int x,int shift)", "pass": true}
{"task_id": "CPP/65", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring circular_shift(int x,int shift){\n    string xs;\n    xs=to_string(x);\n    if (xs.length()<shift)\n    {\n        string s(xs.rbegin(),xs.rend());\n        return s;\n    }\n    xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);\n    return xs;\n}\nint main(){\n\tauto result = circular_shift(<FILL_ME>);\n\tassert(result==\"79\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "97, 1", "fn": "circular_shift", "para": "(int x,int shift)", "pass": true}
{"task_id": "CPP/65", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring circular_shift(int x,int shift){\n    string xs;\n    xs=to_string(x);\n    if (xs.length()<shift)\n    {\n        string s(xs.rbegin(),xs.rend());\n        return s;\n    }\n    xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);\n    return xs;\n}\nint main(){\n\tauto result = circular_shift(<FILL_ME>);\n\tassert(result==\"79\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "97, 1", "fn": "circular_shift", "para": "(int x,int shift)", "pass": true}
{"task_id": "CPP/65", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring circular_shift(int x,int shift){\n    string xs;\n    xs=to_string(x);\n    if (xs.length()<shift)\n    {\n        string s(xs.rbegin(),xs.rend());\n        return s;\n    }\n    xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);\n    return xs;\n}\nint main(){\n\tauto result = circular_shift(<FILL_ME>);\n\tassert(result==\"79\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "97, 1", "fn": "circular_shift", "para": "(int x,int shift)", "pass": true}
{"task_id": "CPP/65", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring circular_shift(int x,int shift){\n    string xs;\n    xs=to_string(x);\n    if (xs.length()<shift)\n    {\n        string s(xs.rbegin(),xs.rend());\n        return s;\n    }\n    xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);\n    return xs;\n}\nint main(){\n\tauto result = circular_shift(<FILL_ME>);\n\tassert(result==\"001\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "100, 2", "fn": "circular_shift", "para": "(int x,int shift)", "pass": true}
{"task_id": "CPP/65", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring circular_shift(int x,int shift){\n    string xs;\n    xs=to_string(x);\n    if (xs.length()<shift)\n    {\n        string s(xs.rbegin(),xs.rend());\n        return s;\n    }\n    xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);\n    return xs;\n}\nint main(){\n\tauto result = circular_shift(<FILL_ME>);\n\tassert(result==\"001\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "100, 2", "fn": "circular_shift", "para": "(int x,int shift)", "pass": true}
{"task_id": "CPP/65", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring circular_shift(int x,int shift){\n    string xs;\n    xs=to_string(x);\n    if (xs.length()<shift)\n    {\n        string s(xs.rbegin(),xs.rend());\n        return s;\n    }\n    xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);\n    return xs;\n}\nint main(){\n\tauto result = circular_shift(<FILL_ME>);\n\tassert(result==\"001\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "100, 2", "fn": "circular_shift", "para": "(int x,int shift)", "pass": true}
{"task_id": "CPP/65", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring circular_shift(int x,int shift){\n    string xs;\n    xs=to_string(x);\n    if (xs.length()<shift)\n    {\n        string s(xs.rbegin(),xs.rend());\n        return s;\n    }\n    xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);\n    return xs;\n}\nint main(){\n\tauto result = circular_shift(<FILL_ME>);\n\tassert(result==\"001\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "100, 2", "fn": "circular_shift", "para": "(int x,int shift)", "pass": true}
{"task_id": "CPP/65", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring circular_shift(int x,int shift){\n    string xs;\n    xs=to_string(x);\n    if (xs.length()<shift)\n    {\n        string s(xs.rbegin(),xs.rend());\n        return s;\n    }\n    xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);\n    return xs;\n}\nint main(){\n\tauto result = circular_shift(<FILL_ME>);\n\tassert(result==\"001\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "100, 2", "fn": "circular_shift", "para": "(int x,int shift)", "pass": true}
{"task_id": "CPP/65", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring circular_shift(int x,int shift){\n    string xs;\n    xs=to_string(x);\n    if (xs.length()<shift)\n    {\n        string s(xs.rbegin(),xs.rend());\n        return s;\n    }\n    xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);\n    return xs;\n}\nint main(){\n\tauto result = circular_shift(<FILL_ME>);\n\tassert(result==\"21\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "12, 1", "fn": "circular_shift", "para": "(int x,int shift)", "pass": true}
{"task_id": "CPP/65", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring circular_shift(int x,int shift){\n    string xs;\n    xs=to_string(x);\n    if (xs.length()<shift)\n    {\n        string s(xs.rbegin(),xs.rend());\n        return s;\n    }\n    xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);\n    return xs;\n}\nint main(){\n\tauto result = circular_shift(<FILL_ME>);\n\tassert(result==\"21\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "12, 1", "fn": "circular_shift", "para": "(int x,int shift)", "pass": true}
{"task_id": "CPP/65", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring circular_shift(int x,int shift){\n    string xs;\n    xs=to_string(x);\n    if (xs.length()<shift)\n    {\n        string s(xs.rbegin(),xs.rend());\n        return s;\n    }\n    xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);\n    return xs;\n}\nint main(){\n\tauto result = circular_shift(<FILL_ME>);\n\tassert(result==\"21\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "12, 1", "fn": "circular_shift", "para": "(int x,int shift)", "pass": true}
{"task_id": "CPP/65", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring circular_shift(int x,int shift){\n    string xs;\n    xs=to_string(x);\n    if (xs.length()<shift)\n    {\n        string s(xs.rbegin(),xs.rend());\n        return s;\n    }\n    xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);\n    return xs;\n}\nint main(){\n\tauto result = circular_shift(<FILL_ME>);\n\tassert(result==\"21\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "12, 1", "fn": "circular_shift", "para": "(int x,int shift)", "pass": true}
{"task_id": "CPP/65", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring circular_shift(int x,int shift){\n    string xs;\n    xs=to_string(x);\n    if (xs.length()<shift)\n    {\n        string s(xs.rbegin(),xs.rend());\n        return s;\n    }\n    xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);\n    return xs;\n}\nint main(){\n\tauto result = circular_shift(<FILL_ME>);\n\tassert(result==\"21\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "12, 1", "fn": "circular_shift", "para": "(int x,int shift)", "pass": true}
{"task_id": "CPP/66", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}\nint main(){\n\tauto result = digitSum(<FILL_ME>);\n\tassert(result==67);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"HELLO\"", "fn": "digitSum", "para": "(string s)", "pass": false}
{"task_id": "CPP/66", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}\nint main(){\n\tauto result = digitSum(<FILL_ME>);\n\tassert(result==67);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"A\"", "fn": "digitSum", "para": "(string s)", "pass": false}
{"task_id": "CPP/66", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}\nint main(){\n\tauto result = digitSum(<FILL_ME>);\n\tassert(result==67);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"HELLO\"", "fn": "digitSum", "para": "(string s)", "pass": false}
{"task_id": "CPP/66", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}\nint main(){\n\tauto result = digitSum(<FILL_ME>);\n\tassert(result==67);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"A\"", "fn": "digitSum", "para": "(string s)", "pass": false}
{"task_id": "CPP/66", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}\nint main(){\n\tauto result = digitSum(<FILL_ME>);\n\tassert(result==67);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"HELLO\"", "fn": "digitSum", "para": "(string s)", "pass": false}
{"task_id": "CPP/66", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}\nint main(){\n\tauto result = digitSum(<FILL_ME>);\n\tassert(result==153);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"HELLO\"", "fn": "digitSum", "para": "(string s)", "pass": false}
{"task_id": "CPP/66", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}\nint main(){\n\tauto result = digitSum(<FILL_ME>);\n\tassert(result==153);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"HELLO\"", "fn": "digitSum", "para": "(string s)", "pass": false}
{"task_id": "CPP/66", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}\nint main(){\n\tauto result = digitSum(<FILL_ME>);\n\tassert(result==153);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"HELLO\"", "fn": "digitSum", "para": "(string s)", "pass": false}
{"task_id": "CPP/66", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}\nint main(){\n\tauto result = digitSum(<FILL_ME>);\n\tassert(result==153);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"HELLO\"", "fn": "digitSum", "para": "(string s)", "pass": false}
{"task_id": "CPP/66", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}\nint main(){\n\tauto result = digitSum(<FILL_ME>);\n\tassert(result==153);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"HELLO\"", "fn": "digitSum", "para": "(string s)", "pass": false}
{"task_id": "CPP/66", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}\nint main(){\n\tauto result = digitSum(<FILL_ME>);\n\tassert(result==151);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"HELLO\"", "fn": "digitSum", "para": "(string s)", "pass": false}
{"task_id": "CPP/66", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}\nint main(){\n\tauto result = digitSum(<FILL_ME>);\n\tassert(result==151);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"HELLO\"", "fn": "digitSum", "para": "(string s)", "pass": false}
{"task_id": "CPP/66", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}\nint main(){\n\tauto result = digitSum(<FILL_ME>);\n\tassert(result==151);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"WORLD\"", "fn": "digitSum", "para": "(string s)", "pass": false}
{"task_id": "CPP/66", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}\nint main(){\n\tauto result = digitSum(<FILL_ME>);\n\tassert(result==151);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"HELLO\"", "fn": "digitSum", "para": "(string s)", "pass": false}
{"task_id": "CPP/66", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}\nint main(){\n\tauto result = digitSum(<FILL_ME>);\n\tassert(result==151);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"HELLO\"", "fn": "digitSum", "para": "(string s)", "pass": false}
{"task_id": "CPP/66", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}\nint main(){\n\tauto result = digitSum(<FILL_ME>);\n\tassert(result==131);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\"", "fn": "digitSum", "para": "(string s)", "pass": false}
{"task_id": "CPP/66", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}\nint main(){\n\tauto result = digitSum(<FILL_ME>);\n\tassert(result==131);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"HelloWorld\"", "fn": "digitSum", "para": "(string s)", "pass": false}
{"task_id": "CPP/66", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}\nint main(){\n\tauto result = digitSum(<FILL_ME>);\n\tassert(result==131);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Hello\"", "fn": "digitSum", "para": "(string s)", "pass": false}
{"task_id": "CPP/66", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}\nint main(){\n\tauto result = digitSum(<FILL_ME>);\n\tassert(result==131);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"FILL_ME\"", "fn": "digitSum", "para": "(string s)", "pass": false}
{"task_id": "CPP/66", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}\nint main(){\n\tauto result = digitSum(<FILL_ME>);\n\tassert(result==131);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\"", "fn": "digitSum", "para": "(string s)", "pass": false}
{"task_id": "CPP/66", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}\nint main(){\n\tauto result = digitSum(<FILL_ME>);\n\tassert(result==69);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"HELLO\"", "fn": "digitSum", "para": "(string s)", "pass": false}
{"task_id": "CPP/66", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}\nint main(){\n\tauto result = digitSum(<FILL_ME>);\n\tassert(result==69);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"HELLO\"", "fn": "digitSum", "para": "(string s)", "pass": false}
{"task_id": "CPP/66", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}\nint main(){\n\tauto result = digitSum(<FILL_ME>);\n\tassert(result==69);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"HELLO\"", "fn": "digitSum", "para": "(string s)", "pass": false}
{"task_id": "CPP/66", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}\nint main(){\n\tauto result = digitSum(<FILL_ME>);\n\tassert(result==69);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"HELLO\"", "fn": "digitSum", "para": "(string s)", "pass": false}
{"task_id": "CPP/66", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}\nint main(){\n\tauto result = digitSum(<FILL_ME>);\n\tassert(result==69);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"HELLO\"", "fn": "digitSum", "para": "(string s)", "pass": false}
{"task_id": "CPP/66", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}\nint main(){\n\tauto result = digitSum(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"ABC\"", "fn": "digitSum", "para": "(string s)", "pass": false}
{"task_id": "CPP/66", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}\nint main(){\n\tauto result = digitSum(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"ABC\"", "fn": "digitSum", "para": "(string s)", "pass": false}
{"task_id": "CPP/66", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}\nint main(){\n\tauto result = digitSum(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"ABC\"", "fn": "digitSum", "para": "(string s)", "pass": false}
{"task_id": "CPP/66", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}\nint main(){\n\tauto result = digitSum(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"ABC\"", "fn": "digitSum", "para": "(string s)", "pass": false}
{"task_id": "CPP/66", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}\nint main(){\n\tauto result = digitSum(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"ABC\"", "fn": "digitSum", "para": "(string s)", "pass": false}
{"task_id": "CPP/66", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}\nint main(){\n\tauto result = digitSum(<FILL_ME>);\n\tassert(result==327);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"HELLO\"", "fn": "digitSum", "para": "(string s)", "pass": false}
{"task_id": "CPP/66", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}\nint main(){\n\tauto result = digitSum(<FILL_ME>);\n\tassert(result==327);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"HELLO\"", "fn": "digitSum", "para": "(string s)", "pass": false}
{"task_id": "CPP/66", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}\nint main(){\n\tauto result = digitSum(<FILL_ME>);\n\tassert(result==327);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"HELLO\"", "fn": "digitSum", "para": "(string s)", "pass": false}
{"task_id": "CPP/66", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}\nint main(){\n\tauto result = digitSum(<FILL_ME>);\n\tassert(result==327);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"HELLO\"", "fn": "digitSum", "para": "(string s)", "pass": false}
{"task_id": "CPP/66", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}\nint main(){\n\tauto result = digitSum(<FILL_ME>);\n\tassert(result==327);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"HELLO\"", "fn": "digitSum", "para": "(string s)", "pass": false}
{"task_id": "CPP/67", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s,int n){\n    string num1=\"\",num2=\"\";\n    int is12;\n    is12=0;\n    for (int i=0;i<s.size();i++)\n        \n        if (s[i]>=48 and s[i]<=57)\n        {\n            if (is12==0) num1=num1+s[i];\n            if (is12==1) num2=num2+s[i];\n        }\n        else\n          if (is12==0 and num1.length()>0) is12=1;\n    return n-atoi(num1.c_str())-atoi(num2.c_str());\n\n}\nint main(){\n\tauto result = fruit_distribution(<FILL_ME>);\n\tassert(result==95);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"10 apples, 15 bananas, 20 oranges\", 140", "fn": "fruit_distribution", "para": "(string s,int n)", "pass": false}
{"task_id": "CPP/67", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s,int n){\n    string num1=\"\",num2=\"\";\n    int is12;\n    is12=0;\n    for (int i=0;i<s.size();i++)\n        \n        if (s[i]>=48 and s[i]<=57)\n        {\n            if (is12==0) num1=num1+s[i];\n            if (is12==1) num2=num2+s[i];\n        }\n        else\n          if (is12==0 and num1.length()>0) is12=1;\n    return n-atoi(num1.c_str())-atoi(num2.c_str());\n\n}\nint main(){\n\tauto result = fruit_distribution(<FILL_ME>);\n\tassert(result==95);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"10 apples, 15 bananas, 20 oranges\", 140", "fn": "fruit_distribution", "para": "(string s,int n)", "pass": false}
{"task_id": "CPP/67", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s,int n){\n    string num1=\"\",num2=\"\";\n    int is12;\n    is12=0;\n    for (int i=0;i<s.size();i++)\n        \n        if (s[i]>=48 and s[i]<=57)\n        {\n            if (is12==0) num1=num1+s[i];\n            if (is12==1) num2=num2+s[i];\n        }\n        else\n          if (is12==0 and num1.length()>0) is12=1;\n    return n-atoi(num1.c_str())-atoi(num2.c_str());\n\n}\nint main(){\n\tauto result = fruit_distribution(<FILL_ME>);\n\tassert(result==95);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"10 apples, 15 bananas, 20 oranges\", 140", "fn": "fruit_distribution", "para": "(string s,int n)", "pass": false}
{"task_id": "CPP/67", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s,int n){\n    string num1=\"\",num2=\"\";\n    int is12;\n    is12=0;\n    for (int i=0;i<s.size();i++)\n        \n        if (s[i]>=48 and s[i]<=57)\n        {\n            if (is12==0) num1=num1+s[i];\n            if (is12==1) num2=num2+s[i];\n        }\n        else\n          if (is12==0 and num1.length()>0) is12=1;\n    return n-atoi(num1.c_str())-atoi(num2.c_str());\n\n}\nint main(){\n\tauto result = fruit_distribution(<FILL_ME>);\n\tassert(result==95);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"10 apples, 15 bananas, 20 oranges\", 140", "fn": "fruit_distribution", "para": "(string s,int n)", "pass": false}
{"task_id": "CPP/67", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s,int n){\n    string num1=\"\",num2=\"\";\n    int is12;\n    is12=0;\n    for (int i=0;i<s.size();i++)\n        \n        if (s[i]>=48 and s[i]<=57)\n        {\n            if (is12==0) num1=num1+s[i];\n            if (is12==1) num2=num2+s[i];\n        }\n        else\n          if (is12==0 and num1.length()>0) is12=1;\n    return n-atoi(num1.c_str())-atoi(num2.c_str());\n\n}\nint main(){\n\tauto result = fruit_distribution(<FILL_ME>);\n\tassert(result==95);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"10 apples, 15 bananas, 20 oranges\", 140", "fn": "fruit_distribution", "para": "(string s,int n)", "pass": false}
{"task_id": "CPP/67", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s,int n){\n    string num1=\"\",num2=\"\";\n    int is12;\n    is12=0;\n    for (int i=0;i<s.size();i++)\n        \n        if (s[i]>=48 and s[i]<=57)\n        {\n            if (is12==0) num1=num1+s[i];\n            if (is12==1) num2=num2+s[i];\n        }\n        else\n          if (is12==0 and num1.length()>0) is12=1;\n    return n-atoi(num1.c_str())-atoi(num2.c_str());\n\n}\nint main(){\n\tauto result = fruit_distribution(<FILL_ME>);\n\tassert(result==19);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"12 apples, 8 oranges\", 1", "fn": "fruit_distribution", "para": "(string s,int n)", "pass": false}
{"task_id": "CPP/67", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s,int n){\n    string num1=\"\",num2=\"\";\n    int is12;\n    is12=0;\n    for (int i=0;i<s.size();i++)\n        \n        if (s[i]>=48 and s[i]<=57)\n        {\n            if (is12==0) num1=num1+s[i];\n            if (is12==1) num2=num2+s[i];\n        }\n        else\n          if (is12==0 and num1.length()>0) is12=1;\n    return n-atoi(num1.c_str())-atoi(num2.c_str());\n\n}\nint main(){\n\tauto result = fruit_distribution(<FILL_ME>);\n\tassert(result==19);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"12 apples, 8 oranges\", 1", "fn": "fruit_distribution", "para": "(string s,int n)", "pass": false}
{"task_id": "CPP/67", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s,int n){\n    string num1=\"\",num2=\"\";\n    int is12;\n    is12=0;\n    for (int i=0;i<s.size();i++)\n        \n        if (s[i]>=48 and s[i]<=57)\n        {\n            if (is12==0) num1=num1+s[i];\n            if (is12==1) num2=num2+s[i];\n        }\n        else\n          if (is12==0 and num1.length()>0) is12=1;\n    return n-atoi(num1.c_str())-atoi(num2.c_str());\n\n}\nint main(){\n\tauto result = fruit_distribution(<FILL_ME>);\n\tassert(result==19);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"12 apples, 8 oranges\", 1", "fn": "fruit_distribution", "para": "(string s,int n)", "pass": false}
{"task_id": "CPP/67", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s,int n){\n    string num1=\"\",num2=\"\";\n    int is12;\n    is12=0;\n    for (int i=0;i<s.size();i++)\n        \n        if (s[i]>=48 and s[i]<=57)\n        {\n            if (is12==0) num1=num1+s[i];\n            if (is12==1) num2=num2+s[i];\n        }\n        else\n          if (is12==0 and num1.length()>0) is12=1;\n    return n-atoi(num1.c_str())-atoi(num2.c_str());\n\n}\nint main(){\n\tauto result = fruit_distribution(<FILL_ME>);\n\tassert(result==19);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"12 apples, 8 oranges\", 1", "fn": "fruit_distribution", "para": "(string s,int n)", "pass": false}
{"task_id": "CPP/67", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s,int n){\n    string num1=\"\",num2=\"\";\n    int is12;\n    is12=0;\n    for (int i=0;i<s.size();i++)\n        \n        if (s[i]>=48 and s[i]<=57)\n        {\n            if (is12==0) num1=num1+s[i];\n            if (is12==1) num2=num2+s[i];\n        }\n        else\n          if (is12==0 and num1.length()>0) is12=1;\n    return n-atoi(num1.c_str())-atoi(num2.c_str());\n\n}\nint main(){\n\tauto result = fruit_distribution(<FILL_ME>);\n\tassert(result==19);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"12 apples, 8 oranges\", 1", "fn": "fruit_distribution", "para": "(string s,int n)", "pass": false}
{"task_id": "CPP/67", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s,int n){\n    string num1=\"\",num2=\"\";\n    int is12;\n    is12=0;\n    for (int i=0;i<s.size();i++)\n        \n        if (s[i]>=48 and s[i]<=57)\n        {\n            if (is12==0) num1=num1+s[i];\n            if (is12==1) num2=num2+s[i];\n        }\n        else\n          if (is12==0 and num1.length()>0) is12=1;\n    return n-atoi(num1.c_str())-atoi(num2.c_str());\n\n}\nint main(){\n\tauto result = fruit_distribution(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"1234,56\", 1234", "fn": "fruit_distribution", "para": "(string s,int n)", "pass": false}
{"task_id": "CPP/67", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s,int n){\n    string num1=\"\",num2=\"\";\n    int is12;\n    is12=0;\n    for (int i=0;i<s.size();i++)\n        \n        if (s[i]>=48 and s[i]<=57)\n        {\n            if (is12==0) num1=num1+s[i];\n            if (is12==1) num2=num2+s[i];\n        }\n        else\n          if (is12==0 and num1.length()>0) is12=1;\n    return n-atoi(num1.c_str())-atoi(num2.c_str());\n\n}\nint main(){\n\tauto result = fruit_distribution(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"1234,56\", 1234", "fn": "fruit_distribution", "para": "(string s,int n)", "pass": false}
{"task_id": "CPP/67", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s,int n){\n    string num1=\"\",num2=\"\";\n    int is12;\n    is12=0;\n    for (int i=0;i<s.size();i++)\n        \n        if (s[i]>=48 and s[i]<=57)\n        {\n            if (is12==0) num1=num1+s[i];\n            if (is12==1) num2=num2+s[i];\n        }\n        else\n          if (is12==0 and num1.length()>0) is12=1;\n    return n-atoi(num1.c_str())-atoi(num2.c_str());\n\n}\nint main(){\n\tauto result = fruit_distribution(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"1234,56\", 1234", "fn": "fruit_distribution", "para": "(string s,int n)", "pass": false}
{"task_id": "CPP/67", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s,int n){\n    string num1=\"\",num2=\"\";\n    int is12;\n    is12=0;\n    for (int i=0;i<s.size();i++)\n        \n        if (s[i]>=48 and s[i]<=57)\n        {\n            if (is12==0) num1=num1+s[i];\n            if (is12==1) num2=num2+s[i];\n        }\n        else\n          if (is12==0 and num1.length()>0) is12=1;\n    return n-atoi(num1.c_str())-atoi(num2.c_str());\n\n}\nint main(){\n\tauto result = fruit_distribution(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"1234,56\", 1234", "fn": "fruit_distribution", "para": "(string s,int n)", "pass": false}
{"task_id": "CPP/67", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s,int n){\n    string num1=\"\",num2=\"\";\n    int is12;\n    is12=0;\n    for (int i=0;i<s.size();i++)\n        \n        if (s[i]>=48 and s[i]<=57)\n        {\n            if (is12==0) num1=num1+s[i];\n            if (is12==1) num2=num2+s[i];\n        }\n        else\n          if (is12==0 and num1.length()>0) is12=1;\n    return n-atoi(num1.c_str())-atoi(num2.c_str());\n\n}\nint main(){\n\tauto result = fruit_distribution(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"1234,56\", 1234", "fn": "fruit_distribution", "para": "(string s,int n)", "pass": false}
{"task_id": "CPP/67", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s,int n){\n    string num1=\"\",num2=\"\";\n    int is12;\n    is12=0;\n    for (int i=0;i<s.size();i++)\n        \n        if (s[i]>=48 and s[i]<=57)\n        {\n            if (is12==0) num1=num1+s[i];\n            if (is12==1) num2=num2+s[i];\n        }\n        else\n          if (is12==0 and num1.length()>0) is12=1;\n    return n-atoi(num1.c_str())-atoi(num2.c_str());\n\n}\nint main(){\n\tauto result = fruit_distribution(<FILL_ME>);\n\tassert(result==10);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"42 apples, 25 oranges\", 57", "fn": "fruit_distribution", "para": "(string s,int n)", "pass": false}
{"task_id": "CPP/67", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s,int n){\n    string num1=\"\",num2=\"\";\n    int is12;\n    is12=0;\n    for (int i=0;i<s.size();i++)\n        \n        if (s[i]>=48 and s[i]<=57)\n        {\n            if (is12==0) num1=num1+s[i];\n            if (is12==1) num2=num2+s[i];\n        }\n        else\n          if (is12==0 and num1.length()>0) is12=1;\n    return n-atoi(num1.c_str())-atoi(num2.c_str());\n\n}\nint main(){\n\tauto result = fruit_distribution(<FILL_ME>);\n\tassert(result==10);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"42 apples, 25 oranges\", 57", "fn": "fruit_distribution", "para": "(string s,int n)", "pass": false}
{"task_id": "CPP/67", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s,int n){\n    string num1=\"\",num2=\"\";\n    int is12;\n    is12=0;\n    for (int i=0;i<s.size();i++)\n        \n        if (s[i]>=48 and s[i]<=57)\n        {\n            if (is12==0) num1=num1+s[i];\n            if (is12==1) num2=num2+s[i];\n        }\n        else\n          if (is12==0 and num1.length()>0) is12=1;\n    return n-atoi(num1.c_str())-atoi(num2.c_str());\n\n}\nint main(){\n\tauto result = fruit_distribution(<FILL_ME>);\n\tassert(result==10);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"42 apples, 25 oranges\", 57", "fn": "fruit_distribution", "para": "(string s,int n)", "pass": false}
{"task_id": "CPP/67", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s,int n){\n    string num1=\"\",num2=\"\";\n    int is12;\n    is12=0;\n    for (int i=0;i<s.size();i++)\n        \n        if (s[i]>=48 and s[i]<=57)\n        {\n            if (is12==0) num1=num1+s[i];\n            if (is12==1) num2=num2+s[i];\n        }\n        else\n          if (is12==0 and num1.length()>0) is12=1;\n    return n-atoi(num1.c_str())-atoi(num2.c_str());\n\n}\nint main(){\n\tauto result = fruit_distribution(<FILL_ME>);\n\tassert(result==10);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"42 apples, 25 oranges\", 57", "fn": "fruit_distribution", "para": "(string s,int n)", "pass": false}
{"task_id": "CPP/67", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s,int n){\n    string num1=\"\",num2=\"\";\n    int is12;\n    is12=0;\n    for (int i=0;i<s.size();i++)\n        \n        if (s[i]>=48 and s[i]<=57)\n        {\n            if (is12==0) num1=num1+s[i];\n            if (is12==1) num2=num2+s[i];\n        }\n        else\n          if (is12==0 and num1.length()>0) is12=1;\n    return n-atoi(num1.c_str())-atoi(num2.c_str());\n\n}\nint main(){\n\tauto result = fruit_distribution(<FILL_ME>);\n\tassert(result==10);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"3 apples, 2 bananas, 5 oranges\", 10", "fn": "fruit_distribution", "para": "(string s,int n)", "pass": false}
{"task_id": "CPP/67", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s,int n){\n    string num1=\"\",num2=\"\";\n    int is12;\n    is12=0;\n    for (int i=0;i<s.size();i++)\n        \n        if (s[i]>=48 and s[i]<=57)\n        {\n            if (is12==0) num1=num1+s[i];\n            if (is12==1) num2=num2+s[i];\n        }\n        else\n          if (is12==0 and num1.length()>0) is12=1;\n    return n-atoi(num1.c_str())-atoi(num2.c_str());\n\n}\nint main(){\n\tauto result = fruit_distribution(<FILL_ME>);\n\tassert(result==8);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"4 apples and 3 bananas\", 15", "fn": "fruit_distribution", "para": "(string s,int n)", "pass": true}
{"task_id": "CPP/67", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s,int n){\n    string num1=\"\",num2=\"\";\n    int is12;\n    is12=0;\n    for (int i=0;i<s.size();i++)\n        \n        if (s[i]>=48 and s[i]<=57)\n        {\n            if (is12==0) num1=num1+s[i];\n            if (is12==1) num2=num2+s[i];\n        }\n        else\n          if (is12==0 and num1.length()>0) is12=1;\n    return n-atoi(num1.c_str())-atoi(num2.c_str());\n\n}\nint main(){\n\tauto result = fruit_distribution(<FILL_ME>);\n\tassert(result==8);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"4 apples and 3 bananas\", 15", "fn": "fruit_distribution", "para": "(string s,int n)", "pass": true}
{"task_id": "CPP/67", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s,int n){\n    string num1=\"\",num2=\"\";\n    int is12;\n    is12=0;\n    for (int i=0;i<s.size();i++)\n        \n        if (s[i]>=48 and s[i]<=57)\n        {\n            if (is12==0) num1=num1+s[i];\n            if (is12==1) num2=num2+s[i];\n        }\n        else\n          if (is12==0 and num1.length()>0) is12=1;\n    return n-atoi(num1.c_str())-atoi(num2.c_str());\n\n}\nint main(){\n\tauto result = fruit_distribution(<FILL_ME>);\n\tassert(result==8);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"4 apples and 3 bananas\", 15", "fn": "fruit_distribution", "para": "(string s,int n)", "pass": true}
{"task_id": "CPP/67", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s,int n){\n    string num1=\"\",num2=\"\";\n    int is12;\n    is12=0;\n    for (int i=0;i<s.size();i++)\n        \n        if (s[i]>=48 and s[i]<=57)\n        {\n            if (is12==0) num1=num1+s[i];\n            if (is12==1) num2=num2+s[i];\n        }\n        else\n          if (is12==0 and num1.length()>0) is12=1;\n    return n-atoi(num1.c_str())-atoi(num2.c_str());\n\n}\nint main(){\n\tauto result = fruit_distribution(<FILL_ME>);\n\tassert(result==8);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"4 apples and 3 bananas\", 15", "fn": "fruit_distribution", "para": "(string s,int n)", "pass": true}
{"task_id": "CPP/67", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s,int n){\n    string num1=\"\",num2=\"\";\n    int is12;\n    is12=0;\n    for (int i=0;i<s.size();i++)\n        \n        if (s[i]>=48 and s[i]<=57)\n        {\n            if (is12==0) num1=num1+s[i];\n            if (is12==1) num2=num2+s[i];\n        }\n        else\n          if (is12==0 and num1.length()>0) is12=1;\n    return n-atoi(num1.c_str())-atoi(num2.c_str());\n\n}\nint main(){\n\tauto result = fruit_distribution(<FILL_ME>);\n\tassert(result==8);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"4 apples and 3 bananas\", 15", "fn": "fruit_distribution", "para": "(string s,int n)", "pass": true}
{"task_id": "CPP/67", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s,int n){\n    string num1=\"\",num2=\"\";\n    int is12;\n    is12=0;\n    for (int i=0;i<s.size();i++)\n        \n        if (s[i]>=48 and s[i]<=57)\n        {\n            if (is12==0) num1=num1+s[i];\n            if (is12==1) num2=num2+s[i];\n        }\n        else\n          if (is12==0 and num1.length()>0) is12=1;\n    return n-atoi(num1.c_str())-atoi(num2.c_str());\n\n}\nint main(){\n\tauto result = fruit_distribution(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"12 apples 15 oranges\", 27", "fn": "fruit_distribution", "para": "(string s,int n)", "pass": true}
{"task_id": "CPP/67", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s,int n){\n    string num1=\"\",num2=\"\";\n    int is12;\n    is12=0;\n    for (int i=0;i<s.size();i++)\n        \n        if (s[i]>=48 and s[i]<=57)\n        {\n            if (is12==0) num1=num1+s[i];\n            if (is12==1) num2=num2+s[i];\n        }\n        else\n          if (is12==0 and num1.length()>0) is12=1;\n    return n-atoi(num1.c_str())-atoi(num2.c_str());\n\n}\nint main(){\n\tauto result = fruit_distribution(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"12 apples 15 oranges\", 27", "fn": "fruit_distribution", "para": "(string s,int n)", "pass": true}
{"task_id": "CPP/67", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s,int n){\n    string num1=\"\",num2=\"\";\n    int is12;\n    is12=0;\n    for (int i=0;i<s.size();i++)\n        \n        if (s[i]>=48 and s[i]<=57)\n        {\n            if (is12==0) num1=num1+s[i];\n            if (is12==1) num2=num2+s[i];\n        }\n        else\n          if (is12==0 and num1.length()>0) is12=1;\n    return n-atoi(num1.c_str())-atoi(num2.c_str());\n\n}\nint main(){\n\tauto result = fruit_distribution(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"12 apples 15 oranges\", 27", "fn": "fruit_distribution", "para": "(string s,int n)", "pass": true}
{"task_id": "CPP/67", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s,int n){\n    string num1=\"\",num2=\"\";\n    int is12;\n    is12=0;\n    for (int i=0;i<s.size();i++)\n        \n        if (s[i]>=48 and s[i]<=57)\n        {\n            if (is12==0) num1=num1+s[i];\n            if (is12==1) num2=num2+s[i];\n        }\n        else\n          if (is12==0 and num1.length()>0) is12=1;\n    return n-atoi(num1.c_str())-atoi(num2.c_str());\n\n}\nint main(){\n\tauto result = fruit_distribution(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"12 apples 15 oranges\", 27", "fn": "fruit_distribution", "para": "(string s,int n)", "pass": true}
{"task_id": "CPP/67", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s,int n){\n    string num1=\"\",num2=\"\";\n    int is12;\n    is12=0;\n    for (int i=0;i<s.size();i++)\n        \n        if (s[i]>=48 and s[i]<=57)\n        {\n            if (is12==0) num1=num1+s[i];\n            if (is12==1) num2=num2+s[i];\n        }\n        else\n          if (is12==0 and num1.length()>0) is12=1;\n    return n-atoi(num1.c_str())-atoi(num2.c_str());\n\n}\nint main(){\n\tauto result = fruit_distribution(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"12 apples 15 oranges\", 27", "fn": "fruit_distribution", "para": "(string s,int n)", "pass": true}
{"task_id": "CPP/68", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n    vector<int> out={};\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n        out={arr[i],i};\n    return out;\n}\nint main(){\n\tauto result = pluck(<FILL_ME>);\n\tassert(issame(result,{0,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{2, 0, 4, 1, 6}", "fn": "pluck", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/68", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n    vector<int> out={};\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n        out={arr[i],i};\n    return out;\n}\nint main(){\n\tauto result = pluck(<FILL_ME>);\n\tassert(issame(result,{0,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{2, 0, 4, 1, 6}", "fn": "pluck", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/68", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n    vector<int> out={};\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n        out={arr[i],i};\n    return out;\n}\nint main(){\n\tauto result = pluck(<FILL_ME>);\n\tassert(issame(result,{0,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{2, 0, 4, 1, 6}", "fn": "pluck", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/68", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n    vector<int> out={};\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n        out={arr[i],i};\n    return out;\n}\nint main(){\n\tauto result = pluck(<FILL_ME>);\n\tassert(issame(result,{0,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{2, 0, 4, 1, 6}", "fn": "pluck", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/68", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n    vector<int> out={};\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n        out={arr[i],i};\n    return out;\n}\nint main(){\n\tauto result = pluck(<FILL_ME>);\n\tassert(issame(result,{0,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{2, 0, 4, 1, 6}", "fn": "pluck", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/68", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n    vector<int> out={};\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n        out={arr[i],i};\n    return out;\n}\nint main(){\n\tauto result = pluck(<FILL_ME>);\n\tassert(issame(result,{0,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{1, 3, 5, 0, 2}", "fn": "pluck", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/68", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n    vector<int> out={};\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n        out={arr[i],i};\n    return out;\n}\nint main(){\n\tauto result = pluck(<FILL_ME>);\n\tassert(issame(result,{0,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{1, 3, 5, 0, 2}", "fn": "pluck", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/68", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n    vector<int> out={};\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n        out={arr[i],i};\n    return out;\n}\nint main(){\n\tauto result = pluck(<FILL_ME>);\n\tassert(issame(result,{0,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{1, 3, 5, 0, 2}", "fn": "pluck", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/68", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n    vector<int> out={};\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n        out={arr[i],i};\n    return out;\n}\nint main(){\n\tauto result = pluck(<FILL_ME>);\n\tassert(issame(result,{0,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{1, 3, 5, 0, 2}", "fn": "pluck", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/68", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n    vector<int> out={};\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n        out={arr[i],i};\n    return out;\n}\nint main(){\n\tauto result = pluck(<FILL_ME>);\n\tassert(issame(result,{0,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, 3, 5, 0, 2}", "fn": "pluck", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/68", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n    vector<int> out={};\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n        out={arr[i],i};\n    return out;\n}\nint main(){\n\tauto result = pluck(<FILL_ME>);\n\tassert(issame(result,{2,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{3, 2, 6, 8, 1}", "fn": "pluck", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/68", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n    vector<int> out={};\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n        out={arr[i],i};\n    return out;\n}\nint main(){\n\tauto result = pluck(<FILL_ME>);\n\tassert(issame(result,{2,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{3, 2, 6, 8, 1}", "fn": "pluck", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/68", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n    vector<int> out={};\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n        out={arr[i],i};\n    return out;\n}\nint main(){\n\tauto result = pluck(<FILL_ME>);\n\tassert(issame(result,{2,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{3, 2, 6, 8, 1}", "fn": "pluck", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/68", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n    vector<int> out={};\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n        out={arr[i],i};\n    return out;\n}\nint main(){\n\tauto result = pluck(<FILL_ME>);\n\tassert(issame(result,{2,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{3, 2, 6, 8, 1}", "fn": "pluck", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/68", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n    vector<int> out={};\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n        out={arr[i],i};\n    return out;\n}\nint main(){\n\tauto result = pluck(<FILL_ME>);\n\tassert(issame(result,{2,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{3, 2, 6, 8, 1}", "fn": "pluck", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/68", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n    vector<int> out={};\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n        out={arr[i],i};\n    return out;\n}\nint main(){\n\tauto result = pluck(<FILL_ME>);\n\tassert(issame(result,{6,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{5, 6, 3, 8}", "fn": "pluck", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/68", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n    vector<int> out={};\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n        out={arr[i],i};\n    return out;\n}\nint main(){\n\tauto result = pluck(<FILL_ME>);\n\tassert(issame(result,{6,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{5, 6, 3, 8}", "fn": "pluck", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/68", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n    vector<int> out={};\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n        out={arr[i],i};\n    return out;\n}\nint main(){\n\tauto result = pluck(<FILL_ME>);\n\tassert(issame(result,{6,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{5, 6, 3, 8}", "fn": "pluck", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/68", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n    vector<int> out={};\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n        out={arr[i],i};\n    return out;\n}\nint main(){\n\tauto result = pluck(<FILL_ME>);\n\tassert(issame(result,{6,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{5, 6, 3, 8}", "fn": "pluck", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/68", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n    vector<int> out={};\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n        out={arr[i],i};\n    return out;\n}\nint main(){\n\tauto result = pluck(<FILL_ME>);\n\tassert(issame(result,{6,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{5, 6, 3, 8}", "fn": "pluck", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/68", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n    vector<int> out={};\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n        out={arr[i],i};\n    return out;\n}\nint main(){\n\tauto result = pluck(<FILL_ME>);\n\tassert(issame(result,{4,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{2, 4, 6, 1, 3, 5}", "fn": "pluck", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/68", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n    vector<int> out={};\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n        out={arr[i],i};\n    return out;\n}\nint main(){\n\tauto result = pluck(<FILL_ME>);\n\tassert(issame(result,{4,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{2, 4, 6, 1, 3, 5}", "fn": "pluck", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/68", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n    vector<int> out={};\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n        out={arr[i],i};\n    return out;\n}\nint main(){\n\tauto result = pluck(<FILL_ME>);\n\tassert(issame(result,{4,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{2, 4, 6, 1, 3, 5}", "fn": "pluck", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/68", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n    vector<int> out={};\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n        out={arr[i],i};\n    return out;\n}\nint main(){\n\tauto result = pluck(<FILL_ME>);\n\tassert(issame(result,{4,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{2, 4, 6, 1, 3, 5}", "fn": "pluck", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/68", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n    vector<int> out={};\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n        out={arr[i],i};\n    return out;\n}\nint main(){\n\tauto result = pluck(<FILL_ME>);\n\tassert(issame(result,{4,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{2, 4, 6, 1, 3, 5}", "fn": "pluck", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/68", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n    vector<int> out={};\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n        out={arr[i],i};\n    return out;\n}\nint main(){\n\tauto result = pluck(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, 3, 5, 7, 9}", "fn": "pluck", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/68", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n    vector<int> out={};\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n        out={arr[i],i};\n    return out;\n}\nint main(){\n\tauto result = pluck(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, 3, 5, 7, 9}", "fn": "pluck", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/68", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n    vector<int> out={};\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n        out={arr[i],i};\n    return out;\n}\nint main(){\n\tauto result = pluck(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, 3, 5, 7, 9}", "fn": "pluck", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/68", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n    vector<int> out={};\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n        out={arr[i],i};\n    return out;\n}\nint main(){\n\tauto result = pluck(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, 3, 5, 7, 9}", "fn": "pluck", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/68", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n    vector<int> out={};\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n        out={arr[i],i};\n    return out;\n}\nint main(){\n\tauto result = pluck(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, 3, 5, 7, 9}", "fn": "pluck", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/69", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n    vector<vector<int>> freq={};\n    int max=-1;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n            freq[j][1]+=1;\n            has=true;\n            if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];\n            }\n        if (not(has)) \n        {\n        freq.push_back({lst[i],1});\n        if (max==-1 and lst[i]==1) max=1;\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = search(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1,1,2,2,2,3}", "fn": "search", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/69", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n    vector<vector<int>> freq={};\n    int max=-1;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n            freq[j][1]+=1;\n            has=true;\n            if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];\n            }\n        if (not(has)) \n        {\n        freq.push_back({lst[i],1});\n        if (max==-1 and lst[i]==1) max=1;\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = search(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1,1,2,2,2,3}", "fn": "search", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/69", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n    vector<vector<int>> freq={};\n    int max=-1;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n            freq[j][1]+=1;\n            has=true;\n            if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];\n            }\n        if (not(has)) \n        {\n        freq.push_back({lst[i],1});\n        if (max==-1 and lst[i]==1) max=1;\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = search(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1,1,2,2,2,3}", "fn": "search", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/69", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n    vector<vector<int>> freq={};\n    int max=-1;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n            freq[j][1]+=1;\n            has=true;\n            if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];\n            }\n        if (not(has)) \n        {\n        freq.push_back({lst[i],1});\n        if (max==-1 and lst[i]==1) max=1;\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = search(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1,1,2,2,2,3}", "fn": "search", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/69", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n    vector<vector<int>> freq={};\n    int max=-1;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n            freq[j][1]+=1;\n            has=true;\n            if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];\n            }\n        if (not(has)) \n        {\n        freq.push_back({lst[i],1});\n        if (max==-1 and lst[i]==1) max=1;\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = search(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1,1,1,2,2,3,4}", "fn": "search", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/69", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n    vector<vector<int>> freq={};\n    int max=-1;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n            freq[j][1]+=1;\n            has=true;\n            if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];\n            }\n        if (not(has)) \n        {\n        freq.push_back({lst[i],1});\n        if (max==-1 and lst[i]==1) max=1;\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = search(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{2, 1, 2, 2, 1, 2, 2}", "fn": "search", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/69", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n    vector<vector<int>> freq={};\n    int max=-1;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n            freq[j][1]+=1;\n            has=true;\n            if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];\n            }\n        if (not(has)) \n        {\n        freq.push_back({lst[i],1});\n        if (max==-1 and lst[i]==1) max=1;\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = search(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{2, 1, 2, 2, 1, 2, 2}", "fn": "search", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/69", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n    vector<vector<int>> freq={};\n    int max=-1;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n            freq[j][1]+=1;\n            has=true;\n            if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];\n            }\n        if (not(has)) \n        {\n        freq.push_back({lst[i],1});\n        if (max==-1 and lst[i]==1) max=1;\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = search(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{2, 1, 2, 2, 1, 2, 2}", "fn": "search", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/69", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n    vector<vector<int>> freq={};\n    int max=-1;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n            freq[j][1]+=1;\n            has=true;\n            if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];\n            }\n        if (not(has)) \n        {\n        freq.push_back({lst[i],1});\n        if (max==-1 and lst[i]==1) max=1;\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = search(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{2, 1, 2, 2, 1, 2, 2}", "fn": "search", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/69", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n    vector<vector<int>> freq={};\n    int max=-1;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n            freq[j][1]+=1;\n            has=true;\n            if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];\n            }\n        if (not(has)) \n        {\n        freq.push_back({lst[i],1});\n        if (max==-1 and lst[i]==1) max=1;\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = search(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{2, 1, 2, 2, 1, 2, 2}", "fn": "search", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/69", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n    vector<vector<int>> freq={};\n    int max=-1;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n            freq[j][1]+=1;\n            has=true;\n            if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];\n            }\n        if (not(has)) \n        {\n        freq.push_back({lst[i],1});\n        if (max==-1 and lst[i]==1) max=1;\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = search(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 2, 2, 3, 3, 3, 4, 4, 4, 4}", "fn": "search", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/69", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n    vector<vector<int>> freq={};\n    int max=-1;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n            freq[j][1]+=1;\n            has=true;\n            if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];\n            }\n        if (not(has)) \n        {\n        freq.push_back({lst[i],1});\n        if (max==-1 and lst[i]==1) max=1;\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = search(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 2, 2, 3, 3, 3, 4, 4, 4, 4}", "fn": "search", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/69", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n    vector<vector<int>> freq={};\n    int max=-1;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n            freq[j][1]+=1;\n            has=true;\n            if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];\n            }\n        if (not(has)) \n        {\n        freq.push_back({lst[i],1});\n        if (max==-1 and lst[i]==1) max=1;\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = search(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 2, 2, 3, 3, 3, 4, 4, 4, 4}", "fn": "search", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/69", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n    vector<vector<int>> freq={};\n    int max=-1;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n            freq[j][1]+=1;\n            has=true;\n            if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];\n            }\n        if (not(has)) \n        {\n        freq.push_back({lst[i],1});\n        if (max==-1 and lst[i]==1) max=1;\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = search(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 2, 2, 3, 3, 3, 4, 4, 4, 4}", "fn": "search", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/69", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n    vector<vector<int>> freq={};\n    int max=-1;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n            freq[j][1]+=1;\n            has=true;\n            if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];\n            }\n        if (not(has)) \n        {\n        freq.push_back({lst[i],1});\n        if (max==-1 and lst[i]==1) max=1;\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = search(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 2, 2, 3, 3, 3, 4, 4, 4, 4}", "fn": "search", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/69", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n    vector<vector<int>> freq={};\n    int max=-1;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n            freq[j][1]+=1;\n            has=true;\n            if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];\n            }\n        if (not(has)) \n        {\n        freq.push_back({lst[i],1});\n        if (max==-1 and lst[i]==1) max=1;\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = search(<FILL_ME>);\n\tassert(result==8);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 2, 3, 4, 8, 8, 8, 8, 8, 6, 7}", "fn": "search", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/69", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n    vector<vector<int>> freq={};\n    int max=-1;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n            freq[j][1]+=1;\n            has=true;\n            if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];\n            }\n        if (not(has)) \n        {\n        freq.push_back({lst[i],1});\n        if (max==-1 and lst[i]==1) max=1;\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = search(<FILL_ME>);\n\tassert(result==8);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 2, 3, 4, 8, 8, 8, 8, 8, 6, 7}", "fn": "search", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/69", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n    vector<vector<int>> freq={};\n    int max=-1;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n            freq[j][1]+=1;\n            has=true;\n            if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];\n            }\n        if (not(has)) \n        {\n        freq.push_back({lst[i],1});\n        if (max==-1 and lst[i]==1) max=1;\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = search(<FILL_ME>);\n\tassert(result==8);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 2, 3, 4, 8, 8, 8, 8, 8, 6, 7}", "fn": "search", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/69", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n    vector<vector<int>> freq={};\n    int max=-1;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n            freq[j][1]+=1;\n            has=true;\n            if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];\n            }\n        if (not(has)) \n        {\n        freq.push_back({lst[i],1});\n        if (max==-1 and lst[i]==1) max=1;\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = search(<FILL_ME>);\n\tassert(result==8);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 2, 3, 4, 8, 8, 8, 8, 8, 6, 7}", "fn": "search", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/69", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n    vector<vector<int>> freq={};\n    int max=-1;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n            freq[j][1]+=1;\n            has=true;\n            if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];\n            }\n        if (not(has)) \n        {\n        freq.push_back({lst[i],1});\n        if (max==-1 and lst[i]==1) max=1;\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = search(<FILL_ME>);\n\tassert(result==8);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 2, 3, 4, 8, 8, 8, 8, 8, 6, 7}", "fn": "search", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/69", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n    vector<vector<int>> freq={};\n    int max=-1;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n            freq[j][1]+=1;\n            has=true;\n            if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];\n            }\n        if (not(has)) \n        {\n        freq.push_back({lst[i],1});\n        if (max==-1 and lst[i]==1) max=1;\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = search(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{5, 5, 1, 1, 1, 1, 1}", "fn": "search", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/69", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n    vector<vector<int>> freq={};\n    int max=-1;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n            freq[j][1]+=1;\n            has=true;\n            if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];\n            }\n        if (not(has)) \n        {\n        freq.push_back({lst[i],1});\n        if (max==-1 and lst[i]==1) max=1;\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = search(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{5, 5, 1, 1, 1, 1, 1}", "fn": "search", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/69", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n    vector<vector<int>> freq={};\n    int max=-1;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n            freq[j][1]+=1;\n            has=true;\n            if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];\n            }\n        if (not(has)) \n        {\n        freq.push_back({lst[i],1});\n        if (max==-1 and lst[i]==1) max=1;\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = search(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{5, 5, 1, 1, 1, 1, 1}", "fn": "search", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/69", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n    vector<vector<int>> freq={};\n    int max=-1;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n            freq[j][1]+=1;\n            has=true;\n            if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];\n            }\n        if (not(has)) \n        {\n        freq.push_back({lst[i],1});\n        if (max==-1 and lst[i]==1) max=1;\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = search(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{5, 5, 1, 1, 1, 1, 1}", "fn": "search", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/69", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n    vector<vector<int>> freq={};\n    int max=-1;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n            freq[j][1]+=1;\n            has=true;\n            if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];\n            }\n        if (not(has)) \n        {\n        freq.push_back({lst[i],1});\n        if (max==-1 and lst[i]==1) max=1;\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = search(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{5, 5, 1, 1, 1, 1, 1}", "fn": "search", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/69", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n    vector<vector<int>> freq={};\n    int max=-1;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n            freq[j][1]+=1;\n            has=true;\n            if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];\n            }\n        if (not(has)) \n        {\n        freq.push_back({lst[i],1});\n        if (max==-1 and lst[i]==1) max=1;\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = search(<FILL_ME>);\n\tassert(result==-1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 2, 3, 4, 5}", "fn": "search", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/69", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n    vector<vector<int>> freq={};\n    int max=-1;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n            freq[j][1]+=1;\n            has=true;\n            if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];\n            }\n        if (not(has)) \n        {\n        freq.push_back({lst[i],1});\n        if (max==-1 and lst[i]==1) max=1;\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = search(<FILL_ME>);\n\tassert(result==-1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 2, 3, 4, 5}", "fn": "search", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/69", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n    vector<vector<int>> freq={};\n    int max=-1;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n            freq[j][1]+=1;\n            has=true;\n            if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];\n            }\n        if (not(has)) \n        {\n        freq.push_back({lst[i],1});\n        if (max==-1 and lst[i]==1) max=1;\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = search(<FILL_ME>);\n\tassert(result==-1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 2, 3, 4, 5}", "fn": "search", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/69", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n    vector<vector<int>> freq={};\n    int max=-1;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n            freq[j][1]+=1;\n            has=true;\n            if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];\n            }\n        if (not(has)) \n        {\n        freq.push_back({lst[i],1});\n        if (max==-1 and lst[i]==1) max=1;\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = search(<FILL_ME>);\n\tassert(result==-1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 2, 3, 4, 5}", "fn": "search", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/69", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n    vector<vector<int>> freq={};\n    int max=-1;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n            freq[j][1]+=1;\n            has=true;\n            if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];\n            }\n        if (not(has)) \n        {\n        freq.push_back({lst[i],1});\n        if (max==-1 and lst[i]==1) max=1;\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = search(<FILL_ME>);\n\tassert(result==-1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 2, 3, 4, 5}", "fn": "search", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/70", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\nint main(){\n\tauto result = strange_sort_list(<FILL_ME>);\n\tassert(issame(result,{-5,5,-5,5,0,2,2,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{-5, 5, 0, 5, 2, -5, 2, 2}", "fn": "strange_sort_list", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/70", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\nint main(){\n\tauto result = strange_sort_list(<FILL_ME>);\n\tassert(issame(result,{-5,5,-5,5,0,2,2,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{-5, 5, 0, 5, 2, -5, 2, 2}", "fn": "strange_sort_list", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/70", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\nint main(){\n\tauto result = strange_sort_list(<FILL_ME>);\n\tassert(issame(result,{-5,5,-5,5,0,2,2,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{-5, 5, 0, 5, 2, -5, 2, 2}", "fn": "strange_sort_list", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/70", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\nint main(){\n\tauto result = strange_sort_list(<FILL_ME>);\n\tassert(issame(result,{-5,5,-5,5,0,2,2,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{-5, 5, 0, 5, 2, -5, 2, 2}", "fn": "strange_sort_list", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/70", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\nint main(){\n\tauto result = strange_sort_list(<FILL_ME>);\n\tassert(issame(result,{-5,5,-5,5,0,2,2,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{-5, 5, 0, 5, 2, -5, 2, 2}", "fn": "strange_sort_list", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/70", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\nint main(){\n\tauto result = strange_sort_list(<FILL_ME>);\n\tassert(issame(result,{1,5,2,4,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1,2,3,4,5}", "fn": "strange_sort_list", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/70", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\nint main(){\n\tauto result = strange_sort_list(<FILL_ME>);\n\tassert(issame(result,{1,5,2,4,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1,2,3,4,5}", "fn": "strange_sort_list", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/70", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\nint main(){\n\tauto result = strange_sort_list(<FILL_ME>);\n\tassert(issame(result,{1,5,2,4,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1,2,3,4,5}", "fn": "strange_sort_list", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/70", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\nint main(){\n\tauto result = strange_sort_list(<FILL_ME>);\n\tassert(issame(result,{1,5,2,4,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1,2,3,4,5}", "fn": "strange_sort_list", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/70", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\nint main(){\n\tauto result = strange_sort_list(<FILL_ME>);\n\tassert(issame(result,{1,5,2,4,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1,2,3,4,5}", "fn": "strange_sort_list", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/70", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\nint main(){\n\tauto result = strange_sort_list(<FILL_ME>);\n\tassert(issame(result,{5,9,6,8,7}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{5, 6, 7, 8, 9}", "fn": "strange_sort_list", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/70", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\nint main(){\n\tauto result = strange_sort_list(<FILL_ME>);\n\tassert(issame(result,{5,9,6,8,7}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{5, 6, 7, 8, 9}", "fn": "strange_sort_list", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/70", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\nint main(){\n\tauto result = strange_sort_list(<FILL_ME>);\n\tassert(issame(result,{5,9,6,8,7}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{5, 6, 7, 8, 9}", "fn": "strange_sort_list", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/70", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\nint main(){\n\tauto result = strange_sort_list(<FILL_ME>);\n\tassert(issame(result,{5,9,6,8,7}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{5, 6, 7, 8, 9}", "fn": "strange_sort_list", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/70", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\nint main(){\n\tauto result = strange_sort_list(<FILL_ME>);\n\tassert(issame(result,{5,9,6,8,7}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{5, 6, 7, 8, 9}", "fn": "strange_sort_list", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/70", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\nint main(){\n\tauto result = strange_sort_list(<FILL_ME>);\n\tassert(issame(result,{1,4,2,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{4,2,1,3}", "fn": "strange_sort_list", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/70", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\nint main(){\n\tauto result = strange_sort_list(<FILL_ME>);\n\tassert(issame(result,{1,4,2,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{4,2,1,3}", "fn": "strange_sort_list", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/70", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\nint main(){\n\tauto result = strange_sort_list(<FILL_ME>);\n\tassert(issame(result,{1,4,2,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{4,2,1,3}", "fn": "strange_sort_list", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/70", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\nint main(){\n\tauto result = strange_sort_list(<FILL_ME>);\n\tassert(issame(result,{1,4,2,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{4,2,1,3}", "fn": "strange_sort_list", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/70", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\nint main(){\n\tauto result = strange_sort_list(<FILL_ME>);\n\tassert(issame(result,{1,4,2,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{4,2,1,3}", "fn": "strange_sort_list", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/70", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\nint main(){\n\tauto result = strange_sort_list(<FILL_ME>);\n\tassert(issame(result,{1,9,5,8,6,7}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1,5,6,7,8,9}", "fn": "strange_sort_list", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/70", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\nint main(){\n\tauto result = strange_sort_list(<FILL_ME>);\n\tassert(issame(result,{1,9,5,8,6,7}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1,5,6,7,8,9}", "fn": "strange_sort_list", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/70", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\nint main(){\n\tauto result = strange_sort_list(<FILL_ME>);\n\tassert(issame(result,{1,9,5,8,6,7}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1,5,6,7,8,9}", "fn": "strange_sort_list", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/70", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\nint main(){\n\tauto result = strange_sort_list(<FILL_ME>);\n\tassert(issame(result,{1,9,5,8,6,7}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1,5,6,7,8,9}", "fn": "strange_sort_list", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/70", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\nint main(){\n\tauto result = strange_sort_list(<FILL_ME>);\n\tassert(issame(result,{1,9,5,8,6,7}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1,5,6,7,8,9}", "fn": "strange_sort_list", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/70", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\nint main(){\n\tauto result = strange_sort_list(<FILL_ME>);\n\tassert(issame(result,{1,8,2,7,3,6,4,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, 2, 3, 4, 5, 6, 7, 8}", "fn": "strange_sort_list", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/70", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\nint main(){\n\tauto result = strange_sort_list(<FILL_ME>);\n\tassert(issame(result,{1,8,2,7,3,6,4,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, 2, 3, 4, 5, 6, 7, 8}", "fn": "strange_sort_list", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/70", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\nint main(){\n\tauto result = strange_sort_list(<FILL_ME>);\n\tassert(issame(result,{1,8,2,7,3,6,4,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, 2, 3, 4, 5, 6, 7, 8}", "fn": "strange_sort_list", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/70", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\nint main(){\n\tauto result = strange_sort_list(<FILL_ME>);\n\tassert(issame(result,{1,8,2,7,3,6,4,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, 2, 3, 4, 5, 6, 7, 8}", "fn": "strange_sort_list", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/70", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\nint main(){\n\tauto result = strange_sort_list(<FILL_ME>);\n\tassert(issame(result,{1,8,2,7,3,6,4,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, 2, 3, 4, 5, 6, 7, 8}", "fn": "strange_sort_list", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/70", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\nint main(){\n\tauto result = strange_sort_list(<FILL_ME>);\n\tassert(issame(result,{111111}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{111111}", "fn": "strange_sort_list", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/70", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\nint main(){\n\tauto result = strange_sort_list(<FILL_ME>);\n\tassert(issame(result,{111111}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{111111}", "fn": "strange_sort_list", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/70", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\nint main(){\n\tauto result = strange_sort_list(<FILL_ME>);\n\tassert(issame(result,{111111}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{111111}", "fn": "strange_sort_list", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/70", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\nint main(){\n\tauto result = strange_sort_list(<FILL_ME>);\n\tassert(issame(result,{111111}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{111111}", "fn": "strange_sort_list", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/70", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\nint main(){\n\tauto result = strange_sort_list(<FILL_ME>);\n\tassert(issame(result,{111111}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{111111}", "fn": "strange_sort_list", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/70", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\nint main(){\n\tauto result = strange_sort_list(<FILL_ME>);\n\tassert(issame(result,{5,5,5,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{5,5,5,5}", "fn": "strange_sort_list", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/70", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\nint main(){\n\tauto result = strange_sort_list(<FILL_ME>);\n\tassert(issame(result,{5,5,5,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{5,5,5,5}", "fn": "strange_sort_list", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/70", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\nint main(){\n\tauto result = strange_sort_list(<FILL_ME>);\n\tassert(issame(result,{5,5,5,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{5,5,5,5}", "fn": "strange_sort_list", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/70", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\nint main(){\n\tauto result = strange_sort_list(<FILL_ME>);\n\tassert(issame(result,{5,5,5,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{5,5,5,5}", "fn": "strange_sort_list", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/70", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\nint main(){\n\tauto result = strange_sort_list(<FILL_ME>);\n\tassert(issame(result,{5,5,5,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{5,5,5,5}", "fn": "strange_sort_list", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/70", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\nint main(){\n\tauto result = strange_sort_list(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5}", "fn": "strange_sort_list", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/70", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\nint main(){\n\tauto result = strange_sort_list(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5}", "fn": "strange_sort_list", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/70", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\nint main(){\n\tauto result = strange_sort_list(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5}", "fn": "strange_sort_list", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/70", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\nint main(){\n\tauto result = strange_sort_list(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5}", "fn": "strange_sort_list", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/70", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\nint main(){\n\tauto result = strange_sort_list(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5}", "fn": "strange_sort_list", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/71", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n    if (a+b<=c or a+c<=b or b+c<=a) return -1;\n    float h=(a+b+c)/2;\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}\nint main(){\n\tauto result = triangle_area(<FILL_ME>);\n\tassert(abs(result+1)<0.01);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3, 4, 5", "fn": "triangle_area", "para": "(float a,float b,float c)", "pass": false}
{"task_id": "CPP/71", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n    if (a+b<=c or a+c<=b or b+c<=a) return -1;\n    float h=(a+b+c)/2;\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}\nint main(){\n\tauto result = triangle_area(<FILL_ME>);\n\tassert(abs(result+1)<0.01);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3, 4, 5", "fn": "triangle_area", "para": "(float a,float b,float c)", "pass": false}
{"task_id": "CPP/71", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n    if (a+b<=c or a+c<=b or b+c<=a) return -1;\n    float h=(a+b+c)/2;\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}\nint main(){\n\tauto result = triangle_area(<FILL_ME>);\n\tassert(abs(result+1)<0.01);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3, 4, 5", "fn": "triangle_area", "para": "(float a,float b,float c)", "pass": false}
{"task_id": "CPP/71", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n    if (a+b<=c or a+c<=b or b+c<=a) return -1;\n    float h=(a+b+c)/2;\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}\nint main(){\n\tauto result = triangle_area(<FILL_ME>);\n\tassert(abs(result+1)<0.01);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3, 4, 5", "fn": "triangle_area", "para": "(float a,float b,float c)", "pass": false}
{"task_id": "CPP/71", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n    if (a+b<=c or a+c<=b or b+c<=a) return -1;\n    float h=(a+b+c)/2;\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}\nint main(){\n\tauto result = triangle_area(<FILL_ME>);\n\tassert(abs(result+1)<0.01);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3, 4, 5", "fn": "triangle_area", "para": "(float a,float b,float c)", "pass": false}
{"task_id": "CPP/71", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n    if (a+b<=c or a+c<=b or b+c<=a) return -1;\n    float h=(a+b+c)/2;\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}\nint main(){\n\tauto result = triangle_area(<FILL_ME>);\n\tassert(abs(result-6.00)<0.01);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3, 4, 5", "fn": "triangle_area", "para": "(float a,float b,float c)", "pass": true}
{"task_id": "CPP/71", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n    if (a+b<=c or a+c<=b or b+c<=a) return -1;\n    float h=(a+b+c)/2;\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}\nint main(){\n\tauto result = triangle_area(<FILL_ME>);\n\tassert(abs(result-6.00)<0.01);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3, 4, 5", "fn": "triangle_area", "para": "(float a,float b,float c)", "pass": true}
{"task_id": "CPP/71", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n    if (a+b<=c or a+c<=b or b+c<=a) return -1;\n    float h=(a+b+c)/2;\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}\nint main(){\n\tauto result = triangle_area(<FILL_ME>);\n\tassert(abs(result-6.00)<0.01);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3, 4, 5", "fn": "triangle_area", "para": "(float a,float b,float c)", "pass": true}
{"task_id": "CPP/71", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n    if (a+b<=c or a+c<=b or b+c<=a) return -1;\n    float h=(a+b+c)/2;\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}\nint main(){\n\tauto result = triangle_area(<FILL_ME>);\n\tassert(abs(result-6.00)<0.01);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3, 4, 5", "fn": "triangle_area", "para": "(float a,float b,float c)", "pass": true}
{"task_id": "CPP/71", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n    if (a+b<=c or a+c<=b or b+c<=a) return -1;\n    float h=(a+b+c)/2;\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}\nint main(){\n\tauto result = triangle_area(<FILL_ME>);\n\tassert(abs(result-6.00)<0.01);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3.0, 4.0, 5.0", "fn": "triangle_area", "para": "(float a,float b,float c)", "pass": true}
{"task_id": "CPP/71", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n    if (a+b<=c or a+c<=b or b+c<=a) return -1;\n    float h=(a+b+c)/2;\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}\nint main(){\n\tauto result = triangle_area(<FILL_ME>);\n\tassert(abs(result-16.25)<0.01);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5, 5, 5", "fn": "triangle_area", "para": "(float a,float b,float c)", "pass": false}
{"task_id": "CPP/71", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n    if (a+b<=c or a+c<=b or b+c<=a) return -1;\n    float h=(a+b+c)/2;\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}\nint main(){\n\tauto result = triangle_area(<FILL_ME>);\n\tassert(abs(result-16.25)<0.01);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5, 5, 5", "fn": "triangle_area", "para": "(float a,float b,float c)", "pass": false}
{"task_id": "CPP/71", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n    if (a+b<=c or a+c<=b or b+c<=a) return -1;\n    float h=(a+b+c)/2;\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}\nint main(){\n\tauto result = triangle_area(<FILL_ME>);\n\tassert(abs(result-16.25)<0.01);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "4, 7, 9", "fn": "triangle_area", "para": "(float a,float b,float c)", "pass": false}
{"task_id": "CPP/71", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n    if (a+b<=c or a+c<=b or b+c<=a) return -1;\n    float h=(a+b+c)/2;\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}\nint main(){\n\tauto result = triangle_area(<FILL_ME>);\n\tassert(abs(result-16.25)<0.01);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5, 5, 5", "fn": "triangle_area", "para": "(float a,float b,float c)", "pass": false}
{"task_id": "CPP/71", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n    if (a+b<=c or a+c<=b or b+c<=a) return -1;\n    float h=(a+b+c)/2;\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}\nint main(){\n\tauto result = triangle_area(<FILL_ME>);\n\tassert(abs(result-16.25)<0.01);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "6.5, 5, 8", "fn": "triangle_area", "para": "(float a,float b,float c)", "pass": false}
{"task_id": "CPP/71", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n    if (a+b<=c or a+c<=b or b+c<=a) return -1;\n    float h=(a+b+c)/2;\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}\nint main(){\n\tauto result = triangle_area(<FILL_ME>);\n\tassert(abs(result-1.73)<0.01);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "2, 2, 2", "fn": "triangle_area", "para": "(float a,float b,float c)", "pass": true}
{"task_id": "CPP/71", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n    if (a+b<=c or a+c<=b or b+c<=a) return -1;\n    float h=(a+b+c)/2;\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}\nint main(){\n\tauto result = triangle_area(<FILL_ME>);\n\tassert(abs(result-1.73)<0.01);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "2.0, 2.0, 2.0", "fn": "triangle_area", "para": "(float a,float b,float c)", "pass": true}
{"task_id": "CPP/71", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n    if (a+b<=c or a+c<=b or b+c<=a) return -1;\n    float h=(a+b+c)/2;\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}\nint main(){\n\tauto result = triangle_area(<FILL_ME>);\n\tassert(abs(result-1.73)<0.01);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "2, 2, 2", "fn": "triangle_area", "para": "(float a,float b,float c)", "pass": true}
{"task_id": "CPP/71", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n    if (a+b<=c or a+c<=b or b+c<=a) return -1;\n    float h=(a+b+c)/2;\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}\nint main(){\n\tauto result = triangle_area(<FILL_ME>);\n\tassert(abs(result-1.73)<0.01);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "2, 2, 2", "fn": "triangle_area", "para": "(float a,float b,float c)", "pass": true}
{"task_id": "CPP/71", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n    if (a+b<=c or a+c<=b or b+c<=a) return -1;\n    float h=(a+b+c)/2;\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}\nint main(){\n\tauto result = triangle_area(<FILL_ME>);\n\tassert(abs(result-1.73)<0.01);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "2, 2, 2", "fn": "triangle_area", "para": "(float a,float b,float c)", "pass": true}
{"task_id": "CPP/71", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n    if (a+b<=c or a+c<=b or b+c<=a) return -1;\n    float h=(a+b+c)/2;\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}\nint main(){\n\tauto result = triangle_area(<FILL_ME>);\n\tassert(abs(result-0.43)<0.01);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1, 1, 1", "fn": "triangle_area", "para": "(float a,float b,float c)", "pass": true}
{"task_id": "CPP/71", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n    if (a+b<=c or a+c<=b or b+c<=a) return -1;\n    float h=(a+b+c)/2;\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}\nint main(){\n\tauto result = triangle_area(<FILL_ME>);\n\tassert(abs(result-0.43)<0.01);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1, 1, 1", "fn": "triangle_area", "para": "(float a,float b,float c)", "pass": true}
{"task_id": "CPP/71", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n    if (a+b<=c or a+c<=b or b+c<=a) return -1;\n    float h=(a+b+c)/2;\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}\nint main(){\n\tauto result = triangle_area(<FILL_ME>);\n\tassert(abs(result-0.43)<0.01);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1, 1, 1", "fn": "triangle_area", "para": "(float a,float b,float c)", "pass": true}
{"task_id": "CPP/71", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n    if (a+b<=c or a+c<=b or b+c<=a) return -1;\n    float h=(a+b+c)/2;\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}\nint main(){\n\tauto result = triangle_area(<FILL_ME>);\n\tassert(abs(result-0.43)<0.01);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1, 1, 1", "fn": "triangle_area", "para": "(float a,float b,float c)", "pass": true}
{"task_id": "CPP/71", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n    if (a+b<=c or a+c<=b or b+c<=a) return -1;\n    float h=(a+b+c)/2;\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}\nint main(){\n\tauto result = triangle_area(<FILL_ME>);\n\tassert(abs(result-0.43)<0.01);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1, 1, 1", "fn": "triangle_area", "para": "(float a,float b,float c)", "pass": true}
{"task_id": "CPP/71", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n    if (a+b<=c or a+c<=b or b+c<=a) return -1;\n    float h=(a+b+c)/2;\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}\nint main(){\n\tauto result = triangle_area(<FILL_ME>);\n\tassert(abs(result-8.18)<0.01);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "4, 7, 8", "fn": "triangle_area", "para": "(float a,float b,float c)", "pass": false}
{"task_id": "CPP/71", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n    if (a+b<=c or a+c<=b or b+c<=a) return -1;\n    float h=(a+b+c)/2;\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}\nint main(){\n\tauto result = triangle_area(<FILL_ME>);\n\tassert(abs(result-8.18)<0.01);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "4, 7, 8", "fn": "triangle_area", "para": "(float a,float b,float c)", "pass": false}
{"task_id": "CPP/71", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n    if (a+b<=c or a+c<=b or b+c<=a) return -1;\n    float h=(a+b+c)/2;\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}\nint main(){\n\tauto result = triangle_area(<FILL_ME>);\n\tassert(abs(result-8.18)<0.01);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "4, 7, 9", "fn": "triangle_area", "para": "(float a,float b,float c)", "pass": false}
{"task_id": "CPP/71", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n    if (a+b<=c or a+c<=b or b+c<=a) return -1;\n    float h=(a+b+c)/2;\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}\nint main(){\n\tauto result = triangle_area(<FILL_ME>);\n\tassert(abs(result-8.18)<0.01);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "4, 7, 8", "fn": "triangle_area", "para": "(float a,float b,float c)", "pass": false}
{"task_id": "CPP/71", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n    if (a+b<=c or a+c<=b or b+c<=a) return -1;\n    float h=(a+b+c)/2;\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}\nint main(){\n\tauto result = triangle_area(<FILL_ME>);\n\tassert(abs(result-8.18)<0.01);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "4, 7, 9", "fn": "triangle_area", "para": "(float a,float b,float c)", "pass": false}
{"task_id": "CPP/72", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool will_it_fly(vector<int> q,int w){\n    int sum=0;\n    for (int i=0;i<q.size();i++)\n    {\n        if (q[i]!=q[q.size()-1-i]) return false;\n        sum+=q[i];\n    }\n    if (sum>w) return false;\n    return true;\n}\nint main(){\n\tauto result = will_it_fly(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1,2,3,2,1}, 10", "fn": "will_it_fly", "para": "(vector<int> q,int w)", "pass": true}
{"task_id": "CPP/72", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool will_it_fly(vector<int> q,int w){\n    int sum=0;\n    for (int i=0;i<q.size();i++)\n    {\n        if (q[i]!=q[q.size()-1-i]) return false;\n        sum+=q[i];\n    }\n    if (sum>w) return false;\n    return true;\n}\nint main(){\n\tauto result = will_it_fly(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1,2,3,2,1}, 10", "fn": "will_it_fly", "para": "(vector<int> q,int w)", "pass": true}
{"task_id": "CPP/72", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool will_it_fly(vector<int> q,int w){\n    int sum=0;\n    for (int i=0;i<q.size();i++)\n    {\n        if (q[i]!=q[q.size()-1-i]) return false;\n        sum+=q[i];\n    }\n    if (sum>w) return false;\n    return true;\n}\nint main(){\n\tauto result = will_it_fly(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1,2,3,2,1}, 10", "fn": "will_it_fly", "para": "(vector<int> q,int w)", "pass": true}
{"task_id": "CPP/72", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool will_it_fly(vector<int> q,int w){\n    int sum=0;\n    for (int i=0;i<q.size();i++)\n    {\n        if (q[i]!=q[q.size()-1-i]) return false;\n        sum+=q[i];\n    }\n    if (sum>w) return false;\n    return true;\n}\nint main(){\n\tauto result = will_it_fly(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1,2,3,2,1}, 10", "fn": "will_it_fly", "para": "(vector<int> q,int w)", "pass": true}
{"task_id": "CPP/72", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool will_it_fly(vector<int> q,int w){\n    int sum=0;\n    for (int i=0;i<q.size();i++)\n    {\n        if (q[i]!=q[q.size()-1-i]) return false;\n        sum+=q[i];\n    }\n    if (sum>w) return false;\n    return true;\n}\nint main(){\n\tauto result = will_it_fly(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1,2,3,2,1}, 10", "fn": "will_it_fly", "para": "(vector<int> q,int w)", "pass": true}
{"task_id": "CPP/72", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool will_it_fly(vector<int> q,int w){\n    int sum=0;\n    for (int i=0;i<q.size();i++)\n    {\n        if (q[i]!=q[q.size()-1-i]) return false;\n        sum+=q[i];\n    }\n    if (sum>w) return false;\n    return true;\n}\nint main(){\n\tauto result = will_it_fly(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5}, 10", "fn": "will_it_fly", "para": "(vector<int> q,int w)", "pass": true}
{"task_id": "CPP/72", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool will_it_fly(vector<int> q,int w){\n    int sum=0;\n    for (int i=0;i<q.size();i++)\n    {\n        if (q[i]!=q[q.size()-1-i]) return false;\n        sum+=q[i];\n    }\n    if (sum>w) return false;\n    return true;\n}\nint main(){\n\tauto result = will_it_fly(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5}, 10", "fn": "will_it_fly", "para": "(vector<int> q,int w)", "pass": true}
{"task_id": "CPP/72", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool will_it_fly(vector<int> q,int w){\n    int sum=0;\n    for (int i=0;i<q.size();i++)\n    {\n        if (q[i]!=q[q.size()-1-i]) return false;\n        sum+=q[i];\n    }\n    if (sum>w) return false;\n    return true;\n}\nint main(){\n\tauto result = will_it_fly(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1,2,3,4,5}, 10", "fn": "will_it_fly", "para": "(vector<int> q,int w)", "pass": true}
{"task_id": "CPP/72", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool will_it_fly(vector<int> q,int w){\n    int sum=0;\n    for (int i=0;i<q.size();i++)\n    {\n        if (q[i]!=q[q.size()-1-i]) return false;\n        sum+=q[i];\n    }\n    if (sum>w) return false;\n    return true;\n}\nint main(){\n\tauto result = will_it_fly(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5}, 10", "fn": "will_it_fly", "para": "(vector<int> q,int w)", "pass": true}
{"task_id": "CPP/72", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool will_it_fly(vector<int> q,int w){\n    int sum=0;\n    for (int i=0;i<q.size();i++)\n    {\n        if (q[i]!=q[q.size()-1-i]) return false;\n        sum+=q[i];\n    }\n    if (sum>w) return false;\n    return true;\n}\nint main(){\n\tauto result = will_it_fly(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5}, 10", "fn": "will_it_fly", "para": "(vector<int> q,int w)", "pass": true}
{"task_id": "CPP/73", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint smallest_change(vector<int> arr){\n    int out=0;\n    for (int i=0;i<arr.size()-1-i;i++)\n        if (arr[i]!=arr[arr.size()-1-i])\n            out+=1;\n    return out;\n}\nint main(){\n\tauto result = smallest_change(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 2, 3, 4, 5}", "fn": "smallest_change", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/73", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint smallest_change(vector<int> arr){\n    int out=0;\n    for (int i=0;i<arr.size()-1-i;i++)\n        if (arr[i]!=arr[arr.size()-1-i])\n            out+=1;\n    return out;\n}\nint main(){\n\tauto result = smallest_change(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5}", "fn": "smallest_change", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/73", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint smallest_change(vector<int> arr){\n    int out=0;\n    for (int i=0;i<arr.size()-1-i;i++)\n        if (arr[i]!=arr[arr.size()-1-i])\n            out+=1;\n    return out;\n}\nint main(){\n\tauto result = smallest_change(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5}", "fn": "smallest_change", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/73", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint smallest_change(vector<int> arr){\n    int out=0;\n    for (int i=0;i<arr.size()-1-i;i++)\n        if (arr[i]!=arr[arr.size()-1-i])\n            out+=1;\n    return out;\n}\nint main(){\n\tauto result = smallest_change(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5}", "fn": "smallest_change", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/73", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint smallest_change(vector<int> arr){\n    int out=0;\n    for (int i=0;i<arr.size()-1-i;i++)\n        if (arr[i]!=arr[arr.size()-1-i])\n            out+=1;\n    return out;\n}\nint main(){\n\tauto result = smallest_change(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5}", "fn": "smallest_change", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/73", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint smallest_change(vector<int> arr){\n    int out=0;\n    for (int i=0;i<arr.size()-1-i;i++)\n        if (arr[i]!=arr[arr.size()-1-i])\n            out+=1;\n    return out;\n}\nint main(){\n\tauto result = smallest_change(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5}", "fn": "smallest_change", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/73", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint smallest_change(vector<int> arr){\n    int out=0;\n    for (int i=0;i<arr.size()-1-i;i++)\n        if (arr[i]!=arr[arr.size()-1-i])\n            out+=1;\n    return out;\n}\nint main(){\n\tauto result = smallest_change(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 2, 3, 4}", "fn": "smallest_change", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/73", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint smallest_change(vector<int> arr){\n    int out=0;\n    for (int i=0;i<arr.size()-1-i;i++)\n        if (arr[i]!=arr[arr.size()-1-i])\n            out+=1;\n    return out;\n}\nint main(){\n\tauto result = smallest_change(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 2, 3, 4, 5}", "fn": "smallest_change", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/73", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint smallest_change(vector<int> arr){\n    int out=0;\n    for (int i=0;i<arr.size()-1-i;i++)\n        if (arr[i]!=arr[arr.size()-1-i])\n            out+=1;\n    return out;\n}\nint main(){\n\tauto result = smallest_change(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 2, 3, 4}", "fn": "smallest_change", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/73", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint smallest_change(vector<int> arr){\n    int out=0;\n    for (int i=0;i<arr.size()-1-i;i++)\n        if (arr[i]!=arr[arr.size()-1-i])\n            out+=1;\n    return out;\n}\nint main(){\n\tauto result = smallest_change(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5}", "fn": "smallest_change", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/73", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint smallest_change(vector<int> arr){\n    int out=0;\n    for (int i=0;i<arr.size()-1-i;i++)\n        if (arr[i]!=arr[arr.size()-1-i])\n            out+=1;\n    return out;\n}\nint main(){\n\tauto result = smallest_change(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 1, 1, 1, 1}", "fn": "smallest_change", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/73", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint smallest_change(vector<int> arr){\n    int out=0;\n    for (int i=0;i<arr.size()-1-i;i++)\n        if (arr[i]!=arr[arr.size()-1-i])\n            out+=1;\n    return out;\n}\nint main(){\n\tauto result = smallest_change(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 1, 1, 1, 1}", "fn": "smallest_change", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/73", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint smallest_change(vector<int> arr){\n    int out=0;\n    for (int i=0;i<arr.size()-1-i;i++)\n        if (arr[i]!=arr[arr.size()-1-i])\n            out+=1;\n    return out;\n}\nint main(){\n\tauto result = smallest_change(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 1, 1, 1, 1}", "fn": "smallest_change", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/73", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint smallest_change(vector<int> arr){\n    int out=0;\n    for (int i=0;i<arr.size()-1-i;i++)\n        if (arr[i]!=arr[arr.size()-1-i])\n            out+=1;\n    return out;\n}\nint main(){\n\tauto result = smallest_change(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 1, 1, 1, 1}", "fn": "smallest_change", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/73", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint smallest_change(vector<int> arr){\n    int out=0;\n    for (int i=0;i<arr.size()-1-i;i++)\n        if (arr[i]!=arr[arr.size()-1-i])\n            out+=1;\n    return out;\n}\nint main(){\n\tauto result = smallest_change(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 1, 1, 1, 1}", "fn": "smallest_change", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/74", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n    int num1,num2,i;\n    num1=0;num2=0;\n    for (i=0;i<lst1.size();i++)\n        num1+=lst1[i].length();\n    for (i=0;i<lst2.size();i++)\n        num2+=lst2[i].length();\n    if (num1>num2) return lst2;\n    return lst1;\n}\nint main(){\n\tauto result = total_match(<FILL_ME>);\n\tassert(issame(result,{\"hi\",\"hi\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"hello\", \"world\", \"hi\"}, {\"bye\", \"hi\"}", "fn": "total_match", "para": "(vector<string> lst1,vector<string> lst2)", "pass": false}
{"task_id": "CPP/74", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n    int num1,num2,i;\n    num1=0;num2=0;\n    for (i=0;i<lst1.size();i++)\n        num1+=lst1[i].length();\n    for (i=0;i<lst2.size();i++)\n        num2+=lst2[i].length();\n    if (num1>num2) return lst2;\n    return lst1;\n}\nint main(){\n\tauto result = total_match(<FILL_ME>);\n\tassert(issame(result,{\"hi\",\"hi\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"hello\",\"world\"},{\"hi\",\"hi\"}", "fn": "total_match", "para": "(vector<string> lst1,vector<string> lst2)", "pass": true}
{"task_id": "CPP/74", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n    int num1,num2,i;\n    num1=0;num2=0;\n    for (i=0;i<lst1.size();i++)\n        num1+=lst1[i].length();\n    for (i=0;i<lst2.size();i++)\n        num2+=lst2[i].length();\n    if (num1>num2) return lst2;\n    return lst1;\n}\nint main(){\n\tauto result = total_match(<FILL_ME>);\n\tassert(issame(result,{\"hi\",\"hi\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"hello\", \"world\", \"hi\"}, {\"bye\", \"hi\"}", "fn": "total_match", "para": "(vector<string> lst1,vector<string> lst2)", "pass": false}
{"task_id": "CPP/74", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n    int num1,num2,i;\n    num1=0;num2=0;\n    for (i=0;i<lst1.size();i++)\n        num1+=lst1[i].length();\n    for (i=0;i<lst2.size();i++)\n        num2+=lst2[i].length();\n    if (num1>num2) return lst2;\n    return lst1;\n}\nint main(){\n\tauto result = total_match(<FILL_ME>);\n\tassert(issame(result,{\"hi\",\"hi\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"hello\", \"world\", \"hi\"}, {\"bye\", \"hi\"}", "fn": "total_match", "para": "(vector<string> lst1,vector<string> lst2)", "pass": false}
{"task_id": "CPP/74", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n    int num1,num2,i;\n    num1=0;num2=0;\n    for (i=0;i<lst1.size();i++)\n        num1+=lst1[i].length();\n    for (i=0;i<lst2.size();i++)\n        num2+=lst2[i].length();\n    if (num1>num2) return lst2;\n    return lst1;\n}\nint main(){\n\tauto result = total_match(<FILL_ME>);\n\tassert(issame(result,{\"hi\",\"hi\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"hello\", \"world\", \"hi\"}, {\"bye\", \"hi\"}", "fn": "total_match", "para": "(vector<string> lst1,vector<string> lst2)", "pass": false}
{"task_id": "CPP/74", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n    int num1,num2,i;\n    num1=0;num2=0;\n    for (i=0;i<lst1.size();i++)\n        num1+=lst1[i].length();\n    for (i=0;i<lst2.size();i++)\n        num2+=lst2[i].length();\n    if (num1>num2) return lst2;\n    return lst1;\n}\nint main(){\n\tauto result = total_match(<FILL_ME>);\n\tassert(issame(result,{\"4\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<string>{\"1\", \"2\", \"3\"}, vector<string>{\"4\"}", "fn": "total_match", "para": "(vector<string> lst1,vector<string> lst2)", "pass": true}
{"task_id": "CPP/74", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n    int num1,num2,i;\n    num1=0;num2=0;\n    for (i=0;i<lst1.size();i++)\n        num1+=lst1[i].length();\n    for (i=0;i<lst2.size();i++)\n        num2+=lst2[i].length();\n    if (num1>num2) return lst2;\n    return lst1;\n}\nint main(){\n\tauto result = total_match(<FILL_ME>);\n\tassert(issame(result,{\"4\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<string>{\"Hello\",\"World\"}, vector<string>{\"4\"}", "fn": "total_match", "para": "(vector<string> lst1,vector<string> lst2)", "pass": true}
{"task_id": "CPP/74", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n    int num1,num2,i;\n    num1=0;num2=0;\n    for (i=0;i<lst1.size();i++)\n        num1+=lst1[i].length();\n    for (i=0;i<lst2.size();i++)\n        num2+=lst2[i].length();\n    if (num1>num2) return lst2;\n    return lst1;\n}\nint main(){\n\tauto result = total_match(<FILL_ME>);\n\tassert(issame(result,{\"4\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"1\",\"2\",\"3\"},{\"4\"}", "fn": "total_match", "para": "(vector<string> lst1,vector<string> lst2)", "pass": true}
{"task_id": "CPP/74", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n    int num1,num2,i;\n    num1=0;num2=0;\n    for (i=0;i<lst1.size();i++)\n        num1+=lst1[i].length();\n    for (i=0;i<lst2.size();i++)\n        num2+=lst2[i].length();\n    if (num1>num2) return lst2;\n    return lst1;\n}\nint main(){\n\tauto result = total_match(<FILL_ME>);\n\tassert(issame(result,{\"4\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"1\",\"2\",\"3\"},{\"4\"}", "fn": "total_match", "para": "(vector<string> lst1,vector<string> lst2)", "pass": true}
{"task_id": "CPP/74", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n    int num1,num2,i;\n    num1=0;num2=0;\n    for (i=0;i<lst1.size();i++)\n        num1+=lst1[i].length();\n    for (i=0;i<lst2.size();i++)\n        num2+=lst2[i].length();\n    if (num1>num2) return lst2;\n    return lst1;\n}\nint main(){\n\tauto result = total_match(<FILL_ME>);\n\tassert(issame(result,{\"4\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"Hello\",\"World\"}, {\"4\"}", "fn": "total_match", "para": "(vector<string> lst1,vector<string> lst2)", "pass": true}
{"task_id": "CPP/74", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n    int num1,num2,i;\n    num1=0;num2=0;\n    for (i=0;i<lst1.size();i++)\n        num1+=lst1[i].length();\n    for (i=0;i<lst2.size();i++)\n        num2+=lst2[i].length();\n    if (num1>num2) return lst2;\n    return lst1;\n}\nint main(){\n\tauto result = total_match(<FILL_ME>);\n\tassert(issame(result,{\"hI\",\"hi\",\"hi\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"hello\",\"world\"},{\"hI\",\"hi\",\"hi\"}", "fn": "total_match", "para": "(vector<string> lst1,vector<string> lst2)", "pass": true}
{"task_id": "CPP/74", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n    int num1,num2,i;\n    num1=0;num2=0;\n    for (i=0;i<lst1.size();i++)\n        num1+=lst1[i].length();\n    for (i=0;i<lst2.size();i++)\n        num2+=lst2[i].length();\n    if (num1>num2) return lst2;\n    return lst1;\n}\nint main(){\n\tauto result = total_match(<FILL_ME>);\n\tassert(issame(result,{\"hI\",\"hi\",\"hi\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"hello\",\"world\"},{\"hI\",\"hi\",\"hi\"}", "fn": "total_match", "para": "(vector<string> lst1,vector<string> lst2)", "pass": true}
{"task_id": "CPP/74", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n    int num1,num2,i;\n    num1=0;num2=0;\n    for (i=0;i<lst1.size();i++)\n        num1+=lst1[i].length();\n    for (i=0;i<lst2.size();i++)\n        num2+=lst2[i].length();\n    if (num1>num2) return lst2;\n    return lst1;\n}\nint main(){\n\tauto result = total_match(<FILL_ME>);\n\tassert(issame(result,{\"hI\",\"hi\",\"hi\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"hello\",\"world\"},{\"hI\",\"hi\",\"hi\"}", "fn": "total_match", "para": "(vector<string> lst1,vector<string> lst2)", "pass": true}
{"task_id": "CPP/74", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n    int num1,num2,i;\n    num1=0;num2=0;\n    for (i=0;i<lst1.size();i++)\n        num1+=lst1[i].length();\n    for (i=0;i<lst2.size();i++)\n        num2+=lst2[i].length();\n    if (num1>num2) return lst2;\n    return lst1;\n}\nint main(){\n\tauto result = total_match(<FILL_ME>);\n\tassert(issame(result,{\"hI\",\"hi\",\"hi\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"hello\",\"world\"},{\"hI\",\"hi\",\"hi\"}", "fn": "total_match", "para": "(vector<string> lst1,vector<string> lst2)", "pass": true}
{"task_id": "CPP/74", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n    int num1,num2,i;\n    num1=0;num2=0;\n    for (i=0;i<lst1.size();i++)\n        num1+=lst1[i].length();\n    for (i=0;i<lst2.size();i++)\n        num2+=lst2[i].length();\n    if (num1>num2) return lst2;\n    return lst1;\n}\nint main(){\n\tauto result = total_match(<FILL_ME>);\n\tassert(issame(result,{\"hI\",\"hi\",\"hi\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"hello\",\"world\"},{\"hI\",\"hi\",\"hi\"}", "fn": "total_match", "para": "(vector<string> lst1,vector<string> lst2)", "pass": true}
{"task_id": "CPP/74", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n    int num1,num2,i;\n    num1=0;num2=0;\n    for (i=0;i<lst1.size();i++)\n        num1+=lst1[i].length();\n    for (i=0;i<lst2.size();i++)\n        num2+=lst2[i].length();\n    if (num1>num2) return lst2;\n    return lst1;\n}\nint main(){\n\tauto result = total_match(<FILL_ME>);\n\tassert(issame(result,{\"hI\",\"Hi\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"hello\",\"world\"},{\"hI\",\"Hi\"}", "fn": "total_match", "para": "(vector<string> lst1,vector<string> lst2)", "pass": true}
{"task_id": "CPP/74", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n    int num1,num2,i;\n    num1=0;num2=0;\n    for (i=0;i<lst1.size();i++)\n        num1+=lst1[i].length();\n    for (i=0;i<lst2.size();i++)\n        num2+=lst2[i].length();\n    if (num1>num2) return lst2;\n    return lst1;\n}\nint main(){\n\tauto result = total_match(<FILL_ME>);\n\tassert(issame(result,{\"hI\",\"Hi\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"hello\",\"world\"},{\"hI\",\"Hi\"}", "fn": "total_match", "para": "(vector<string> lst1,vector<string> lst2)", "pass": true}
{"task_id": "CPP/74", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n    int num1,num2,i;\n    num1=0;num2=0;\n    for (i=0;i<lst1.size();i++)\n        num1+=lst1[i].length();\n    for (i=0;i<lst2.size();i++)\n        num2+=lst2[i].length();\n    if (num1>num2) return lst2;\n    return lst1;\n}\nint main(){\n\tauto result = total_match(<FILL_ME>);\n\tassert(issame(result,{\"hI\",\"Hi\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"hello\",\"world\"},{\"hI\",\"Hi\"}", "fn": "total_match", "para": "(vector<string> lst1,vector<string> lst2)", "pass": true}
{"task_id": "CPP/74", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n    int num1,num2,i;\n    num1=0;num2=0;\n    for (i=0;i<lst1.size();i++)\n        num1+=lst1[i].length();\n    for (i=0;i<lst2.size();i++)\n        num2+=lst2[i].length();\n    if (num1>num2) return lst2;\n    return lst1;\n}\nint main(){\n\tauto result = total_match(<FILL_ME>);\n\tassert(issame(result,{\"hI\",\"Hi\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"hello\",\"world\"},{\"hI\",\"Hi\"}", "fn": "total_match", "para": "(vector<string> lst1,vector<string> lst2)", "pass": true}
{"task_id": "CPP/74", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n    int num1,num2,i;\n    num1=0;num2=0;\n    for (i=0;i<lst1.size();i++)\n        num1+=lst1[i].length();\n    for (i=0;i<lst2.size();i++)\n        num2+=lst2[i].length();\n    if (num1>num2) return lst2;\n    return lst1;\n}\nint main(){\n\tauto result = total_match(<FILL_ME>);\n\tassert(issame(result,{\"hI\",\"Hi\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"hello\",\"world\"},{\"hI\",\"Hi\"}", "fn": "total_match", "para": "(vector<string> lst1,vector<string> lst2)", "pass": true}
{"task_id": "CPP/74", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n    int num1,num2,i;\n    num1=0;num2=0;\n    for (i=0;i<lst1.size();i++)\n        num1+=lst1[i].length();\n    for (i=0;i<lst2.size();i++)\n        num2+=lst2[i].length();\n    if (num1>num2) return lst2;\n    return lst1;\n}\nint main(){\n\tauto result = total_match(<FILL_ME>);\n\tassert(issame(result,{\"hi\",\"admin\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"hello\", \"world\", \"how\", \"are\", \"you\"}, {\"hi\", \"admin\"}", "fn": "total_match", "para": "(vector<string> lst1,vector<string> lst2)", "pass": true}
{"task_id": "CPP/74", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n    int num1,num2,i;\n    num1=0;num2=0;\n    for (i=0;i<lst1.size();i++)\n        num1+=lst1[i].length();\n    for (i=0;i<lst2.size();i++)\n        num2+=lst2[i].length();\n    if (num1>num2) return lst2;\n    return lst1;\n}\nint main(){\n\tauto result = total_match(<FILL_ME>);\n\tassert(issame(result,{\"hi\",\"admin\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"hello\", \"world\", \"how\", \"are\", \"you\"}, {\"hi\", \"admin\"}", "fn": "total_match", "para": "(vector<string> lst1,vector<string> lst2)", "pass": true}
{"task_id": "CPP/74", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n    int num1,num2,i;\n    num1=0;num2=0;\n    for (i=0;i<lst1.size();i++)\n        num1+=lst1[i].length();\n    for (i=0;i<lst2.size();i++)\n        num2+=lst2[i].length();\n    if (num1>num2) return lst2;\n    return lst1;\n}\nint main(){\n\tauto result = total_match(<FILL_ME>);\n\tassert(issame(result,{\"hi\",\"admin\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"hello\", \"world\", \"how\", \"are\", \"you\"}, {\"hi\", \"admin\"}", "fn": "total_match", "para": "(vector<string> lst1,vector<string> lst2)", "pass": true}
{"task_id": "CPP/74", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n    int num1,num2,i;\n    num1=0;num2=0;\n    for (i=0;i<lst1.size();i++)\n        num1+=lst1[i].length();\n    for (i=0;i<lst2.size();i++)\n        num2+=lst2[i].length();\n    if (num1>num2) return lst2;\n    return lst1;\n}\nint main(){\n\tauto result = total_match(<FILL_ME>);\n\tassert(issame(result,{\"hi\",\"admin\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"hello\", \"world\", \"how\", \"are\", \"you\"}, {\"hi\", \"admin\"}", "fn": "total_match", "para": "(vector<string> lst1,vector<string> lst2)", "pass": true}
{"task_id": "CPP/74", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n    int num1,num2,i;\n    num1=0;num2=0;\n    for (i=0;i<lst1.size();i++)\n        num1+=lst1[i].length();\n    for (i=0;i<lst2.size();i++)\n        num2+=lst2[i].length();\n    if (num1>num2) return lst2;\n    return lst1;\n}\nint main(){\n\tauto result = total_match(<FILL_ME>);\n\tassert(issame(result,{\"hi\",\"admin\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"hello\", \"world\", \"how\", \"are\", \"you\"}, {\"hi\", \"admin\"}", "fn": "total_match", "para": "(vector<string> lst1,vector<string> lst2)", "pass": true}
{"task_id": "CPP/74", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n    int num1,num2,i;\n    num1=0;num2=0;\n    for (i=0;i<lst1.size();i++)\n        num1+=lst1[i].length();\n    for (i=0;i<lst2.size();i++)\n        num2+=lst2[i].length();\n    if (num1>num2) return lst2;\n    return lst1;\n}\nint main(){\n\tauto result = total_match(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"apple\", \"banana\"}, {\"cherry\", \"date\"}", "fn": "total_match", "para": "(vector<string> lst1,vector<string> lst2)", "pass": false}
{"task_id": "CPP/74", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n    int num1,num2,i;\n    num1=0;num2=0;\n    for (i=0;i<lst1.size();i++)\n        num1+=lst1[i].length();\n    for (i=0;i<lst2.size();i++)\n        num2+=lst2[i].length();\n    if (num1>num2) return lst2;\n    return lst1;\n}\nint main(){\n\tauto result = total_match(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"apple\",\"banana\"}, {\"cherry\",\"date\"}", "fn": "total_match", "para": "(vector<string> lst1,vector<string> lst2)", "pass": false}
{"task_id": "CPP/74", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n    int num1,num2,i;\n    num1=0;num2=0;\n    for (i=0;i<lst1.size();i++)\n        num1+=lst1[i].length();\n    for (i=0;i<lst2.size();i++)\n        num2+=lst2[i].length();\n    if (num1>num2) return lst2;\n    return lst1;\n}\nint main(){\n\tauto result = total_match(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"apple\",\"banana\"}, {\"cherry\",\"date\"}", "fn": "total_match", "para": "(vector<string> lst1,vector<string> lst2)", "pass": false}
{"task_id": "CPP/74", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n    int num1,num2,i;\n    num1=0;num2=0;\n    for (i=0;i<lst1.size();i++)\n        num1+=lst1[i].length();\n    for (i=0;i<lst2.size();i++)\n        num2+=lst2[i].length();\n    if (num1>num2) return lst2;\n    return lst1;\n}\nint main(){\n\tauto result = total_match(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"apple\",\"banana\"},{\"cherry\",\"date\"}", "fn": "total_match", "para": "(vector<string> lst1,vector<string> lst2)", "pass": false}
{"task_id": "CPP/74", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n    int num1,num2,i;\n    num1=0;num2=0;\n    for (i=0;i<lst1.size();i++)\n        num1+=lst1[i].length();\n    for (i=0;i<lst2.size();i++)\n        num2+=lst2[i].length();\n    if (num1>num2) return lst2;\n    return lst1;\n}\nint main(){\n\tauto result = total_match(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<string>{\"apple\",\"banana\"},vector<string>{\"cherry\",\"date\"}", "fn": "total_match", "para": "(vector<string> lst1,vector<string> lst2)", "pass": false}
{"task_id": "CPP/75", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_multiply_prime(int a){\n    int num=0;\n    for (int i=2;i*i<=a;i++)\n    while (a%i==0 and a>i)\n    {\n        a=a/i;\n        num+=1;\n    }\n    if (num==2) return true;\n    return false; \n}\nint main(){\n\tauto result = is_multiply_prime(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "6", "fn": "is_multiply_prime", "para": "(int a)", "pass": false}
{"task_id": "CPP/75", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_multiply_prime(int a){\n    int num=0;\n    for (int i=2;i*i<=a;i++)\n    while (a%i==0 and a>i)\n    {\n        a=a/i;\n        num+=1;\n    }\n    if (num==2) return true;\n    return false; \n}\nint main(){\n\tauto result = is_multiply_prime(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "13", "fn": "is_multiply_prime", "para": "(int a)", "pass": false}
{"task_id": "CPP/75", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_multiply_prime(int a){\n    int num=0;\n    for (int i=2;i*i<=a;i++)\n    while (a%i==0 and a>i)\n    {\n        a=a/i;\n        num+=1;\n    }\n    if (num==2) return true;\n    return false; \n}\nint main(){\n\tauto result = is_multiply_prime(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "13", "fn": "is_multiply_prime", "para": "(int a)", "pass": false}
{"task_id": "CPP/75", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_multiply_prime(int a){\n    int num=0;\n    for (int i=2;i*i<=a;i++)\n    while (a%i==0 and a>i)\n    {\n        a=a/i;\n        num+=1;\n    }\n    if (num==2) return true;\n    return false; \n}\nint main(){\n\tauto result = is_multiply_prime(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "11", "fn": "is_multiply_prime", "para": "(int a)", "pass": false}
{"task_id": "CPP/75", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_multiply_prime(int a){\n    int num=0;\n    for (int i=2;i*i<=a;i++)\n    while (a%i==0 and a>i)\n    {\n        a=a/i;\n        num+=1;\n    }\n    if (num==2) return true;\n    return false; \n}\nint main(){\n\tauto result = is_multiply_prime(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "13", "fn": "is_multiply_prime", "para": "(int a)", "pass": false}
{"task_id": "CPP/75", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_multiply_prime(int a){\n    int num=0;\n    for (int i=2;i*i<=a;i++)\n    while (a%i==0 and a>i)\n    {\n        a=a/i;\n        num+=1;\n    }\n    if (num==2) return true;\n    return false; \n}\nint main(){\n\tauto result = is_multiply_prime(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "6", "fn": "is_multiply_prime", "para": "(int a)", "pass": true}
{"task_id": "CPP/75", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_multiply_prime(int a){\n    int num=0;\n    for (int i=2;i*i<=a;i++)\n    while (a%i==0 and a>i)\n    {\n        a=a/i;\n        num+=1;\n    }\n    if (num==2) return true;\n    return false; \n}\nint main(){\n\tauto result = is_multiply_prime(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "6", "fn": "is_multiply_prime", "para": "(int a)", "pass": true}
{"task_id": "CPP/75", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_multiply_prime(int a){\n    int num=0;\n    for (int i=2;i*i<=a;i++)\n    while (a%i==0 and a>i)\n    {\n        a=a/i;\n        num+=1;\n    }\n    if (num==2) return true;\n    return false; \n}\nint main(){\n\tauto result = is_multiply_prime(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "6", "fn": "is_multiply_prime", "para": "(int a)", "pass": true}
{"task_id": "CPP/75", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_multiply_prime(int a){\n    int num=0;\n    for (int i=2;i*i<=a;i++)\n    while (a%i==0 and a>i)\n    {\n        a=a/i;\n        num+=1;\n    }\n    if (num==2) return true;\n    return false; \n}\nint main(){\n\tauto result = is_multiply_prime(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "6", "fn": "is_multiply_prime", "para": "(int a)", "pass": true}
{"task_id": "CPP/75", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_multiply_prime(int a){\n    int num=0;\n    for (int i=2;i*i<=a;i++)\n    while (a%i==0 and a>i)\n    {\n        a=a/i;\n        num+=1;\n    }\n    if (num==2) return true;\n    return false; \n}\nint main(){\n\tauto result = is_multiply_prime(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "6", "fn": "is_multiply_prime", "para": "(int a)", "pass": true}
{"task_id": "CPP/76", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_simple_power(int x,int n){\n    int p=1,count=0;\n    while (p<=x and count<100)\n    {\n        if (p==x) return true;\n        p=p*n;count+=1;\n    }\n    return false;\n}\nint main(){\n\tauto result = is_simple_power(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "64, 2", "fn": "is_simple_power", "para": "(int x,int n)", "pass": true}
{"task_id": "CPP/76", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_simple_power(int x,int n){\n    int p=1,count=0;\n    while (p<=x and count<100)\n    {\n        if (p==x) return true;\n        p=p*n;count+=1;\n    }\n    return false;\n}\nint main(){\n\tauto result = is_simple_power(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "64, 2", "fn": "is_simple_power", "para": "(int x,int n)", "pass": true}
{"task_id": "CPP/76", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_simple_power(int x,int n){\n    int p=1,count=0;\n    while (p<=x and count<100)\n    {\n        if (p==x) return true;\n        p=p*n;count+=1;\n    }\n    return false;\n}\nint main(){\n\tauto result = is_simple_power(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "64, 2", "fn": "is_simple_power", "para": "(int x,int n)", "pass": true}
{"task_id": "CPP/76", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_simple_power(int x,int n){\n    int p=1,count=0;\n    while (p<=x and count<100)\n    {\n        if (p==x) return true;\n        p=p*n;count+=1;\n    }\n    return false;\n}\nint main(){\n\tauto result = is_simple_power(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "64, 2", "fn": "is_simple_power", "para": "(int x,int n)", "pass": true}
{"task_id": "CPP/76", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_simple_power(int x,int n){\n    int p=1,count=0;\n    while (p<=x and count<100)\n    {\n        if (p==x) return true;\n        p=p*n;count+=1;\n    }\n    return false;\n}\nint main(){\n\tauto result = is_simple_power(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "64, 2", "fn": "is_simple_power", "para": "(int x,int n)", "pass": true}
{"task_id": "CPP/76", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_simple_power(int x,int n){\n    int p=1,count=0;\n    while (p<=x and count<100)\n    {\n        if (p==x) return true;\n        p=p*n;count+=1;\n    }\n    return false;\n}\nint main(){\n\tauto result = is_simple_power(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10,2", "fn": "is_simple_power", "para": "(int x,int n)", "pass": true}
{"task_id": "CPP/76", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_simple_power(int x,int n){\n    int p=1,count=0;\n    while (p<=x and count<100)\n    {\n        if (p==x) return true;\n        p=p*n;count+=1;\n    }\n    return false;\n}\nint main(){\n\tauto result = is_simple_power(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10,2", "fn": "is_simple_power", "para": "(int x,int n)", "pass": true}
{"task_id": "CPP/76", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_simple_power(int x,int n){\n    int p=1,count=0;\n    while (p<=x and count<100)\n    {\n        if (p==x) return true;\n        p=p*n;count+=1;\n    }\n    return false;\n}\nint main(){\n\tauto result = is_simple_power(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10, 2", "fn": "is_simple_power", "para": "(int x,int n)", "pass": true}
{"task_id": "CPP/76", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_simple_power(int x,int n){\n    int p=1,count=0;\n    while (p<=x and count<100)\n    {\n        if (p==x) return true;\n        p=p*n;count+=1;\n    }\n    return false;\n}\nint main(){\n\tauto result = is_simple_power(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10,2", "fn": "is_simple_power", "para": "(int x,int n)", "pass": true}
{"task_id": "CPP/76", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_simple_power(int x,int n){\n    int p=1,count=0;\n    while (p<=x and count<100)\n    {\n        if (p==x) return true;\n        p=p*n;count+=1;\n    }\n    return false;\n}\nint main(){\n\tauto result = is_simple_power(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10,2", "fn": "is_simple_power", "para": "(int x,int n)", "pass": true}
{"task_id": "CPP/77", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool iscuber(int a){\n    for (int i=0;i*i*i<=abs(a);i++)\n        if (i*i*i==abs(a)) return true;\n    return false;\n}\nint main(){\n\tauto result = iscuber(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "-8", "fn": "iscuber", "para": "(int a)", "pass": true}
{"task_id": "CPP/77", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool iscuber(int a){\n    for (int i=0;i*i*i<=abs(a);i++)\n        if (i*i*i==abs(a)) return true;\n    return false;\n}\nint main(){\n\tauto result = iscuber(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "-64", "fn": "iscuber", "para": "(int a)", "pass": true}
{"task_id": "CPP/77", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool iscuber(int a){\n    for (int i=0;i*i*i<=abs(a);i++)\n        if (i*i*i==abs(a)) return true;\n    return false;\n}\nint main(){\n\tauto result = iscuber(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "-8", "fn": "iscuber", "para": "(int a)", "pass": true}
{"task_id": "CPP/77", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool iscuber(int a){\n    for (int i=0;i*i*i<=abs(a);i++)\n        if (i*i*i==abs(a)) return true;\n    return false;\n}\nint main(){\n\tauto result = iscuber(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "-8", "fn": "iscuber", "para": "(int a)", "pass": true}
{"task_id": "CPP/77", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool iscuber(int a){\n    for (int i=0;i*i*i<=abs(a);i++)\n        if (i*i*i==abs(a)) return true;\n    return false;\n}\nint main(){\n\tauto result = iscuber(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "-8", "fn": "iscuber", "para": "(int a)", "pass": true}
{"task_id": "CPP/77", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool iscuber(int a){\n    for (int i=0;i*i*i<=abs(a);i++)\n        if (i*i*i==abs(a)) return true;\n    return false;\n}\nint main(){\n\tauto result = iscuber(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "-10", "fn": "iscuber", "para": "(int a)", "pass": true}
{"task_id": "CPP/77", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool iscuber(int a){\n    for (int i=0;i*i*i<=abs(a);i++)\n        if (i*i*i==abs(a)) return true;\n    return false;\n}\nint main(){\n\tauto result = iscuber(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "-10", "fn": "iscuber", "para": "(int a)", "pass": true}
{"task_id": "CPP/77", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool iscuber(int a){\n    for (int i=0;i*i*i<=abs(a);i++)\n        if (i*i*i==abs(a)) return true;\n    return false;\n}\nint main(){\n\tauto result = iscuber(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "-10", "fn": "iscuber", "para": "(int a)", "pass": true}
{"task_id": "CPP/77", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool iscuber(int a){\n    for (int i=0;i*i*i<=abs(a);i++)\n        if (i*i*i==abs(a)) return true;\n    return false;\n}\nint main(){\n\tauto result = iscuber(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "-10", "fn": "iscuber", "para": "(int a)", "pass": true}
{"task_id": "CPP/77", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool iscuber(int a){\n    for (int i=0;i*i*i<=abs(a);i++)\n        if (i*i*i==abs(a)) return true;\n    return false;\n}\nint main(){\n\tauto result = iscuber(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "-10", "fn": "iscuber", "para": "(int a)", "pass": true}
{"task_id": "CPP/78", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n    string key=\"2357BD\";\n    int out=0;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}\nint main(){\n\tauto result = hex_key(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"2\"", "fn": "hex_key", "para": "(string num)", "pass": true}
{"task_id": "CPP/78", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n    string key=\"2357BD\";\n    int out=0;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}\nint main(){\n\tauto result = hex_key(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"2\"", "fn": "hex_key", "para": "(string num)", "pass": true}
{"task_id": "CPP/78", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n    string key=\"2357BD\";\n    int out=0;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}\nint main(){\n\tauto result = hex_key(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"2\"", "fn": "hex_key", "para": "(string num)", "pass": true}
{"task_id": "CPP/78", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n    string key=\"2357BD\";\n    int out=0;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}\nint main(){\n\tauto result = hex_key(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"2\"", "fn": "hex_key", "para": "(string num)", "pass": true}
{"task_id": "CPP/78", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n    string key=\"2357BD\";\n    int out=0;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}\nint main(){\n\tauto result = hex_key(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"2\"", "fn": "hex_key", "para": "(string num)", "pass": true}
{"task_id": "CPP/78", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n    string key=\"2357BD\";\n    int out=0;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}\nint main(){\n\tauto result = hex_key(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"7B9A\"", "fn": "hex_key", "para": "(string num)", "pass": true}
{"task_id": "CPP/78", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n    string key=\"2357BD\";\n    int out=0;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}\nint main(){\n\tauto result = hex_key(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"7B9A\"", "fn": "hex_key", "para": "(string num)", "pass": true}
{"task_id": "CPP/78", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n    string key=\"2357BD\";\n    int out=0;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}\nint main(){\n\tauto result = hex_key(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"7B9A\"", "fn": "hex_key", "para": "(string num)", "pass": true}
{"task_id": "CPP/78", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n    string key=\"2357BD\";\n    int out=0;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}\nint main(){\n\tauto result = hex_key(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"7B9A\"", "fn": "hex_key", "para": "(string num)", "pass": true}
{"task_id": "CPP/78", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n    string key=\"2357BD\";\n    int out=0;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}\nint main(){\n\tauto result = hex_key(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"7B9A\"", "fn": "hex_key", "para": "(string num)", "pass": true}
{"task_id": "CPP/78", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n    string key=\"2357BD\";\n    int out=0;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}\nint main(){\n\tauto result = hex_key(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"2B57\"", "fn": "hex_key", "para": "(string num)", "pass": true}
{"task_id": "CPP/78", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n    string key=\"2357BD\";\n    int out=0;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}\nint main(){\n\tauto result = hex_key(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"2B57\"", "fn": "hex_key", "para": "(string num)", "pass": true}
{"task_id": "CPP/78", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n    string key=\"2357BD\";\n    int out=0;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}\nint main(){\n\tauto result = hex_key(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"2B57\"", "fn": "hex_key", "para": "(string num)", "pass": true}
{"task_id": "CPP/78", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n    string key=\"2357BD\";\n    int out=0;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}\nint main(){\n\tauto result = hex_key(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"2B57\"", "fn": "hex_key", "para": "(string num)", "pass": true}
{"task_id": "CPP/78", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n    string key=\"2357BD\";\n    int out=0;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}\nint main(){\n\tauto result = hex_key(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"2B57\"", "fn": "hex_key", "para": "(string num)", "pass": true}
{"task_id": "CPP/78", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n    string key=\"2357BD\";\n    int out=0;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}\nint main(){\n\tauto result = hex_key(<FILL_ME>);\n\tassert(result==6);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"2357BD\"", "fn": "hex_key", "para": "(string num)", "pass": true}
{"task_id": "CPP/78", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n    string key=\"2357BD\";\n    int out=0;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}\nint main(){\n\tauto result = hex_key(<FILL_ME>);\n\tassert(result==6);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"2357BD\"", "fn": "hex_key", "para": "(string num)", "pass": true}
{"task_id": "CPP/78", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n    string key=\"2357BD\";\n    int out=0;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}\nint main(){\n\tauto result = hex_key(<FILL_ME>);\n\tassert(result==6);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"2357BD\"", "fn": "hex_key", "para": "(string num)", "pass": true}
{"task_id": "CPP/78", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n    string key=\"2357BD\";\n    int out=0;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}\nint main(){\n\tauto result = hex_key(<FILL_ME>);\n\tassert(result==6);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"2357BD\"", "fn": "hex_key", "para": "(string num)", "pass": true}
{"task_id": "CPP/78", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n    string key=\"2357BD\";\n    int out=0;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}\nint main(){\n\tauto result = hex_key(<FILL_ME>);\n\tassert(result==6);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"2357BD\"", "fn": "hex_key", "para": "(string num)", "pass": true}
{"task_id": "CPP/78", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n    string key=\"2357BD\";\n    int out=0;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}\nint main(){\n\tauto result = hex_key(<FILL_ME>);\n\tassert(result==12);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"2357BD2357BD\"", "fn": "hex_key", "para": "(string num)", "pass": true}
{"task_id": "CPP/78", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n    string key=\"2357BD\";\n    int out=0;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}\nint main(){\n\tauto result = hex_key(<FILL_ME>);\n\tassert(result==12);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"2357BD2357BD\"", "fn": "hex_key", "para": "(string num)", "pass": true}
{"task_id": "CPP/78", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n    string key=\"2357BD\";\n    int out=0;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}\nint main(){\n\tauto result = hex_key(<FILL_ME>);\n\tassert(result==12);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"2357BD2357BD\"", "fn": "hex_key", "para": "(string num)", "pass": true}
{"task_id": "CPP/78", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n    string key=\"2357BD\";\n    int out=0;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}\nint main(){\n\tauto result = hex_key(<FILL_ME>);\n\tassert(result==12);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"57D2357BD\"", "fn": "hex_key", "para": "(string num)", "pass": false}
{"task_id": "CPP/78", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n    string key=\"2357BD\";\n    int out=0;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}\nint main(){\n\tauto result = hex_key(<FILL_ME>);\n\tassert(result==12);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"2357BD2357BD\"", "fn": "hex_key", "para": "(string num)", "pass": true}
{"task_id": "CPP/78", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n    string key=\"2357BD\";\n    int out=0;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}\nint main(){\n\tauto result = hex_key(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"XYZ\"", "fn": "hex_key", "para": "(string num)", "pass": true}
{"task_id": "CPP/78", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n    string key=\"2357BD\";\n    int out=0;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}\nint main(){\n\tauto result = hex_key(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"ABCDEF\"", "fn": "hex_key", "para": "(string num)", "pass": false}
{"task_id": "CPP/78", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n    string key=\"2357BD\";\n    int out=0;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}\nint main(){\n\tauto result = hex_key(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"XYZ\"", "fn": "hex_key", "para": "(string num)", "pass": true}
{"task_id": "CPP/78", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n    string key=\"2357BD\";\n    int out=0;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}\nint main(){\n\tauto result = hex_key(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"XYZ\"", "fn": "hex_key", "para": "(string num)", "pass": true}
{"task_id": "CPP/78", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n    string key=\"2357BD\";\n    int out=0;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}\nint main(){\n\tauto result = hex_key(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"ABCDEF\"", "fn": "hex_key", "para": "(string num)", "pass": false}
{"task_id": "CPP/79", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring decimal_to_binary(int decimal){\n    string out=\"\";\n    if (decimal==0) return \"db0db\";\n    while (decimal>0)\n    {\n        out=to_string(decimal%2)+out;\n        decimal=decimal/2;\n    }\n    out=\"db\"+out+\"db\";\n    return out;\n}\nint main(){\n\tauto result = decimal_to_binary(<FILL_ME>);\n\tassert(result==\"db1111db\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "15", "fn": "decimal_to_binary", "para": "(int decimal)", "pass": true}
{"task_id": "CPP/79", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring decimal_to_binary(int decimal){\n    string out=\"\";\n    if (decimal==0) return \"db0db\";\n    while (decimal>0)\n    {\n        out=to_string(decimal%2)+out;\n        decimal=decimal/2;\n    }\n    out=\"db\"+out+\"db\";\n    return out;\n}\nint main(){\n\tauto result = decimal_to_binary(<FILL_ME>);\n\tassert(result==\"db1111db\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "15", "fn": "decimal_to_binary", "para": "(int decimal)", "pass": true}
{"task_id": "CPP/79", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring decimal_to_binary(int decimal){\n    string out=\"\";\n    if (decimal==0) return \"db0db\";\n    while (decimal>0)\n    {\n        out=to_string(decimal%2)+out;\n        decimal=decimal/2;\n    }\n    out=\"db\"+out+\"db\";\n    return out;\n}\nint main(){\n\tauto result = decimal_to_binary(<FILL_ME>);\n\tassert(result==\"db1111db\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "15", "fn": "decimal_to_binary", "para": "(int decimal)", "pass": true}
{"task_id": "CPP/79", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring decimal_to_binary(int decimal){\n    string out=\"\";\n    if (decimal==0) return \"db0db\";\n    while (decimal>0)\n    {\n        out=to_string(decimal%2)+out;\n        decimal=decimal/2;\n    }\n    out=\"db\"+out+\"db\";\n    return out;\n}\nint main(){\n\tauto result = decimal_to_binary(<FILL_ME>);\n\tassert(result==\"db1111db\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "15", "fn": "decimal_to_binary", "para": "(int decimal)", "pass": true}
{"task_id": "CPP/79", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring decimal_to_binary(int decimal){\n    string out=\"\";\n    if (decimal==0) return \"db0db\";\n    while (decimal>0)\n    {\n        out=to_string(decimal%2)+out;\n        decimal=decimal/2;\n    }\n    out=\"db\"+out+\"db\";\n    return out;\n}\nint main(){\n\tauto result = decimal_to_binary(<FILL_ME>);\n\tassert(result==\"db1111db\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "15", "fn": "decimal_to_binary", "para": "(int decimal)", "pass": true}
{"task_id": "CPP/79", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring decimal_to_binary(int decimal){\n    string out=\"\";\n    if (decimal==0) return \"db0db\";\n    while (decimal>0)\n    {\n        out=to_string(decimal%2)+out;\n        decimal=decimal/2;\n    }\n    out=\"db\"+out+\"db\";\n    return out;\n}\nint main(){\n\tauto result = decimal_to_binary(<FILL_ME>);\n\tassert(result==\"db1100111db\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "103", "fn": "decimal_to_binary", "para": "(int decimal)", "pass": true}
{"task_id": "CPP/79", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring decimal_to_binary(int decimal){\n    string out=\"\";\n    if (decimal==0) return \"db0db\";\n    while (decimal>0)\n    {\n        out=to_string(decimal%2)+out;\n        decimal=decimal/2;\n    }\n    out=\"db\"+out+\"db\";\n    return out;\n}\nint main(){\n\tauto result = decimal_to_binary(<FILL_ME>);\n\tassert(result==\"db1100111db\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "103", "fn": "decimal_to_binary", "para": "(int decimal)", "pass": true}
{"task_id": "CPP/79", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring decimal_to_binary(int decimal){\n    string out=\"\";\n    if (decimal==0) return \"db0db\";\n    while (decimal>0)\n    {\n        out=to_string(decimal%2)+out;\n        decimal=decimal/2;\n    }\n    out=\"db\"+out+\"db\";\n    return out;\n}\nint main(){\n\tauto result = decimal_to_binary(<FILL_ME>);\n\tassert(result==\"db1100111db\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "103", "fn": "decimal_to_binary", "para": "(int decimal)", "pass": true}
{"task_id": "CPP/79", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring decimal_to_binary(int decimal){\n    string out=\"\";\n    if (decimal==0) return \"db0db\";\n    while (decimal>0)\n    {\n        out=to_string(decimal%2)+out;\n        decimal=decimal/2;\n    }\n    out=\"db\"+out+\"db\";\n    return out;\n}\nint main(){\n\tauto result = decimal_to_binary(<FILL_ME>);\n\tassert(result==\"db1100111db\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "103", "fn": "decimal_to_binary", "para": "(int decimal)", "pass": true}
{"task_id": "CPP/79", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring decimal_to_binary(int decimal){\n    string out=\"\";\n    if (decimal==0) return \"db0db\";\n    while (decimal>0)\n    {\n        out=to_string(decimal%2)+out;\n        decimal=decimal/2;\n    }\n    out=\"db\"+out+\"db\";\n    return out;\n}\nint main(){\n\tauto result = decimal_to_binary(<FILL_ME>);\n\tassert(result==\"db1100111db\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "103", "fn": "decimal_to_binary", "para": "(int decimal)", "pass": true}
{"task_id": "CPP/79", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring decimal_to_binary(int decimal){\n    string out=\"\";\n    if (decimal==0) return \"db0db\";\n    while (decimal>0)\n    {\n        out=to_string(decimal%2)+out;\n        decimal=decimal/2;\n    }\n    out=\"db\"+out+\"db\";\n    return out;\n}\nint main(){\n\tauto result = decimal_to_binary(<FILL_ME>);\n\tassert(result==\"db100000db\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "32", "fn": "decimal_to_binary", "para": "(int decimal)", "pass": true}
{"task_id": "CPP/79", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring decimal_to_binary(int decimal){\n    string out=\"\";\n    if (decimal==0) return \"db0db\";\n    while (decimal>0)\n    {\n        out=to_string(decimal%2)+out;\n        decimal=decimal/2;\n    }\n    out=\"db\"+out+\"db\";\n    return out;\n}\nint main(){\n\tauto result = decimal_to_binary(<FILL_ME>);\n\tassert(result==\"db100000db\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "32", "fn": "decimal_to_binary", "para": "(int decimal)", "pass": true}
{"task_id": "CPP/79", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring decimal_to_binary(int decimal){\n    string out=\"\";\n    if (decimal==0) return \"db0db\";\n    while (decimal>0)\n    {\n        out=to_string(decimal%2)+out;\n        decimal=decimal/2;\n    }\n    out=\"db\"+out+\"db\";\n    return out;\n}\nint main(){\n\tauto result = decimal_to_binary(<FILL_ME>);\n\tassert(result==\"db100000db\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "32", "fn": "decimal_to_binary", "para": "(int decimal)", "pass": true}
{"task_id": "CPP/79", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring decimal_to_binary(int decimal){\n    string out=\"\";\n    if (decimal==0) return \"db0db\";\n    while (decimal>0)\n    {\n        out=to_string(decimal%2)+out;\n        decimal=decimal/2;\n    }\n    out=\"db\"+out+\"db\";\n    return out;\n}\nint main(){\n\tauto result = decimal_to_binary(<FILL_ME>);\n\tassert(result==\"db100000db\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "32", "fn": "decimal_to_binary", "para": "(int decimal)", "pass": true}
{"task_id": "CPP/79", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring decimal_to_binary(int decimal){\n    string out=\"\";\n    if (decimal==0) return \"db0db\";\n    while (decimal>0)\n    {\n        out=to_string(decimal%2)+out;\n        decimal=decimal/2;\n    }\n    out=\"db\"+out+\"db\";\n    return out;\n}\nint main(){\n\tauto result = decimal_to_binary(<FILL_ME>);\n\tassert(result==\"db100000db\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "32", "fn": "decimal_to_binary", "para": "(int decimal)", "pass": true}
{"task_id": "CPP/79", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring decimal_to_binary(int decimal){\n    string out=\"\";\n    if (decimal==0) return \"db0db\";\n    while (decimal>0)\n    {\n        out=to_string(decimal%2)+out;\n        decimal=decimal/2;\n    }\n    out=\"db\"+out+\"db\";\n    return out;\n}\nint main(){\n\tauto result = decimal_to_binary(<FILL_ME>);\n\tassert(result==\"db0db\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "0", "fn": "decimal_to_binary", "para": "(int decimal)", "pass": true}
{"task_id": "CPP/79", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring decimal_to_binary(int decimal){\n    string out=\"\";\n    if (decimal==0) return \"db0db\";\n    while (decimal>0)\n    {\n        out=to_string(decimal%2)+out;\n        decimal=decimal/2;\n    }\n    out=\"db\"+out+\"db\";\n    return out;\n}\nint main(){\n\tauto result = decimal_to_binary(<FILL_ME>);\n\tassert(result==\"db0db\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "0", "fn": "decimal_to_binary", "para": "(int decimal)", "pass": true}
{"task_id": "CPP/79", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring decimal_to_binary(int decimal){\n    string out=\"\";\n    if (decimal==0) return \"db0db\";\n    while (decimal>0)\n    {\n        out=to_string(decimal%2)+out;\n        decimal=decimal/2;\n    }\n    out=\"db\"+out+\"db\";\n    return out;\n}\nint main(){\n\tauto result = decimal_to_binary(<FILL_ME>);\n\tassert(result==\"db0db\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "0", "fn": "decimal_to_binary", "para": "(int decimal)", "pass": true}
{"task_id": "CPP/79", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring decimal_to_binary(int decimal){\n    string out=\"\";\n    if (decimal==0) return \"db0db\";\n    while (decimal>0)\n    {\n        out=to_string(decimal%2)+out;\n        decimal=decimal/2;\n    }\n    out=\"db\"+out+\"db\";\n    return out;\n}\nint main(){\n\tauto result = decimal_to_binary(<FILL_ME>);\n\tassert(result==\"db0db\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "0", "fn": "decimal_to_binary", "para": "(int decimal)", "pass": true}
{"task_id": "CPP/79", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring decimal_to_binary(int decimal){\n    string out=\"\";\n    if (decimal==0) return \"db0db\";\n    while (decimal>0)\n    {\n        out=to_string(decimal%2)+out;\n        decimal=decimal/2;\n    }\n    out=\"db\"+out+\"db\";\n    return out;\n}\nint main(){\n\tauto result = decimal_to_binary(<FILL_ME>);\n\tassert(result==\"db0db\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "0", "fn": "decimal_to_binary", "para": "(int decimal)", "pass": true}
{"task_id": "CPP/80", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_happy(string s){\n    if (s.length()<3) return false;\n    for (int i=2;i<s.length();i++)\n    if (s[i]==s[i-1] or s[i]==s[i-2]) return false;\n    return true;\n}\nint main(){\n\tauto result = is_happy(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"world\"", "fn": "is_happy", "para": "(string s)", "pass": true}
{"task_id": "CPP/80", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_happy(string s){\n    if (s.length()<3) return false;\n    for (int i=2;i<s.length();i++)\n    if (s[i]==s[i-1] or s[i]==s[i-2]) return false;\n    return true;\n}\nint main(){\n\tauto result = is_happy(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"happiness\"", "fn": "is_happy", "para": "(string s)", "pass": false}
{"task_id": "CPP/80", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_happy(string s){\n    if (s.length()<3) return false;\n    for (int i=2;i<s.length();i++)\n    if (s[i]==s[i-1] or s[i]==s[i-2]) return false;\n    return true;\n}\nint main(){\n\tauto result = is_happy(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"FILL_ME\"", "fn": "is_happy", "para": "(string s)", "pass": false}
{"task_id": "CPP/80", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_happy(string s){\n    if (s.length()<3) return false;\n    for (int i=2;i<s.length();i++)\n    if (s[i]==s[i-1] or s[i]==s[i-2]) return false;\n    return true;\n}\nint main(){\n\tauto result = is_happy(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"xyz\"", "fn": "is_happy", "para": "(string s)", "pass": true}
{"task_id": "CPP/80", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_happy(string s){\n    if (s.length()<3) return false;\n    for (int i=2;i<s.length();i++)\n    if (s[i]==s[i-1] or s[i]==s[i-2]) return false;\n    return true;\n}\nint main(){\n\tauto result = is_happy(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"happiness\"", "fn": "is_happy", "para": "(string s)", "pass": false}
{"task_id": "CPP/80", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_happy(string s){\n    if (s.length()<3) return false;\n    for (int i=2;i<s.length();i++)\n    if (s[i]==s[i-1] or s[i]==s[i-2]) return false;\n    return true;\n}\nint main(){\n\tauto result = is_happy(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"is happy\"", "fn": "is_happy", "para": "(string s)", "pass": true}
{"task_id": "CPP/80", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_happy(string s){\n    if (s.length()<3) return false;\n    for (int i=2;i<s.length();i++)\n    if (s[i]==s[i-1] or s[i]==s[i-2]) return false;\n    return true;\n}\nint main(){\n\tauto result = is_happy(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\"", "fn": "is_happy", "para": "(string s)", "pass": true}
{"task_id": "CPP/80", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_happy(string s){\n    if (s.length()<3) return false;\n    for (int i=2;i<s.length();i++)\n    if (s[i]==s[i-1] or s[i]==s[i-2]) return false;\n    return true;\n}\nint main(){\n\tauto result = is_happy(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"is happy\"", "fn": "is_happy", "para": "(string s)", "pass": true}
{"task_id": "CPP/80", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_happy(string s){\n    if (s.length()<3) return false;\n    for (int i=2;i<s.length();i++)\n    if (s[i]==s[i-1] or s[i]==s[i-2]) return false;\n    return true;\n}\nint main(){\n\tauto result = is_happy(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\"", "fn": "is_happy", "para": "(string s)", "pass": true}
{"task_id": "CPP/80", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_happy(string s){\n    if (s.length()<3) return false;\n    for (int i=2;i<s.length();i++)\n    if (s[i]==s[i-1] or s[i]==s[i-2]) return false;\n    return true;\n}\nint main(){\n\tauto result = is_happy(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\"", "fn": "is_happy", "para": "(string s)", "pass": true}
{"task_id": "CPP/81", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> out={};\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back(\"B\");\n        if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back(\"B-\");\n        if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back(\"C+\");\n        if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back(\"C\");\n        if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back(\"C-\");\n        if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back(\"D+\");\n        if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back(\"D\");\n        if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back(\"D-\");\n        if (grades[i]<=0.0001) out.push_back(\"E\");\n    }\n    return out;\n}\nint main(){\n\tauto result = numerical_letter_grade(<FILL_ME>);\n\tassert(issame(result,{\"E\",\"D-\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1.0, 0.5}", "fn": "numerical_letter_grade", "para": "(vector<float> grades)", "pass": false}
{"task_id": "CPP/81", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> out={};\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back(\"B\");\n        if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back(\"B-\");\n        if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back(\"C+\");\n        if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back(\"C\");\n        if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back(\"C-\");\n        if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back(\"D+\");\n        if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back(\"D\");\n        if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back(\"D-\");\n        if (grades[i]<=0.0001) out.push_back(\"E\");\n    }\n    return out;\n}\nint main(){\n\tauto result = numerical_letter_grade(<FILL_ME>);\n\tassert(issame(result,{\"E\",\"D-\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1.0, 0.5}", "fn": "numerical_letter_grade", "para": "(vector<float> grades)", "pass": false}
{"task_id": "CPP/81", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> out={};\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back(\"B\");\n        if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back(\"B-\");\n        if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back(\"C+\");\n        if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back(\"C\");\n        if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back(\"C-\");\n        if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back(\"D+\");\n        if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back(\"D\");\n        if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back(\"D-\");\n        if (grades[i]<=0.0001) out.push_back(\"E\");\n    }\n    return out;\n}\nint main(){\n\tauto result = numerical_letter_grade(<FILL_ME>);\n\tassert(issame(result,{\"E\",\"D-\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{0.0, 0.5}", "fn": "numerical_letter_grade", "para": "(vector<float> grades)", "pass": true}
{"task_id": "CPP/81", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> out={};\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back(\"B\");\n        if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back(\"B-\");\n        if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back(\"C+\");\n        if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back(\"C\");\n        if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back(\"C-\");\n        if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back(\"D+\");\n        if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back(\"D\");\n        if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back(\"D-\");\n        if (grades[i]<=0.0001) out.push_back(\"E\");\n    }\n    return out;\n}\nint main(){\n\tauto result = numerical_letter_grade(<FILL_ME>);\n\tassert(issame(result,{\"E\",\"D-\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1.0, 0.5}", "fn": "numerical_letter_grade", "para": "(vector<float> grades)", "pass": false}
{"task_id": "CPP/81", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> out={};\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back(\"B\");\n        if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back(\"B-\");\n        if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back(\"C+\");\n        if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back(\"C\");\n        if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back(\"C-\");\n        if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back(\"D+\");\n        if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back(\"D\");\n        if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back(\"D-\");\n        if (grades[i]<=0.0001) out.push_back(\"E\");\n    }\n    return out;\n}\nint main(){\n\tauto result = numerical_letter_grade(<FILL_ME>);\n\tassert(issame(result,{\"E\",\"D-\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{0.0, 0.5}", "fn": "numerical_letter_grade", "para": "(vector<float> grades)", "pass": true}
{"task_id": "CPP/81", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> out={};\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back(\"B\");\n        if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back(\"B-\");\n        if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back(\"C+\");\n        if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back(\"C\");\n        if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back(\"C-\");\n        if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back(\"D+\");\n        if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back(\"D\");\n        if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back(\"D-\");\n        if (grades[i]<=0.0001) out.push_back(\"E\");\n    }\n    return out;\n}\nint main(){\n\tauto result = numerical_letter_grade(<FILL_ME>);\n\tassert(issame(result,{\"D\",\"D-\",\"C-\",\"B\",\"B+\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1.2, 0.6, 1.5, 2.8, 3.1}", "fn": "numerical_letter_grade", "para": "(vector<float> grades)", "pass": false}
{"task_id": "CPP/81", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> out={};\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back(\"B\");\n        if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back(\"B-\");\n        if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back(\"C+\");\n        if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back(\"C\");\n        if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back(\"C-\");\n        if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back(\"D+\");\n        if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back(\"D\");\n        if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back(\"D-\");\n        if (grades[i]<=0.0001) out.push_back(\"E\");\n    }\n    return out;\n}\nint main(){\n\tauto result = numerical_letter_grade(<FILL_ME>);\n\tassert(issame(result,{\"D\",\"D-\",\"C-\",\"B\",\"B+\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1.2, 0.6, 1.5, 2.8, 3.1}", "fn": "numerical_letter_grade", "para": "(vector<float> grades)", "pass": false}
{"task_id": "CPP/81", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> out={};\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back(\"B\");\n        if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back(\"B-\");\n        if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back(\"C+\");\n        if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back(\"C\");\n        if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back(\"C-\");\n        if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back(\"D+\");\n        if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back(\"D\");\n        if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back(\"D-\");\n        if (grades[i]<=0.0001) out.push_back(\"E\");\n    }\n    return out;\n}\nint main(){\n\tauto result = numerical_letter_grade(<FILL_ME>);\n\tassert(issame(result,{\"D\",\"D-\",\"C-\",\"B\",\"B+\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1.2, 0.6, 1.5, 2.8, 3.1}", "fn": "numerical_letter_grade", "para": "(vector<float> grades)", "pass": false}
{"task_id": "CPP/81", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> out={};\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back(\"B\");\n        if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back(\"B-\");\n        if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back(\"C+\");\n        if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back(\"C\");\n        if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back(\"C-\");\n        if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back(\"D+\");\n        if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back(\"D\");\n        if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back(\"D-\");\n        if (grades[i]<=0.0001) out.push_back(\"E\");\n    }\n    return out;\n}\nint main(){\n\tauto result = numerical_letter_grade(<FILL_ME>);\n\tassert(issame(result,{\"D\",\"D-\",\"C-\",\"B\",\"B+\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1.2, 0.6, 1.5, 2.8, 3.1}", "fn": "numerical_letter_grade", "para": "(vector<float> grades)", "pass": false}
{"task_id": "CPP/81", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> out={};\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back(\"B\");\n        if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back(\"B-\");\n        if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back(\"C+\");\n        if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back(\"C\");\n        if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back(\"C-\");\n        if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back(\"D+\");\n        if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back(\"D\");\n        if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back(\"D-\");\n        if (grades[i]<=0.0001) out.push_back(\"E\");\n    }\n    return out;\n}\nint main(){\n\tauto result = numerical_letter_grade(<FILL_ME>);\n\tassert(issame(result,{\"D\",\"D-\",\"C-\",\"B\",\"B+\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1.2, 0.6, 1.5, 2.8, 3.1}", "fn": "numerical_letter_grade", "para": "(vector<float> grades)", "pass": false}
{"task_id": "CPP/81", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> out={};\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back(\"B\");\n        if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back(\"B-\");\n        if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back(\"C+\");\n        if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back(\"C\");\n        if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back(\"C-\");\n        if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back(\"D+\");\n        if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back(\"D\");\n        if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back(\"D-\");\n        if (grades[i]<=0.0001) out.push_back(\"E\");\n    }\n    return out;\n}\nint main(){\n\tauto result = numerical_letter_grade(<FILL_ME>);\n\tassert(issame(result,{\"D+\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1.1}", "fn": "numerical_letter_grade", "para": "(vector<float> grades)", "pass": true}
{"task_id": "CPP/81", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> out={};\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back(\"B\");\n        if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back(\"B-\");\n        if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back(\"C+\");\n        if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back(\"C\");\n        if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back(\"C-\");\n        if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back(\"D+\");\n        if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back(\"D\");\n        if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back(\"D-\");\n        if (grades[i]<=0.0001) out.push_back(\"E\");\n    }\n    return out;\n}\nint main(){\n\tauto result = numerical_letter_grade(<FILL_ME>);\n\tassert(issame(result,{\"D+\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1.2}", "fn": "numerical_letter_grade", "para": "(vector<float> grades)", "pass": true}
{"task_id": "CPP/81", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> out={};\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back(\"B\");\n        if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back(\"B-\");\n        if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back(\"C+\");\n        if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back(\"C\");\n        if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back(\"C-\");\n        if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back(\"D+\");\n        if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back(\"D\");\n        if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back(\"D-\");\n        if (grades[i]<=0.0001) out.push_back(\"E\");\n    }\n    return out;\n}\nint main(){\n\tauto result = numerical_letter_grade(<FILL_ME>);\n\tassert(issame(result,{\"D+\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1.2}", "fn": "numerical_letter_grade", "para": "(vector<float> grades)", "pass": true}
{"task_id": "CPP/81", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> out={};\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back(\"B\");\n        if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back(\"B-\");\n        if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back(\"C+\");\n        if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back(\"C\");\n        if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back(\"C-\");\n        if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back(\"D+\");\n        if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back(\"D\");\n        if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back(\"D-\");\n        if (grades[i]<=0.0001) out.push_back(\"E\");\n    }\n    return out;\n}\nint main(){\n\tauto result = numerical_letter_grade(<FILL_ME>);\n\tassert(issame(result,{\"D+\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1.2}", "fn": "numerical_letter_grade", "para": "(vector<float> grades)", "pass": true}
{"task_id": "CPP/81", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> out={};\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back(\"B\");\n        if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back(\"B-\");\n        if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back(\"C+\");\n        if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back(\"C\");\n        if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back(\"C-\");\n        if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back(\"D+\");\n        if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back(\"D\");\n        if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back(\"D-\");\n        if (grades[i]<=0.0001) out.push_back(\"E\");\n    }\n    return out;\n}\nint main(){\n\tauto result = numerical_letter_grade(<FILL_ME>);\n\tassert(issame(result,{\"D+\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1.2}", "fn": "numerical_letter_grade", "para": "(vector<float> grades)", "pass": true}
{"task_id": "CPP/81", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> out={};\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back(\"B\");\n        if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back(\"B-\");\n        if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back(\"C+\");\n        if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back(\"C\");\n        if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back(\"C-\");\n        if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back(\"D+\");\n        if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back(\"D\");\n        if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back(\"D-\");\n        if (grades[i]<=0.0001) out.push_back(\"E\");\n    }\n    return out;\n}\nint main(){\n\tauto result = numerical_letter_grade(<FILL_ME>);\n\tassert(issame(result,{\"D-\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1.1}", "fn": "numerical_letter_grade", "para": "(vector<float> grades)", "pass": false}
{"task_id": "CPP/81", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> out={};\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back(\"B\");\n        if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back(\"B-\");\n        if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back(\"C+\");\n        if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back(\"C\");\n        if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back(\"C-\");\n        if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back(\"D+\");\n        if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back(\"D\");\n        if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back(\"D-\");\n        if (grades[i]<=0.0001) out.push_back(\"E\");\n    }\n    return out;\n}\nint main(){\n\tauto result = numerical_letter_grade(<FILL_ME>);\n\tassert(issame(result,{\"D-\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1.1}", "fn": "numerical_letter_grade", "para": "(vector<float> grades)", "pass": false}
{"task_id": "CPP/81", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> out={};\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back(\"B\");\n        if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back(\"B-\");\n        if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back(\"C+\");\n        if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back(\"C\");\n        if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back(\"C-\");\n        if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back(\"D+\");\n        if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back(\"D\");\n        if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back(\"D-\");\n        if (grades[i]<=0.0001) out.push_back(\"E\");\n    }\n    return out;\n}\nint main(){\n\tauto result = numerical_letter_grade(<FILL_ME>);\n\tassert(issame(result,{\"D-\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1.1}", "fn": "numerical_letter_grade", "para": "(vector<float> grades)", "pass": false}
{"task_id": "CPP/81", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> out={};\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back(\"B\");\n        if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back(\"B-\");\n        if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back(\"C+\");\n        if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back(\"C\");\n        if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back(\"C-\");\n        if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back(\"D+\");\n        if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back(\"D\");\n        if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back(\"D-\");\n        if (grades[i]<=0.0001) out.push_back(\"E\");\n    }\n    return out;\n}\nint main(){\n\tauto result = numerical_letter_grade(<FILL_ME>);\n\tassert(issame(result,{\"D-\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1.1}", "fn": "numerical_letter_grade", "para": "(vector<float> grades)", "pass": false}
{"task_id": "CPP/81", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> out={};\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back(\"B\");\n        if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back(\"B-\");\n        if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back(\"C+\");\n        if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back(\"C\");\n        if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back(\"C-\");\n        if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back(\"D+\");\n        if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back(\"D\");\n        if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back(\"D-\");\n        if (grades[i]<=0.0001) out.push_back(\"E\");\n    }\n    return out;\n}\nint main(){\n\tauto result = numerical_letter_grade(<FILL_ME>);\n\tassert(issame(result,{\"D-\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1.1}", "fn": "numerical_letter_grade", "para": "(vector<float> grades)", "pass": false}
{"task_id": "CPP/81", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> out={};\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back(\"B\");\n        if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back(\"B-\");\n        if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back(\"C+\");\n        if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back(\"C\");\n        if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back(\"C-\");\n        if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back(\"D+\");\n        if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back(\"D\");\n        if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back(\"D-\");\n        if (grades[i]<=0.0001) out.push_back(\"E\");\n    }\n    return out;\n}\nint main(){\n\tauto result = numerical_letter_grade(<FILL_ME>);\n\tassert(issame(result,{\"A+\",\"B\",\"C-\",\"C\",\"A-\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{3.8, 2.5, 1.5, 1.9, 3.6}", "fn": "numerical_letter_grade", "para": "(vector<float> grades)", "pass": false}
{"task_id": "CPP/81", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> out={};\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back(\"B\");\n        if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back(\"B-\");\n        if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back(\"C+\");\n        if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back(\"C\");\n        if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back(\"C-\");\n        if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back(\"D+\");\n        if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back(\"D\");\n        if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back(\"D-\");\n        if (grades[i]<=0.0001) out.push_back(\"E\");\n    }\n    return out;\n}\nint main(){\n\tauto result = numerical_letter_grade(<FILL_ME>);\n\tassert(issame(result,{\"A+\",\"B\",\"C-\",\"C\",\"A-\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{3.8, 2.5, 1.5, 1.9, 3.6}", "fn": "numerical_letter_grade", "para": "(vector<float> grades)", "pass": false}
{"task_id": "CPP/81", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> out={};\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back(\"B\");\n        if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back(\"B-\");\n        if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back(\"C+\");\n        if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back(\"C\");\n        if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back(\"C-\");\n        if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back(\"D+\");\n        if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back(\"D\");\n        if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back(\"D-\");\n        if (grades[i]<=0.0001) out.push_back(\"E\");\n    }\n    return out;\n}\nint main(){\n\tauto result = numerical_letter_grade(<FILL_ME>);\n\tassert(issame(result,{\"A+\",\"B\",\"C-\",\"C\",\"A-\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{3.8, 2.5, 1.5, 1.9, 3.6}", "fn": "numerical_letter_grade", "para": "(vector<float> grades)", "pass": false}
{"task_id": "CPP/81", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> out={};\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back(\"B\");\n        if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back(\"B-\");\n        if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back(\"C+\");\n        if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back(\"C\");\n        if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back(\"C-\");\n        if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back(\"D+\");\n        if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back(\"D\");\n        if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back(\"D-\");\n        if (grades[i]<=0.0001) out.push_back(\"E\");\n    }\n    return out;\n}\nint main(){\n\tauto result = numerical_letter_grade(<FILL_ME>);\n\tassert(issame(result,{\"A+\",\"B\",\"C-\",\"C\",\"A-\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{3.8, 2.5, 1.5, 1.9, 3.6}", "fn": "numerical_letter_grade", "para": "(vector<float> grades)", "pass": false}
{"task_id": "CPP/81", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> out={};\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back(\"B\");\n        if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back(\"B-\");\n        if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back(\"C+\");\n        if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back(\"C\");\n        if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back(\"C-\");\n        if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back(\"D+\");\n        if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back(\"D\");\n        if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back(\"D-\");\n        if (grades[i]<=0.0001) out.push_back(\"E\");\n    }\n    return out;\n}\nint main(){\n\tauto result = numerical_letter_grade(<FILL_ME>);\n\tassert(issame(result,{\"A+\",\"B\",\"C-\",\"C\",\"A-\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{3.8, 2.5, 1.5, 1.9, 3.6}", "fn": "numerical_letter_grade", "para": "(vector<float> grades)", "pass": false}
{"task_id": "CPP/81", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> out={};\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back(\"B\");\n        if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back(\"B-\");\n        if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back(\"C+\");\n        if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back(\"C\");\n        if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back(\"C-\");\n        if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back(\"D+\");\n        if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back(\"D\");\n        if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back(\"D-\");\n        if (grades[i]<=0.0001) out.push_back(\"E\");\n    }\n    return out;\n}\nint main(){\n\tauto result = numerical_letter_grade(<FILL_ME>);\n\tassert(issame(result,{\"E\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{0.0}", "fn": "numerical_letter_grade", "para": "(vector<float> grades)", "pass": true}
{"task_id": "CPP/81", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> out={};\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back(\"B\");\n        if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back(\"B-\");\n        if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back(\"C+\");\n        if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back(\"C\");\n        if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back(\"C-\");\n        if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back(\"D+\");\n        if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back(\"D\");\n        if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back(\"D-\");\n        if (grades[i]<=0.0001) out.push_back(\"E\");\n    }\n    return out;\n}\nint main(){\n\tauto result = numerical_letter_grade(<FILL_ME>);\n\tassert(issame(result,{\"E\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{0.0}", "fn": "numerical_letter_grade", "para": "(vector<float> grades)", "pass": true}
{"task_id": "CPP/81", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> out={};\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back(\"B\");\n        if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back(\"B-\");\n        if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back(\"C+\");\n        if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back(\"C\");\n        if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back(\"C-\");\n        if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back(\"D+\");\n        if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back(\"D\");\n        if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back(\"D-\");\n        if (grades[i]<=0.0001) out.push_back(\"E\");\n    }\n    return out;\n}\nint main(){\n\tauto result = numerical_letter_grade(<FILL_ME>);\n\tassert(issame(result,{\"E\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{0.0}", "fn": "numerical_letter_grade", "para": "(vector<float> grades)", "pass": true}
{"task_id": "CPP/81", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> out={};\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back(\"B\");\n        if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back(\"B-\");\n        if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back(\"C+\");\n        if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back(\"C\");\n        if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back(\"C-\");\n        if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back(\"D+\");\n        if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back(\"D\");\n        if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back(\"D-\");\n        if (grades[i]<=0.0001) out.push_back(\"E\");\n    }\n    return out;\n}\nint main(){\n\tauto result = numerical_letter_grade(<FILL_ME>);\n\tassert(issame(result,{\"E\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{0.0}", "fn": "numerical_letter_grade", "para": "(vector<float> grades)", "pass": true}
{"task_id": "CPP/81", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> out={};\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back(\"B\");\n        if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back(\"B-\");\n        if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back(\"C+\");\n        if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back(\"C\");\n        if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back(\"C-\");\n        if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back(\"D+\");\n        if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back(\"D\");\n        if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back(\"D-\");\n        if (grades[i]<=0.0001) out.push_back(\"E\");\n    }\n    return out;\n}\nint main(){\n\tauto result = numerical_letter_grade(<FILL_ME>);\n\tassert(issame(result,{\"E\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{0.0}", "fn": "numerical_letter_grade", "para": "(vector<float> grades)", "pass": true}
{"task_id": "CPP/82", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool prime_length(string str){\n    int l,i;\n    l=str.length();\n    if (l<2) return false;\n    for (i=2;i*i<=l;i++)\n    if (l%i==0) return false;\n    return true;\n}\nint main(){\n\tauto result = prime_length(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\"", "fn": "prime_length", "para": "(string str)", "pass": true}
{"task_id": "CPP/82", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool prime_length(string str){\n    int l,i;\n    l=str.length();\n    if (l<2) return false;\n    for (i=2;i*i<=l;i++)\n    if (l%i==0) return false;\n    return true;\n}\nint main(){\n\tauto result = prime_length(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\"", "fn": "prime_length", "para": "(string str)", "pass": true}
{"task_id": "CPP/82", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool prime_length(string str){\n    int l,i;\n    l=str.length();\n    if (l<2) return false;\n    for (i=2;i*i<=l;i++)\n    if (l%i==0) return false;\n    return true;\n}\nint main(){\n\tauto result = prime_length(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\"", "fn": "prime_length", "para": "(string str)", "pass": true}
{"task_id": "CPP/82", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool prime_length(string str){\n    int l,i;\n    l=str.length();\n    if (l<2) return false;\n    for (i=2;i*i<=l;i++)\n    if (l%i==0) return false;\n    return true;\n}\nint main(){\n\tauto result = prime_length(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\"", "fn": "prime_length", "para": "(string str)", "pass": true}
{"task_id": "CPP/82", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool prime_length(string str){\n    int l,i;\n    l=str.length();\n    if (l<2) return false;\n    for (i=2;i*i<=l;i++)\n    if (l%i==0) return false;\n    return true;\n}\nint main(){\n\tauto result = prime_length(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\"", "fn": "prime_length", "para": "(string str)", "pass": true}
{"task_id": "CPP/82", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool prime_length(string str){\n    int l,i;\n    l=str.length();\n    if (l<2) return false;\n    for (i=2;i*i<=l;i++)\n    if (l%i==0) return false;\n    return true;\n}\nint main(){\n\tauto result = prime_length(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"abc\"", "fn": "prime_length", "para": "(string str)", "pass": false}
{"task_id": "CPP/82", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool prime_length(string str){\n    int l,i;\n    l=str.length();\n    if (l<2) return false;\n    for (i=2;i*i<=l;i++)\n    if (l%i==0) return false;\n    return true;\n}\nint main(){\n\tauto result = prime_length(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"abc\"", "fn": "prime_length", "para": "(string str)", "pass": false}
{"task_id": "CPP/82", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool prime_length(string str){\n    int l,i;\n    l=str.length();\n    if (l<2) return false;\n    for (i=2;i*i<=l;i++)\n    if (l%i==0) return false;\n    return true;\n}\nint main(){\n\tauto result = prime_length(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"abc\"", "fn": "prime_length", "para": "(string str)", "pass": false}
{"task_id": "CPP/82", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool prime_length(string str){\n    int l,i;\n    l=str.length();\n    if (l<2) return false;\n    for (i=2;i*i<=l;i++)\n    if (l%i==0) return false;\n    return true;\n}\nint main(){\n\tauto result = prime_length(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"abc\"", "fn": "prime_length", "para": "(string str)", "pass": false}
{"task_id": "CPP/82", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool prime_length(string str){\n    int l,i;\n    l=str.length();\n    if (l<2) return false;\n    for (i=2;i*i<=l;i++)\n    if (l%i==0) return false;\n    return true;\n}\nint main(){\n\tauto result = prime_length(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"abc\"", "fn": "prime_length", "para": "(string str)", "pass": false}
{"task_id": "CPP/83", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint starts_one_ends(int n){\n    if (n<1) return 0;\n    if (n==1) return 1;\n    int out=18;\n    for (int i=2;i<n;i++)\n        out=out*10;\n    return out;\n}\nint main(){\n\tauto result = starts_one_ends(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1", "fn": "starts_one_ends", "para": "(int n)", "pass": true}
{"task_id": "CPP/83", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint starts_one_ends(int n){\n    if (n<1) return 0;\n    if (n==1) return 1;\n    int out=18;\n    for (int i=2;i<n;i++)\n        out=out*10;\n    return out;\n}\nint main(){\n\tauto result = starts_one_ends(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1", "fn": "starts_one_ends", "para": "(int n)", "pass": true}
{"task_id": "CPP/83", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint starts_one_ends(int n){\n    if (n<1) return 0;\n    if (n==1) return 1;\n    int out=18;\n    for (int i=2;i<n;i++)\n        out=out*10;\n    return out;\n}\nint main(){\n\tauto result = starts_one_ends(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1", "fn": "starts_one_ends", "para": "(int n)", "pass": true}
{"task_id": "CPP/83", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint starts_one_ends(int n){\n    if (n<1) return 0;\n    if (n==1) return 1;\n    int out=18;\n    for (int i=2;i<n;i++)\n        out=out*10;\n    return out;\n}\nint main(){\n\tauto result = starts_one_ends(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1", "fn": "starts_one_ends", "para": "(int n)", "pass": true}
{"task_id": "CPP/83", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint starts_one_ends(int n){\n    if (n<1) return 0;\n    if (n==1) return 1;\n    int out=18;\n    for (int i=2;i<n;i++)\n        out=out*10;\n    return out;\n}\nint main(){\n\tauto result = starts_one_ends(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1", "fn": "starts_one_ends", "para": "(int n)", "pass": true}
{"task_id": "CPP/83", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint starts_one_ends(int n){\n    if (n<1) return 0;\n    if (n==1) return 1;\n    int out=18;\n    for (int i=2;i<n;i++)\n        out=out*10;\n    return out;\n}\nint main(){\n\tauto result = starts_one_ends(<FILL_ME>);\n\tassert(result==18);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "2", "fn": "starts_one_ends", "para": "(int n)", "pass": true}
{"task_id": "CPP/83", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint starts_one_ends(int n){\n    if (n<1) return 0;\n    if (n==1) return 1;\n    int out=18;\n    for (int i=2;i<n;i++)\n        out=out*10;\n    return out;\n}\nint main(){\n\tauto result = starts_one_ends(<FILL_ME>);\n\tassert(result==18);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "2", "fn": "starts_one_ends", "para": "(int n)", "pass": true}
{"task_id": "CPP/83", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint starts_one_ends(int n){\n    if (n<1) return 0;\n    if (n==1) return 1;\n    int out=18;\n    for (int i=2;i<n;i++)\n        out=out*10;\n    return out;\n}\nint main(){\n\tauto result = starts_one_ends(<FILL_ME>);\n\tassert(result==18);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "2", "fn": "starts_one_ends", "para": "(int n)", "pass": true}
{"task_id": "CPP/83", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint starts_one_ends(int n){\n    if (n<1) return 0;\n    if (n==1) return 1;\n    int out=18;\n    for (int i=2;i<n;i++)\n        out=out*10;\n    return out;\n}\nint main(){\n\tauto result = starts_one_ends(<FILL_ME>);\n\tassert(result==18);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "2", "fn": "starts_one_ends", "para": "(int n)", "pass": true}
{"task_id": "CPP/83", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint starts_one_ends(int n){\n    if (n<1) return 0;\n    if (n==1) return 1;\n    int out=18;\n    for (int i=2;i<n;i++)\n        out=out*10;\n    return out;\n}\nint main(){\n\tauto result = starts_one_ends(<FILL_ME>);\n\tassert(result==18);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "2", "fn": "starts_one_ends", "para": "(int n)", "pass": true}
{"task_id": "CPP/83", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint starts_one_ends(int n){\n    if (n<1) return 0;\n    if (n==1) return 1;\n    int out=18;\n    for (int i=2;i<n;i++)\n        out=out*10;\n    return out;\n}\nint main(){\n\tauto result = starts_one_ends(<FILL_ME>);\n\tassert(result==180);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3", "fn": "starts_one_ends", "para": "(int n)", "pass": true}
{"task_id": "CPP/83", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint starts_one_ends(int n){\n    if (n<1) return 0;\n    if (n==1) return 1;\n    int out=18;\n    for (int i=2;i<n;i++)\n        out=out*10;\n    return out;\n}\nint main(){\n\tauto result = starts_one_ends(<FILL_ME>);\n\tassert(result==180);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3", "fn": "starts_one_ends", "para": "(int n)", "pass": true}
{"task_id": "CPP/83", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint starts_one_ends(int n){\n    if (n<1) return 0;\n    if (n==1) return 1;\n    int out=18;\n    for (int i=2;i<n;i++)\n        out=out*10;\n    return out;\n}\nint main(){\n\tauto result = starts_one_ends(<FILL_ME>);\n\tassert(result==180);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3", "fn": "starts_one_ends", "para": "(int n)", "pass": true}
{"task_id": "CPP/83", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint starts_one_ends(int n){\n    if (n<1) return 0;\n    if (n==1) return 1;\n    int out=18;\n    for (int i=2;i<n;i++)\n        out=out*10;\n    return out;\n}\nint main(){\n\tauto result = starts_one_ends(<FILL_ME>);\n\tassert(result==180);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3", "fn": "starts_one_ends", "para": "(int n)", "pass": true}
{"task_id": "CPP/83", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint starts_one_ends(int n){\n    if (n<1) return 0;\n    if (n==1) return 1;\n    int out=18;\n    for (int i=2;i<n;i++)\n        out=out*10;\n    return out;\n}\nint main(){\n\tauto result = starts_one_ends(<FILL_ME>);\n\tassert(result==180);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3", "fn": "starts_one_ends", "para": "(int n)", "pass": true}
{"task_id": "CPP/83", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint starts_one_ends(int n){\n    if (n<1) return 0;\n    if (n==1) return 1;\n    int out=18;\n    for (int i=2;i<n;i++)\n        out=out*10;\n    return out;\n}\nint main(){\n\tauto result = starts_one_ends(<FILL_ME>);\n\tassert(result==18000);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "4", "fn": "starts_one_ends", "para": "(int n)", "pass": false}
{"task_id": "CPP/83", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint starts_one_ends(int n){\n    if (n<1) return 0;\n    if (n==1) return 1;\n    int out=18;\n    for (int i=2;i<n;i++)\n        out=out*10;\n    return out;\n}\nint main(){\n\tauto result = starts_one_ends(<FILL_ME>);\n\tassert(result==18000);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5", "fn": "starts_one_ends", "para": "(int n)", "pass": true}
{"task_id": "CPP/83", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint starts_one_ends(int n){\n    if (n<1) return 0;\n    if (n==1) return 1;\n    int out=18;\n    for (int i=2;i<n;i++)\n        out=out*10;\n    return out;\n}\nint main(){\n\tauto result = starts_one_ends(<FILL_ME>);\n\tassert(result==18000);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "4", "fn": "starts_one_ends", "para": "(int n)", "pass": false}
{"task_id": "CPP/83", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint starts_one_ends(int n){\n    if (n<1) return 0;\n    if (n==1) return 1;\n    int out=18;\n    for (int i=2;i<n;i++)\n        out=out*10;\n    return out;\n}\nint main(){\n\tauto result = starts_one_ends(<FILL_ME>);\n\tassert(result==18000);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3", "fn": "starts_one_ends", "para": "(int n)", "pass": false}
{"task_id": "CPP/83", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint starts_one_ends(int n){\n    if (n<1) return 0;\n    if (n==1) return 1;\n    int out=18;\n    for (int i=2;i<n;i++)\n        out=out*10;\n    return out;\n}\nint main(){\n\tauto result = starts_one_ends(<FILL_ME>);\n\tassert(result==18000);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "4", "fn": "starts_one_ends", "para": "(int n)", "pass": false}
{"task_id": "CPP/83", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint starts_one_ends(int n){\n    if (n<1) return 0;\n    if (n==1) return 1;\n    int out=18;\n    for (int i=2;i<n;i++)\n        out=out*10;\n    return out;\n}\nint main(){\n\tauto result = starts_one_ends(<FILL_ME>);\n\tassert(result==1800);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "4", "fn": "starts_one_ends", "para": "(int n)", "pass": true}
{"task_id": "CPP/83", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint starts_one_ends(int n){\n    if (n<1) return 0;\n    if (n==1) return 1;\n    int out=18;\n    for (int i=2;i<n;i++)\n        out=out*10;\n    return out;\n}\nint main(){\n\tauto result = starts_one_ends(<FILL_ME>);\n\tassert(result==1800);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "4", "fn": "starts_one_ends", "para": "(int n)", "pass": true}
{"task_id": "CPP/83", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint starts_one_ends(int n){\n    if (n<1) return 0;\n    if (n==1) return 1;\n    int out=18;\n    for (int i=2;i<n;i++)\n        out=out*10;\n    return out;\n}\nint main(){\n\tauto result = starts_one_ends(<FILL_ME>);\n\tassert(result==1800);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "4", "fn": "starts_one_ends", "para": "(int n)", "pass": true}
{"task_id": "CPP/83", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint starts_one_ends(int n){\n    if (n<1) return 0;\n    if (n==1) return 1;\n    int out=18;\n    for (int i=2;i<n;i++)\n        out=out*10;\n    return out;\n}\nint main(){\n\tauto result = starts_one_ends(<FILL_ME>);\n\tassert(result==1800);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "4", "fn": "starts_one_ends", "para": "(int n)", "pass": true}
{"task_id": "CPP/83", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint starts_one_ends(int n){\n    if (n<1) return 0;\n    if (n==1) return 1;\n    int out=18;\n    for (int i=2;i<n;i++)\n        out=out*10;\n    return out;\n}\nint main(){\n\tauto result = starts_one_ends(<FILL_ME>);\n\tassert(result==1800);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "4", "fn": "starts_one_ends", "para": "(int n)", "pass": true}
{"task_id": "CPP/84", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring solve(int N){\n    string str,bi=\"\";\n    str=to_string(N);\n    int i,sum=0;\n    for (int i=0;i<str.length();i++)\n        sum+=str[i]-48;\n    while (sum>0)\n    {\n        bi=to_string(sum%2)+bi;\n        sum=sum/2;\n    }\n    return bi;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"1100\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "12", "fn": "solve", "para": "(int N)", "pass": false}
{"task_id": "CPP/84", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring solve(int N){\n    string str,bi=\"\";\n    str=to_string(N);\n    int i,sum=0;\n    for (int i=0;i<str.length();i++)\n        sum+=str[i]-48;\n    while (sum>0)\n    {\n        bi=to_string(sum%2)+bi;\n        sum=sum/2;\n    }\n    return bi;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"1100\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "12", "fn": "solve", "para": "(int N)", "pass": false}
{"task_id": "CPP/84", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring solve(int N){\n    string str,bi=\"\";\n    str=to_string(N);\n    int i,sum=0;\n    for (int i=0;i<str.length();i++)\n        sum+=str[i]-48;\n    while (sum>0)\n    {\n        bi=to_string(sum%2)+bi;\n        sum=sum/2;\n    }\n    return bi;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"1100\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "12", "fn": "solve", "para": "(int N)", "pass": false}
{"task_id": "CPP/84", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring solve(int N){\n    string str,bi=\"\";\n    str=to_string(N);\n    int i,sum=0;\n    for (int i=0;i<str.length();i++)\n        sum+=str[i]-48;\n    while (sum>0)\n    {\n        bi=to_string(sum%2)+bi;\n        sum=sum/2;\n    }\n    return bi;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"1100\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "12", "fn": "solve", "para": "(int N)", "pass": false}
{"task_id": "CPP/84", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring solve(int N){\n    string str,bi=\"\";\n    str=to_string(N);\n    int i,sum=0;\n    for (int i=0;i<str.length();i++)\n        sum+=str[i]-48;\n    while (sum>0)\n    {\n        bi=to_string(sum%2)+bi;\n        sum=sum/2;\n    }\n    return bi;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"1100\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "12", "fn": "solve", "para": "(int N)", "pass": false}
{"task_id": "CPP/84", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring solve(int N){\n    string str,bi=\"\";\n    str=to_string(N);\n    int i,sum=0;\n    for (int i=0;i<str.length();i++)\n        sum+=str[i]-48;\n    while (sum>0)\n    {\n        bi=to_string(sum%2)+bi;\n        sum=sum/2;\n    }\n    return bi;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"1001\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "9", "fn": "solve", "para": "(int N)", "pass": true}
{"task_id": "CPP/84", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring solve(int N){\n    string str,bi=\"\";\n    str=to_string(N);\n    int i,sum=0;\n    for (int i=0;i<str.length();i++)\n        sum+=str[i]-48;\n    while (sum>0)\n    {\n        bi=to_string(sum%2)+bi;\n        sum=sum/2;\n    }\n    return bi;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"1001\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "9", "fn": "solve", "para": "(int N)", "pass": true}
{"task_id": "CPP/84", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring solve(int N){\n    string str,bi=\"\";\n    str=to_string(N);\n    int i,sum=0;\n    for (int i=0;i<str.length();i++)\n        sum+=str[i]-48;\n    while (sum>0)\n    {\n        bi=to_string(sum%2)+bi;\n        sum=sum/2;\n    }\n    return bi;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"1001\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "9", "fn": "solve", "para": "(int N)", "pass": true}
{"task_id": "CPP/84", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring solve(int N){\n    string str,bi=\"\";\n    str=to_string(N);\n    int i,sum=0;\n    for (int i=0;i<str.length();i++)\n        sum+=str[i]-48;\n    while (sum>0)\n    {\n        bi=to_string(sum%2)+bi;\n        sum=sum/2;\n    }\n    return bi;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"1001\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "9", "fn": "solve", "para": "(int N)", "pass": true}
{"task_id": "CPP/84", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring solve(int N){\n    string str,bi=\"\";\n    str=to_string(N);\n    int i,sum=0;\n    for (int i=0;i<str.length();i++)\n        sum+=str[i]-48;\n    while (sum>0)\n    {\n        bi=to_string(sum%2)+bi;\n        sum=sum/2;\n    }\n    return bi;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"1001\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "9", "fn": "solve", "para": "(int N)", "pass": true}
{"task_id": "CPP/84", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring solve(int N){\n    string str,bi=\"\";\n    str=to_string(N);\n    int i,sum=0;\n    for (int i=0;i<str.length();i++)\n        sum+=str[i]-48;\n    while (sum>0)\n    {\n        bi=to_string(sum%2)+bi;\n        sum=sum/2;\n    }\n    return bi;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"110\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "6", "fn": "solve", "para": "(int N)", "pass": true}
{"task_id": "CPP/84", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring solve(int N){\n    string str,bi=\"\";\n    str=to_string(N);\n    int i,sum=0;\n    for (int i=0;i<str.length();i++)\n        sum+=str[i]-48;\n    while (sum>0)\n    {\n        bi=to_string(sum%2)+bi;\n        sum=sum/2;\n    }\n    return bi;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"110\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "6", "fn": "solve", "para": "(int N)", "pass": true}
{"task_id": "CPP/84", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring solve(int N){\n    string str,bi=\"\";\n    str=to_string(N);\n    int i,sum=0;\n    for (int i=0;i<str.length();i++)\n        sum+=str[i]-48;\n    while (sum>0)\n    {\n        bi=to_string(sum%2)+bi;\n        sum=sum/2;\n    }\n    return bi;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"110\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "6", "fn": "solve", "para": "(int N)", "pass": true}
{"task_id": "CPP/84", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring solve(int N){\n    string str,bi=\"\";\n    str=to_string(N);\n    int i,sum=0;\n    for (int i=0;i<str.length();i++)\n        sum+=str[i]-48;\n    while (sum>0)\n    {\n        bi=to_string(sum%2)+bi;\n        sum=sum/2;\n    }\n    return bi;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"110\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "6", "fn": "solve", "para": "(int N)", "pass": true}
{"task_id": "CPP/84", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring solve(int N){\n    string str,bi=\"\";\n    str=to_string(N);\n    int i,sum=0;\n    for (int i=0;i<str.length();i++)\n        sum+=str[i]-48;\n    while (sum>0)\n    {\n        bi=to_string(sum%2)+bi;\n        sum=sum/2;\n    }\n    return bi;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"110\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "6", "fn": "solve", "para": "(int N)", "pass": true}
{"task_id": "CPP/84", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring solve(int N){\n    string str,bi=\"\";\n    str=to_string(N);\n    int i,sum=0;\n    for (int i=0;i<str.length();i++)\n        sum+=str[i]-48;\n    while (sum>0)\n    {\n        bi=to_string(sum%2)+bi;\n        sum=sum/2;\n    }\n    return bi;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"1\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1", "fn": "solve", "para": "(int N)", "pass": true}
{"task_id": "CPP/84", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring solve(int N){\n    string str,bi=\"\";\n    str=to_string(N);\n    int i,sum=0;\n    for (int i=0;i<str.length();i++)\n        sum+=str[i]-48;\n    while (sum>0)\n    {\n        bi=to_string(sum%2)+bi;\n        sum=sum/2;\n    }\n    return bi;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"1\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1", "fn": "solve", "para": "(int N)", "pass": true}
{"task_id": "CPP/84", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring solve(int N){\n    string str,bi=\"\";\n    str=to_string(N);\n    int i,sum=0;\n    for (int i=0;i<str.length();i++)\n        sum+=str[i]-48;\n    while (sum>0)\n    {\n        bi=to_string(sum%2)+bi;\n        sum=sum/2;\n    }\n    return bi;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"1\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1", "fn": "solve", "para": "(int N)", "pass": true}
{"task_id": "CPP/84", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring solve(int N){\n    string str,bi=\"\";\n    str=to_string(N);\n    int i,sum=0;\n    for (int i=0;i<str.length();i++)\n        sum+=str[i]-48;\n    while (sum>0)\n    {\n        bi=to_string(sum%2)+bi;\n        sum=sum/2;\n    }\n    return bi;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"1\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1", "fn": "solve", "para": "(int N)", "pass": true}
{"task_id": "CPP/84", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring solve(int N){\n    string str,bi=\"\";\n    str=to_string(N);\n    int i,sum=0;\n    for (int i=0;i<str.length();i++)\n        sum+=str[i]-48;\n    while (sum>0)\n    {\n        bi=to_string(sum%2)+bi;\n        sum=sum/2;\n    }\n    return bi;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"1\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1", "fn": "solve", "para": "(int N)", "pass": true}
{"task_id": "CPP/84", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring solve(int N){\n    string str,bi=\"\";\n    str=to_string(N);\n    int i,sum=0;\n    for (int i=0;i<str.length();i++)\n        sum+=str[i]-48;\n    while (sum>0)\n    {\n        bi=to_string(sum%2)+bi;\n        sum=sum/2;\n    }\n    return bi;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"10010\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "18", "fn": "solve", "para": "(int N)", "pass": false}
{"task_id": "CPP/84", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring solve(int N){\n    string str,bi=\"\";\n    str=to_string(N);\n    int i,sum=0;\n    for (int i=0;i<str.length();i++)\n        sum+=str[i]-48;\n    while (sum>0)\n    {\n        bi=to_string(sum%2)+bi;\n        sum=sum/2;\n    }\n    return bi;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"10010\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "18", "fn": "solve", "para": "(int N)", "pass": false}
{"task_id": "CPP/84", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring solve(int N){\n    string str,bi=\"\";\n    str=to_string(N);\n    int i,sum=0;\n    for (int i=0;i<str.length();i++)\n        sum+=str[i]-48;\n    while (sum>0)\n    {\n        bi=to_string(sum%2)+bi;\n        sum=sum/2;\n    }\n    return bi;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"10010\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "18", "fn": "solve", "para": "(int N)", "pass": false}
{"task_id": "CPP/84", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring solve(int N){\n    string str,bi=\"\";\n    str=to_string(N);\n    int i,sum=0;\n    for (int i=0;i<str.length();i++)\n        sum+=str[i]-48;\n    while (sum>0)\n    {\n        bi=to_string(sum%2)+bi;\n        sum=sum/2;\n    }\n    return bi;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"10010\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "18", "fn": "solve", "para": "(int N)", "pass": false}
{"task_id": "CPP/84", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring solve(int N){\n    string str,bi=\"\";\n    str=to_string(N);\n    int i,sum=0;\n    for (int i=0;i<str.length();i++)\n        sum+=str[i]-48;\n    while (sum>0)\n    {\n        bi=to_string(sum%2)+bi;\n        sum=sum/2;\n    }\n    return bi;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"10010\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "18", "fn": "solve", "para": "(int N)", "pass": false}
{"task_id": "CPP/85", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add(vector<int> lst){\n    int sum=0;\n    for (int i=0;i*2+1<lst.size();i++)\n        if (lst[i*2+1]%2==0) sum+=lst[i*2+1];\n    return sum;\n}\nint main(){\n\tauto result = add(<FILL_ME>);\n\tassert(result==88);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}", "fn": "add", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/85", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add(vector<int> lst){\n    int sum=0;\n    for (int i=0;i*2+1<lst.size();i++)\n        if (lst[i*2+1]%2==0) sum+=lst[i*2+1];\n    return sum;\n}\nint main(){\n\tauto result = add(<FILL_ME>);\n\tassert(result==88);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}", "fn": "add", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/85", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add(vector<int> lst){\n    int sum=0;\n    for (int i=0;i*2+1<lst.size();i++)\n        if (lst[i*2+1]%2==0) sum+=lst[i*2+1];\n    return sum;\n}\nint main(){\n\tauto result = add(<FILL_ME>);\n\tassert(result==88);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 20, 3, 40, 5, 60, 7, 80, 9, 100}", "fn": "add", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/85", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add(vector<int> lst){\n    int sum=0;\n    for (int i=0;i*2+1<lst.size();i++)\n        if (lst[i*2+1]%2==0) sum+=lst[i*2+1];\n    return sum;\n}\nint main(){\n\tauto result = add(<FILL_ME>);\n\tassert(result==88);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}", "fn": "add", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/85", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add(vector<int> lst){\n    int sum=0;\n    for (int i=0;i*2+1<lst.size();i++)\n        if (lst[i*2+1]%2==0) sum+=lst[i*2+1];\n    return sum;\n}\nint main(){\n\tauto result = add(<FILL_ME>);\n\tassert(result==88);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{5, 10, 15, 20, 25, 30}", "fn": "add", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/85", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add(vector<int> lst){\n    int sum=0;\n    for (int i=0;i*2+1<lst.size();i++)\n        if (lst[i*2+1]%2==0) sum+=lst[i*2+1];\n    return sum;\n}\nint main(){\n\tauto result = add(<FILL_ME>);\n\tassert(result==12);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5, 6}", "fn": "add", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/85", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add(vector<int> lst){\n    int sum=0;\n    for (int i=0;i*2+1<lst.size();i++)\n        if (lst[i*2+1]%2==0) sum+=lst[i*2+1];\n    return sum;\n}\nint main(){\n\tauto result = add(<FILL_ME>);\n\tassert(result==12);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5, 6}", "fn": "add", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/85", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add(vector<int> lst){\n    int sum=0;\n    for (int i=0;i*2+1<lst.size();i++)\n        if (lst[i*2+1]%2==0) sum+=lst[i*2+1];\n    return sum;\n}\nint main(){\n\tauto result = add(<FILL_ME>);\n\tassert(result==12);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5, 6}", "fn": "add", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/85", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add(vector<int> lst){\n    int sum=0;\n    for (int i=0;i*2+1<lst.size();i++)\n        if (lst[i*2+1]%2==0) sum+=lst[i*2+1];\n    return sum;\n}\nint main(){\n\tauto result = add(<FILL_ME>);\n\tassert(result==12);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5, 6}", "fn": "add", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/85", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add(vector<int> lst){\n    int sum=0;\n    for (int i=0;i*2+1<lst.size();i++)\n        if (lst[i*2+1]%2==0) sum+=lst[i*2+1];\n    return sum;\n}\nint main(){\n\tauto result = add(<FILL_ME>);\n\tassert(result==12);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5, 6}", "fn": "add", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/85", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add(vector<int> lst){\n    int sum=0;\n    for (int i=0;i*2+1<lst.size();i++)\n        if (lst[i*2+1]%2==0) sum+=lst[i*2+1];\n    return sum;\n}\nint main(){\n\tauto result = add(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 3, 5, 7, 9, 11}", "fn": "add", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/85", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add(vector<int> lst){\n    int sum=0;\n    for (int i=0;i*2+1<lst.size();i++)\n        if (lst[i*2+1]%2==0) sum+=lst[i*2+1];\n    return sum;\n}\nint main(){\n\tauto result = add(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 3, 5, 7, 9, 11}", "fn": "add", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/85", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add(vector<int> lst){\n    int sum=0;\n    for (int i=0;i*2+1<lst.size();i++)\n        if (lst[i*2+1]%2==0) sum+=lst[i*2+1];\n    return sum;\n}\nint main(){\n\tauto result = add(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 3, 5, 7, 9, 11}", "fn": "add", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/85", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add(vector<int> lst){\n    int sum=0;\n    for (int i=0;i*2+1<lst.size();i++)\n        if (lst[i*2+1]%2==0) sum+=lst[i*2+1];\n    return sum;\n}\nint main(){\n\tauto result = add(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 3, 5, 7, 9, 11}", "fn": "add", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/85", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add(vector<int> lst){\n    int sum=0;\n    for (int i=0;i*2+1<lst.size();i++)\n        if (lst[i*2+1]%2==0) sum+=lst[i*2+1];\n    return sum;\n}\nint main(){\n\tauto result = add(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 3, 5, 7, 9, 11}", "fn": "add", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/85", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add(vector<int> lst){\n    int sum=0;\n    for (int i=0;i*2+1<lst.size();i++)\n        if (lst[i*2+1]%2==0) sum+=lst[i*2+1];\n    return sum;\n}\nint main(){\n\tauto result = add(<FILL_ME>);\n\tassert(result==122);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}", "fn": "add", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/85", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add(vector<int> lst){\n    int sum=0;\n    for (int i=0;i*2+1<lst.size();i++)\n        if (lst[i*2+1]%2==0) sum+=lst[i*2+1];\n    return sum;\n}\nint main(){\n\tauto result = add(<FILL_ME>);\n\tassert(result==122);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}", "fn": "add", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/85", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add(vector<int> lst){\n    int sum=0;\n    for (int i=0;i*2+1<lst.size();i++)\n        if (lst[i*2+1]%2==0) sum+=lst[i*2+1];\n    return sum;\n}\nint main(){\n\tauto result = add(<FILL_ME>);\n\tassert(result==122);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}", "fn": "add", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/85", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add(vector<int> lst){\n    int sum=0;\n    for (int i=0;i*2+1<lst.size();i++)\n        if (lst[i*2+1]%2==0) sum+=lst[i*2+1];\n    return sum;\n}\nint main(){\n\tauto result = add(<FILL_ME>);\n\tassert(result==122);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{2, 5, 10, 7, 4, 6, 9, 8}", "fn": "add", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/85", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add(vector<int> lst){\n    int sum=0;\n    for (int i=0;i*2+1<lst.size();i++)\n        if (lst[i*2+1]%2==0) sum+=lst[i*2+1];\n    return sum;\n}\nint main(){\n\tauto result = add(<FILL_ME>);\n\tassert(result==122);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}", "fn": "add", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/86", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        if (out.length()>0) out=out+' ';\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\nint main(){\n\tauto result = anti_shuffle(<FILL_ME>);\n\tassert(result==\"\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"abc cba def fed\"", "fn": "anti_shuffle", "para": "(string s)", "pass": false}
{"task_id": "CPP/86", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        if (out.length()>0) out=out+' ';\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\nint main(){\n\tauto result = anti_shuffle(<FILL_ME>);\n\tassert(result==\"\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"abc cba def fed\"", "fn": "anti_shuffle", "para": "(string s)", "pass": false}
{"task_id": "CPP/86", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        if (out.length()>0) out=out+' ';\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\nint main(){\n\tauto result = anti_shuffle(<FILL_ME>);\n\tassert(result==\"\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"abc cba def fed\"", "fn": "anti_shuffle", "para": "(string s)", "pass": false}
{"task_id": "CPP/86", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        if (out.length()>0) out=out+' ';\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\nint main(){\n\tauto result = anti_shuffle(<FILL_ME>);\n\tassert(result==\"\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"abc cba def fed\"", "fn": "anti_shuffle", "para": "(string s)", "pass": false}
{"task_id": "CPP/86", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        if (out.length()>0) out=out+' ';\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\nint main(){\n\tauto result = anti_shuffle(<FILL_ME>);\n\tassert(result==\"\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"abc cba def fed\"", "fn": "anti_shuffle", "para": "(string s)", "pass": false}
{"task_id": "CPP/86", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        if (out.length()>0) out=out+' ';\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\nint main(){\n\tauto result = anti_shuffle(<FILL_ME>);\n\tassert(result==\".HiMyaemnisMeirst.RbootHowaer?ouy\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"HiMyaemnisMeirst.RbootHowaer?ouy\"", "fn": "anti_shuffle", "para": "(string s)", "pass": false}
{"task_id": "CPP/86", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        if (out.length()>0) out=out+' ';\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\nint main(){\n\tauto result = anti_shuffle(<FILL_ME>);\n\tassert(result==\".HiMyaemnisMeirst.RbootHowaer?ouy\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"HiMyaemnisMeirst.RbootHowaer?ouy\"", "fn": "anti_shuffle", "para": "(string s)", "pass": false}
{"task_id": "CPP/86", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        if (out.length()>0) out=out+' ';\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\nint main(){\n\tauto result = anti_shuffle(<FILL_ME>);\n\tassert(result==\".HiMyaemnisMeirst.RbootHowaer?ouy\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"HiMyaemnisMeirst.RbootHowaer?ouy\"", "fn": "anti_shuffle", "para": "(string s)", "pass": false}
{"task_id": "CPP/86", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        if (out.length()>0) out=out+' ';\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\nint main(){\n\tauto result = anti_shuffle(<FILL_ME>);\n\tassert(result==\".HiMyaemnisMeirst.RbootHowaer?ouy\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"HiMyaemnisMeirst.RbootHowaer?ouy\"", "fn": "anti_shuffle", "para": "(string s)", "pass": false}
{"task_id": "CPP/86", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        if (out.length()>0) out=out+' ';\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\nint main(){\n\tauto result = anti_shuffle(<FILL_ME>);\n\tassert(result==\".HiMyaemnisMeirst.RbootHowaer?ouy\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"HiMyaemnisMeirst.RbootHowaer?ouy\"", "fn": "anti_shuffle", "para": "(string s)", "pass": false}
{"task_id": "CPP/86", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        if (out.length()>0) out=out+' ';\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\nint main(){\n\tauto result = anti_shuffle(<FILL_ME>);\n\tassert(result==\"abcd\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"dcba\"", "fn": "anti_shuffle", "para": "(string s)", "pass": true}
{"task_id": "CPP/86", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        if (out.length()>0) out=out+' ';\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\nint main(){\n\tauto result = anti_shuffle(<FILL_ME>);\n\tassert(result==\"abcd\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"dcba\"", "fn": "anti_shuffle", "para": "(string s)", "pass": true}
{"task_id": "CPP/86", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        if (out.length()>0) out=out+' ';\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\nint main(){\n\tauto result = anti_shuffle(<FILL_ME>);\n\tassert(result==\"abcd\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"dcba\"", "fn": "anti_shuffle", "para": "(string s)", "pass": true}
{"task_id": "CPP/86", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        if (out.length()>0) out=out+' ';\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\nint main(){\n\tauto result = anti_shuffle(<FILL_ME>);\n\tassert(result==\"abcd\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"dcba\"", "fn": "anti_shuffle", "para": "(string s)", "pass": true}
{"task_id": "CPP/86", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        if (out.length()>0) out=out+' ';\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\nint main(){\n\tauto result = anti_shuffle(<FILL_ME>);\n\tassert(result==\"abcd\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"dcba\"", "fn": "anti_shuffle", "para": "(string s)", "pass": true}
{"task_id": "CPP/86", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        if (out.length()>0) out=out+' ';\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\nint main(){\n\tauto result = anti_shuffle(<FILL_ME>);\n\tassert(result==\"Hello!!!Wdlor\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Hello World!!!\"", "fn": "anti_shuffle", "para": "(string s)", "pass": false}
{"task_id": "CPP/86", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        if (out.length()>0) out=out+' ';\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\nint main(){\n\tauto result = anti_shuffle(<FILL_ME>);\n\tassert(result==\"Hello!!!Wdlor\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Hello!!!Wdlor\"", "fn": "anti_shuffle", "para": "(string s)", "pass": false}
{"task_id": "CPP/86", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        if (out.length()>0) out=out+' ';\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\nint main(){\n\tauto result = anti_shuffle(<FILL_ME>);\n\tassert(result==\"Hello!!!Wdlor\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Hello World!!!\"", "fn": "anti_shuffle", "para": "(string s)", "pass": false}
{"task_id": "CPP/86", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        if (out.length()>0) out=out+' ';\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\nint main(){\n\tauto result = anti_shuffle(<FILL_ME>);\n\tassert(result==\"Hello!!!Wdlor\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Hello World!!!\"", "fn": "anti_shuffle", "para": "(string s)", "pass": false}
{"task_id": "CPP/86", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        if (out.length()>0) out=out+' ';\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\nint main(){\n\tauto result = anti_shuffle(<FILL_ME>);\n\tassert(result==\"Hello!!!Wdlor\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Hello World!!!\"", "fn": "anti_shuffle", "para": "(string s)", "pass": false}
{"task_id": "CPP/86", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        if (out.length()>0) out=out+' ';\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\nint main(){\n\tauto result = anti_shuffle(<FILL_ME>);\n\tassert(result==\"ehllo\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\"", "fn": "anti_shuffle", "para": "(string s)", "pass": true}
{"task_id": "CPP/86", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        if (out.length()>0) out=out+' ';\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\nint main(){\n\tauto result = anti_shuffle(<FILL_ME>);\n\tassert(result==\"ehllo\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\"", "fn": "anti_shuffle", "para": "(string s)", "pass": true}
{"task_id": "CPP/86", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        if (out.length()>0) out=out+' ';\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\nint main(){\n\tauto result = anti_shuffle(<FILL_ME>);\n\tassert(result==\"ehllo\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\"", "fn": "anti_shuffle", "para": "(string s)", "pass": true}
{"task_id": "CPP/86", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        if (out.length()>0) out=out+' ';\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\nint main(){\n\tauto result = anti_shuffle(<FILL_ME>);\n\tassert(result==\"ehllo\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"ehllo\"", "fn": "anti_shuffle", "para": "(string s)", "pass": true}
{"task_id": "CPP/86", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        if (out.length()>0) out=out+' ';\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\nint main(){\n\tauto result = anti_shuffle(<FILL_ME>);\n\tassert(result==\"ehllo\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"ehllo\"", "fn": "anti_shuffle", "para": "(string s)", "pass": true}
{"task_id": "CPP/86", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        if (out.length()>0) out=out+' ';\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\nint main(){\n\tauto result = anti_shuffle(<FILL_ME>);\n\tassert(result==\"bemnru\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"unbmer\"", "fn": "anti_shuffle", "para": "(string s)", "pass": true}
{"task_id": "CPP/86", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        if (out.length()>0) out=out+' ';\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\nint main(){\n\tauto result = anti_shuffle(<FILL_ME>);\n\tassert(result==\"bemnru\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"unbmer\"", "fn": "anti_shuffle", "para": "(string s)", "pass": true}
{"task_id": "CPP/86", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        if (out.length()>0) out=out+' ';\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\nint main(){\n\tauto result = anti_shuffle(<FILL_ME>);\n\tassert(result==\"bemnru\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"unbmer\"", "fn": "anti_shuffle", "para": "(string s)", "pass": true}
{"task_id": "CPP/86", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        if (out.length()>0) out=out+' ';\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\nint main(){\n\tauto result = anti_shuffle(<FILL_ME>);\n\tassert(result==\"bemnru\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"unbmer\"", "fn": "anti_shuffle", "para": "(string s)", "pass": true}
{"task_id": "CPP/86", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        if (out.length()>0) out=out+' ';\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\nint main(){\n\tauto result = anti_shuffle(<FILL_ME>);\n\tassert(result==\"bemnru\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"unbmer\"", "fn": "anti_shuffle", "para": "(string s)", "pass": true}
{"task_id": "CPP/86", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        if (out.length()>0) out=out+' ';\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\nint main(){\n\tauto result = anti_shuffle(<FILL_ME>);\n\tassert(result==\"Hi\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"iH\"", "fn": "anti_shuffle", "para": "(string s)", "pass": true}
{"task_id": "CPP/86", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        if (out.length()>0) out=out+' ';\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\nint main(){\n\tauto result = anti_shuffle(<FILL_ME>);\n\tassert(result==\"Hi\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"iH\"", "fn": "anti_shuffle", "para": "(string s)", "pass": true}
{"task_id": "CPP/86", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        if (out.length()>0) out=out+' ';\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\nint main(){\n\tauto result = anti_shuffle(<FILL_ME>);\n\tassert(result==\"Hi\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"iH\"", "fn": "anti_shuffle", "para": "(string s)", "pass": true}
{"task_id": "CPP/86", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        if (out.length()>0) out=out+' ';\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\nint main(){\n\tauto result = anti_shuffle(<FILL_ME>);\n\tassert(result==\"Hi\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"iH\"", "fn": "anti_shuffle", "para": "(string s)", "pass": true}
{"task_id": "CPP/86", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        if (out.length()>0) out=out+' ';\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\nint main(){\n\tauto result = anti_shuffle(<FILL_ME>);\n\tassert(result==\"Hi\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"iH\"", "fn": "anti_shuffle", "para": "(string s)", "pass": true}
{"task_id": "CPP/87", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n    vector<vector<int>> out={};\n    for (int i=0;i<lst.size();i++)\n    for (int j=lst[i].size()-1;j>=0;j-=1)\n    if (lst[i][j]==x) out.push_back({i,j});\n    return out;\n}\nint main(){\n\tauto result = get_row(<FILL_ME>);\n\tassert(issame(result,{{2,2}}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<vector<int>> a,vector<vector<int>> b){\n    if (a.size()!=b.size()) return false;\n\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i].size()!=b[i].size()) return false;\n        for (int j=0;j<a[i].size();j++)\n            if (a[i][j]!=b[i][j]) return false;\n    }\n    return true;\n}\n\n", "filling": "{{1,2,3},{4,5,6},{7,8,9}}, 9", "fn": "get_row", "para": "(vector<vector<int>> lst, int x)", "pass": true}
{"task_id": "CPP/87", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n    vector<vector<int>> out={};\n    for (int i=0;i<lst.size();i++)\n    for (int j=lst[i].size()-1;j>=0;j-=1)\n    if (lst[i][j]==x) out.push_back({i,j});\n    return out;\n}\nint main(){\n\tauto result = get_row(<FILL_ME>);\n\tassert(issame(result,{{2,2}}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<vector<int>> a,vector<vector<int>> b){\n    if (a.size()!=b.size()) return false;\n\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i].size()!=b[i].size()) return false;\n        for (int j=0;j<a[i].size();j++)\n            if (a[i][j]!=b[i][j]) return false;\n    }\n    return true;\n}\n\n", "filling": "{{1,2,3},{4,5,6},{7,8,9}}, 9", "fn": "get_row", "para": "(vector<vector<int>> lst, int x)", "pass": true}
{"task_id": "CPP/87", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n    vector<vector<int>> out={};\n    for (int i=0;i<lst.size();i++)\n    for (int j=lst[i].size()-1;j>=0;j-=1)\n    if (lst[i][j]==x) out.push_back({i,j});\n    return out;\n}\nint main(){\n\tauto result = get_row(<FILL_ME>);\n\tassert(issame(result,{{2,2}}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<vector<int>> a,vector<vector<int>> b){\n    if (a.size()!=b.size()) return false;\n\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i].size()!=b[i].size()) return false;\n        for (int j=0;j<a[i].size();j++)\n            if (a[i][j]!=b[i][j]) return false;\n    }\n    return true;\n}\n\n", "filling": "{{1,2,3},{4,5,6},{7,8,9}}, 9", "fn": "get_row", "para": "(vector<vector<int>> lst, int x)", "pass": true}
{"task_id": "CPP/87", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n    vector<vector<int>> out={};\n    for (int i=0;i<lst.size();i++)\n    for (int j=lst[i].size()-1;j>=0;j-=1)\n    if (lst[i][j]==x) out.push_back({i,j});\n    return out;\n}\nint main(){\n\tauto result = get_row(<FILL_ME>);\n\tassert(issame(result,{{2,2}}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<vector<int>> a,vector<vector<int>> b){\n    if (a.size()!=b.size()) return false;\n\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i].size()!=b[i].size()) return false;\n        for (int j=0;j<a[i].size();j++)\n            if (a[i][j]!=b[i][j]) return false;\n    }\n    return true;\n}\n\n", "filling": "{{1,2,3},{4,5,6},{7,8,9}}, 9", "fn": "get_row", "para": "(vector<vector<int>> lst, int x)", "pass": true}
{"task_id": "CPP/87", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n    vector<vector<int>> out={};\n    for (int i=0;i<lst.size();i++)\n    for (int j=lst[i].size()-1;j>=0;j-=1)\n    if (lst[i][j]==x) out.push_back({i,j});\n    return out;\n}\nint main(){\n\tauto result = get_row(<FILL_ME>);\n\tassert(issame(result,{{2,2}}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<vector<int>> a,vector<vector<int>> b){\n    if (a.size()!=b.size()) return false;\n\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i].size()!=b[i].size()) return false;\n        for (int j=0;j<a[i].size();j++)\n            if (a[i][j]!=b[i][j]) return false;\n    }\n    return true;\n}\n\n", "filling": "{{1,2,3},{4,5,6},{7,8,9}}, 9", "fn": "get_row", "para": "(vector<vector<int>> lst, int x)", "pass": true}
{"task_id": "CPP/87", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n    vector<vector<int>> out={};\n    for (int i=0;i<lst.size();i++)\n    for (int j=lst[i].size()-1;j>=0;j-=1)\n    if (lst[i][j]==x) out.push_back({i,j});\n    return out;\n}\nint main(){\n\tauto result = get_row(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<vector<int>> a,vector<vector<int>> b){\n    if (a.size()!=b.size()) return false;\n\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i].size()!=b[i].size()) return false;\n        for (int j=0;j<a[i].size();j++)\n            if (a[i][j]!=b[i][j]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<vector<int>>{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 10", "fn": "get_row", "para": "(vector<vector<int>> lst, int x)", "pass": true}
{"task_id": "CPP/87", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n    vector<vector<int>> out={};\n    for (int i=0;i<lst.size();i++)\n    for (int j=lst[i].size()-1;j>=0;j-=1)\n    if (lst[i][j]==x) out.push_back({i,j});\n    return out;\n}\nint main(){\n\tauto result = get_row(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<vector<int>> a,vector<vector<int>> b){\n    if (a.size()!=b.size()) return false;\n\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i].size()!=b[i].size()) return false;\n        for (int j=0;j<a[i].size();j++)\n            if (a[i][j]!=b[i][j]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<vector<int>>{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 10", "fn": "get_row", "para": "(vector<vector<int>> lst, int x)", "pass": true}
{"task_id": "CPP/87", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n    vector<vector<int>> out={};\n    for (int i=0;i<lst.size();i++)\n    for (int j=lst[i].size()-1;j>=0;j-=1)\n    if (lst[i][j]==x) out.push_back({i,j});\n    return out;\n}\nint main(){\n\tauto result = get_row(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<vector<int>> a,vector<vector<int>> b){\n    if (a.size()!=b.size()) return false;\n\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i].size()!=b[i].size()) return false;\n        for (int j=0;j<a[i].size();j++)\n            if (a[i][j]!=b[i][j]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<vector<int>>{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 10", "fn": "get_row", "para": "(vector<vector<int>> lst, int x)", "pass": true}
{"task_id": "CPP/87", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n    vector<vector<int>> out={};\n    for (int i=0;i<lst.size();i++)\n    for (int j=lst[i].size()-1;j>=0;j-=1)\n    if (lst[i][j]==x) out.push_back({i,j});\n    return out;\n}\nint main(){\n\tauto result = get_row(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<vector<int>> a,vector<vector<int>> b){\n    if (a.size()!=b.size()) return false;\n\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i].size()!=b[i].size()) return false;\n        for (int j=0;j<a[i].size();j++)\n            if (a[i][j]!=b[i][j]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<vector<int>>{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 10", "fn": "get_row", "para": "(vector<vector<int>> lst, int x)", "pass": true}
{"task_id": "CPP/87", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n    vector<vector<int>> out={};\n    for (int i=0;i<lst.size();i++)\n    for (int j=lst[i].size()-1;j>=0;j-=1)\n    if (lst[i][j]==x) out.push_back({i,j});\n    return out;\n}\nint main(){\n\tauto result = get_row(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<vector<int>> a,vector<vector<int>> b){\n    if (a.size()!=b.size()) return false;\n\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i].size()!=b[i].size()) return false;\n        for (int j=0;j<a[i].size();j++)\n            if (a[i][j]!=b[i][j]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<vector<int>>{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 10", "fn": "get_row", "para": "(vector<vector<int>> lst, int x)", "pass": true}
{"task_id": "CPP/87", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n    vector<vector<int>> out={};\n    for (int i=0;i<lst.size();i++)\n    for (int j=lst[i].size()-1;j>=0;j-=1)\n    if (lst[i][j]==x) out.push_back({i,j});\n    return out;\n}\nint main(){\n\tauto result = get_row(<FILL_ME>);\n\tassertresult;\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<vector<int>> a,vector<vector<int>> b){\n    if (a.size()!=b.size()) return false;\n\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i].size()!=b[i].size()) return false;\n        for (int j=0;j<a[i].size();j++)\n            if (a[i][j]!=b[i][j]) return false;\n    }\n    return true;\n}\n\n", "filling": "{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 5", "fn": "get_row", "para": "(vector<vector<int>> lst, int x)", "pass": false}
{"task_id": "CPP/87", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n    vector<vector<int>> out={};\n    for (int i=0;i<lst.size();i++)\n    for (int j=lst[i].size()-1;j>=0;j-=1)\n    if (lst[i][j]==x) out.push_back({i,j});\n    return out;\n}\nint main(){\n\tauto result = get_row(<FILL_ME>);\n\tassertresult;\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<vector<int>> a,vector<vector<int>> b){\n    if (a.size()!=b.size()) return false;\n\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i].size()!=b[i].size()) return false;\n        for (int j=0;j<a[i].size();j++)\n            if (a[i][j]!=b[i][j]) return false;\n    }\n    return true;\n}\n\n", "filling": "{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 5", "fn": "get_row", "para": "(vector<vector<int>> lst, int x)", "pass": false}
{"task_id": "CPP/87", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n    vector<vector<int>> out={};\n    for (int i=0;i<lst.size();i++)\n    for (int j=lst[i].size()-1;j>=0;j-=1)\n    if (lst[i][j]==x) out.push_back({i,j});\n    return out;\n}\nint main(){\n\tauto result = get_row(<FILL_ME>);\n\tassertresult;\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<vector<int>> a,vector<vector<int>> b){\n    if (a.size()!=b.size()) return false;\n\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i].size()!=b[i].size()) return false;\n        for (int j=0;j<a[i].size();j++)\n            if (a[i][j]!=b[i][j]) return false;\n    }\n    return true;\n}\n\n", "filling": "{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 5", "fn": "get_row", "para": "(vector<vector<int>> lst, int x)", "pass": false}
{"task_id": "CPP/87", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n    vector<vector<int>> out={};\n    for (int i=0;i<lst.size();i++)\n    for (int j=lst[i].size()-1;j>=0;j-=1)\n    if (lst[i][j]==x) out.push_back({i,j});\n    return out;\n}\nint main(){\n\tauto result = get_row(<FILL_ME>);\n\tassertresult;\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<vector<int>> a,vector<vector<int>> b){\n    if (a.size()!=b.size()) return false;\n\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i].size()!=b[i].size()) return false;\n        for (int j=0;j<a[i].size();j++)\n            if (a[i][j]!=b[i][j]) return false;\n    }\n    return true;\n}\n\n", "filling": "{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 5", "fn": "get_row", "para": "(vector<vector<int>> lst, int x)", "pass": false}
{"task_id": "CPP/87", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n    vector<vector<int>> out={};\n    for (int i=0;i<lst.size();i++)\n    for (int j=lst[i].size()-1;j>=0;j-=1)\n    if (lst[i][j]==x) out.push_back({i,j});\n    return out;\n}\nint main(){\n\tauto result = get_row(<FILL_ME>);\n\tassertresult;\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<vector<int>> a,vector<vector<int>> b){\n    if (a.size()!=b.size()) return false;\n\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i].size()!=b[i].size()) return false;\n        for (int j=0;j<a[i].size();j++)\n            if (a[i][j]!=b[i][j]) return false;\n    }\n    return true;\n}\n\n", "filling": "{{1,2,3},{4,5,6},{7,8,9}}, 5", "fn": "get_row", "para": "(vector<vector<int>> lst, int x)", "pass": false}
{"task_id": "CPP/88", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2==1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{0,1,2,3,4,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{3,1,5,0,4,2}", "fn": "sort_array", "para": "(vector<int> array)", "pass": true}
{"task_id": "CPP/88", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2==1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{0,1,2,3,4,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{3,1,5,0,4,2}", "fn": "sort_array", "para": "(vector<int> array)", "pass": true}
{"task_id": "CPP/88", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2==1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{0,1,2,3,4,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{3,1,5,0,4,2}", "fn": "sort_array", "para": "(vector<int> array)", "pass": true}
{"task_id": "CPP/88", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2==1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{0,1,2,3,4,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{3,1,5,0,4,2}", "fn": "sort_array", "para": "(vector<int> array)", "pass": true}
{"task_id": "CPP/88", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2==1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{0,1,2,3,4,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{3,1,5,0,4,2}", "fn": "sort_array", "para": "(vector<int> array)", "pass": true}
{"task_id": "CPP/88", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2==1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{6,5,4,3,2,1,0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{0,1,2,3,4,5,6}", "fn": "sort_array", "para": "(vector<int> array)", "pass": true}
{"task_id": "CPP/88", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2==1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{6,5,4,3,2,1,0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{0,1,2,3,4,5,6}", "fn": "sort_array", "para": "(vector<int> array)", "pass": true}
{"task_id": "CPP/88", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2==1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{6,5,4,3,2,1,0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{0,1,2,3,4,5,6}", "fn": "sort_array", "para": "(vector<int> array)", "pass": true}
{"task_id": "CPP/88", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2==1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{6,5,4,3,2,1,0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{0,1,2,3,4,5,6}", "fn": "sort_array", "para": "(vector<int> array)", "pass": true}
{"task_id": "CPP/88", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2==1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{6,5,4,3,2,1,0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{0,1,2,3,4,5,6}", "fn": "sort_array", "para": "(vector<int> array)", "pass": true}
{"task_id": "CPP/88", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2==1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{1,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{2,1}", "fn": "sort_array", "para": "(vector<int> array)", "pass": true}
{"task_id": "CPP/88", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2==1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{1,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{2,1}", "fn": "sort_array", "para": "(vector<int> array)", "pass": true}
{"task_id": "CPP/88", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2==1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{1,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{2,1}", "fn": "sort_array", "para": "(vector<int> array)", "pass": true}
{"task_id": "CPP/88", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2==1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{1,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{2,1}", "fn": "sort_array", "para": "(vector<int> array)", "pass": true}
{"task_id": "CPP/88", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2==1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{1,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{2,1}", "fn": "sort_array", "para": "(vector<int> array)", "pass": true}
{"task_id": "CPP/88", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2==1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{5}", "fn": "sort_array", "para": "(vector<int> array)", "pass": true}
{"task_id": "CPP/88", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2==1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{5}", "fn": "sort_array", "para": "(vector<int> array)", "pass": true}
{"task_id": "CPP/88", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2==1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{5}", "fn": "sort_array", "para": "(vector<int> array)", "pass": true}
{"task_id": "CPP/88", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2==1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{5}", "fn": "sort_array", "para": "(vector<int> array)", "pass": true}
{"task_id": "CPP/88", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2==1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{5}", "fn": "sort_array", "para": "(vector<int> array)", "pass": true}
{"task_id": "CPP/88", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2==1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{0,11,15,32,42,87}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{15,11,42,0,87,32}", "fn": "sort_array", "para": "(vector<int> array)", "pass": true}
{"task_id": "CPP/88", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2==1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{0,11,15,32,42,87}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{15,11,42,0,87,32}", "fn": "sort_array", "para": "(vector<int> array)", "pass": true}
{"task_id": "CPP/88", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2==1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{0,11,15,32,42,87}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{15,11,42,0,87,32}", "fn": "sort_array", "para": "(vector<int> array)", "pass": true}
{"task_id": "CPP/88", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2==1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{0,11,15,32,42,87}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{15,11,42,0,87,32}", "fn": "sort_array", "para": "(vector<int> array)", "pass": true}
{"task_id": "CPP/88", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2==1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{0,11,15,32,42,87}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{15,11,42,0,87,32}", "fn": "sort_array", "para": "(vector<int> array)", "pass": true}
{"task_id": "CPP/88", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2==1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{23,21,14,11}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{23, 21, 14, 11}", "fn": "sort_array", "para": "(vector<int> array)", "pass": true}
{"task_id": "CPP/88", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2==1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{23,21,14,11}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{23, 21, 14, 11}", "fn": "sort_array", "para": "(vector<int> array)", "pass": true}
{"task_id": "CPP/88", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2==1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{23,21,14,11}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{23, 21, 14, 11}", "fn": "sort_array", "para": "(vector<int> array)", "pass": true}
{"task_id": "CPP/88", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2==1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{23,21,14,11}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{23, 21, 14, 11}", "fn": "sort_array", "para": "(vector<int> array)", "pass": true}
{"task_id": "CPP/88", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2==1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{23,21,14,11}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{23,21,14,11}", "fn": "sort_array", "para": "(vector<int> array)", "pass": true}
{"task_id": "CPP/88", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2==1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{}", "fn": "sort_array", "para": "(vector<int> array)", "pass": true}
{"task_id": "CPP/88", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2==1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{5, 2, 8, 1}", "fn": "sort_array", "para": "(vector<int> array)", "pass": false}
{"task_id": "CPP/88", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2==1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{}", "fn": "sort_array", "para": "(vector<int> array)", "pass": true}
{"task_id": "CPP/88", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2==1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{5, 2, 8, 1}", "fn": "sort_array", "para": "(vector<int> array)", "pass": false}
{"task_id": "CPP/88", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2==1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{}", "fn": "sort_array", "para": "(vector<int> array)", "pass": true}
{"task_id": "CPP/89", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encrypt(<FILL_ME>);\n\tassert(result==\"jeiajeaijeiak\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"gafgafgafgaig\"", "fn": "encrypt", "para": "(string s)", "pass": false}
{"task_id": "CPP/89", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encrypt(<FILL_ME>);\n\tassert(result==\"jeiajeaijeiak\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"gafgafgafgaig\"", "fn": "encrypt", "para": "(string s)", "pass": false}
{"task_id": "CPP/89", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encrypt(<FILL_ME>);\n\tassert(result==\"jeiajeaijeiak\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"gafgafgafgaig\"", "fn": "encrypt", "para": "(string s)", "pass": false}
{"task_id": "CPP/89", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encrypt(<FILL_ME>);\n\tassert(result==\"jeiajeaijeiak\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"gazegaze\"", "fn": "encrypt", "para": "(string s)", "pass": false}
{"task_id": "CPP/89", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encrypt(<FILL_ME>);\n\tassert(result==\"jeiajeaijeiak\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"gazegaze\"", "fn": "encrypt", "para": "(string s)", "pass": false}
{"task_id": "CPP/89", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encrypt(<FILL_ME>);\n\tassert(result==\"ix\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"et\"", "fn": "encrypt", "para": "(string s)", "pass": true}
{"task_id": "CPP/89", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encrypt(<FILL_ME>);\n\tassert(result==\"ix\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"et\"", "fn": "encrypt", "para": "(string s)", "pass": true}
{"task_id": "CPP/89", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encrypt(<FILL_ME>);\n\tassert(result==\"ix\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"et\"", "fn": "encrypt", "para": "(string s)", "pass": true}
{"task_id": "CPP/89", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encrypt(<FILL_ME>);\n\tassert(result==\"ix\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"et\"", "fn": "encrypt", "para": "(string s)", "pass": true}
{"task_id": "CPP/89", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encrypt(<FILL_ME>);\n\tassert(result==\"ix\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"et\"", "fn": "encrypt", "para": "(string s)", "pass": true}
{"task_id": "CPP/89", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encrypt(<FILL_ME>);\n\tassert(result==\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"attackatdawn\"", "fn": "encrypt", "para": "(string s)", "pass": false}
{"task_id": "CPP/89", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encrypt(<FILL_ME>);\n\tassert(result==\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"abcdefghij\"", "fn": "encrypt", "para": "(string s)", "pass": false}
{"task_id": "CPP/89", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encrypt(<FILL_ME>);\n\tassert(result==\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"abcdefghijklmnopqrstuvwxyz\"", "fn": "encrypt", "para": "(string s)", "pass": false}
{"task_id": "CPP/89", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encrypt(<FILL_ME>);\n\tassert(result==\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"happybirthdaytoyou\"", "fn": "encrypt", "para": "(string s)", "pass": false}
{"task_id": "CPP/89", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encrypt(<FILL_ME>);\n\tassert(result==\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"abcdefghijklmnopqrstuvwxyz\"", "fn": "encrypt", "para": "(string s)", "pass": false}
{"task_id": "CPP/89", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encrypt(<FILL_ME>);\n\tassert(result==\"lippsqcjvmirh\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"helloplanet\"", "fn": "encrypt", "para": "(string s)", "pass": false}
{"task_id": "CPP/89", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encrypt(<FILL_ME>);\n\tassert(result==\"lippsqcjvmirh\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"helloplanet\"", "fn": "encrypt", "para": "(string s)", "pass": false}
{"task_id": "CPP/89", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encrypt(<FILL_ME>);\n\tassert(result==\"lippsqcjvmirh\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"helloplanet\"", "fn": "encrypt", "para": "(string s)", "pass": false}
{"task_id": "CPP/89", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encrypt(<FILL_ME>);\n\tassert(result==\"lippsqcjvmirh\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"helloworld\"", "fn": "encrypt", "para": "(string s)", "pass": false}
{"task_id": "CPP/89", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encrypt(<FILL_ME>);\n\tassert(result==\"lippsqcjvmirh\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"helloplanet\"", "fn": "encrypt", "para": "(string s)", "pass": false}
{"task_id": "CPP/89", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encrypt(<FILL_ME>);\n\tassert(result==\"e\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"a\"", "fn": "encrypt", "para": "(string s)", "pass": true}
{"task_id": "CPP/89", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encrypt(<FILL_ME>);\n\tassert(result==\"e\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"a\"", "fn": "encrypt", "para": "(string s)", "pass": true}
{"task_id": "CPP/89", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encrypt(<FILL_ME>);\n\tassert(result==\"e\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"a\"", "fn": "encrypt", "para": "(string s)", "pass": true}
{"task_id": "CPP/89", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encrypt(<FILL_ME>);\n\tassert(result==\"e\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"a\"", "fn": "encrypt", "para": "(string s)", "pass": true}
{"task_id": "CPP/89", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encrypt(<FILL_ME>);\n\tassert(result==\"e\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"a\"", "fn": "encrypt", "para": "(string s)", "pass": true}
{"task_id": "CPP/89", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encrypt(<FILL_ME>);\n\tassert(result==\"kj\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"gf\"", "fn": "encrypt", "para": "(string s)", "pass": true}
{"task_id": "CPP/89", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encrypt(<FILL_ME>);\n\tassert(result==\"kj\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"gf\"", "fn": "encrypt", "para": "(string s)", "pass": true}
{"task_id": "CPP/89", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encrypt(<FILL_ME>);\n\tassert(result==\"kj\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"gf\"", "fn": "encrypt", "para": "(string s)", "pass": true}
{"task_id": "CPP/89", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encrypt(<FILL_ME>);\n\tassert(result==\"kj\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"gf\"", "fn": "encrypt", "para": "(string s)", "pass": true}
{"task_id": "CPP/89", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encrypt(<FILL_ME>);\n\tassert(result==\"kj\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"gf\"", "fn": "encrypt", "para": "(string s)", "pass": true}
{"task_id": "CPP/89", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encrypt(<FILL_ME>);\n\tassert(result==\"lm\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hi\"", "fn": "encrypt", "para": "(string s)", "pass": true}
{"task_id": "CPP/89", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encrypt(<FILL_ME>);\n\tassert(result==\"lm\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hi\"", "fn": "encrypt", "para": "(string s)", "pass": true}
{"task_id": "CPP/89", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encrypt(<FILL_ME>);\n\tassert(result==\"lm\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hi\"", "fn": "encrypt", "para": "(string s)", "pass": true}
{"task_id": "CPP/89", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encrypt(<FILL_ME>);\n\tassert(result==\"lm\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hi\"", "fn": "encrypt", "para": "(string s)", "pass": true}
{"task_id": "CPP/89", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encrypt(<FILL_ME>);\n\tassert(result==\"lm\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hi\"", "fn": "encrypt", "para": "(string s)", "pass": true}
{"task_id": "CPP/89", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encrypt(<FILL_ME>);\n\tassert(result==\"ewhjklnop\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"asdefghij\"", "fn": "encrypt", "para": "(string s)", "pass": false}
{"task_id": "CPP/89", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encrypt(<FILL_ME>);\n\tassert(result==\"ewhjklnop\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"asdefghij\"", "fn": "encrypt", "para": "(string s)", "pass": false}
{"task_id": "CPP/89", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encrypt(<FILL_ME>);\n\tassert(result==\"ewhjklnop\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"aqzabcde\"", "fn": "encrypt", "para": "(string s)", "pass": false}
{"task_id": "CPP/89", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encrypt(<FILL_ME>);\n\tassert(result==\"ewhjklnop\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"asdefghij\"", "fn": "encrypt", "para": "(string s)", "pass": false}
{"task_id": "CPP/89", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encrypt(<FILL_ME>);\n\tassert(result==\"ewhjklnop\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"asdefghij\"", "fn": "encrypt", "para": "(string s)", "pass": false}
{"task_id": "CPP/90", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint next_smallest(vector<int> lst){\n    sort(lst.begin(),lst.end());\n    for (int i=1;i<lst.size();i++)\n        if (lst[i]!=lst[i-1]) return lst[i];\n    return -1;\n}\nint main(){\n\tauto result = next_smallest(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1,2,2,3}", "fn": "next_smallest", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/90", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint next_smallest(vector<int> lst){\n    sort(lst.begin(),lst.end());\n    for (int i=1;i<lst.size();i++)\n        if (lst[i]!=lst[i-1]) return lst[i];\n    return -1;\n}\nint main(){\n\tauto result = next_smallest(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1,2,2,3}", "fn": "next_smallest", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/90", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint next_smallest(vector<int> lst){\n    sort(lst.begin(),lst.end());\n    for (int i=1;i<lst.size();i++)\n        if (lst[i]!=lst[i-1]) return lst[i];\n    return -1;\n}\nint main(){\n\tauto result = next_smallest(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1,2,2,3}", "fn": "next_smallest", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/90", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint next_smallest(vector<int> lst){\n    sort(lst.begin(),lst.end());\n    for (int i=1;i<lst.size();i++)\n        if (lst[i]!=lst[i-1]) return lst[i];\n    return -1;\n}\nint main(){\n\tauto result = next_smallest(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1,2,2,3}", "fn": "next_smallest", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/90", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint next_smallest(vector<int> lst){\n    sort(lst.begin(),lst.end());\n    for (int i=1;i<lst.size();i++)\n        if (lst[i]!=lst[i-1]) return lst[i];\n    return -1;\n}\nint main(){\n\tauto result = next_smallest(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1,2,2,3}", "fn": "next_smallest", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/90", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint next_smallest(vector<int> lst){\n    sort(lst.begin(),lst.end());\n    for (int i=1;i<lst.size();i++)\n        if (lst[i]!=lst[i-1]) return lst[i];\n    return -1;\n}\nint main(){\n\tauto result = next_smallest(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{3, 5, 2, 5, 3}", "fn": "next_smallest", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/90", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint next_smallest(vector<int> lst){\n    sort(lst.begin(),lst.end());\n    for (int i=1;i<lst.size();i++)\n        if (lst[i]!=lst[i-1]) return lst[i];\n    return -1;\n}\nint main(){\n\tauto result = next_smallest(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{3, 5, 2, 5, 3}", "fn": "next_smallest", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/90", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint next_smallest(vector<int> lst){\n    sort(lst.begin(),lst.end());\n    for (int i=1;i<lst.size();i++)\n        if (lst[i]!=lst[i-1]) return lst[i];\n    return -1;\n}\nint main(){\n\tauto result = next_smallest(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{3, 5, 2, 5, 3}", "fn": "next_smallest", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/90", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint next_smallest(vector<int> lst){\n    sort(lst.begin(),lst.end());\n    for (int i=1;i<lst.size();i++)\n        if (lst[i]!=lst[i-1]) return lst[i];\n    return -1;\n}\nint main(){\n\tauto result = next_smallest(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{3, 5, 2, 5, 3}", "fn": "next_smallest", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/90", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint next_smallest(vector<int> lst){\n    sort(lst.begin(),lst.end());\n    for (int i=1;i<lst.size();i++)\n        if (lst[i]!=lst[i-1]) return lst[i];\n    return -1;\n}\nint main(){\n\tauto result = next_smallest(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{3, 5, 2, 5, 3}", "fn": "next_smallest", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/90", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint next_smallest(vector<int> lst){\n    sort(lst.begin(),lst.end());\n    for (int i=1;i<lst.size();i++)\n        if (lst[i]!=lst[i-1]) return lst[i];\n    return -1;\n}\nint main(){\n\tauto result = next_smallest(<FILL_ME>);\n\tassert(result==-35);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{-35, -35, -35, -10, 5, 20}", "fn": "next_smallest", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/90", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint next_smallest(vector<int> lst){\n    sort(lst.begin(),lst.end());\n    for (int i=1;i<lst.size();i++)\n        if (lst[i]!=lst[i-1]) return lst[i];\n    return -1;\n}\nint main(){\n\tauto result = next_smallest(<FILL_ME>);\n\tassert(result==-35);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{-35, 5, 10, 15, 20}", "fn": "next_smallest", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/90", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint next_smallest(vector<int> lst){\n    sort(lst.begin(),lst.end());\n    for (int i=1;i<lst.size();i++)\n        if (lst[i]!=lst[i-1]) return lst[i];\n    return -1;\n}\nint main(){\n\tauto result = next_smallest(<FILL_ME>);\n\tassert(result==-35);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{-35, 5, 10, 15, 20}", "fn": "next_smallest", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/90", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint next_smallest(vector<int> lst){\n    sort(lst.begin(),lst.end());\n    for (int i=1;i<lst.size();i++)\n        if (lst[i]!=lst[i-1]) return lst[i];\n    return -1;\n}\nint main(){\n\tauto result = next_smallest(<FILL_ME>);\n\tassert(result==-35);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{-35, -35, -35, -10, 5, 20}", "fn": "next_smallest", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/90", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint next_smallest(vector<int> lst){\n    sort(lst.begin(),lst.end());\n    for (int i=1;i<lst.size();i++)\n        if (lst[i]!=lst[i-1]) return lst[i];\n    return -1;\n}\nint main(){\n\tauto result = next_smallest(<FILL_ME>);\n\tassert(result==-35);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{-35, -35, 0, 5, 10}", "fn": "next_smallest", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/90", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint next_smallest(vector<int> lst){\n    sort(lst.begin(),lst.end());\n    for (int i=1;i<lst.size();i++)\n        if (lst[i]!=lst[i-1]) return lst[i];\n    return -1;\n}\nint main(){\n\tauto result = next_smallest(<FILL_ME>);\n\tassert(result==-1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{3, 3, 3, 3}", "fn": "next_smallest", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/90", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint next_smallest(vector<int> lst){\n    sort(lst.begin(),lst.end());\n    for (int i=1;i<lst.size();i++)\n        if (lst[i]!=lst[i-1]) return lst[i];\n    return -1;\n}\nint main(){\n\tauto result = next_smallest(<FILL_ME>);\n\tassert(result==-1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{3, 3, 3, 3}", "fn": "next_smallest", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/90", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint next_smallest(vector<int> lst){\n    sort(lst.begin(),lst.end());\n    for (int i=1;i<lst.size();i++)\n        if (lst[i]!=lst[i-1]) return lst[i];\n    return -1;\n}\nint main(){\n\tauto result = next_smallest(<FILL_ME>);\n\tassert(result==-1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{3, 3, 3, 3}", "fn": "next_smallest", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/90", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint next_smallest(vector<int> lst){\n    sort(lst.begin(),lst.end());\n    for (int i=1;i<lst.size();i++)\n        if (lst[i]!=lst[i-1]) return lst[i];\n    return -1;\n}\nint main(){\n\tauto result = next_smallest(<FILL_ME>);\n\tassert(result==-1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{3, 3, 3, 3}", "fn": "next_smallest", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/90", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint next_smallest(vector<int> lst){\n    sort(lst.begin(),lst.end());\n    for (int i=1;i<lst.size();i++)\n        if (lst[i]!=lst[i-1]) return lst[i];\n    return -1;\n}\nint main(){\n\tauto result = next_smallest(<FILL_ME>);\n\tassert(result==-1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{3, 3, 3, 3}", "fn": "next_smallest", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/91", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint is_bored(string S){\n    bool isstart=true;\n    bool isi=false;\n    int sum=0;\n    for (int i=0;i<S.length();i++)\n    {\n        if (S[i]==' ' and isi) {isi=false; sum+=1;}\n        if (S[i]=='I' and isstart) {isi=true;  }\n        else isi=false;   \n        if (S[i]!=' ') { isstart=false;}\n        if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;\n    }\n    return sum;\n}\nint main(){\n\tauto result = is_bored(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\" I am bored. Are you bored too?\"", "fn": "is_bored", "para": "(string S)", "pass": true}
{"task_id": "CPP/91", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint is_bored(string S){\n    bool isstart=true;\n    bool isi=false;\n    int sum=0;\n    for (int i=0;i<S.length();i++)\n    {\n        if (S[i]==' ' and isi) {isi=false; sum+=1;}\n        if (S[i]=='I' and isstart) {isi=true;  }\n        else isi=false;   \n        if (S[i]!=' ') { isstart=false;}\n        if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;\n    }\n    return sum;\n}\nint main(){\n\tauto result = is_bored(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\" I am bored. Are you bored too?\"", "fn": "is_bored", "para": "(string S)", "pass": true}
{"task_id": "CPP/91", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint is_bored(string S){\n    bool isstart=true;\n    bool isi=false;\n    int sum=0;\n    for (int i=0;i<S.length();i++)\n    {\n        if (S[i]==' ' and isi) {isi=false; sum+=1;}\n        if (S[i]=='I' and isstart) {isi=true;  }\n        else isi=false;   \n        if (S[i]!=' ') { isstart=false;}\n        if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;\n    }\n    return sum;\n}\nint main(){\n\tauto result = is_bored(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\" I am bored. Are you bored too?\"", "fn": "is_bored", "para": "(string S)", "pass": true}
{"task_id": "CPP/91", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint is_bored(string S){\n    bool isstart=true;\n    bool isi=false;\n    int sum=0;\n    for (int i=0;i<S.length();i++)\n    {\n        if (S[i]==' ' and isi) {isi=false; sum+=1;}\n        if (S[i]=='I' and isstart) {isi=true;  }\n        else isi=false;   \n        if (S[i]!=' ') { isstart=false;}\n        if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;\n    }\n    return sum;\n}\nint main(){\n\tauto result = is_bored(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\" I am bored. Are you bored too?\"", "fn": "is_bored", "para": "(string S)", "pass": true}
{"task_id": "CPP/91", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint is_bored(string S){\n    bool isstart=true;\n    bool isi=false;\n    int sum=0;\n    for (int i=0;i<S.length();i++)\n    {\n        if (S[i]==' ' and isi) {isi=false; sum+=1;}\n        if (S[i]=='I' and isstart) {isi=true;  }\n        else isi=false;   \n        if (S[i]!=' ') { isstart=false;}\n        if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;\n    }\n    return sum;\n}\nint main(){\n\tauto result = is_bored(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\" I am bored. Are you bored too?\"", "fn": "is_bored", "para": "(string S)", "pass": true}
{"task_id": "CPP/91", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint is_bored(string S){\n    bool isstart=true;\n    bool isi=false;\n    int sum=0;\n    for (int i=0;i<S.length();i++)\n    {\n        if (S[i]==' ' and isi) {isi=false; sum+=1;}\n        if (S[i]=='I' and isstart) {isi=true;  }\n        else isi=false;   \n        if (S[i]!=' ') { isstart=false;}\n        if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;\n    }\n    return sum;\n}\nint main(){\n\tauto result = is_bored(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"is_I am bored.\"", "fn": "is_bored", "para": "(string S)", "pass": true}
{"task_id": "CPP/91", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint is_bored(string S){\n    bool isstart=true;\n    bool isi=false;\n    int sum=0;\n    for (int i=0;i<S.length();i++)\n    {\n        if (S[i]==' ' and isi) {isi=false; sum+=1;}\n        if (S[i]=='I' and isstart) {isi=true;  }\n        else isi=false;   \n        if (S[i]!=' ') { isstart=false;}\n        if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;\n    }\n    return sum;\n}\nint main(){\n\tauto result = is_bored(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"is_I am bored.\"", "fn": "is_bored", "para": "(string S)", "pass": true}
{"task_id": "CPP/91", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint is_bored(string S){\n    bool isstart=true;\n    bool isi=false;\n    int sum=0;\n    for (int i=0;i<S.length();i++)\n    {\n        if (S[i]==' ' and isi) {isi=false; sum+=1;}\n        if (S[i]=='I' and isstart) {isi=true;  }\n        else isi=false;   \n        if (S[i]!=' ') { isstart=false;}\n        if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;\n    }\n    return sum;\n}\nint main(){\n\tauto result = is_bored(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"is_I am bored.\"", "fn": "is_bored", "para": "(string S)", "pass": true}
{"task_id": "CPP/91", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint is_bored(string S){\n    bool isstart=true;\n    bool isi=false;\n    int sum=0;\n    for (int i=0;i<S.length();i++)\n    {\n        if (S[i]==' ' and isi) {isi=false; sum+=1;}\n        if (S[i]=='I' and isstart) {isi=true;  }\n        else isi=false;   \n        if (S[i]!=' ') { isstart=false;}\n        if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;\n    }\n    return sum;\n}\nint main(){\n\tauto result = is_bored(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"is_I am bored.\"", "fn": "is_bored", "para": "(string S)", "pass": true}
{"task_id": "CPP/91", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint is_bored(string S){\n    bool isstart=true;\n    bool isi=false;\n    int sum=0;\n    for (int i=0;i<S.length();i++)\n    {\n        if (S[i]==' ' and isi) {isi=false; sum+=1;}\n        if (S[i]=='I' and isstart) {isi=true;  }\n        else isi=false;   \n        if (S[i]!=' ') { isstart=false;}\n        if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;\n    }\n    return sum;\n}\nint main(){\n\tauto result = is_bored(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"is_I am bored.\"", "fn": "is_bored", "para": "(string S)", "pass": true}
{"task_id": "CPP/91", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint is_bored(string S){\n    bool isstart=true;\n    bool isi=false;\n    int sum=0;\n    for (int i=0;i<S.length();i++)\n    {\n        if (S[i]==' ' and isi) {isi=false; sum+=1;}\n        if (S[i]=='I' and isstart) {isi=true;  }\n        else isi=false;   \n        if (S[i]!=' ') { isstart=false;}\n        if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;\n    }\n    return sum;\n}\nint main(){\n\tauto result = is_bored(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Are you bored? I am bored.\"", "fn": "is_bored", "para": "(string S)", "pass": false}
{"task_id": "CPP/91", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint is_bored(string S){\n    bool isstart=true;\n    bool isi=false;\n    int sum=0;\n    for (int i=0;i<S.length();i++)\n    {\n        if (S[i]==' ' and isi) {isi=false; sum+=1;}\n        if (S[i]=='I' and isstart) {isi=true;  }\n        else isi=false;   \n        if (S[i]!=' ') { isstart=false;}\n        if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;\n    }\n    return sum;\n}\nint main(){\n\tauto result = is_bored(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"I am bored. Are you bored too?\"", "fn": "is_bored", "para": "(string S)", "pass": false}
{"task_id": "CPP/91", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint is_bored(string S){\n    bool isstart=true;\n    bool isi=false;\n    int sum=0;\n    for (int i=0;i<S.length();i++)\n    {\n        if (S[i]==' ' and isi) {isi=false; sum+=1;}\n        if (S[i]=='I' and isstart) {isi=true;  }\n        else isi=false;   \n        if (S[i]!=' ') { isstart=false;}\n        if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;\n    }\n    return sum;\n}\nint main(){\n\tauto result = is_bored(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"I am bored. Are you bored too?\"", "fn": "is_bored", "para": "(string S)", "pass": false}
{"task_id": "CPP/91", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint is_bored(string S){\n    bool isstart=true;\n    bool isi=false;\n    int sum=0;\n    for (int i=0;i<S.length();i++)\n    {\n        if (S[i]==' ' and isi) {isi=false; sum+=1;}\n        if (S[i]=='I' and isstart) {isi=true;  }\n        else isi=false;   \n        if (S[i]!=' ') { isstart=false;}\n        if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;\n    }\n    return sum;\n}\nint main(){\n\tauto result = is_bored(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"I am bored. Are you bored too?\"", "fn": "is_bored", "para": "(string S)", "pass": false}
{"task_id": "CPP/91", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint is_bored(string S){\n    bool isstart=true;\n    bool isi=false;\n    int sum=0;\n    for (int i=0;i<S.length();i++)\n    {\n        if (S[i]==' ' and isi) {isi=false; sum+=1;}\n        if (S[i]=='I' and isstart) {isi=true;  }\n        else isi=false;   \n        if (S[i]!=' ') { isstart=false;}\n        if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;\n    }\n    return sum;\n}\nint main(){\n\tauto result = is_bored(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"I am bored. Are you bored too?\"", "fn": "is_bored", "para": "(string S)", "pass": false}
{"task_id": "CPP/92", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool any_int(float a,float b,float c){\n    if (round(a)!=a) return false;\n    if (round(b)!=b) return false;\n    if (round(c)!=c) return false;\n    if (a+b==c or a+c==b or b+c==a) return true;\n    return false;\n}\nint main(){\n\tauto result = any_int(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1.0, 2.0, 3.0", "fn": "any_int", "para": "(float a,float b,float c)", "pass": true}
{"task_id": "CPP/92", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool any_int(float a,float b,float c){\n    if (round(a)!=a) return false;\n    if (round(b)!=b) return false;\n    if (round(c)!=c) return false;\n    if (a+b==c or a+c==b or b+c==a) return true;\n    return false;\n}\nint main(){\n\tauto result = any_int(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1.0, 2.0, 3.0", "fn": "any_int", "para": "(float a,float b,float c)", "pass": true}
{"task_id": "CPP/92", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool any_int(float a,float b,float c){\n    if (round(a)!=a) return false;\n    if (round(b)!=b) return false;\n    if (round(c)!=c) return false;\n    if (a+b==c or a+c==b or b+c==a) return true;\n    return false;\n}\nint main(){\n\tauto result = any_int(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1.0, 2.0, 3.0", "fn": "any_int", "para": "(float a,float b,float c)", "pass": true}
{"task_id": "CPP/92", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool any_int(float a,float b,float c){\n    if (round(a)!=a) return false;\n    if (round(b)!=b) return false;\n    if (round(c)!=c) return false;\n    if (a+b==c or a+c==b or b+c==a) return true;\n    return false;\n}\nint main(){\n\tauto result = any_int(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1.0, 2.0, 3.0", "fn": "any_int", "para": "(float a,float b,float c)", "pass": true}
{"task_id": "CPP/92", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool any_int(float a,float b,float c){\n    if (round(a)!=a) return false;\n    if (round(b)!=b) return false;\n    if (round(c)!=c) return false;\n    if (a+b==c or a+c==b or b+c==a) return true;\n    return false;\n}\nint main(){\n\tauto result = any_int(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1.0, 2.0, 3.0", "fn": "any_int", "para": "(float a,float b,float c)", "pass": true}
{"task_id": "CPP/92", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool any_int(float a,float b,float c){\n    if (round(a)!=a) return false;\n    if (round(b)!=b) return false;\n    if (round(c)!=c) return false;\n    if (a+b==c or a+c==b or b+c==a) return true;\n    return false;\n}\nint main(){\n\tauto result = any_int(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "0.5, 0.5, 1.0", "fn": "any_int", "para": "(float a,float b,float c)", "pass": true}
{"task_id": "CPP/92", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool any_int(float a,float b,float c){\n    if (round(a)!=a) return false;\n    if (round(b)!=b) return false;\n    if (round(c)!=c) return false;\n    if (a+b==c or a+c==b or b+c==a) return true;\n    return false;\n}\nint main(){\n\tauto result = any_int(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "0.5, 0.5, 1.0", "fn": "any_int", "para": "(float a,float b,float c)", "pass": true}
{"task_id": "CPP/92", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool any_int(float a,float b,float c){\n    if (round(a)!=a) return false;\n    if (round(b)!=b) return false;\n    if (round(c)!=c) return false;\n    if (a+b==c or a+c==b or b+c==a) return true;\n    return false;\n}\nint main(){\n\tauto result = any_int(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "0.5, 0.5, 1.0", "fn": "any_int", "para": "(float a,float b,float c)", "pass": true}
{"task_id": "CPP/92", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool any_int(float a,float b,float c){\n    if (round(a)!=a) return false;\n    if (round(b)!=b) return false;\n    if (round(c)!=c) return false;\n    if (a+b==c or a+c==b or b+c==a) return true;\n    return false;\n}\nint main(){\n\tauto result = any_int(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "0.5, 0.5, 1.0", "fn": "any_int", "para": "(float a,float b,float c)", "pass": true}
{"task_id": "CPP/92", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool any_int(float a,float b,float c){\n    if (round(a)!=a) return false;\n    if (round(b)!=b) return false;\n    if (round(c)!=c) return false;\n    if (a+b==c or a+c==b or b+c==a) return true;\n    return false;\n}\nint main(){\n\tauto result = any_int(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "0.5, 0.5, 1.0", "fn": "any_int", "para": "(float a,float b,float c)", "pass": true}
{"task_id": "CPP/93", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring encode(string message){\n    string vowels=\"aeiouAEIOU\";\n    string out=\"\";\n    for (int i=0;i<message.length();i++)\n    {\n        char w=message[i];\n        if (w>=97 and w<=122){w=w-32;}\n        else if (w>=65 and w<=90) w=w+32;\n        if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;\n        out=out+w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encode(<FILL_ME>);\n\tassert(result==\"tgst\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"test\"", "fn": "encode", "para": "(string message)", "pass": false}
{"task_id": "CPP/93", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring encode(string message){\n    string vowels=\"aeiouAEIOU\";\n    string out=\"\";\n    for (int i=0;i<message.length();i++)\n    {\n        char w=message[i];\n        if (w>=97 and w<=122){w=w-32;}\n        else if (w>=65 and w<=90) w=w+32;\n        if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;\n        out=out+w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encode(<FILL_ME>);\n\tassert(result==\"tgst\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"test\"", "fn": "encode", "para": "(string message)", "pass": false}
{"task_id": "CPP/93", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring encode(string message){\n    string vowels=\"aeiouAEIOU\";\n    string out=\"\";\n    for (int i=0;i<message.length();i++)\n    {\n        char w=message[i];\n        if (w>=97 and w<=122){w=w-32;}\n        else if (w>=65 and w<=90) w=w+32;\n        if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;\n        out=out+w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encode(<FILL_ME>);\n\tassert(result==\"tgst\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"test\"", "fn": "encode", "para": "(string message)", "pass": false}
{"task_id": "CPP/93", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring encode(string message){\n    string vowels=\"aeiouAEIOU\";\n    string out=\"\";\n    for (int i=0;i<message.length();i++)\n    {\n        char w=message[i];\n        if (w>=97 and w<=122){w=w-32;}\n        else if (w>=65 and w<=90) w=w+32;\n        if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;\n        out=out+w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encode(<FILL_ME>);\n\tassert(result==\"tgst\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"test\"", "fn": "encode", "para": "(string message)", "pass": false}
{"task_id": "CPP/93", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring encode(string message){\n    string vowels=\"aeiouAEIOU\";\n    string out=\"\";\n    for (int i=0;i<message.length();i++)\n    {\n        char w=message[i];\n        if (w>=97 and w<=122){w=w-32;}\n        else if (w>=65 and w<=90) w=w+32;\n        if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;\n        out=out+w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encode(<FILL_ME>);\n\tassert(result==\"tgst\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"test\"", "fn": "encode", "para": "(string message)", "pass": false}
{"task_id": "CPP/93", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring encode(string message){\n    string vowels=\"aeiouAEIOU\";\n    string out=\"\";\n    for (int i=0;i<message.length();i++)\n    {\n        char w=message[i];\n        if (w>=97 and w<=122){w=w-32;}\n        else if (w>=65 and w<=90) w=w+32;\n        if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;\n        out=out+w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encode(<FILL_ME>);\n\tassert(result==\"mWDCSKR\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"HelloWorld\"", "fn": "encode", "para": "(string message)", "pass": false}
{"task_id": "CPP/93", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring encode(string message){\n    string vowels=\"aeiouAEIOU\";\n    string out=\"\";\n    for (int i=0;i<message.length();i++)\n    {\n        char w=message[i];\n        if (w>=97 and w<=122){w=w-32;}\n        else if (w>=65 and w<=90) w=w+32;\n        if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;\n        out=out+w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encode(<FILL_ME>);\n\tassert(result==\"mWDCSKR\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"HelloWorld\"", "fn": "encode", "para": "(string message)", "pass": false}
{"task_id": "CPP/93", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring encode(string message){\n    string vowels=\"aeiouAEIOU\";\n    string out=\"\";\n    for (int i=0;i<message.length();i++)\n    {\n        char w=message[i];\n        if (w>=97 and w<=122){w=w-32;}\n        else if (w>=65 and w<=90) w=w+32;\n        if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;\n        out=out+w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encode(<FILL_ME>);\n\tassert(result==\"mWDCSKR\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"HelloWorld\"", "fn": "encode", "para": "(string message)", "pass": false}
{"task_id": "CPP/93", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring encode(string message){\n    string vowels=\"aeiouAEIOU\";\n    string out=\"\";\n    for (int i=0;i<message.length();i++)\n    {\n        char w=message[i];\n        if (w>=97 and w<=122){w=w-32;}\n        else if (w>=65 and w<=90) w=w+32;\n        if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;\n        out=out+w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encode(<FILL_ME>);\n\tassert(result==\"mWDCSKR\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"HelloWorld\"", "fn": "encode", "para": "(string message)", "pass": false}
{"task_id": "CPP/93", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring encode(string message){\n    string vowels=\"aeiouAEIOU\";\n    string out=\"\";\n    for (int i=0;i<message.length();i++)\n    {\n        char w=message[i];\n        if (w>=97 and w<=122){w=w-32;}\n        else if (w>=65 and w<=90) w=w+32;\n        if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;\n        out=out+w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encode(<FILL_ME>);\n\tassert(result==\"mWDCSKR\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"HelloWorld\"", "fn": "encode", "para": "(string message)", "pass": false}
{"task_id": "CPP/93", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring encode(string message){\n    string vowels=\"aeiouAEIOU\";\n    string out=\"\";\n    for (int i=0;i<message.length();i++)\n    {\n        char w=message[i];\n        if (w>=97 and w<=122){w=w-32;}\n        else if (w>=65 and w<=90) w=w+32;\n        if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;\n        out=out+w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encode(<FILL_ME>);\n\tassert(result==\"ygs\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"ygs\"", "fn": "encode", "para": "(string message)", "pass": false}
{"task_id": "CPP/93", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring encode(string message){\n    string vowels=\"aeiouAEIOU\";\n    string out=\"\";\n    for (int i=0;i<message.length();i++)\n    {\n        char w=message[i];\n        if (w>=97 and w<=122){w=w-32;}\n        else if (w>=65 and w<=90) w=w+32;\n        if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;\n        out=out+w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encode(<FILL_ME>);\n\tassert(result==\"ygs\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"YGS\"", "fn": "encode", "para": "(string message)", "pass": true}
{"task_id": "CPP/93", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring encode(string message){\n    string vowels=\"aeiouAEIOU\";\n    string out=\"\";\n    for (int i=0;i<message.length();i++)\n    {\n        char w=message[i];\n        if (w>=97 and w<=122){w=w-32;}\n        else if (w>=65 and w<=90) w=w+32;\n        if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;\n        out=out+w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encode(<FILL_ME>);\n\tassert(result==\"ygs\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"YGS\"", "fn": "encode", "para": "(string message)", "pass": true}
{"task_id": "CPP/93", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring encode(string message){\n    string vowels=\"aeiouAEIOU\";\n    string out=\"\";\n    for (int i=0;i<message.length();i++)\n    {\n        char w=message[i];\n        if (w>=97 and w<=122){w=w-32;}\n        else if (w>=65 and w<=90) w=w+32;\n        if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;\n        out=out+w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encode(<FILL_ME>);\n\tassert(result==\"ygs\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"YGS\"", "fn": "encode", "para": "(string message)", "pass": true}
{"task_id": "CPP/93", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring encode(string message){\n    string vowels=\"aeiouAEIOU\";\n    string out=\"\";\n    for (int i=0;i<message.length();i++)\n    {\n        char w=message[i];\n        if (w>=97 and w<=122){w=w-32;}\n        else if (w>=65 and w<=90) w=w+32;\n        if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;\n        out=out+w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encode(<FILL_ME>);\n\tassert(result==\"ygs\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"ygS\"", "fn": "encode", "para": "(string message)", "pass": false}
{"task_id": "CPP/93", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring encode(string message){\n    string vowels=\"aeiouAEIOU\";\n    string out=\"\";\n    for (int i=0;i<message.length();i++)\n    {\n        char w=message[i];\n        if (w>=97 and w<=122){w=w-32;}\n        else if (w>=65 and w<=90) w=w+32;\n        if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;\n        out=out+w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encode(<FILL_ME>);\n\tassert(result==\"tHKSKSCMGSSCGG\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"This is a message\"", "fn": "encode", "para": "(string message)", "pass": false}
{"task_id": "CPP/93", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring encode(string message){\n    string vowels=\"aeiouAEIOU\";\n    string out=\"\";\n    for (int i=0;i<message.length();i++)\n    {\n        char w=message[i];\n        if (w>=97 and w<=122){w=w-32;}\n        else if (w>=65 and w<=90) w=w+32;\n        if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;\n        out=out+w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encode(<FILL_ME>);\n\tassert(result==\"tHKSKSCMGSSCGG\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"This is a message\"", "fn": "encode", "para": "(string message)", "pass": false}
{"task_id": "CPP/93", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring encode(string message){\n    string vowels=\"aeiouAEIOU\";\n    string out=\"\";\n    for (int i=0;i<message.length();i++)\n    {\n        char w=message[i];\n        if (w>=97 and w<=122){w=w-32;}\n        else if (w>=65 and w<=90) w=w+32;\n        if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;\n        out=out+w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encode(<FILL_ME>);\n\tassert(result==\"tHKSKSCMGSSCGG\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"This is a message\"", "fn": "encode", "para": "(string message)", "pass": false}
{"task_id": "CPP/93", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring encode(string message){\n    string vowels=\"aeiouAEIOU\";\n    string out=\"\";\n    for (int i=0;i<message.length();i++)\n    {\n        char w=message[i];\n        if (w>=97 and w<=122){w=w-32;}\n        else if (w>=65 and w<=90) w=w+32;\n        if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;\n        out=out+w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encode(<FILL_ME>);\n\tassert(result==\"tHKSKSCMGSSCGG\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"This is a message\"", "fn": "encode", "para": "(string message)", "pass": false}
{"task_id": "CPP/93", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring encode(string message){\n    string vowels=\"aeiouAEIOU\";\n    string out=\"\";\n    for (int i=0;i<message.length();i++)\n    {\n        char w=message[i];\n        if (w>=97 and w<=122){w=w-32;}\n        else if (w>=65 and w<=90) w=w+32;\n        if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;\n        out=out+w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encode(<FILL_ME>);\n\tassert(result==\"tHKSKSCMGSSCGG\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"This is a message\"", "fn": "encode", "para": "(string message)", "pass": false}
{"task_id": "CPP/93", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring encode(string message){\n    string vowels=\"aeiouAEIOU\";\n    string out=\"\";\n    for (int i=0;i<message.length();i++)\n    {\n        char w=message[i];\n        if (w>=97 and w<=122){w=w-32;}\n        else if (w>=65 and w<=90) w=w+32;\n        if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;\n        out=out+w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encode(<FILL_ME>);\n\tassert(result==\"kdQnTkNqWwHcTTqwRkTg\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Keep Calm and Carry On\"", "fn": "encode", "para": "(string message)", "pass": false}
{"task_id": "CPP/93", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring encode(string message){\n    string vowels=\"aeiouAEIOU\";\n    string out=\"\";\n    for (int i=0;i<message.length();i++)\n    {\n        char w=message[i];\n        if (w>=97 and w<=122){w=w-32;}\n        else if (w>=65 and w<=90) w=w+32;\n        if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;\n        out=out+w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encode(<FILL_ME>);\n\tassert(result==\"kdQnTkNqWwHcTTqwRkTg\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Keep Calm and Code On\"", "fn": "encode", "para": "(string message)", "pass": false}
{"task_id": "CPP/93", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring encode(string message){\n    string vowels=\"aeiouAEIOU\";\n    string out=\"\";\n    for (int i=0;i<message.length();i++)\n    {\n        char w=message[i];\n        if (w>=97 and w<=122){w=w-32;}\n        else if (w>=65 and w<=90) w=w+32;\n        if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;\n        out=out+w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encode(<FILL_ME>);\n\tassert(result==\"kdQnTkNqWwHcTTqwRkTg\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Hello World\"", "fn": "encode", "para": "(string message)", "pass": false}
{"task_id": "CPP/93", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring encode(string message){\n    string vowels=\"aeiouAEIOU\";\n    string out=\"\";\n    for (int i=0;i<message.length();i++)\n    {\n        char w=message[i];\n        if (w>=97 and w<=122){w=w-32;}\n        else if (w>=65 and w<=90) w=w+32;\n        if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;\n        out=out+w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encode(<FILL_ME>);\n\tassert(result==\"kdQnTkNqWwHcTTqwRkTg\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Keep smiling and stay safe\"", "fn": "encode", "para": "(string message)", "pass": false}
{"task_id": "CPP/93", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring encode(string message){\n    string vowels=\"aeiouAEIOU\";\n    string out=\"\";\n    for (int i=0;i<message.length();i++)\n    {\n        char w=message[i];\n        if (w>=97 and w<=122){w=w-32;}\n        else if (w>=65 and w<=90) w=w+32;\n        if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;\n        out=out+w;\n    }\n    return out;\n}\nint main(){\n\tauto result = encode(<FILL_ME>);\n\tassert(result==\"kdQnTkNqWwHcTTqwRkTg\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Hello World\"", "fn": "encode", "para": "(string message)", "pass": false}
{"task_id": "CPP/94", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n    int largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\nint main(){\n\tauto result = skjkasdkd(<FILL_ME>);\n\tassert(result==25);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{13, 17, 23}", "fn": "skjkasdkd", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/94", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n    int largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\nint main(){\n\tauto result = skjkasdkd(<FILL_ME>);\n\tassert(result==25);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{23, 17, 19, 13}", "fn": "skjkasdkd", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/94", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n    int largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\nint main(){\n\tauto result = skjkasdkd(<FILL_ME>);\n\tassert(result==25);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{13, 17, 23}", "fn": "skjkasdkd", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/94", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n    int largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\nint main(){\n\tauto result = skjkasdkd(<FILL_ME>);\n\tassert(result==25);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{23, 17, 19, 13}", "fn": "skjkasdkd", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/94", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n    int largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\nint main(){\n\tauto result = skjkasdkd(<FILL_ME>);\n\tassert(result==25);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{23, 17, 19, 13}", "fn": "skjkasdkd", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/94", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n    int largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\nint main(){\n\tauto result = skjkasdkd(<FILL_ME>);\n\tassert(result==19);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{12, 17, 19, 23, 25}", "fn": "skjkasdkd", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/94", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n    int largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\nint main(){\n\tauto result = skjkasdkd(<FILL_ME>);\n\tassert(result==19);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{12, 17, 19, 23, 25}", "fn": "skjkasdkd", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/94", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n    int largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\nint main(){\n\tauto result = skjkasdkd(<FILL_ME>);\n\tassert(result==19);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{12, 17, 19, 23, 25}", "fn": "skjkasdkd", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/94", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n    int largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\nint main(){\n\tauto result = skjkasdkd(<FILL_ME>);\n\tassert(result==19);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{12, 17, 19, 23, 25}", "fn": "skjkasdkd", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/94", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n    int largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\nint main(){\n\tauto result = skjkasdkd(<FILL_ME>);\n\tassert(result==19);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{12, 17, 19, 23, 25}", "fn": "skjkasdkd", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/94", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n    int largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\nint main(){\n\tauto result = skjkasdkd(<FILL_ME>);\n\tassert(result==10);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{7, 15, 23, 31, 47}", "fn": "skjkasdkd", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/94", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n    int largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\nint main(){\n\tauto result = skjkasdkd(<FILL_ME>);\n\tassert(result==10);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{7, 15, 23, 31, 47}", "fn": "skjkasdkd", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/94", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n    int largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\nint main(){\n\tauto result = skjkasdkd(<FILL_ME>);\n\tassert(result==10);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{7, 15, 23, 31, 47}", "fn": "skjkasdkd", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/94", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n    int largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\nint main(){\n\tauto result = skjkasdkd(<FILL_ME>);\n\tassert(result==10);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{7, 15, 23, 31, 47}", "fn": "skjkasdkd", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/94", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n    int largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\nint main(){\n\tauto result = skjkasdkd(<FILL_ME>);\n\tassert(result==10);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{7, 15, 23, 31, 47}", "fn": "skjkasdkd", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/94", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n    int largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\nint main(){\n\tauto result = skjkasdkd(<FILL_ME>);\n\tassert(result==7);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{2, 3, 5, 7}", "fn": "skjkasdkd", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/94", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n    int largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\nint main(){\n\tauto result = skjkasdkd(<FILL_ME>);\n\tassert(result==7);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{2, 3, 5, 7}", "fn": "skjkasdkd", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/94", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n    int largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\nint main(){\n\tauto result = skjkasdkd(<FILL_ME>);\n\tassert(result==7);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{2, 3, 5, 7}", "fn": "skjkasdkd", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/94", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n    int largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\nint main(){\n\tauto result = skjkasdkd(<FILL_ME>);\n\tassert(result==7);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{2, 3, 5, 7}", "fn": "skjkasdkd", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/94", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n    int largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\nint main(){\n\tauto result = skjkasdkd(<FILL_ME>);\n\tassert(result==7);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{2, 3, 5, 7}", "fn": "skjkasdkd", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/94", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n    int largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\nint main(){\n\tauto result = skjkasdkd(<FILL_ME>);\n\tassert(result==13);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{11, 13, 17}", "fn": "skjkasdkd", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/94", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n    int largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\nint main(){\n\tauto result = skjkasdkd(<FILL_ME>);\n\tassert(result==13);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{11, 13, 17}", "fn": "skjkasdkd", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/94", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n    int largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\nint main(){\n\tauto result = skjkasdkd(<FILL_ME>);\n\tassert(result==13);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int> {11, 13, 17}", "fn": "skjkasdkd", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/94", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n    int largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\nint main(){\n\tauto result = skjkasdkd(<FILL_ME>);\n\tassert(result==13);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int> {11, 13, 17}", "fn": "skjkasdkd", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/94", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n    int largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\nint main(){\n\tauto result = skjkasdkd(<FILL_ME>);\n\tassert(result==13);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{11, 13, 17}", "fn": "skjkasdkd", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/94", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n    int largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\nint main(){\n\tauto result = skjkasdkd(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{2, 3, 5}", "fn": "skjkasdkd", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/94", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n    int largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\nint main(){\n\tauto result = skjkasdkd(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{2, 3, 5, 7}", "fn": "skjkasdkd", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/94", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n    int largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\nint main(){\n\tauto result = skjkasdkd(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{2, 3, 5}", "fn": "skjkasdkd", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/94", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n    int largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\nint main(){\n\tauto result = skjkasdkd(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{2, 3, 5, 7}", "fn": "skjkasdkd", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/94", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n    int largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\nint main(){\n\tauto result = skjkasdkd(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{2, 3, 5, 7}", "fn": "skjkasdkd", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/94", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n    int largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\nint main(){\n\tauto result = skjkasdkd(<FILL_ME>);\n\tassert(result==11);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{2, 3, 5, 7, 11}", "fn": "skjkasdkd", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/94", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n    int largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\nint main(){\n\tauto result = skjkasdkd(<FILL_ME>);\n\tassert(result==11);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{2, 3, 5, 7, 11}", "fn": "skjkasdkd", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/94", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n    int largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\nint main(){\n\tauto result = skjkasdkd(<FILL_ME>);\n\tassert(result==11);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{2, 3, 5, 7, 11}", "fn": "skjkasdkd", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/94", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n    int largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\nint main(){\n\tauto result = skjkasdkd(<FILL_ME>);\n\tassert(result==11);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{2, 3, 5, 7, 11}", "fn": "skjkasdkd", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/94", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n    int largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\nint main(){\n\tauto result = skjkasdkd(<FILL_ME>);\n\tassert(result==11);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{2, 3, 5, 7, 11}", "fn": "skjkasdkd", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/95", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool check_dict_case(map<string,string> dict){\n    map<string,string>::iterator it;\n    int islower=0,isupper=0;\n    if (dict.size()==0) return false;\n    for (it=dict.begin();it!=dict.end();it++)\n    {\n        string key=it->first;\n    \n        for (int i=0;i<key.length();i++)\n        {\n            if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;\n            if (key[i]>=65 and key[i]<=90) isupper=1;\n            if (key[i]>=97 and key[i]<=122) islower=1;\n            if (isupper+islower==2) return false;\n        }\n\n    }\n    return true;\n}\nint main(){\n\tauto result = check_dict_case(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "map<string,string>{{\"key1\",\"value1\"},{\"key2\",\"value2\"}}", "fn": "check_dict_case", "para": "(map<string,string> dict)", "pass": false}
{"task_id": "CPP/95", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool check_dict_case(map<string,string> dict){\n    map<string,string>::iterator it;\n    int islower=0,isupper=0;\n    if (dict.size()==0) return false;\n    for (it=dict.begin();it!=dict.end();it++)\n    {\n        string key=it->first;\n    \n        for (int i=0;i<key.length();i++)\n        {\n            if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;\n            if (key[i]>=65 and key[i]<=90) isupper=1;\n            if (key[i]>=97 and key[i]<=122) islower=1;\n            if (isupper+islower==2) return false;\n        }\n\n    }\n    return true;\n}\nint main(){\n\tauto result = check_dict_case(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "map<string,string>{{\"key1\",\"value1\"},{\"key2\",\"value2\"}}", "fn": "check_dict_case", "para": "(map<string,string> dict)", "pass": false}
{"task_id": "CPP/95", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool check_dict_case(map<string,string> dict){\n    map<string,string>::iterator it;\n    int islower=0,isupper=0;\n    if (dict.size()==0) return false;\n    for (it=dict.begin();it!=dict.end();it++)\n    {\n        string key=it->first;\n    \n        for (int i=0;i<key.length();i++)\n        {\n            if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;\n            if (key[i]>=65 and key[i]<=90) isupper=1;\n            if (key[i]>=97 and key[i]<=122) islower=1;\n            if (isupper+islower==2) return false;\n        }\n\n    }\n    return true;\n}\nint main(){\n\tauto result = check_dict_case(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "map<string,string>{{\"key1\",\"value1\"},{\"key2\",\"value2\"}}", "fn": "check_dict_case", "para": "(map<string,string> dict)", "pass": false}
{"task_id": "CPP/95", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool check_dict_case(map<string,string> dict){\n    map<string,string>::iterator it;\n    int islower=0,isupper=0;\n    if (dict.size()==0) return false;\n    for (it=dict.begin();it!=dict.end();it++)\n    {\n        string key=it->first;\n    \n        for (int i=0;i<key.length();i++)\n        {\n            if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;\n            if (key[i]>=65 and key[i]<=90) isupper=1;\n            if (key[i]>=97 and key[i]<=122) islower=1;\n            if (isupper+islower==2) return false;\n        }\n\n    }\n    return true;\n}\nint main(){\n\tauto result = check_dict_case(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "map<string,string>{{\"key1\",\"value1\"},{\"key2\",\"value2\"}}", "fn": "check_dict_case", "para": "(map<string,string> dict)", "pass": false}
{"task_id": "CPP/95", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool check_dict_case(map<string,string> dict){\n    map<string,string>::iterator it;\n    int islower=0,isupper=0;\n    if (dict.size()==0) return false;\n    for (it=dict.begin();it!=dict.end();it++)\n    {\n        string key=it->first;\n    \n        for (int i=0;i<key.length();i++)\n        {\n            if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;\n            if (key[i]>=65 and key[i]<=90) isupper=1;\n            if (key[i]>=97 and key[i]<=122) islower=1;\n            if (isupper+islower==2) return false;\n        }\n\n    }\n    return true;\n}\nint main(){\n\tauto result = check_dict_case(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "map<string,string>{{\"key1\",\"value1\"},{\"key2\",\"value2\"}}", "fn": "check_dict_case", "para": "(map<string,string> dict)", "pass": false}
{"task_id": "CPP/95", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool check_dict_case(map<string,string> dict){\n    map<string,string>::iterator it;\n    int islower=0,isupper=0;\n    if (dict.size()==0) return false;\n    for (it=dict.begin();it!=dict.end();it++)\n    {\n        string key=it->first;\n    \n        for (int i=0;i<key.length();i++)\n        {\n            if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;\n            if (key[i]>=65 and key[i]<=90) isupper=1;\n            if (key[i]>=97 and key[i]<=122) islower=1;\n            if (isupper+islower==2) return false;\n        }\n\n    }\n    return true;\n}\nint main(){\n\tauto result = check_dict_case(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "map<string,string>{{\"key1\",\"value1\"}, {\"key2\",\"value2\"}}", "fn": "check_dict_case", "para": "(map<string,string> dict)", "pass": true}
{"task_id": "CPP/95", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool check_dict_case(map<string,string> dict){\n    map<string,string>::iterator it;\n    int islower=0,isupper=0;\n    if (dict.size()==0) return false;\n    for (it=dict.begin();it!=dict.end();it++)\n    {\n        string key=it->first;\n    \n        for (int i=0;i<key.length();i++)\n        {\n            if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;\n            if (key[i]>=65 and key[i]<=90) isupper=1;\n            if (key[i]>=97 and key[i]<=122) islower=1;\n            if (isupper+islower==2) return false;\n        }\n\n    }\n    return true;\n}\nint main(){\n\tauto result = check_dict_case(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "map<string,string>{{\"key1\",\"value1\"}, {\"key2\",\"value2\"}}", "fn": "check_dict_case", "para": "(map<string,string> dict)", "pass": true}
{"task_id": "CPP/95", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool check_dict_case(map<string,string> dict){\n    map<string,string>::iterator it;\n    int islower=0,isupper=0;\n    if (dict.size()==0) return false;\n    for (it=dict.begin();it!=dict.end();it++)\n    {\n        string key=it->first;\n    \n        for (int i=0;i<key.length();i++)\n        {\n            if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;\n            if (key[i]>=65 and key[i]<=90) isupper=1;\n            if (key[i]>=97 and key[i]<=122) islower=1;\n            if (isupper+islower==2) return false;\n        }\n\n    }\n    return true;\n}\nint main(){\n\tauto result = check_dict_case(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "map<string,string>{{\"key1\",\"value1\"}, {\"key2\",\"value2\"}}", "fn": "check_dict_case", "para": "(map<string,string> dict)", "pass": true}
{"task_id": "CPP/95", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool check_dict_case(map<string,string> dict){\n    map<string,string>::iterator it;\n    int islower=0,isupper=0;\n    if (dict.size()==0) return false;\n    for (it=dict.begin();it!=dict.end();it++)\n    {\n        string key=it->first;\n    \n        for (int i=0;i<key.length();i++)\n        {\n            if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;\n            if (key[i]>=65 and key[i]<=90) isupper=1;\n            if (key[i]>=97 and key[i]<=122) islower=1;\n            if (isupper+islower==2) return false;\n        }\n\n    }\n    return true;\n}\nint main(){\n\tauto result = check_dict_case(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "map<string,string>{{\"key1\",\"value1\"}, {\"key2\",\"value2\"}}", "fn": "check_dict_case", "para": "(map<string,string> dict)", "pass": true}
{"task_id": "CPP/95", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool check_dict_case(map<string,string> dict){\n    map<string,string>::iterator it;\n    int islower=0,isupper=0;\n    if (dict.size()==0) return false;\n    for (it=dict.begin();it!=dict.end();it++)\n    {\n        string key=it->first;\n    \n        for (int i=0;i<key.length();i++)\n        {\n            if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;\n            if (key[i]>=65 and key[i]<=90) isupper=1;\n            if (key[i]>=97 and key[i]<=122) islower=1;\n            if (isupper+islower==2) return false;\n        }\n\n    }\n    return true;\n}\nint main(){\n\tauto result = check_dict_case(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "map<string,string>{{\"key1\",\"value1\"}, {\"key2\",\"value2\"}}", "fn": "check_dict_case", "para": "(map<string,string> dict)", "pass": true}
{"task_id": "CPP/96", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\nint main(){\n\tauto result = count_up_to(<FILL_ME>);\n\tassert(issame(result,{2,3,5,7,11,13,17}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "20", "fn": "count_up_to", "para": "(int n)", "pass": false}
{"task_id": "CPP/96", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\nint main(){\n\tauto result = count_up_to(<FILL_ME>);\n\tassert(issame(result,{2,3,5,7,11,13,17}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "20", "fn": "count_up_to", "para": "(int n)", "pass": false}
{"task_id": "CPP/96", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\nint main(){\n\tauto result = count_up_to(<FILL_ME>);\n\tassert(issame(result,{2,3,5,7,11,13,17}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "20", "fn": "count_up_to", "para": "(int n)", "pass": false}
{"task_id": "CPP/96", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\nint main(){\n\tauto result = count_up_to(<FILL_ME>);\n\tassert(issame(result,{2,3,5,7,11,13,17}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "20", "fn": "count_up_to", "para": "(int n)", "pass": false}
{"task_id": "CPP/96", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\nint main(){\n\tauto result = count_up_to(<FILL_ME>);\n\tassert(issame(result,{2,3,5,7,11,13,17}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "20", "fn": "count_up_to", "para": "(int n)", "pass": false}
{"task_id": "CPP/96", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\nint main(){\n\tauto result = count_up_to(<FILL_ME>);\n\tassert(issame(result,{2,3,5,7,11,13,17,19,23,29,31,37,41,43}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "50", "fn": "count_up_to", "para": "(int n)", "pass": false}
{"task_id": "CPP/96", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\nint main(){\n\tauto result = count_up_to(<FILL_ME>);\n\tassert(issame(result,{2,3,5,7,11,13,17,19,23,29,31,37,41,43}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "45", "fn": "count_up_to", "para": "(int n)", "pass": true}
{"task_id": "CPP/96", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\nint main(){\n\tauto result = count_up_to(<FILL_ME>);\n\tassert(issame(result,{2,3,5,7,11,13,17,19,23,29,31,37,41,43}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "50", "fn": "count_up_to", "para": "(int n)", "pass": false}
{"task_id": "CPP/96", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\nint main(){\n\tauto result = count_up_to(<FILL_ME>);\n\tassert(issame(result,{2,3,5,7,11,13,17,19,23,29,31,37,41,43}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "50", "fn": "count_up_to", "para": "(int n)", "pass": false}
{"task_id": "CPP/96", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\nint main(){\n\tauto result = count_up_to(<FILL_ME>);\n\tassert(issame(result,{2,3,5,7,11,13,17,19,23,29,31,37,41,43}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "50", "fn": "count_up_to", "para": "(int n)", "pass": false}
{"task_id": "CPP/96", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\nint main(){\n\tauto result = count_up_to(<FILL_ME>);\n\tassert(issame(result,{2,3,5,7,11,13,17,19}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "20", "fn": "count_up_to", "para": "(int n)", "pass": true}
{"task_id": "CPP/96", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\nint main(){\n\tauto result = count_up_to(<FILL_ME>);\n\tassert(issame(result,{2,3,5,7,11,13,17,19}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "20", "fn": "count_up_to", "para": "(int n)", "pass": true}
{"task_id": "CPP/96", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\nint main(){\n\tauto result = count_up_to(<FILL_ME>);\n\tassert(issame(result,{2,3,5,7,11,13,17,19}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "20", "fn": "count_up_to", "para": "(int n)", "pass": true}
{"task_id": "CPP/96", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\nint main(){\n\tauto result = count_up_to(<FILL_ME>);\n\tassert(issame(result,{2,3,5,7,11,13,17,19}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "20", "fn": "count_up_to", "para": "(int n)", "pass": true}
{"task_id": "CPP/96", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\nint main(){\n\tauto result = count_up_to(<FILL_ME>);\n\tassert(issame(result,{2,3,5,7,11,13,17,19}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "20", "fn": "count_up_to", "para": "(int n)", "pass": true}
{"task_id": "CPP/96", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\nint main(){\n\tauto result = count_up_to(<FILL_ME>);\n\tassert(issame(result,{2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "100", "fn": "count_up_to", "para": "(int n)", "pass": true}
{"task_id": "CPP/96", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\nint main(){\n\tauto result = count_up_to(<FILL_ME>);\n\tassert(issame(result,{2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "100", "fn": "count_up_to", "para": "(int n)", "pass": true}
{"task_id": "CPP/96", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\nint main(){\n\tauto result = count_up_to(<FILL_ME>);\n\tassert(issame(result,{2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "100", "fn": "count_up_to", "para": "(int n)", "pass": true}
{"task_id": "CPP/96", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\nint main(){\n\tauto result = count_up_to(<FILL_ME>);\n\tassert(issame(result,{2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "100", "fn": "count_up_to", "para": "(int n)", "pass": true}
{"task_id": "CPP/96", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\nint main(){\n\tauto result = count_up_to(<FILL_ME>);\n\tassert(issame(result,{2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "100", "fn": "count_up_to", "para": "(int n)", "pass": true}
{"task_id": "CPP/96", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\nint main(){\n\tauto result = count_up_to(<FILL_ME>);\n\tassert(issame(result,{2,3,5,7}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "10", "fn": "count_up_to", "para": "(int n)", "pass": true}
{"task_id": "CPP/96", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\nint main(){\n\tauto result = count_up_to(<FILL_ME>);\n\tassert(issame(result,{2,3,5,7}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "10", "fn": "count_up_to", "para": "(int n)", "pass": true}
{"task_id": "CPP/96", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\nint main(){\n\tauto result = count_up_to(<FILL_ME>);\n\tassert(issame(result,{2,3,5,7}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "10", "fn": "count_up_to", "para": "(int n)", "pass": true}
{"task_id": "CPP/96", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\nint main(){\n\tauto result = count_up_to(<FILL_ME>);\n\tassert(issame(result,{2,3,5,7}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "10", "fn": "count_up_to", "para": "(int n)", "pass": true}
{"task_id": "CPP/96", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\nint main(){\n\tauto result = count_up_to(<FILL_ME>);\n\tassert(issame(result,{2,3,5,7}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "10", "fn": "count_up_to", "para": "(int n)", "pass": true}
{"task_id": "CPP/96", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\nint main(){\n\tauto result = count_up_to(<FILL_ME>);\n\tassert(issame(result,{2,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "5", "fn": "count_up_to", "para": "(int n)", "pass": true}
{"task_id": "CPP/96", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\nint main(){\n\tauto result = count_up_to(<FILL_ME>);\n\tassert(issame(result,{2,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "5", "fn": "count_up_to", "para": "(int n)", "pass": true}
{"task_id": "CPP/96", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\nint main(){\n\tauto result = count_up_to(<FILL_ME>);\n\tassert(issame(result,{2,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "5", "fn": "count_up_to", "para": "(int n)", "pass": true}
{"task_id": "CPP/96", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\nint main(){\n\tauto result = count_up_to(<FILL_ME>);\n\tassert(issame(result,{2,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "5", "fn": "count_up_to", "para": "(int n)", "pass": true}
{"task_id": "CPP/96", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\nint main(){\n\tauto result = count_up_to(<FILL_ME>);\n\tassert(issame(result,{2,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "5", "fn": "count_up_to", "para": "(int n)", "pass": true}
{"task_id": "CPP/96", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\nint main(){\n\tauto result = count_up_to(<FILL_ME>);\n\tassert(issame(result,{2,3,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "6", "fn": "count_up_to", "para": "(int n)", "pass": true}
{"task_id": "CPP/96", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\nint main(){\n\tauto result = count_up_to(<FILL_ME>);\n\tassert(issame(result,{2,3,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "6", "fn": "count_up_to", "para": "(int n)", "pass": true}
{"task_id": "CPP/96", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\nint main(){\n\tauto result = count_up_to(<FILL_ME>);\n\tassert(issame(result,{2,3,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "6", "fn": "count_up_to", "para": "(int n)", "pass": true}
{"task_id": "CPP/96", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\nint main(){\n\tauto result = count_up_to(<FILL_ME>);\n\tassert(issame(result,{2,3,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "6", "fn": "count_up_to", "para": "(int n)", "pass": true}
{"task_id": "CPP/96", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\nint main(){\n\tauto result = count_up_to(<FILL_ME>);\n\tassert(issame(result,{2,3,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "6", "fn": "count_up_to", "para": "(int n)", "pass": true}
{"task_id": "CPP/96", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\nint main(){\n\tauto result = count_up_to(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "2", "fn": "count_up_to", "para": "(int n)", "pass": true}
{"task_id": "CPP/96", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\nint main(){\n\tauto result = count_up_to(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "2", "fn": "count_up_to", "para": "(int n)", "pass": true}
{"task_id": "CPP/96", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\nint main(){\n\tauto result = count_up_to(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "2", "fn": "count_up_to", "para": "(int n)", "pass": true}
{"task_id": "CPP/96", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\nint main(){\n\tauto result = count_up_to(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "2", "fn": "count_up_to", "para": "(int n)", "pass": true}
{"task_id": "CPP/96", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\nint main(){\n\tauto result = count_up_to(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "2", "fn": "count_up_to", "para": "(int n)", "pass": true}
{"task_id": "CPP/97", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a,int b){\n    return (abs(a)%10)*(abs(b)%10);\n}\nint main(){\n\tauto result = multiply(<FILL_ME>);\n\tassert(result==16);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "24, 34", "fn": "multiply", "para": "(int a,int b)", "pass": true}
{"task_id": "CPP/97", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a,int b){\n    return (abs(a)%10)*(abs(b)%10);\n}\nint main(){\n\tauto result = multiply(<FILL_ME>);\n\tassert(result==16);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "4, 4", "fn": "multiply", "para": "(int a,int b)", "pass": true}
{"task_id": "CPP/97", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a,int b){\n    return (abs(a)%10)*(abs(b)%10);\n}\nint main(){\n\tauto result = multiply(<FILL_ME>);\n\tassert(result==16);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "4, 4", "fn": "multiply", "para": "(int a,int b)", "pass": true}
{"task_id": "CPP/97", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a,int b){\n    return (abs(a)%10)*(abs(b)%10);\n}\nint main(){\n\tauto result = multiply(<FILL_ME>);\n\tassert(result==16);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "23, 45", "fn": "multiply", "para": "(int a,int b)", "pass": false}
{"task_id": "CPP/97", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a,int b){\n    return (abs(a)%10)*(abs(b)%10);\n}\nint main(){\n\tauto result = multiply(<FILL_ME>);\n\tassert(result==16);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "24, 36", "fn": "multiply", "para": "(int a,int b)", "pass": false}
{"task_id": "CPP/97", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a,int b){\n    return (abs(a)%10)*(abs(b)%10);\n}\nint main(){\n\tauto result = multiply(<FILL_ME>);\n\tassert(result==42);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "6, 7", "fn": "multiply", "para": "(int a,int b)", "pass": true}
{"task_id": "CPP/97", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a,int b){\n    return (abs(a)%10)*(abs(b)%10);\n}\nint main(){\n\tauto result = multiply(<FILL_ME>);\n\tassert(result==42);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "6, 7", "fn": "multiply", "para": "(int a,int b)", "pass": true}
{"task_id": "CPP/97", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a,int b){\n    return (abs(a)%10)*(abs(b)%10);\n}\nint main(){\n\tauto result = multiply(<FILL_ME>);\n\tassert(result==42);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "123, 456", "fn": "multiply", "para": "(int a,int b)", "pass": false}
{"task_id": "CPP/97", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a,int b){\n    return (abs(a)%10)*(abs(b)%10);\n}\nint main(){\n\tauto result = multiply(<FILL_ME>);\n\tassert(result==42);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "6, 7", "fn": "multiply", "para": "(int a,int b)", "pass": true}
{"task_id": "CPP/97", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a,int b){\n    return (abs(a)%10)*(abs(b)%10);\n}\nint main(){\n\tauto result = multiply(<FILL_ME>);\n\tassert(result==42);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "123, 456", "fn": "multiply", "para": "(int a,int b)", "pass": false}
{"task_id": "CPP/97", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a,int b){\n    return (abs(a)%10)*(abs(b)%10);\n}\nint main(){\n\tauto result = multiply(<FILL_ME>);\n\tassert(result==20);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5, 4", "fn": "multiply", "para": "(int a,int b)", "pass": true}
{"task_id": "CPP/97", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a,int b){\n    return (abs(a)%10)*(abs(b)%10);\n}\nint main(){\n\tauto result = multiply(<FILL_ME>);\n\tassert(result==20);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5, 4", "fn": "multiply", "para": "(int a,int b)", "pass": true}
{"task_id": "CPP/97", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a,int b){\n    return (abs(a)%10)*(abs(b)%10);\n}\nint main(){\n\tauto result = multiply(<FILL_ME>);\n\tassert(result==20);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5, 4", "fn": "multiply", "para": "(int a,int b)", "pass": true}
{"task_id": "CPP/97", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a,int b){\n    return (abs(a)%10)*(abs(b)%10);\n}\nint main(){\n\tauto result = multiply(<FILL_ME>);\n\tassert(result==20);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5, 4", "fn": "multiply", "para": "(int a,int b)", "pass": true}
{"task_id": "CPP/97", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a,int b){\n    return (abs(a)%10)*(abs(b)%10);\n}\nint main(){\n\tauto result = multiply(<FILL_ME>);\n\tassert(result==20);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5, 4", "fn": "multiply", "para": "(int a,int b)", "pass": true}
{"task_id": "CPP/97", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a,int b){\n    return (abs(a)%10)*(abs(b)%10);\n}\nint main(){\n\tauto result = multiply(<FILL_ME>);\n\tassert(result==49);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "7, 7", "fn": "multiply", "para": "(int a,int b)", "pass": true}
{"task_id": "CPP/97", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a,int b){\n    return (abs(a)%10)*(abs(b)%10);\n}\nint main(){\n\tauto result = multiply(<FILL_ME>);\n\tassert(result==49);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "7, 7", "fn": "multiply", "para": "(int a,int b)", "pass": true}
{"task_id": "CPP/97", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a,int b){\n    return (abs(a)%10)*(abs(b)%10);\n}\nint main(){\n\tauto result = multiply(<FILL_ME>);\n\tassert(result==49);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "7, 7", "fn": "multiply", "para": "(int a,int b)", "pass": true}
{"task_id": "CPP/97", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a,int b){\n    return (abs(a)%10)*(abs(b)%10);\n}\nint main(){\n\tauto result = multiply(<FILL_ME>);\n\tassert(result==49);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "7, 7", "fn": "multiply", "para": "(int a,int b)", "pass": true}
{"task_id": "CPP/97", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a,int b){\n    return (abs(a)%10)*(abs(b)%10);\n}\nint main(){\n\tauto result = multiply(<FILL_ME>);\n\tassert(result==49);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "7, 7", "fn": "multiply", "para": "(int a,int b)", "pass": true}
{"task_id": "CPP/97", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a,int b){\n    return (abs(a)%10)*(abs(b)%10);\n}\nint main(){\n\tauto result = multiply(<FILL_ME>);\n\tassert(result==72);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "29, 48", "fn": "multiply", "para": "(int a,int b)", "pass": true}
{"task_id": "CPP/97", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a,int b){\n    return (abs(a)%10)*(abs(b)%10);\n}\nint main(){\n\tauto result = multiply(<FILL_ME>);\n\tassert(result==72);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "29, 48", "fn": "multiply", "para": "(int a,int b)", "pass": true}
{"task_id": "CPP/97", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a,int b){\n    return (abs(a)%10)*(abs(b)%10);\n}\nint main(){\n\tauto result = multiply(<FILL_ME>);\n\tassert(result==72);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "29, 48", "fn": "multiply", "para": "(int a,int b)", "pass": true}
{"task_id": "CPP/97", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a,int b){\n    return (abs(a)%10)*(abs(b)%10);\n}\nint main(){\n\tauto result = multiply(<FILL_ME>);\n\tassert(result==72);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "29, 48", "fn": "multiply", "para": "(int a,int b)", "pass": true}
{"task_id": "CPP/97", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a,int b){\n    return (abs(a)%10)*(abs(b)%10);\n}\nint main(){\n\tauto result = multiply(<FILL_ME>);\n\tassert(result==72);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "29, 48", "fn": "multiply", "para": "(int a,int b)", "pass": true}
{"task_id": "CPP/97", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a,int b){\n    return (abs(a)%10)*(abs(b)%10);\n}\nint main(){\n\tauto result = multiply(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "0, 0", "fn": "multiply", "para": "(int a,int b)", "pass": true}
{"task_id": "CPP/97", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a,int b){\n    return (abs(a)%10)*(abs(b)%10);\n}\nint main(){\n\tauto result = multiply(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "0, 0", "fn": "multiply", "para": "(int a,int b)", "pass": true}
{"task_id": "CPP/97", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a,int b){\n    return (abs(a)%10)*(abs(b)%10);\n}\nint main(){\n\tauto result = multiply(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "0, 0", "fn": "multiply", "para": "(int a,int b)", "pass": true}
{"task_id": "CPP/97", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a,int b){\n    return (abs(a)%10)*(abs(b)%10);\n}\nint main(){\n\tauto result = multiply(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "0, 0", "fn": "multiply", "para": "(int a,int b)", "pass": true}
{"task_id": "CPP/97", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a,int b){\n    return (abs(a)%10)*(abs(b)%10);\n}\nint main(){\n\tauto result = multiply(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "0, 0", "fn": "multiply", "para": "(int a,int b)", "pass": true}
{"task_id": "CPP/98", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_upper(string s){\n    string uvowel=\"AEIOU\";\n    int count=0;\n    for (int i=0;i*2<s.length();i++)\n    if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())\n        count+=1;\n    return count;\n}\nint main(){\n\tauto result = count_upper(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"HELLO\"", "fn": "count_upper", "para": "(string s)", "pass": true}
{"task_id": "CPP/98", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_upper(string s){\n    string uvowel=\"AEIOU\";\n    int count=0;\n    for (int i=0;i*2<s.length();i++)\n    if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())\n        count+=1;\n    return count;\n}\nint main(){\n\tauto result = count_upper(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"HELLO\"", "fn": "count_upper", "para": "(string s)", "pass": true}
{"task_id": "CPP/98", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_upper(string s){\n    string uvowel=\"AEIOU\";\n    int count=0;\n    for (int i=0;i*2<s.length();i++)\n    if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())\n        count+=1;\n    return count;\n}\nint main(){\n\tauto result = count_upper(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"HELLO\"", "fn": "count_upper", "para": "(string s)", "pass": true}
{"task_id": "CPP/98", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_upper(string s){\n    string uvowel=\"AEIOU\";\n    int count=0;\n    for (int i=0;i*2<s.length();i++)\n    if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())\n        count+=1;\n    return count;\n}\nint main(){\n\tauto result = count_upper(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"HELLO\"", "fn": "count_upper", "para": "(string s)", "pass": true}
{"task_id": "CPP/98", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_upper(string s){\n    string uvowel=\"AEIOU\";\n    int count=0;\n    for (int i=0;i*2<s.length();i++)\n    if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())\n        count+=1;\n    return count;\n}\nint main(){\n\tauto result = count_upper(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"HELLO\"", "fn": "count_upper", "para": "(string s)", "pass": true}
{"task_id": "CPP/98", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_upper(string s){\n    string uvowel=\"AEIOU\";\n    int count=0;\n    for (int i=0;i*2<s.length();i++)\n    if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())\n        count+=1;\n    return count;\n}\nint main(){\n\tauto result = count_upper(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"HELLO\"", "fn": "count_upper", "para": "(string s)", "pass": false}
{"task_id": "CPP/98", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_upper(string s){\n    string uvowel=\"AEIOU\";\n    int count=0;\n    for (int i=0;i*2<s.length();i++)\n    if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())\n        count+=1;\n    return count;\n}\nint main(){\n\tauto result = count_upper(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Hello World\"", "fn": "count_upper", "para": "(string s)", "pass": true}
{"task_id": "CPP/98", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_upper(string s){\n    string uvowel=\"AEIOU\";\n    int count=0;\n    for (int i=0;i*2<s.length();i++)\n    if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())\n        count+=1;\n    return count;\n}\nint main(){\n\tauto result = count_upper(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Hello World\"", "fn": "count_upper", "para": "(string s)", "pass": true}
{"task_id": "CPP/98", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_upper(string s){\n    string uvowel=\"AEIOU\";\n    int count=0;\n    for (int i=0;i*2<s.length();i++)\n    if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())\n        count+=1;\n    return count;\n}\nint main(){\n\tauto result = count_upper(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Hello World\"", "fn": "count_upper", "para": "(string s)", "pass": true}
{"task_id": "CPP/98", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_upper(string s){\n    string uvowel=\"AEIOU\";\n    int count=0;\n    for (int i=0;i*2<s.length();i++)\n    if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())\n        count+=1;\n    return count;\n}\nint main(){\n\tauto result = count_upper(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Hello World\"", "fn": "count_upper", "para": "(string s)", "pass": true}
{"task_id": "CPP/98", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_upper(string s){\n    string uvowel=\"AEIOU\";\n    int count=0;\n    for (int i=0;i*2<s.length();i++)\n    if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())\n        count+=1;\n    return count;\n}\nint main(){\n\tauto result = count_upper(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"AAEEII\"", "fn": "count_upper", "para": "(string s)", "pass": false}
{"task_id": "CPP/98", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_upper(string s){\n    string uvowel=\"AEIOU\";\n    int count=0;\n    for (int i=0;i*2<s.length();i++)\n    if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())\n        count+=1;\n    return count;\n}\nint main(){\n\tauto result = count_upper(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"AAEEII\"", "fn": "count_upper", "para": "(string s)", "pass": false}
{"task_id": "CPP/98", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_upper(string s){\n    string uvowel=\"AEIOU\";\n    int count=0;\n    for (int i=0;i*2<s.length();i++)\n    if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())\n        count+=1;\n    return count;\n}\nint main(){\n\tauto result = count_upper(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"AAEEII\"", "fn": "count_upper", "para": "(string s)", "pass": false}
{"task_id": "CPP/98", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_upper(string s){\n    string uvowel=\"AEIOU\";\n    int count=0;\n    for (int i=0;i*2<s.length();i++)\n    if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())\n        count+=1;\n    return count;\n}\nint main(){\n\tauto result = count_upper(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"AAEEII\"", "fn": "count_upper", "para": "(string s)", "pass": false}
{"task_id": "CPP/98", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_upper(string s){\n    string uvowel=\"AEIOU\";\n    int count=0;\n    for (int i=0;i*2<s.length();i++)\n    if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())\n        count+=1;\n    return count;\n}\nint main(){\n\tauto result = count_upper(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"AAEEII\"", "fn": "count_upper", "para": "(string s)", "pass": false}
{"task_id": "CPP/99", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint closest_integer(string value){\n    double w;\n    w=atof(value.c_str());\n    return round(w);\n}\nint main(){\n\tauto result = closest_integer(<FILL_ME>);\n\tassert(result==-16);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"-16.2\"", "fn": "closest_integer", "para": "(string value)", "pass": true}
{"task_id": "CPP/99", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint closest_integer(string value){\n    double w;\n    w=atof(value.c_str());\n    return round(w);\n}\nint main(){\n\tauto result = closest_integer(<FILL_ME>);\n\tassert(result==-16);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"-16.2\"", "fn": "closest_integer", "para": "(string value)", "pass": true}
{"task_id": "CPP/99", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint closest_integer(string value){\n    double w;\n    w=atof(value.c_str());\n    return round(w);\n}\nint main(){\n\tauto result = closest_integer(<FILL_ME>);\n\tassert(result==-16);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"-16.2\"", "fn": "closest_integer", "para": "(string value)", "pass": true}
{"task_id": "CPP/99", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint closest_integer(string value){\n    double w;\n    w=atof(value.c_str());\n    return round(w);\n}\nint main(){\n\tauto result = closest_integer(<FILL_ME>);\n\tassert(result==-16);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"-16.2\"", "fn": "closest_integer", "para": "(string value)", "pass": true}
{"task_id": "CPP/99", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint closest_integer(string value){\n    double w;\n    w=atof(value.c_str());\n    return round(w);\n}\nint main(){\n\tauto result = closest_integer(<FILL_ME>);\n\tassert(result==-16);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"-16.2\"", "fn": "closest_integer", "para": "(string value)", "pass": true}
{"task_id": "CPP/99", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint closest_integer(string value){\n    double w;\n    w=atof(value.c_str());\n    return round(w);\n}\nint main(){\n\tauto result = closest_integer(<FILL_ME>);\n\tassert(result==15);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"15.49\"", "fn": "closest_integer", "para": "(string value)", "pass": true}
{"task_id": "CPP/99", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint closest_integer(string value){\n    double w;\n    w=atof(value.c_str());\n    return round(w);\n}\nint main(){\n\tauto result = closest_integer(<FILL_ME>);\n\tassert(result==15);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"15.49\"", "fn": "closest_integer", "para": "(string value)", "pass": true}
{"task_id": "CPP/99", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint closest_integer(string value){\n    double w;\n    w=atof(value.c_str());\n    return round(w);\n}\nint main(){\n\tauto result = closest_integer(<FILL_ME>);\n\tassert(result==15);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"15.49\"", "fn": "closest_integer", "para": "(string value)", "pass": true}
{"task_id": "CPP/99", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint closest_integer(string value){\n    double w;\n    w=atof(value.c_str());\n    return round(w);\n}\nint main(){\n\tauto result = closest_integer(<FILL_ME>);\n\tassert(result==15);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"15.49\"", "fn": "closest_integer", "para": "(string value)", "pass": true}
{"task_id": "CPP/99", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint closest_integer(string value){\n    double w;\n    w=atof(value.c_str());\n    return round(w);\n}\nint main(){\n\tauto result = closest_integer(<FILL_ME>);\n\tassert(result==15);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"15.49\"", "fn": "closest_integer", "para": "(string value)", "pass": true}
{"task_id": "CPP/99", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint closest_integer(string value){\n    double w;\n    w=atof(value.c_str());\n    return round(w);\n}\nint main(){\n\tauto result = closest_integer(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"0\"", "fn": "closest_integer", "para": "(string value)", "pass": true}
{"task_id": "CPP/99", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint closest_integer(string value){\n    double w;\n    w=atof(value.c_str());\n    return round(w);\n}\nint main(){\n\tauto result = closest_integer(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"0\"", "fn": "closest_integer", "para": "(string value)", "pass": true}
{"task_id": "CPP/99", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint closest_integer(string value){\n    double w;\n    w=atof(value.c_str());\n    return round(w);\n}\nint main(){\n\tauto result = closest_integer(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"0\"", "fn": "closest_integer", "para": "(string value)", "pass": true}
{"task_id": "CPP/99", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint closest_integer(string value){\n    double w;\n    w=atof(value.c_str());\n    return round(w);\n}\nint main(){\n\tauto result = closest_integer(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"0\"", "fn": "closest_integer", "para": "(string value)", "pass": true}
{"task_id": "CPP/99", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint closest_integer(string value){\n    double w;\n    w=atof(value.c_str());\n    return round(w);\n}\nint main(){\n\tauto result = closest_integer(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"0\"", "fn": "closest_integer", "para": "(string value)", "pass": true}
{"task_id": "CPP/99", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint closest_integer(string value){\n    double w;\n    w=atof(value.c_str());\n    return round(w);\n}\nint main(){\n\tauto result = closest_integer(<FILL_ME>);\n\tassert(result==10);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"10.4\"", "fn": "closest_integer", "para": "(string value)", "pass": true}
{"task_id": "CPP/99", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint closest_integer(string value){\n    double w;\n    w=atof(value.c_str());\n    return round(w);\n}\nint main(){\n\tauto result = closest_integer(<FILL_ME>);\n\tassert(result==10);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"10.4\"", "fn": "closest_integer", "para": "(string value)", "pass": true}
{"task_id": "CPP/99", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint closest_integer(string value){\n    double w;\n    w=atof(value.c_str());\n    return round(w);\n}\nint main(){\n\tauto result = closest_integer(<FILL_ME>);\n\tassert(result==10);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"10.4\"", "fn": "closest_integer", "para": "(string value)", "pass": true}
{"task_id": "CPP/99", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint closest_integer(string value){\n    double w;\n    w=atof(value.c_str());\n    return round(w);\n}\nint main(){\n\tauto result = closest_integer(<FILL_ME>);\n\tassert(result==10);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"10.4\"", "fn": "closest_integer", "para": "(string value)", "pass": true}
{"task_id": "CPP/99", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint closest_integer(string value){\n    double w;\n    w=atof(value.c_str());\n    return round(w);\n}\nint main(){\n\tauto result = closest_integer(<FILL_ME>);\n\tassert(result==10);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"10.4\"", "fn": "closest_integer", "para": "(string value)", "pass": true}
{"task_id": "CPP/100", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> make_a_pile(int n){\n    vector<int> out={n};\n    for (int i=1;i<n;i++)\n        out.push_back(out[out.size()-1]+2);\n    return out;\n}\nint main(){\n\tauto result = make_a_pile(<FILL_ME>);\n\tassert(issame(result,{5,7,9,11,13}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "5", "fn": "make_a_pile", "para": "(int n)", "pass": true}
{"task_id": "CPP/100", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> make_a_pile(int n){\n    vector<int> out={n};\n    for (int i=1;i<n;i++)\n        out.push_back(out[out.size()-1]+2);\n    return out;\n}\nint main(){\n\tauto result = make_a_pile(<FILL_ME>);\n\tassert(issame(result,{5,7,9,11,13}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "5", "fn": "make_a_pile", "para": "(int n)", "pass": true}
{"task_id": "CPP/100", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> make_a_pile(int n){\n    vector<int> out={n};\n    for (int i=1;i<n;i++)\n        out.push_back(out[out.size()-1]+2);\n    return out;\n}\nint main(){\n\tauto result = make_a_pile(<FILL_ME>);\n\tassert(issame(result,{5,7,9,11,13}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "5", "fn": "make_a_pile", "para": "(int n)", "pass": true}
{"task_id": "CPP/100", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> make_a_pile(int n){\n    vector<int> out={n};\n    for (int i=1;i<n;i++)\n        out.push_back(out[out.size()-1]+2);\n    return out;\n}\nint main(){\n\tauto result = make_a_pile(<FILL_ME>);\n\tassert(issame(result,{5,7,9,11,13}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "5", "fn": "make_a_pile", "para": "(int n)", "pass": true}
{"task_id": "CPP/100", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> make_a_pile(int n){\n    vector<int> out={n};\n    for (int i=1;i<n;i++)\n        out.push_back(out[out.size()-1]+2);\n    return out;\n}\nint main(){\n\tauto result = make_a_pile(<FILL_ME>);\n\tassert(issame(result,{5,7,9,11,13}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "5", "fn": "make_a_pile", "para": "(int n)", "pass": true}
{"task_id": "CPP/100", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> make_a_pile(int n){\n    vector<int> out={n};\n    for (int i=1;i<n;i++)\n        out.push_back(out[out.size()-1]+2);\n    return out;\n}\nint main(){\n\tauto result = make_a_pile(<FILL_ME>);\n\tassert(issame(result,{6,8,10,12,14,16}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "6", "fn": "make_a_pile", "para": "(int n)", "pass": true}
{"task_id": "CPP/100", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> make_a_pile(int n){\n    vector<int> out={n};\n    for (int i=1;i<n;i++)\n        out.push_back(out[out.size()-1]+2);\n    return out;\n}\nint main(){\n\tauto result = make_a_pile(<FILL_ME>);\n\tassert(issame(result,{6,8,10,12,14,16}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "6", "fn": "make_a_pile", "para": "(int n)", "pass": true}
{"task_id": "CPP/100", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> make_a_pile(int n){\n    vector<int> out={n};\n    for (int i=1;i<n;i++)\n        out.push_back(out[out.size()-1]+2);\n    return out;\n}\nint main(){\n\tauto result = make_a_pile(<FILL_ME>);\n\tassert(issame(result,{6,8,10,12,14,16}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "6", "fn": "make_a_pile", "para": "(int n)", "pass": true}
{"task_id": "CPP/100", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> make_a_pile(int n){\n    vector<int> out={n};\n    for (int i=1;i<n;i++)\n        out.push_back(out[out.size()-1]+2);\n    return out;\n}\nint main(){\n\tauto result = make_a_pile(<FILL_ME>);\n\tassert(issame(result,{6,8,10,12,14,16}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "6", "fn": "make_a_pile", "para": "(int n)", "pass": true}
{"task_id": "CPP/100", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> make_a_pile(int n){\n    vector<int> out={n};\n    for (int i=1;i<n;i++)\n        out.push_back(out[out.size()-1]+2);\n    return out;\n}\nint main(){\n\tauto result = make_a_pile(<FILL_ME>);\n\tassert(issame(result,{6,8,10,12,14,16}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "6", "fn": "make_a_pile", "para": "(int n)", "pass": true}
{"task_id": "CPP/100", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> make_a_pile(int n){\n    vector<int> out={n};\n    for (int i=1;i<n;i++)\n        out.push_back(out[out.size()-1]+2);\n    return out;\n}\nint main(){\n\tauto result = make_a_pile(<FILL_ME>);\n\tassert(issame(result,{3,5,7}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "3", "fn": "make_a_pile", "para": "(int n)", "pass": true}
{"task_id": "CPP/100", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> make_a_pile(int n){\n    vector<int> out={n};\n    for (int i=1;i<n;i++)\n        out.push_back(out[out.size()-1]+2);\n    return out;\n}\nint main(){\n\tauto result = make_a_pile(<FILL_ME>);\n\tassert(issame(result,{3,5,7}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "3", "fn": "make_a_pile", "para": "(int n)", "pass": true}
{"task_id": "CPP/100", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> make_a_pile(int n){\n    vector<int> out={n};\n    for (int i=1;i<n;i++)\n        out.push_back(out[out.size()-1]+2);\n    return out;\n}\nint main(){\n\tauto result = make_a_pile(<FILL_ME>);\n\tassert(issame(result,{3,5,7}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "3", "fn": "make_a_pile", "para": "(int n)", "pass": true}
{"task_id": "CPP/100", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> make_a_pile(int n){\n    vector<int> out={n};\n    for (int i=1;i<n;i++)\n        out.push_back(out[out.size()-1]+2);\n    return out;\n}\nint main(){\n\tauto result = make_a_pile(<FILL_ME>);\n\tassert(issame(result,{3,5,7}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "3", "fn": "make_a_pile", "para": "(int n)", "pass": true}
{"task_id": "CPP/100", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> make_a_pile(int n){\n    vector<int> out={n};\n    for (int i=1;i<n;i++)\n        out.push_back(out[out.size()-1]+2);\n    return out;\n}\nint main(){\n\tauto result = make_a_pile(<FILL_ME>);\n\tassert(issame(result,{3,5,7}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "3", "fn": "make_a_pile", "para": "(int n)", "pass": true}
{"task_id": "CPP/100", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> make_a_pile(int n){\n    vector<int> out={n};\n    for (int i=1;i<n;i++)\n        out.push_back(out[out.size()-1]+2);\n    return out;\n}\nint main(){\n\tauto result = make_a_pile(<FILL_ME>);\n\tassert(issame(result,{4,6,8,10}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "4", "fn": "make_a_pile", "para": "(int n)", "pass": true}
{"task_id": "CPP/100", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> make_a_pile(int n){\n    vector<int> out={n};\n    for (int i=1;i<n;i++)\n        out.push_back(out[out.size()-1]+2);\n    return out;\n}\nint main(){\n\tauto result = make_a_pile(<FILL_ME>);\n\tassert(issame(result,{4,6,8,10}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "4", "fn": "make_a_pile", "para": "(int n)", "pass": true}
{"task_id": "CPP/100", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> make_a_pile(int n){\n    vector<int> out={n};\n    for (int i=1;i<n;i++)\n        out.push_back(out[out.size()-1]+2);\n    return out;\n}\nint main(){\n\tauto result = make_a_pile(<FILL_ME>);\n\tassert(issame(result,{4,6,8,10}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "4", "fn": "make_a_pile", "para": "(int n)", "pass": true}
{"task_id": "CPP/100", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> make_a_pile(int n){\n    vector<int> out={n};\n    for (int i=1;i<n;i++)\n        out.push_back(out[out.size()-1]+2);\n    return out;\n}\nint main(){\n\tauto result = make_a_pile(<FILL_ME>);\n\tassert(issame(result,{4,6,8,10}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "4", "fn": "make_a_pile", "para": "(int n)", "pass": true}
{"task_id": "CPP/100", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> make_a_pile(int n){\n    vector<int> out={n};\n    for (int i=1;i<n;i++)\n        out.push_back(out[out.size()-1]+2);\n    return out;\n}\nint main(){\n\tauto result = make_a_pile(<FILL_ME>);\n\tassert(issame(result,{4,6,8,10}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "4", "fn": "make_a_pile", "para": "(int n)", "pass": true}
{"task_id": "CPP/100", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> make_a_pile(int n){\n    vector<int> out={n};\n    for (int i=1;i<n;i++)\n        out.push_back(out[out.size()-1]+2);\n    return out;\n}\nint main(){\n\tauto result = make_a_pile(<FILL_ME>);\n\tassert(issame(result,{8,10,12,14,16,18,20,22}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "8", "fn": "make_a_pile", "para": "(int n)", "pass": true}
{"task_id": "CPP/100", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> make_a_pile(int n){\n    vector<int> out={n};\n    for (int i=1;i<n;i++)\n        out.push_back(out[out.size()-1]+2);\n    return out;\n}\nint main(){\n\tauto result = make_a_pile(<FILL_ME>);\n\tassert(issame(result,{8,10,12,14,16,18,20,22}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "8", "fn": "make_a_pile", "para": "(int n)", "pass": true}
{"task_id": "CPP/100", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> make_a_pile(int n){\n    vector<int> out={n};\n    for (int i=1;i<n;i++)\n        out.push_back(out[out.size()-1]+2);\n    return out;\n}\nint main(){\n\tauto result = make_a_pile(<FILL_ME>);\n\tassert(issame(result,{8,10,12,14,16,18,20,22}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "8", "fn": "make_a_pile", "para": "(int n)", "pass": true}
{"task_id": "CPP/100", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> make_a_pile(int n){\n    vector<int> out={n};\n    for (int i=1;i<n;i++)\n        out.push_back(out[out.size()-1]+2);\n    return out;\n}\nint main(){\n\tauto result = make_a_pile(<FILL_ME>);\n\tassert(issame(result,{8,10,12,14,16,18,20,22}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "8", "fn": "make_a_pile", "para": "(int n)", "pass": true}
{"task_id": "CPP/100", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> make_a_pile(int n){\n    vector<int> out={n};\n    for (int i=1;i<n;i++)\n        out.push_back(out[out.size()-1]+2);\n    return out;\n}\nint main(){\n\tauto result = make_a_pile(<FILL_ME>);\n\tassert(issame(result,{8,10,12,14,16,18,20,22}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "8", "fn": "make_a_pile", "para": "(int n)", "pass": true}
{"task_id": "CPP/101", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> words_string(string s){\n    string current=\"\";\n    vector<string> out={};\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n     if (s[i]==' ' or s[i]==',')\n     {\n        if (current.length()>0)\n        {\n            out.push_back(current);\n            current=\"\";\n        }\n     }\n     else current=current+s[i];\n     return out;\n}\nint main(){\n\tauto result = words_string(<FILL_ME>);\n\tassert(issame(result,{\"One\",\"two\",\"three\",\"four\",\"five\",\"six\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"One two, three, four, five, six\"", "fn": "words_string", "para": "(string s)", "pass": true}
{"task_id": "CPP/101", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> words_string(string s){\n    string current=\"\";\n    vector<string> out={};\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n     if (s[i]==' ' or s[i]==',')\n     {\n        if (current.length()>0)\n        {\n            out.push_back(current);\n            current=\"\";\n        }\n     }\n     else current=current+s[i];\n     return out;\n}\nint main(){\n\tauto result = words_string(<FILL_ME>);\n\tassert(issame(result,{\"One\",\"two\",\"three\",\"four\",\"five\",\"six\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"One two, three, four, five, six\"", "fn": "words_string", "para": "(string s)", "pass": true}
{"task_id": "CPP/101", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> words_string(string s){\n    string current=\"\";\n    vector<string> out={};\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n     if (s[i]==' ' or s[i]==',')\n     {\n        if (current.length()>0)\n        {\n            out.push_back(current);\n            current=\"\";\n        }\n     }\n     else current=current+s[i];\n     return out;\n}\nint main(){\n\tauto result = words_string(<FILL_ME>);\n\tassert(issame(result,{\"One\",\"two\",\"three\",\"four\",\"five\",\"six\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"One two, three, four, five, six\"", "fn": "words_string", "para": "(string s)", "pass": true}
{"task_id": "CPP/101", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> words_string(string s){\n    string current=\"\";\n    vector<string> out={};\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n     if (s[i]==' ' or s[i]==',')\n     {\n        if (current.length()>0)\n        {\n            out.push_back(current);\n            current=\"\";\n        }\n     }\n     else current=current+s[i];\n     return out;\n}\nint main(){\n\tauto result = words_string(<FILL_ME>);\n\tassert(issame(result,{\"One\",\"two\",\"three\",\"four\",\"five\",\"six\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"One two, three, four, five, six\"", "fn": "words_string", "para": "(string s)", "pass": true}
{"task_id": "CPP/101", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> words_string(string s){\n    string current=\"\";\n    vector<string> out={};\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n     if (s[i]==' ' or s[i]==',')\n     {\n        if (current.length()>0)\n        {\n            out.push_back(current);\n            current=\"\";\n        }\n     }\n     else current=current+s[i];\n     return out;\n}\nint main(){\n\tauto result = words_string(<FILL_ME>);\n\tassert(issame(result,{\"One\",\"two\",\"three\",\"four\",\"five\",\"six\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"One two, three, four, five, six\"", "fn": "words_string", "para": "(string s)", "pass": true}
{"task_id": "CPP/101", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> words_string(string s){\n    string current=\"\";\n    vector<string> out={};\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n     if (s[i]==' ' or s[i]==',')\n     {\n        if (current.length()>0)\n        {\n            out.push_back(current);\n            current=\"\";\n        }\n     }\n     else current=current+s[i];\n     return out;\n}\nint main(){\n\tauto result = words_string(<FILL_ME>);\n\tassert(issame(result,{\"Hi\",\"my\",\"name\",\"is\",\"John\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Hi my name is John\"", "fn": "words_string", "para": "(string s)", "pass": true}
{"task_id": "CPP/101", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> words_string(string s){\n    string current=\"\";\n    vector<string> out={};\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n     if (s[i]==' ' or s[i]==',')\n     {\n        if (current.length()>0)\n        {\n            out.push_back(current);\n            current=\"\";\n        }\n     }\n     else current=current+s[i];\n     return out;\n}\nint main(){\n\tauto result = words_string(<FILL_ME>);\n\tassert(issame(result,{\"Hi\",\"my\",\"name\",\"is\",\"John\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Hi my name is John\"", "fn": "words_string", "para": "(string s)", "pass": true}
{"task_id": "CPP/101", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> words_string(string s){\n    string current=\"\";\n    vector<string> out={};\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n     if (s[i]==' ' or s[i]==',')\n     {\n        if (current.length()>0)\n        {\n            out.push_back(current);\n            current=\"\";\n        }\n     }\n     else current=current+s[i];\n     return out;\n}\nint main(){\n\tauto result = words_string(<FILL_ME>);\n\tassert(issame(result,{\"Hi\",\"my\",\"name\",\"is\",\"John\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Hi my name is John\"", "fn": "words_string", "para": "(string s)", "pass": true}
{"task_id": "CPP/101", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> words_string(string s){\n    string current=\"\";\n    vector<string> out={};\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n     if (s[i]==' ' or s[i]==',')\n     {\n        if (current.length()>0)\n        {\n            out.push_back(current);\n            current=\"\";\n        }\n     }\n     else current=current+s[i];\n     return out;\n}\nint main(){\n\tauto result = words_string(<FILL_ME>);\n\tassert(issame(result,{\"Hi\",\"my\",\"name\",\"is\",\"John\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Hi my name is John\"", "fn": "words_string", "para": "(string s)", "pass": true}
{"task_id": "CPP/101", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> words_string(string s){\n    string current=\"\";\n    vector<string> out={};\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n     if (s[i]==' ' or s[i]==',')\n     {\n        if (current.length()>0)\n        {\n            out.push_back(current);\n            current=\"\";\n        }\n     }\n     else current=current+s[i];\n     return out;\n}\nint main(){\n\tauto result = words_string(<FILL_ME>);\n\tassert(issame(result,{\"Hi\",\"my\",\"name\",\"is\",\"John\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Hi my name is John\"", "fn": "words_string", "para": "(string s)", "pass": true}
{"task_id": "CPP/101", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> words_string(string s){\n    string current=\"\";\n    vector<string> out={};\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n     if (s[i]==' ' or s[i]==',')\n     {\n        if (current.length()>0)\n        {\n            out.push_back(current);\n            current=\"\";\n        }\n     }\n     else current=current+s[i];\n     return out;\n}\nint main(){\n\tauto result = words_string(<FILL_ME>);\n\tassert(issame(result,{\"Hi\",\"my\",\"name\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Hi, my name\"", "fn": "words_string", "para": "(string s)", "pass": true}
{"task_id": "CPP/101", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> words_string(string s){\n    string current=\"\";\n    vector<string> out={};\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n     if (s[i]==' ' or s[i]==',')\n     {\n        if (current.length()>0)\n        {\n            out.push_back(current);\n            current=\"\";\n        }\n     }\n     else current=current+s[i];\n     return out;\n}\nint main(){\n\tauto result = words_string(<FILL_ME>);\n\tassert(issame(result,{\"Hi\",\"my\",\"name\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Hi, my name\"", "fn": "words_string", "para": "(string s)", "pass": true}
{"task_id": "CPP/101", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> words_string(string s){\n    string current=\"\";\n    vector<string> out={};\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n     if (s[i]==' ' or s[i]==',')\n     {\n        if (current.length()>0)\n        {\n            out.push_back(current);\n            current=\"\";\n        }\n     }\n     else current=current+s[i];\n     return out;\n}\nint main(){\n\tauto result = words_string(<FILL_ME>);\n\tassert(issame(result,{\"Hi\",\"my\",\"name\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Hi, my name\"", "fn": "words_string", "para": "(string s)", "pass": true}
{"task_id": "CPP/101", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> words_string(string s){\n    string current=\"\";\n    vector<string> out={};\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n     if (s[i]==' ' or s[i]==',')\n     {\n        if (current.length()>0)\n        {\n            out.push_back(current);\n            current=\"\";\n        }\n     }\n     else current=current+s[i];\n     return out;\n}\nint main(){\n\tauto result = words_string(<FILL_ME>);\n\tassert(issame(result,{\"Hi\",\"my\",\"name\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Hi, my name\"", "fn": "words_string", "para": "(string s)", "pass": true}
{"task_id": "CPP/101", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> words_string(string s){\n    string current=\"\";\n    vector<string> out={};\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n     if (s[i]==' ' or s[i]==',')\n     {\n        if (current.length()>0)\n        {\n            out.push_back(current);\n            current=\"\";\n        }\n     }\n     else current=current+s[i];\n     return out;\n}\nint main(){\n\tauto result = words_string(<FILL_ME>);\n\tassert(issame(result,{\"Hi\",\"my\",\"name\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Hi, my name\"", "fn": "words_string", "para": "(string s)", "pass": true}
{"task_id": "CPP/101", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> words_string(string s){\n    string current=\"\";\n    vector<string> out={};\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n     if (s[i]==' ' or s[i]==',')\n     {\n        if (current.length()>0)\n        {\n            out.push_back(current);\n            current=\"\";\n        }\n     }\n     else current=current+s[i];\n     return out;\n}\nint main(){\n\tauto result = words_string(<FILL_ME>);\n\tassert(issame(result,{\"ahmed\",\"gamal\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"ahmed gamal\"", "fn": "words_string", "para": "(string s)", "pass": true}
{"task_id": "CPP/101", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> words_string(string s){\n    string current=\"\";\n    vector<string> out={};\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n     if (s[i]==' ' or s[i]==',')\n     {\n        if (current.length()>0)\n        {\n            out.push_back(current);\n            current=\"\";\n        }\n     }\n     else current=current+s[i];\n     return out;\n}\nint main(){\n\tauto result = words_string(<FILL_ME>);\n\tassert(issame(result,{\"ahmed\",\"gamal\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"ahmed gamal\"", "fn": "words_string", "para": "(string s)", "pass": true}
{"task_id": "CPP/101", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> words_string(string s){\n    string current=\"\";\n    vector<string> out={};\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n     if (s[i]==' ' or s[i]==',')\n     {\n        if (current.length()>0)\n        {\n            out.push_back(current);\n            current=\"\";\n        }\n     }\n     else current=current+s[i];\n     return out;\n}\nint main(){\n\tauto result = words_string(<FILL_ME>);\n\tassert(issame(result,{\"ahmed\",\"gamal\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"ahmed gamal\"", "fn": "words_string", "para": "(string s)", "pass": true}
{"task_id": "CPP/101", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> words_string(string s){\n    string current=\"\";\n    vector<string> out={};\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n     if (s[i]==' ' or s[i]==',')\n     {\n        if (current.length()>0)\n        {\n            out.push_back(current);\n            current=\"\";\n        }\n     }\n     else current=current+s[i];\n     return out;\n}\nint main(){\n\tauto result = words_string(<FILL_ME>);\n\tassert(issame(result,{\"ahmed\",\"gamal\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"ahmed gamal\"", "fn": "words_string", "para": "(string s)", "pass": true}
{"task_id": "CPP/101", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> words_string(string s){\n    string current=\"\";\n    vector<string> out={};\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n     if (s[i]==' ' or s[i]==',')\n     {\n        if (current.length()>0)\n        {\n            out.push_back(current);\n            current=\"\";\n        }\n     }\n     else current=current+s[i];\n     return out;\n}\nint main(){\n\tauto result = words_string(<FILL_ME>);\n\tassert(issame(result,{\"ahmed\",\"gamal\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"ahmed gamal\"", "fn": "words_string", "para": "(string s)", "pass": true}
{"task_id": "CPP/101", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> words_string(string s){\n    string current=\"\";\n    vector<string> out={};\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n     if (s[i]==' ' or s[i]==',')\n     {\n        if (current.length()>0)\n        {\n            out.push_back(current);\n            current=\"\";\n        }\n     }\n     else current=current+s[i];\n     return out;\n}\nint main(){\n\tauto result = words_string(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Hello, World!\"", "fn": "words_string", "para": "(string s)", "pass": false}
{"task_id": "CPP/101", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> words_string(string s){\n    string current=\"\";\n    vector<string> out={};\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n     if (s[i]==' ' or s[i]==',')\n     {\n        if (current.length()>0)\n        {\n            out.push_back(current);\n            current=\"\";\n        }\n     }\n     else current=current+s[i];\n     return out;\n}\nint main(){\n\tauto result = words_string(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Hello, World!\"", "fn": "words_string", "para": "(string s)", "pass": false}
{"task_id": "CPP/101", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> words_string(string s){\n    string current=\"\";\n    vector<string> out={};\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n     if (s[i]==' ' or s[i]==',')\n     {\n        if (current.length()>0)\n        {\n            out.push_back(current);\n            current=\"\";\n        }\n     }\n     else current=current+s[i];\n     return out;\n}\nint main(){\n\tauto result = words_string(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Hello, World!\"", "fn": "words_string", "para": "(string s)", "pass": false}
{"task_id": "CPP/101", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> words_string(string s){\n    string current=\"\";\n    vector<string> out={};\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n     if (s[i]==' ' or s[i]==',')\n     {\n        if (current.length()>0)\n        {\n            out.push_back(current);\n            current=\"\";\n        }\n     }\n     else current=current+s[i];\n     return out;\n}\nint main(){\n\tauto result = words_string(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Hello, World!\"", "fn": "words_string", "para": "(string s)", "pass": false}
{"task_id": "CPP/101", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> words_string(string s){\n    string current=\"\";\n    vector<string> out={};\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n     if (s[i]==' ' or s[i]==',')\n     {\n        if (current.length()>0)\n        {\n            out.push_back(current);\n            current=\"\";\n        }\n     }\n     else current=current+s[i];\n     return out;\n}\nint main(){\n\tauto result = words_string(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Hello, World!\"", "fn": "words_string", "para": "(string s)", "pass": false}
{"task_id": "CPP/102", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint choose_num(int x,int y){\n    if (y<x) return -1;\n    if (y==x and y%2==1) return -1;\n    if (y%2==1) return y-1;\n    return y;\n}\nint main(){\n\tauto result = choose_num(<FILL_ME>);\n\tassert(result==546);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5, 547", "fn": "choose_num", "para": "(int x,int y)", "pass": true}
{"task_id": "CPP/102", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint choose_num(int x,int y){\n    if (y<x) return -1;\n    if (y==x and y%2==1) return -1;\n    if (y%2==1) return y-1;\n    return y;\n}\nint main(){\n\tauto result = choose_num(<FILL_ME>);\n\tassert(result==546);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5, 547", "fn": "choose_num", "para": "(int x,int y)", "pass": true}
{"task_id": "CPP/102", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint choose_num(int x,int y){\n    if (y<x) return -1;\n    if (y==x and y%2==1) return -1;\n    if (y%2==1) return y-1;\n    return y;\n}\nint main(){\n\tauto result = choose_num(<FILL_ME>);\n\tassert(result==546);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5, 547", "fn": "choose_num", "para": "(int x,int y)", "pass": true}
{"task_id": "CPP/102", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint choose_num(int x,int y){\n    if (y<x) return -1;\n    if (y==x and y%2==1) return -1;\n    if (y%2==1) return y-1;\n    return y;\n}\nint main(){\n\tauto result = choose_num(<FILL_ME>);\n\tassert(result==546);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5, 547", "fn": "choose_num", "para": "(int x,int y)", "pass": true}
{"task_id": "CPP/102", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint choose_num(int x,int y){\n    if (y<x) return -1;\n    if (y==x and y%2==1) return -1;\n    if (y%2==1) return y-1;\n    return y;\n}\nint main(){\n\tauto result = choose_num(<FILL_ME>);\n\tassert(result==546);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5, 547", "fn": "choose_num", "para": "(int x,int y)", "pass": true}
{"task_id": "CPP/102", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint choose_num(int x,int y){\n    if (y<x) return -1;\n    if (y==x and y%2==1) return -1;\n    if (y%2==1) return y-1;\n    return y;\n}\nint main(){\n\tauto result = choose_num(<FILL_ME>);\n\tassert(result==14);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5, 15", "fn": "choose_num", "para": "(int x,int y)", "pass": true}
{"task_id": "CPP/102", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint choose_num(int x,int y){\n    if (y<x) return -1;\n    if (y==x and y%2==1) return -1;\n    if (y%2==1) return y-1;\n    return y;\n}\nint main(){\n\tauto result = choose_num(<FILL_ME>);\n\tassert(result==14);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5, 15", "fn": "choose_num", "para": "(int x,int y)", "pass": true}
{"task_id": "CPP/102", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint choose_num(int x,int y){\n    if (y<x) return -1;\n    if (y==x and y%2==1) return -1;\n    if (y%2==1) return y-1;\n    return y;\n}\nint main(){\n\tauto result = choose_num(<FILL_ME>);\n\tassert(result==14);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5, 15", "fn": "choose_num", "para": "(int x,int y)", "pass": true}
{"task_id": "CPP/102", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint choose_num(int x,int y){\n    if (y<x) return -1;\n    if (y==x and y%2==1) return -1;\n    if (y%2==1) return y-1;\n    return y;\n}\nint main(){\n\tauto result = choose_num(<FILL_ME>);\n\tassert(result==14);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5, 15", "fn": "choose_num", "para": "(int x,int y)", "pass": true}
{"task_id": "CPP/102", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint choose_num(int x,int y){\n    if (y<x) return -1;\n    if (y==x and y%2==1) return -1;\n    if (y%2==1) return y-1;\n    return y;\n}\nint main(){\n\tauto result = choose_num(<FILL_ME>);\n\tassert(result==14);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5, 15", "fn": "choose_num", "para": "(int x,int y)", "pass": true}
{"task_id": "CPP/102", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint choose_num(int x,int y){\n    if (y<x) return -1;\n    if (y==x and y%2==1) return -1;\n    if (y%2==1) return y-1;\n    return y;\n}\nint main(){\n\tauto result = choose_num(<FILL_ME>);\n\tassert(result==12354);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "12353, 12354", "fn": "choose_num", "para": "(int x,int y)", "pass": true}
{"task_id": "CPP/102", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint choose_num(int x,int y){\n    if (y<x) return -1;\n    if (y==x and y%2==1) return -1;\n    if (y%2==1) return y-1;\n    return y;\n}\nint main(){\n\tauto result = choose_num(<FILL_ME>);\n\tassert(result==12354);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "12353, 12354", "fn": "choose_num", "para": "(int x,int y)", "pass": true}
{"task_id": "CPP/102", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint choose_num(int x,int y){\n    if (y<x) return -1;\n    if (y==x and y%2==1) return -1;\n    if (y%2==1) return y-1;\n    return y;\n}\nint main(){\n\tauto result = choose_num(<FILL_ME>);\n\tassert(result==12354);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "12353, 12354", "fn": "choose_num", "para": "(int x,int y)", "pass": true}
{"task_id": "CPP/102", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint choose_num(int x,int y){\n    if (y<x) return -1;\n    if (y==x and y%2==1) return -1;\n    if (y%2==1) return y-1;\n    return y;\n}\nint main(){\n\tauto result = choose_num(<FILL_ME>);\n\tassert(result==12354);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "12355, 12354", "fn": "choose_num", "para": "(int x,int y)", "pass": false}
{"task_id": "CPP/102", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint choose_num(int x,int y){\n    if (y<x) return -1;\n    if (y==x and y%2==1) return -1;\n    if (y%2==1) return y-1;\n    return y;\n}\nint main(){\n\tauto result = choose_num(<FILL_ME>);\n\tassert(result==12354);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "12353, 12354", "fn": "choose_num", "para": "(int x,int y)", "pass": true}
{"task_id": "CPP/102", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint choose_num(int x,int y){\n    if (y<x) return -1;\n    if (y==x and y%2==1) return -1;\n    if (y%2==1) return y-1;\n    return y;\n}\nint main(){\n\tauto result = choose_num(<FILL_ME>);\n\tassert(result==28);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5, 30", "fn": "choose_num", "para": "(int x,int y)", "pass": false}
{"task_id": "CPP/102", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint choose_num(int x,int y){\n    if (y<x) return -1;\n    if (y==x and y%2==1) return -1;\n    if (y%2==1) return y-1;\n    return y;\n}\nint main(){\n\tauto result = choose_num(<FILL_ME>);\n\tassert(result==28);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5, 29", "fn": "choose_num", "para": "(int x,int y)", "pass": true}
{"task_id": "CPP/102", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint choose_num(int x,int y){\n    if (y<x) return -1;\n    if (y==x and y%2==1) return -1;\n    if (y%2==1) return y-1;\n    return y;\n}\nint main(){\n\tauto result = choose_num(<FILL_ME>);\n\tassert(result==28);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5, 29", "fn": "choose_num", "para": "(int x,int y)", "pass": true}
{"task_id": "CPP/102", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint choose_num(int x,int y){\n    if (y<x) return -1;\n    if (y==x and y%2==1) return -1;\n    if (y%2==1) return y-1;\n    return y;\n}\nint main(){\n\tauto result = choose_num(<FILL_ME>);\n\tassert(result==28);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5, 30", "fn": "choose_num", "para": "(int x,int y)", "pass": false}
{"task_id": "CPP/102", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint choose_num(int x,int y){\n    if (y<x) return -1;\n    if (y==x and y%2==1) return -1;\n    if (y%2==1) return y-1;\n    return y;\n}\nint main(){\n\tauto result = choose_num(<FILL_ME>);\n\tassert(result==28);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5, 30", "fn": "choose_num", "para": "(int x,int y)", "pass": false}
{"task_id": "CPP/102", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint choose_num(int x,int y){\n    if (y<x) return -1;\n    if (y==x and y%2==1) return -1;\n    if (y%2==1) return y-1;\n    return y;\n}\nint main(){\n\tauto result = choose_num(<FILL_ME>);\n\tassert(result==-1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3, 5", "fn": "choose_num", "para": "(int x,int y)", "pass": false}
{"task_id": "CPP/102", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint choose_num(int x,int y){\n    if (y<x) return -1;\n    if (y==x and y%2==1) return -1;\n    if (y%2==1) return y-1;\n    return y;\n}\nint main(){\n\tauto result = choose_num(<FILL_ME>);\n\tassert(result==-1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3, 5", "fn": "choose_num", "para": "(int x,int y)", "pass": false}
{"task_id": "CPP/102", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint choose_num(int x,int y){\n    if (y<x) return -1;\n    if (y==x and y%2==1) return -1;\n    if (y%2==1) return y-1;\n    return y;\n}\nint main(){\n\tauto result = choose_num(<FILL_ME>);\n\tassert(result==-1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10, 9", "fn": "choose_num", "para": "(int x,int y)", "pass": true}
{"task_id": "CPP/102", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint choose_num(int x,int y){\n    if (y<x) return -1;\n    if (y==x and y%2==1) return -1;\n    if (y%2==1) return y-1;\n    return y;\n}\nint main(){\n\tauto result = choose_num(<FILL_ME>);\n\tassert(result==-1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10, 9", "fn": "choose_num", "para": "(int x,int y)", "pass": true}
{"task_id": "CPP/102", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint choose_num(int x,int y){\n    if (y<x) return -1;\n    if (y==x and y%2==1) return -1;\n    if (y%2==1) return y-1;\n    return y;\n}\nint main(){\n\tauto result = choose_num(<FILL_ME>);\n\tassert(result==-1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3, 5", "fn": "choose_num", "para": "(int x,int y)", "pass": false}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"1111001010\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1001, 1101", "fn": "rounded_avg", "para": "(int n,int m)", "pass": false}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"1111001010\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1000101, 1100101", "fn": "rounded_avg", "para": "(int n,int m)", "pass": false}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"1111001010\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "101010, 110110", "fn": "rounded_avg", "para": "(int n,int m)", "pass": false}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"1111001010\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1111000, 1111010", "fn": "rounded_avg", "para": "(int n,int m)", "pass": false}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"1111001010\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "101010, 110110", "fn": "rounded_avg", "para": "(int n,int m)", "pass": false}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"101101101\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "100, 200", "fn": "rounded_avg", "para": "(int n,int m)", "pass": false}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"101101101\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "100, 200", "fn": "rounded_avg", "para": "(int n,int m)", "pass": false}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"101101101\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "250, 300", "fn": "rounded_avg", "para": "(int n,int m)", "pass": false}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"101101101\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "300, 400", "fn": "rounded_avg", "para": "(int n,int m)", "pass": false}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"101101101\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "250, 300", "fn": "rounded_avg", "para": "(int n,int m)", "pass": false}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"11010111\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "150, 200", "fn": "rounded_avg", "para": "(int n,int m)", "pass": false}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"11010111\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "100, 215", "fn": "rounded_avg", "para": "(int n,int m)", "pass": false}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"11010111\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "120, 225", "fn": "rounded_avg", "para": "(int n,int m)", "pass": false}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"11010111\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "100, 215", "fn": "rounded_avg", "para": "(int n,int m)", "pass": false}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"11010111\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "100, 215", "fn": "rounded_avg", "para": "(int n,int m)", "pass": false}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"1001110010\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1001110001, 1001110011", "fn": "rounded_avg", "para": "(int n,int m)", "pass": false}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"1001110010\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1001110001, 1001110011", "fn": "rounded_avg", "para": "(int n,int m)", "pass": false}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"1001110010\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1001110001, 1001110011", "fn": "rounded_avg", "para": "(int n,int m)", "pass": false}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"1001110010\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1001110001, 1001110011", "fn": "rounded_avg", "para": "(int n,int m)", "pass": false}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"1001110010\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1001110001, 1001110011", "fn": "rounded_avg", "para": "(int n,int m)", "pass": false}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"11\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3, 5", "fn": "rounded_avg", "para": "(int n,int m)", "pass": false}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"11\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3, 5", "fn": "rounded_avg", "para": "(int n,int m)", "pass": false}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"11\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3, 5", "fn": "rounded_avg", "para": "(int n,int m)", "pass": false}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"11\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3, 5", "fn": "rounded_avg", "para": "(int n,int m)", "pass": false}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"11\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3, 5", "fn": "rounded_avg", "para": "(int n,int m)", "pass": false}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"1011000001\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1011000000, 1011000002", "fn": "rounded_avg", "para": "(int n,int m)", "pass": false}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"1011000001\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1011000000, 1011000002", "fn": "rounded_avg", "para": "(int n,int m)", "pass": false}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"1011000001\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1011000000, 1011000002", "fn": "rounded_avg", "para": "(int n,int m)", "pass": false}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"1011000001\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1011000000, 1011000002", "fn": "rounded_avg", "para": "(int n,int m)", "pass": false}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"1011000001\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1011000000, 1011000002", "fn": "rounded_avg", "para": "(int n,int m)", "pass": false}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"1111100100\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "987654321, 123456789", "fn": "rounded_avg", "para": "(int n,int m)", "pass": false}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"1111100100\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "987654321, 123456789", "fn": "rounded_avg", "para": "(int n,int m)", "pass": false}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"1111100100\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "999, 1001", "fn": "rounded_avg", "para": "(int n,int m)", "pass": false}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"1111100100\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "987654321, 123456789", "fn": "rounded_avg", "para": "(int n,int m)", "pass": false}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"1111100100\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "975, 1025", "fn": "rounded_avg", "para": "(int n,int m)", "pass": false}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"1010\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5, 15", "fn": "rounded_avg", "para": "(int n,int m)", "pass": true}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"1010\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5, 15", "fn": "rounded_avg", "para": "(int n,int m)", "pass": true}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"1010\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5, 15", "fn": "rounded_avg", "para": "(int n,int m)", "pass": true}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"1010\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5, 15", "fn": "rounded_avg", "para": "(int n,int m)", "pass": true}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"1010\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5, 15", "fn": "rounded_avg", "para": "(int n,int m)", "pass": true}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"-1\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3, 7", "fn": "rounded_avg", "para": "(int n,int m)", "pass": false}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"-1\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3, 7", "fn": "rounded_avg", "para": "(int n,int m)", "pass": false}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"-1\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3, 7", "fn": "rounded_avg", "para": "(int n,int m)", "pass": false}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"-1\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3, 7", "fn": "rounded_avg", "para": "(int n,int m)", "pass": false}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"-1\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3,7", "fn": "rounded_avg", "para": "(int n,int m)", "pass": false}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"110101101\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "23, 45", "fn": "rounded_avg", "para": "(int n,int m)", "pass": false}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"110101101\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "45, 63", "fn": "rounded_avg", "para": "(int n,int m)", "pass": false}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"110101101\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "35, 75", "fn": "rounded_avg", "para": "(int n,int m)", "pass": false}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"110101101\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "35, 75", "fn": "rounded_avg", "para": "(int n,int m)", "pass": false}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"110101101\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "45, 63", "fn": "rounded_avg", "para": "(int n,int m)", "pass": false}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"101\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3,7", "fn": "rounded_avg", "para": "(int n,int m)", "pass": true}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"101\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3,7", "fn": "rounded_avg", "para": "(int n,int m)", "pass": true}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"101\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3,7", "fn": "rounded_avg", "para": "(int n,int m)", "pass": true}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"101\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3,7", "fn": "rounded_avg", "para": "(int n,int m)", "pass": true}
{"task_id": "CPP/103", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\nint main(){\n\tauto result = rounded_avg(<FILL_ME>);\n\tassert(result==\"101\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3,7", "fn": "rounded_avg", "para": "(int n,int m)", "pass": true}
{"task_id": "CPP/104", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique_digits(vector<int> x){\n    vector<int> out={};\n    for (int i=0;i<x.size();i++)\n        {\n            int num=x[i];\n            bool u=true;\n            if (num==0) u=false;\n            while (num>0 and u)\n            {\n                if (num%2==0) u=false;\n                num=num/10;\n            }\n            if (u) out.push_back(x[i]);\n        }\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = unique_digits(<FILL_ME>);\n\tassert(issame(result,{31,135}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{31, 135}", "fn": "unique_digits", "para": "(vector<int> x)", "pass": true}
{"task_id": "CPP/104", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique_digits(vector<int> x){\n    vector<int> out={};\n    for (int i=0;i<x.size();i++)\n        {\n            int num=x[i];\n            bool u=true;\n            if (num==0) u=false;\n            while (num>0 and u)\n            {\n                if (num%2==0) u=false;\n                num=num/10;\n            }\n            if (u) out.push_back(x[i]);\n        }\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = unique_digits(<FILL_ME>);\n\tassert(issame(result,{31,135}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{31, 135}", "fn": "unique_digits", "para": "(vector<int> x)", "pass": true}
{"task_id": "CPP/104", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique_digits(vector<int> x){\n    vector<int> out={};\n    for (int i=0;i<x.size();i++)\n        {\n            int num=x[i];\n            bool u=true;\n            if (num==0) u=false;\n            while (num>0 and u)\n            {\n                if (num%2==0) u=false;\n                num=num/10;\n            }\n            if (u) out.push_back(x[i]);\n        }\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = unique_digits(<FILL_ME>);\n\tassert(issame(result,{31,135}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{31, 135}", "fn": "unique_digits", "para": "(vector<int> x)", "pass": true}
{"task_id": "CPP/104", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique_digits(vector<int> x){\n    vector<int> out={};\n    for (int i=0;i<x.size();i++)\n        {\n            int num=x[i];\n            bool u=true;\n            if (num==0) u=false;\n            while (num>0 and u)\n            {\n                if (num%2==0) u=false;\n                num=num/10;\n            }\n            if (u) out.push_back(x[i]);\n        }\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = unique_digits(<FILL_ME>);\n\tassert(issame(result,{31,135}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{31, 135}", "fn": "unique_digits", "para": "(vector<int> x)", "pass": true}
{"task_id": "CPP/104", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique_digits(vector<int> x){\n    vector<int> out={};\n    for (int i=0;i<x.size();i++)\n        {\n            int num=x[i];\n            bool u=true;\n            if (num==0) u=false;\n            while (num>0 and u)\n            {\n                if (num%2==0) u=false;\n                num=num/10;\n            }\n            if (u) out.push_back(x[i]);\n        }\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = unique_digits(<FILL_ME>);\n\tassert(issame(result,{31,135}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{31, 135}", "fn": "unique_digits", "para": "(vector<int> x)", "pass": true}
{"task_id": "CPP/104", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique_digits(vector<int> x){\n    vector<int> out={};\n    for (int i=0;i<x.size();i++)\n        {\n            int num=x[i];\n            bool u=true;\n            if (num==0) u=false;\n            while (num>0 and u)\n            {\n                if (num%2==0) u=false;\n                num=num/10;\n            }\n            if (u) out.push_back(x[i]);\n        }\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = unique_digits(<FILL_ME>);\n\tassert(issame(result,{111,151}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{111, 151}", "fn": "unique_digits", "para": "(vector<int> x)", "pass": true}
{"task_id": "CPP/104", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique_digits(vector<int> x){\n    vector<int> out={};\n    for (int i=0;i<x.size();i++)\n        {\n            int num=x[i];\n            bool u=true;\n            if (num==0) u=false;\n            while (num>0 and u)\n            {\n                if (num%2==0) u=false;\n                num=num/10;\n            }\n            if (u) out.push_back(x[i]);\n        }\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = unique_digits(<FILL_ME>);\n\tassert(issame(result,{111,151}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{111, 151}", "fn": "unique_digits", "para": "(vector<int> x)", "pass": true}
{"task_id": "CPP/104", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique_digits(vector<int> x){\n    vector<int> out={};\n    for (int i=0;i<x.size();i++)\n        {\n            int num=x[i];\n            bool u=true;\n            if (num==0) u=false;\n            while (num>0 and u)\n            {\n                if (num%2==0) u=false;\n                num=num/10;\n            }\n            if (u) out.push_back(x[i]);\n        }\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = unique_digits(<FILL_ME>);\n\tassert(issame(result,{111,151}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{111, 151}", "fn": "unique_digits", "para": "(vector<int> x)", "pass": true}
{"task_id": "CPP/104", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique_digits(vector<int> x){\n    vector<int> out={};\n    for (int i=0;i<x.size();i++)\n        {\n            int num=x[i];\n            bool u=true;\n            if (num==0) u=false;\n            while (num>0 and u)\n            {\n                if (num%2==0) u=false;\n                num=num/10;\n            }\n            if (u) out.push_back(x[i]);\n        }\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = unique_digits(<FILL_ME>);\n\tassert(issame(result,{111,151}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{111, 151}", "fn": "unique_digits", "para": "(vector<int> x)", "pass": true}
{"task_id": "CPP/104", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique_digits(vector<int> x){\n    vector<int> out={};\n    for (int i=0;i<x.size();i++)\n        {\n            int num=x[i];\n            bool u=true;\n            if (num==0) u=false;\n            while (num>0 and u)\n            {\n                if (num%2==0) u=false;\n                num=num/10;\n            }\n            if (u) out.push_back(x[i]);\n        }\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = unique_digits(<FILL_ME>);\n\tassert(issame(result,{111,151}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{111, 151}", "fn": "unique_digits", "para": "(vector<int> x)", "pass": true}
{"task_id": "CPP/104", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique_digits(vector<int> x){\n    vector<int> out={};\n    for (int i=0;i<x.size();i++)\n        {\n            int num=x[i];\n            bool u=true;\n            if (num==0) u=false;\n            while (num>0 and u)\n            {\n                if (num%2==0) u=false;\n                num=num/10;\n            }\n            if (u) out.push_back(x[i]);\n        }\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = unique_digits(<FILL_ME>);\n\tassert(issame(result,{1,15,33}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{1, 15, 33}", "fn": "unique_digits", "para": "(vector<int> x)", "pass": true}
{"task_id": "CPP/104", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique_digits(vector<int> x){\n    vector<int> out={};\n    for (int i=0;i<x.size();i++)\n        {\n            int num=x[i];\n            bool u=true;\n            if (num==0) u=false;\n            while (num>0 and u)\n            {\n                if (num%2==0) u=false;\n                num=num/10;\n            }\n            if (u) out.push_back(x[i]);\n        }\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = unique_digits(<FILL_ME>);\n\tassert(issame(result,{1,15,33}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, 15, 33}", "fn": "unique_digits", "para": "(vector<int> x)", "pass": true}
{"task_id": "CPP/104", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique_digits(vector<int> x){\n    vector<int> out={};\n    for (int i=0;i<x.size();i++)\n        {\n            int num=x[i];\n            bool u=true;\n            if (num==0) u=false;\n            while (num>0 and u)\n            {\n                if (num%2==0) u=false;\n                num=num/10;\n            }\n            if (u) out.push_back(x[i]);\n        }\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = unique_digits(<FILL_ME>);\n\tassert(issame(result,{1,15,33}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, 15, 33}", "fn": "unique_digits", "para": "(vector<int> x)", "pass": true}
{"task_id": "CPP/104", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique_digits(vector<int> x){\n    vector<int> out={};\n    for (int i=0;i<x.size();i++)\n        {\n            int num=x[i];\n            bool u=true;\n            if (num==0) u=false;\n            while (num>0 and u)\n            {\n                if (num%2==0) u=false;\n                num=num/10;\n            }\n            if (u) out.push_back(x[i]);\n        }\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = unique_digits(<FILL_ME>);\n\tassert(issame(result,{1,15,33}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{1, 15, 33}", "fn": "unique_digits", "para": "(vector<int> x)", "pass": true}
{"task_id": "CPP/104", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique_digits(vector<int> x){\n    vector<int> out={};\n    for (int i=0;i<x.size();i++)\n        {\n            int num=x[i];\n            bool u=true;\n            if (num==0) u=false;\n            while (num>0 and u)\n            {\n                if (num%2==0) u=false;\n                num=num/10;\n            }\n            if (u) out.push_back(x[i]);\n        }\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = unique_digits(<FILL_ME>);\n\tassert(issame(result,{1,15,33}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, 15, 33}", "fn": "unique_digits", "para": "(vector<int> x)", "pass": true}
{"task_id": "CPP/104", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique_digits(vector<int> x){\n    vector<int> out={};\n    for (int i=0;i<x.size();i++)\n        {\n            int num=x[i];\n            bool u=true;\n            if (num==0) u=false;\n            while (num>0 and u)\n            {\n                if (num%2==0) u=false;\n                num=num/10;\n            }\n            if (u) out.push_back(x[i]);\n        }\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = unique_digits(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{123, 456, 789}", "fn": "unique_digits", "para": "(vector<int> x)", "pass": true}
{"task_id": "CPP/104", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique_digits(vector<int> x){\n    vector<int> out={};\n    for (int i=0;i<x.size();i++)\n        {\n            int num=x[i];\n            bool u=true;\n            if (num==0) u=false;\n            while (num>0 and u)\n            {\n                if (num%2==0) u=false;\n                num=num/10;\n            }\n            if (u) out.push_back(x[i]);\n        }\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = unique_digits(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{123, 456, 789}", "fn": "unique_digits", "para": "(vector<int> x)", "pass": true}
{"task_id": "CPP/104", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique_digits(vector<int> x){\n    vector<int> out={};\n    for (int i=0;i<x.size();i++)\n        {\n            int num=x[i];\n            bool u=true;\n            if (num==0) u=false;\n            while (num>0 and u)\n            {\n                if (num%2==0) u=false;\n                num=num/10;\n            }\n            if (u) out.push_back(x[i]);\n        }\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = unique_digits(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{123, 456, 789}", "fn": "unique_digits", "para": "(vector<int> x)", "pass": true}
{"task_id": "CPP/104", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique_digits(vector<int> x){\n    vector<int> out={};\n    for (int i=0;i<x.size();i++)\n        {\n            int num=x[i];\n            bool u=true;\n            if (num==0) u=false;\n            while (num>0 and u)\n            {\n                if (num%2==0) u=false;\n                num=num/10;\n            }\n            if (u) out.push_back(x[i]);\n        }\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = unique_digits(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{123, 456, 789}", "fn": "unique_digits", "para": "(vector<int> x)", "pass": true}
{"task_id": "CPP/104", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique_digits(vector<int> x){\n    vector<int> out={};\n    for (int i=0;i<x.size();i++)\n        {\n            int num=x[i];\n            bool u=true;\n            if (num==0) u=false;\n            while (num>0 and u)\n            {\n                if (num%2==0) u=false;\n                num=num/10;\n            }\n            if (u) out.push_back(x[i]);\n        }\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = unique_digits(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{123, 456, 789}", "fn": "unique_digits", "para": "(vector<int> x)", "pass": true}
{"task_id": "CPP/105", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> by_length(vector<int> arr){\n    map<int,string> numto={{0,\"Zero\"},{1,\"One\"},{2,\"Two\"},{3,\"Three\"},{4,\"Four\"},{5,\"Five\"},{6,\"Six\"},{7,\"Seven\"},{8,\"Eight\"},{9,\"Nine\"}};\n    sort(arr.begin(),arr.end());\n    vector<string> out={};\n    for (int i=arr.size()-1;i>=0;i-=1)\n        if (arr[i]>=1 and arr[i]<=9)\n        out.push_back(numto[arr[i]]);\n    return out;\n}\nint main(){\n\tauto result = by_length(<FILL_ME>);\n\tassert(issame(result,{\"Nine\",\"Eight\",\"Four\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{4, 1, 9, 8}", "fn": "by_length", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/105", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> by_length(vector<int> arr){\n    map<int,string> numto={{0,\"Zero\"},{1,\"One\"},{2,\"Two\"},{3,\"Three\"},{4,\"Four\"},{5,\"Five\"},{6,\"Six\"},{7,\"Seven\"},{8,\"Eight\"},{9,\"Nine\"}};\n    sort(arr.begin(),arr.end());\n    vector<string> out={};\n    for (int i=arr.size()-1;i>=0;i-=1)\n        if (arr[i]>=1 and arr[i]<=9)\n        out.push_back(numto[arr[i]]);\n    return out;\n}\nint main(){\n\tauto result = by_length(<FILL_ME>);\n\tassert(issame(result,{\"Nine\",\"Eight\",\"Four\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{4, 1, 9, 8}", "fn": "by_length", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/105", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> by_length(vector<int> arr){\n    map<int,string> numto={{0,\"Zero\"},{1,\"One\"},{2,\"Two\"},{3,\"Three\"},{4,\"Four\"},{5,\"Five\"},{6,\"Six\"},{7,\"Seven\"},{8,\"Eight\"},{9,\"Nine\"}};\n    sort(arr.begin(),arr.end());\n    vector<string> out={};\n    for (int i=arr.size()-1;i>=0;i-=1)\n        if (arr[i]>=1 and arr[i]<=9)\n        out.push_back(numto[arr[i]]);\n    return out;\n}\nint main(){\n\tauto result = by_length(<FILL_ME>);\n\tassert(issame(result,{\"Nine\",\"Eight\",\"Four\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{4, 1, 9, 8}", "fn": "by_length", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/105", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> by_length(vector<int> arr){\n    map<int,string> numto={{0,\"Zero\"},{1,\"One\"},{2,\"Two\"},{3,\"Three\"},{4,\"Four\"},{5,\"Five\"},{6,\"Six\"},{7,\"Seven\"},{8,\"Eight\"},{9,\"Nine\"}};\n    sort(arr.begin(),arr.end());\n    vector<string> out={};\n    for (int i=arr.size()-1;i>=0;i-=1)\n        if (arr[i]>=1 and arr[i]<=9)\n        out.push_back(numto[arr[i]]);\n    return out;\n}\nint main(){\n\tauto result = by_length(<FILL_ME>);\n\tassert(issame(result,{\"Nine\",\"Eight\",\"Four\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{4, 1, 9, 8}", "fn": "by_length", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/105", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> by_length(vector<int> arr){\n    map<int,string> numto={{0,\"Zero\"},{1,\"One\"},{2,\"Two\"},{3,\"Three\"},{4,\"Four\"},{5,\"Five\"},{6,\"Six\"},{7,\"Seven\"},{8,\"Eight\"},{9,\"Nine\"}};\n    sort(arr.begin(),arr.end());\n    vector<string> out={};\n    for (int i=arr.size()-1;i>=0;i-=1)\n        if (arr[i]>=1 and arr[i]<=9)\n        out.push_back(numto[arr[i]]);\n    return out;\n}\nint main(){\n\tauto result = by_length(<FILL_ME>);\n\tassert(issame(result,{\"Nine\",\"Eight\",\"Four\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{4, 1, 9, 8}", "fn": "by_length", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/105", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> by_length(vector<int> arr){\n    map<int,string> numto={{0,\"Zero\"},{1,\"One\"},{2,\"Two\"},{3,\"Three\"},{4,\"Four\"},{5,\"Five\"},{6,\"Six\"},{7,\"Seven\"},{8,\"Eight\"},{9,\"Nine\"}};\n    sort(arr.begin(),arr.end());\n    vector<string> out={};\n    for (int i=arr.size()-1;i>=0;i-=1)\n        if (arr[i]>=1 and arr[i]<=9)\n        out.push_back(numto[arr[i]]);\n    return out;\n}\nint main(){\n\tauto result = by_length(<FILL_ME>);\n\tassert(issame(result,{\"Three\",\"Two\",\"One\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{3,2,1}", "fn": "by_length", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/105", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> by_length(vector<int> arr){\n    map<int,string> numto={{0,\"Zero\"},{1,\"One\"},{2,\"Two\"},{3,\"Three\"},{4,\"Four\"},{5,\"Five\"},{6,\"Six\"},{7,\"Seven\"},{8,\"Eight\"},{9,\"Nine\"}};\n    sort(arr.begin(),arr.end());\n    vector<string> out={};\n    for (int i=arr.size()-1;i>=0;i-=1)\n        if (arr[i]>=1 and arr[i]<=9)\n        out.push_back(numto[arr[i]]);\n    return out;\n}\nint main(){\n\tauto result = by_length(<FILL_ME>);\n\tassert(issame(result,{\"Three\",\"Two\",\"One\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{3, 2, 1}", "fn": "by_length", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/105", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> by_length(vector<int> arr){\n    map<int,string> numto={{0,\"Zero\"},{1,\"One\"},{2,\"Two\"},{3,\"Three\"},{4,\"Four\"},{5,\"Five\"},{6,\"Six\"},{7,\"Seven\"},{8,\"Eight\"},{9,\"Nine\"}};\n    sort(arr.begin(),arr.end());\n    vector<string> out={};\n    for (int i=arr.size()-1;i>=0;i-=1)\n        if (arr[i]>=1 and arr[i]<=9)\n        out.push_back(numto[arr[i]]);\n    return out;\n}\nint main(){\n\tauto result = by_length(<FILL_ME>);\n\tassert(issame(result,{\"Three\",\"Two\",\"One\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{3,2,1}", "fn": "by_length", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/105", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> by_length(vector<int> arr){\n    map<int,string> numto={{0,\"Zero\"},{1,\"One\"},{2,\"Two\"},{3,\"Three\"},{4,\"Four\"},{5,\"Five\"},{6,\"Six\"},{7,\"Seven\"},{8,\"Eight\"},{9,\"Nine\"}};\n    sort(arr.begin(),arr.end());\n    vector<string> out={};\n    for (int i=arr.size()-1;i>=0;i-=1)\n        if (arr[i]>=1 and arr[i]<=9)\n        out.push_back(numto[arr[i]]);\n    return out;\n}\nint main(){\n\tauto result = by_length(<FILL_ME>);\n\tassert(issame(result,{\"Three\",\"Two\",\"One\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{3,2,1}", "fn": "by_length", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/105", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> by_length(vector<int> arr){\n    map<int,string> numto={{0,\"Zero\"},{1,\"One\"},{2,\"Two\"},{3,\"Three\"},{4,\"Four\"},{5,\"Five\"},{6,\"Six\"},{7,\"Seven\"},{8,\"Eight\"},{9,\"Nine\"}};\n    sort(arr.begin(),arr.end());\n    vector<string> out={};\n    for (int i=arr.size()-1;i>=0;i-=1)\n        if (arr[i]>=1 and arr[i]<=9)\n        out.push_back(numto[arr[i]]);\n    return out;\n}\nint main(){\n\tauto result = by_length(<FILL_ME>);\n\tassert(issame(result,{\"Three\",\"Two\",\"One\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{3,2,1}", "fn": "by_length", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/105", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> by_length(vector<int> arr){\n    map<int,string> numto={{0,\"Zero\"},{1,\"One\"},{2,\"Two\"},{3,\"Three\"},{4,\"Four\"},{5,\"Five\"},{6,\"Six\"},{7,\"Seven\"},{8,\"Eight\"},{9,\"Nine\"}};\n    sort(arr.begin(),arr.end());\n    vector<string> out={};\n    for (int i=arr.size()-1;i>=0;i-=1)\n        if (arr[i]>=1 and arr[i]<=9)\n        out.push_back(numto[arr[i]]);\n    return out;\n}\nint main(){\n\tauto result = by_length(<FILL_ME>);\n\tassert(issame(result,{\"One\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1}", "fn": "by_length", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/105", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> by_length(vector<int> arr){\n    map<int,string> numto={{0,\"Zero\"},{1,\"One\"},{2,\"Two\"},{3,\"Three\"},{4,\"Four\"},{5,\"Five\"},{6,\"Six\"},{7,\"Seven\"},{8,\"Eight\"},{9,\"Nine\"}};\n    sort(arr.begin(),arr.end());\n    vector<string> out={};\n    for (int i=arr.size()-1;i>=0;i-=1)\n        if (arr[i]>=1 and arr[i]<=9)\n        out.push_back(numto[arr[i]]);\n    return out;\n}\nint main(){\n\tauto result = by_length(<FILL_ME>);\n\tassert(issame(result,{\"One\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1}", "fn": "by_length", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/105", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> by_length(vector<int> arr){\n    map<int,string> numto={{0,\"Zero\"},{1,\"One\"},{2,\"Two\"},{3,\"Three\"},{4,\"Four\"},{5,\"Five\"},{6,\"Six\"},{7,\"Seven\"},{8,\"Eight\"},{9,\"Nine\"}};\n    sort(arr.begin(),arr.end());\n    vector<string> out={};\n    for (int i=arr.size()-1;i>=0;i-=1)\n        if (arr[i]>=1 and arr[i]<=9)\n        out.push_back(numto[arr[i]]);\n    return out;\n}\nint main(){\n\tauto result = by_length(<FILL_ME>);\n\tassert(issame(result,{\"One\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1}", "fn": "by_length", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/105", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> by_length(vector<int> arr){\n    map<int,string> numto={{0,\"Zero\"},{1,\"One\"},{2,\"Two\"},{3,\"Three\"},{4,\"Four\"},{5,\"Five\"},{6,\"Six\"},{7,\"Seven\"},{8,\"Eight\"},{9,\"Nine\"}};\n    sort(arr.begin(),arr.end());\n    vector<string> out={};\n    for (int i=arr.size()-1;i>=0;i-=1)\n        if (arr[i]>=1 and arr[i]<=9)\n        out.push_back(numto[arr[i]]);\n    return out;\n}\nint main(){\n\tauto result = by_length(<FILL_ME>);\n\tassert(issame(result,{\"One\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1}", "fn": "by_length", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/105", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> by_length(vector<int> arr){\n    map<int,string> numto={{0,\"Zero\"},{1,\"One\"},{2,\"Two\"},{3,\"Three\"},{4,\"Four\"},{5,\"Five\"},{6,\"Six\"},{7,\"Seven\"},{8,\"Eight\"},{9,\"Nine\"}};\n    sort(arr.begin(),arr.end());\n    vector<string> out={};\n    for (int i=arr.size()-1;i>=0;i-=1)\n        if (arr[i]>=1 and arr[i]<=9)\n        out.push_back(numto[arr[i]]);\n    return out;\n}\nint main(){\n\tauto result = by_length(<FILL_ME>);\n\tassert(issame(result,{\"One\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1}", "fn": "by_length", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/105", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> by_length(vector<int> arr){\n    map<int,string> numto={{0,\"Zero\"},{1,\"One\"},{2,\"Two\"},{3,\"Three\"},{4,\"Four\"},{5,\"Five\"},{6,\"Six\"},{7,\"Seven\"},{8,\"Eight\"},{9,\"Nine\"}};\n    sort(arr.begin(),arr.end());\n    vector<string> out={};\n    for (int i=arr.size()-1;i>=0;i-=1)\n        if (arr[i]>=1 and arr[i]<=9)\n        out.push_back(numto[arr[i]]);\n    return out;\n}\nint main(){\n\tauto result = by_length(<FILL_ME>);\n\tassert(issame(result,{\"Eight\",\"Five\",\"Four\",\"Three\",\"Two\",\"Two\",\"One\",\"One\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{5, 1, 4, 3, 2, 2, 8, 1}", "fn": "by_length", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/105", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> by_length(vector<int> arr){\n    map<int,string> numto={{0,\"Zero\"},{1,\"One\"},{2,\"Two\"},{3,\"Three\"},{4,\"Four\"},{5,\"Five\"},{6,\"Six\"},{7,\"Seven\"},{8,\"Eight\"},{9,\"Nine\"}};\n    sort(arr.begin(),arr.end());\n    vector<string> out={};\n    for (int i=arr.size()-1;i>=0;i-=1)\n        if (arr[i]>=1 and arr[i]<=9)\n        out.push_back(numto[arr[i]]);\n    return out;\n}\nint main(){\n\tauto result = by_length(<FILL_ME>);\n\tassert(issame(result,{\"Eight\",\"Five\",\"Four\",\"Three\",\"Two\",\"Two\",\"One\",\"One\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{5, 1, 4, 3, 2, 2, 8, 1}", "fn": "by_length", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/105", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> by_length(vector<int> arr){\n    map<int,string> numto={{0,\"Zero\"},{1,\"One\"},{2,\"Two\"},{3,\"Three\"},{4,\"Four\"},{5,\"Five\"},{6,\"Six\"},{7,\"Seven\"},{8,\"Eight\"},{9,\"Nine\"}};\n    sort(arr.begin(),arr.end());\n    vector<string> out={};\n    for (int i=arr.size()-1;i>=0;i-=1)\n        if (arr[i]>=1 and arr[i]<=9)\n        out.push_back(numto[arr[i]]);\n    return out;\n}\nint main(){\n\tauto result = by_length(<FILL_ME>);\n\tassert(issame(result,{\"Eight\",\"Five\",\"Four\",\"Three\",\"Two\",\"Two\",\"One\",\"One\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{5, 1, 4, 3, 2, 2, 8, 1}", "fn": "by_length", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/105", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> by_length(vector<int> arr){\n    map<int,string> numto={{0,\"Zero\"},{1,\"One\"},{2,\"Two\"},{3,\"Three\"},{4,\"Four\"},{5,\"Five\"},{6,\"Six\"},{7,\"Seven\"},{8,\"Eight\"},{9,\"Nine\"}};\n    sort(arr.begin(),arr.end());\n    vector<string> out={};\n    for (int i=arr.size()-1;i>=0;i-=1)\n        if (arr[i]>=1 and arr[i]<=9)\n        out.push_back(numto[arr[i]]);\n    return out;\n}\nint main(){\n\tauto result = by_length(<FILL_ME>);\n\tassert(issame(result,{\"Eight\",\"Five\",\"Four\",\"Three\",\"Two\",\"Two\",\"One\",\"One\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{5, 1, 4, 3, 2, 2, 8, 1}", "fn": "by_length", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/105", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> by_length(vector<int> arr){\n    map<int,string> numto={{0,\"Zero\"},{1,\"One\"},{2,\"Two\"},{3,\"Three\"},{4,\"Four\"},{5,\"Five\"},{6,\"Six\"},{7,\"Seven\"},{8,\"Eight\"},{9,\"Nine\"}};\n    sort(arr.begin(),arr.end());\n    vector<string> out={};\n    for (int i=arr.size()-1;i>=0;i-=1)\n        if (arr[i]>=1 and arr[i]<=9)\n        out.push_back(numto[arr[i]]);\n    return out;\n}\nint main(){\n\tauto result = by_length(<FILL_ME>);\n\tassert(issame(result,{\"Eight\",\"Five\",\"Four\",\"Three\",\"Two\",\"Two\",\"One\",\"One\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{5, 1, 4, 3, 2, 2, 8, 1}", "fn": "by_length", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/105", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> by_length(vector<int> arr){\n    map<int,string> numto={{0,\"Zero\"},{1,\"One\"},{2,\"Two\"},{3,\"Three\"},{4,\"Four\"},{5,\"Five\"},{6,\"Six\"},{7,\"Seven\"},{8,\"Eight\"},{9,\"Nine\"}};\n    sort(arr.begin(),arr.end());\n    vector<string> out={};\n    for (int i=arr.size()-1;i>=0;i-=1)\n        if (arr[i]>=1 and arr[i]<=9)\n        out.push_back(numto[arr[i]]);\n    return out;\n}\nint main(){\n\tauto result = by_length(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{4, 2, 1, 5, 6, 9}", "fn": "by_length", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/105", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> by_length(vector<int> arr){\n    map<int,string> numto={{0,\"Zero\"},{1,\"One\"},{2,\"Two\"},{3,\"Three\"},{4,\"Four\"},{5,\"Five\"},{6,\"Six\"},{7,\"Seven\"},{8,\"Eight\"},{9,\"Nine\"}};\n    sort(arr.begin(),arr.end());\n    vector<string> out={};\n    for (int i=arr.size()-1;i>=0;i-=1)\n        if (arr[i]>=1 and arr[i]<=9)\n        out.push_back(numto[arr[i]]);\n    return out;\n}\nint main(){\n\tauto result = by_length(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{4, 2, 1, 5, 6, 9}", "fn": "by_length", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/105", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> by_length(vector<int> arr){\n    map<int,string> numto={{0,\"Zero\"},{1,\"One\"},{2,\"Two\"},{3,\"Three\"},{4,\"Four\"},{5,\"Five\"},{6,\"Six\"},{7,\"Seven\"},{8,\"Eight\"},{9,\"Nine\"}};\n    sort(arr.begin(),arr.end());\n    vector<string> out={};\n    for (int i=arr.size()-1;i>=0;i-=1)\n        if (arr[i]>=1 and arr[i]<=9)\n        out.push_back(numto[arr[i]]);\n    return out;\n}\nint main(){\n\tauto result = by_length(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{4, 2, 1, 5, 6, 9}", "fn": "by_length", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/105", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> by_length(vector<int> arr){\n    map<int,string> numto={{0,\"Zero\"},{1,\"One\"},{2,\"Two\"},{3,\"Three\"},{4,\"Four\"},{5,\"Five\"},{6,\"Six\"},{7,\"Seven\"},{8,\"Eight\"},{9,\"Nine\"}};\n    sort(arr.begin(),arr.end());\n    vector<string> out={};\n    for (int i=arr.size()-1;i>=0;i-=1)\n        if (arr[i]>=1 and arr[i]<=9)\n        out.push_back(numto[arr[i]]);\n    return out;\n}\nint main(){\n\tauto result = by_length(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{4, 2, 1, 5, 6, 9}", "fn": "by_length", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/105", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> by_length(vector<int> arr){\n    map<int,string> numto={{0,\"Zero\"},{1,\"One\"},{2,\"Two\"},{3,\"Three\"},{4,\"Four\"},{5,\"Five\"},{6,\"Six\"},{7,\"Seven\"},{8,\"Eight\"},{9,\"Nine\"}};\n    sort(arr.begin(),arr.end());\n    vector<string> out={};\n    for (int i=arr.size()-1;i>=0;i-=1)\n        if (arr[i]>=1 and arr[i]<=9)\n        out.push_back(numto[arr[i]]);\n    return out;\n}\nint main(){\n\tauto result = by_length(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{4, 2, 1, 5, 6, 9}", "fn": "by_length", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/106", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> f(int n){\n    int sum=0,prod=1;\n    vector<int> out={};\n    for (int i=1;i<=n;i++)\n    {\n        sum+=i;\n        prod*=i;\n        if (i%2==0) out.push_back(prod);\n        else out.push_back(sum);\n    } \n    return out;\n}\nint main(){\n\tauto result = f(<FILL_ME>);\n\tassert(issame(result,{1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "1", "fn": "f", "para": "(int n)", "pass": true}
{"task_id": "CPP/106", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> f(int n){\n    int sum=0,prod=1;\n    vector<int> out={};\n    for (int i=1;i<=n;i++)\n    {\n        sum+=i;\n        prod*=i;\n        if (i%2==0) out.push_back(prod);\n        else out.push_back(sum);\n    } \n    return out;\n}\nint main(){\n\tauto result = f(<FILL_ME>);\n\tassert(issame(result,{1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "1", "fn": "f", "para": "(int n)", "pass": true}
{"task_id": "CPP/106", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> f(int n){\n    int sum=0,prod=1;\n    vector<int> out={};\n    for (int i=1;i<=n;i++)\n    {\n        sum+=i;\n        prod*=i;\n        if (i%2==0) out.push_back(prod);\n        else out.push_back(sum);\n    } \n    return out;\n}\nint main(){\n\tauto result = f(<FILL_ME>);\n\tassert(issame(result,{1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "1", "fn": "f", "para": "(int n)", "pass": true}
{"task_id": "CPP/106", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> f(int n){\n    int sum=0,prod=1;\n    vector<int> out={};\n    for (int i=1;i<=n;i++)\n    {\n        sum+=i;\n        prod*=i;\n        if (i%2==0) out.push_back(prod);\n        else out.push_back(sum);\n    } \n    return out;\n}\nint main(){\n\tauto result = f(<FILL_ME>);\n\tassert(issame(result,{1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "1", "fn": "f", "para": "(int n)", "pass": true}
{"task_id": "CPP/106", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> f(int n){\n    int sum=0,prod=1;\n    vector<int> out={};\n    for (int i=1;i<=n;i++)\n    {\n        sum+=i;\n        prod*=i;\n        if (i%2==0) out.push_back(prod);\n        else out.push_back(sum);\n    } \n    return out;\n}\nint main(){\n\tauto result = f(<FILL_ME>);\n\tassert(issame(result,{1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "1", "fn": "f", "para": "(int n)", "pass": true}
{"task_id": "CPP/106", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> f(int n){\n    int sum=0,prod=1;\n    vector<int> out={};\n    for (int i=1;i<=n;i++)\n    {\n        sum+=i;\n        prod*=i;\n        if (i%2==0) out.push_back(prod);\n        else out.push_back(sum);\n    } \n    return out;\n}\nint main(){\n\tauto result = f(<FILL_ME>);\n\tassert(issame(result,{1,2,6,24,15,720,28}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "7", "fn": "f", "para": "(int n)", "pass": true}
{"task_id": "CPP/106", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> f(int n){\n    int sum=0,prod=1;\n    vector<int> out={};\n    for (int i=1;i<=n;i++)\n    {\n        sum+=i;\n        prod*=i;\n        if (i%2==0) out.push_back(prod);\n        else out.push_back(sum);\n    } \n    return out;\n}\nint main(){\n\tauto result = f(<FILL_ME>);\n\tassert(issame(result,{1,2,6,24,15,720,28}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "7", "fn": "f", "para": "(int n)", "pass": true}
{"task_id": "CPP/106", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> f(int n){\n    int sum=0,prod=1;\n    vector<int> out={};\n    for (int i=1;i<=n;i++)\n    {\n        sum+=i;\n        prod*=i;\n        if (i%2==0) out.push_back(prod);\n        else out.push_back(sum);\n    } \n    return out;\n}\nint main(){\n\tauto result = f(<FILL_ME>);\n\tassert(issame(result,{1,2,6,24,15,720,28}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "7", "fn": "f", "para": "(int n)", "pass": true}
{"task_id": "CPP/106", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> f(int n){\n    int sum=0,prod=1;\n    vector<int> out={};\n    for (int i=1;i<=n;i++)\n    {\n        sum+=i;\n        prod*=i;\n        if (i%2==0) out.push_back(prod);\n        else out.push_back(sum);\n    } \n    return out;\n}\nint main(){\n\tauto result = f(<FILL_ME>);\n\tassert(issame(result,{1,2,6,24,15,720,28}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "7", "fn": "f", "para": "(int n)", "pass": true}
{"task_id": "CPP/106", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> f(int n){\n    int sum=0,prod=1;\n    vector<int> out={};\n    for (int i=1;i<=n;i++)\n    {\n        sum+=i;\n        prod*=i;\n        if (i%2==0) out.push_back(prod);\n        else out.push_back(sum);\n    } \n    return out;\n}\nint main(){\n\tauto result = f(<FILL_ME>);\n\tassert(issame(result,{1,2,6,24,15,720,28}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "7", "fn": "f", "para": "(int n)", "pass": true}
{"task_id": "CPP/106", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> f(int n){\n    int sum=0,prod=1;\n    vector<int> out={};\n    for (int i=1;i<=n;i++)\n    {\n        sum+=i;\n        prod*=i;\n        if (i%2==0) out.push_back(prod);\n        else out.push_back(sum);\n    } \n    return out;\n}\nint main(){\n\tauto result = f(<FILL_ME>);\n\tassert(issame(result,{1,2,6}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "3", "fn": "f", "para": "(int n)", "pass": true}
{"task_id": "CPP/106", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> f(int n){\n    int sum=0,prod=1;\n    vector<int> out={};\n    for (int i=1;i<=n;i++)\n    {\n        sum+=i;\n        prod*=i;\n        if (i%2==0) out.push_back(prod);\n        else out.push_back(sum);\n    } \n    return out;\n}\nint main(){\n\tauto result = f(<FILL_ME>);\n\tassert(issame(result,{1,2,6}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "3", "fn": "f", "para": "(int n)", "pass": true}
{"task_id": "CPP/106", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> f(int n){\n    int sum=0,prod=1;\n    vector<int> out={};\n    for (int i=1;i<=n;i++)\n    {\n        sum+=i;\n        prod*=i;\n        if (i%2==0) out.push_back(prod);\n        else out.push_back(sum);\n    } \n    return out;\n}\nint main(){\n\tauto result = f(<FILL_ME>);\n\tassert(issame(result,{1,2,6}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "3", "fn": "f", "para": "(int n)", "pass": true}
{"task_id": "CPP/106", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> f(int n){\n    int sum=0,prod=1;\n    vector<int> out={};\n    for (int i=1;i<=n;i++)\n    {\n        sum+=i;\n        prod*=i;\n        if (i%2==0) out.push_back(prod);\n        else out.push_back(sum);\n    } \n    return out;\n}\nint main(){\n\tauto result = f(<FILL_ME>);\n\tassert(issame(result,{1,2,6}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "3", "fn": "f", "para": "(int n)", "pass": true}
{"task_id": "CPP/106", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> f(int n){\n    int sum=0,prod=1;\n    vector<int> out={};\n    for (int i=1;i<=n;i++)\n    {\n        sum+=i;\n        prod*=i;\n        if (i%2==0) out.push_back(prod);\n        else out.push_back(sum);\n    } \n    return out;\n}\nint main(){\n\tauto result = f(<FILL_ME>);\n\tassert(issame(result,{1,2,6}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "3", "fn": "f", "para": "(int n)", "pass": true}
{"task_id": "CPP/106", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> f(int n){\n    int sum=0,prod=1;\n    vector<int> out={};\n    for (int i=1;i<=n;i++)\n    {\n        sum+=i;\n        prod*=i;\n        if (i%2==0) out.push_back(prod);\n        else out.push_back(sum);\n    } \n    return out;\n}\nint main(){\n\tauto result = f(<FILL_ME>);\n\tassert(issame(result,{1,2,6,24,15}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "5", "fn": "f", "para": "(int n)", "pass": true}
{"task_id": "CPP/106", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> f(int n){\n    int sum=0,prod=1;\n    vector<int> out={};\n    for (int i=1;i<=n;i++)\n    {\n        sum+=i;\n        prod*=i;\n        if (i%2==0) out.push_back(prod);\n        else out.push_back(sum);\n    } \n    return out;\n}\nint main(){\n\tauto result = f(<FILL_ME>);\n\tassert(issame(result,{1,2,6,24,15}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "5", "fn": "f", "para": "(int n)", "pass": true}
{"task_id": "CPP/106", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> f(int n){\n    int sum=0,prod=1;\n    vector<int> out={};\n    for (int i=1;i<=n;i++)\n    {\n        sum+=i;\n        prod*=i;\n        if (i%2==0) out.push_back(prod);\n        else out.push_back(sum);\n    } \n    return out;\n}\nint main(){\n\tauto result = f(<FILL_ME>);\n\tassert(issame(result,{1,2,6,24,15}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "5", "fn": "f", "para": "(int n)", "pass": true}
{"task_id": "CPP/106", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> f(int n){\n    int sum=0,prod=1;\n    vector<int> out={};\n    for (int i=1;i<=n;i++)\n    {\n        sum+=i;\n        prod*=i;\n        if (i%2==0) out.push_back(prod);\n        else out.push_back(sum);\n    } \n    return out;\n}\nint main(){\n\tauto result = f(<FILL_ME>);\n\tassert(issame(result,{1,2,6,24,15}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "5", "fn": "f", "para": "(int n)", "pass": true}
{"task_id": "CPP/106", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> f(int n){\n    int sum=0,prod=1;\n    vector<int> out={};\n    for (int i=1;i<=n;i++)\n    {\n        sum+=i;\n        prod*=i;\n        if (i%2==0) out.push_back(prod);\n        else out.push_back(sum);\n    } \n    return out;\n}\nint main(){\n\tauto result = f(<FILL_ME>);\n\tassert(issame(result,{1,2,6,24,15}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "5", "fn": "f", "para": "(int n)", "pass": true}
{"task_id": "CPP/107", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}\nint main(){\n\tauto result = even_odd_palindrome(<FILL_ME>);\n\tassert(issame(result,{1,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "3", "fn": "even_odd_palindrome", "para": "(int n)", "pass": true}
{"task_id": "CPP/107", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}\nint main(){\n\tauto result = even_odd_palindrome(<FILL_ME>);\n\tassert(issame(result,{1,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "3", "fn": "even_odd_palindrome", "para": "(int n)", "pass": true}
{"task_id": "CPP/107", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}\nint main(){\n\tauto result = even_odd_palindrome(<FILL_ME>);\n\tassert(issame(result,{1,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "3", "fn": "even_odd_palindrome", "para": "(int n)", "pass": true}
{"task_id": "CPP/107", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}\nint main(){\n\tauto result = even_odd_palindrome(<FILL_ME>);\n\tassert(issame(result,{1,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "3", "fn": "even_odd_palindrome", "para": "(int n)", "pass": true}
{"task_id": "CPP/107", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}\nint main(){\n\tauto result = even_odd_palindrome(<FILL_ME>);\n\tassert(issame(result,{1,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "3", "fn": "even_odd_palindrome", "para": "(int n)", "pass": true}
{"task_id": "CPP/107", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}\nint main(){\n\tauto result = even_odd_palindrome(<FILL_ME>);\n\tassert(issame(result,{4,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "20", "fn": "even_odd_palindrome", "para": "(int n)", "pass": false}
{"task_id": "CPP/107", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}\nint main(){\n\tauto result = even_odd_palindrome(<FILL_ME>);\n\tassert(issame(result,{4,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "20", "fn": "even_odd_palindrome", "para": "(int n)", "pass": false}
{"task_id": "CPP/107", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}\nint main(){\n\tauto result = even_odd_palindrome(<FILL_ME>);\n\tassert(issame(result,{4,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "20", "fn": "even_odd_palindrome", "para": "(int n)", "pass": false}
{"task_id": "CPP/107", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}\nint main(){\n\tauto result = even_odd_palindrome(<FILL_ME>);\n\tassert(issame(result,{4,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "20", "fn": "even_odd_palindrome", "para": "(int n)", "pass": false}
{"task_id": "CPP/107", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}\nint main(){\n\tauto result = even_odd_palindrome(<FILL_ME>);\n\tassert(issame(result,{4,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "20", "fn": "even_odd_palindrome", "para": "(int n)", "pass": false}
{"task_id": "CPP/107", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}\nint main(){\n\tauto result = even_odd_palindrome(<FILL_ME>);\n\tassert(issame(result,{8,13}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "50", "fn": "even_odd_palindrome", "para": "(int n)", "pass": false}
{"task_id": "CPP/107", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}\nint main(){\n\tauto result = even_odd_palindrome(<FILL_ME>);\n\tassert(issame(result,{8,13}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "20", "fn": "even_odd_palindrome", "para": "(int n)", "pass": false}
{"task_id": "CPP/107", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}\nint main(){\n\tauto result = even_odd_palindrome(<FILL_ME>);\n\tassert(issame(result,{8,13}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "20", "fn": "even_odd_palindrome", "para": "(int n)", "pass": false}
{"task_id": "CPP/107", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}\nint main(){\n\tauto result = even_odd_palindrome(<FILL_ME>);\n\tassert(issame(result,{8,13}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "20", "fn": "even_odd_palindrome", "para": "(int n)", "pass": false}
{"task_id": "CPP/107", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}\nint main(){\n\tauto result = even_odd_palindrome(<FILL_ME>);\n\tassert(issame(result,{8,13}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "20", "fn": "even_odd_palindrome", "para": "(int n)", "pass": false}
{"task_id": "CPP/107", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}\nint main(){\n\tauto result = even_odd_palindrome(<FILL_ME>);\n\tassert(issame(result,{6,8}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "20", "fn": "even_odd_palindrome", "para": "(int n)", "pass": false}
{"task_id": "CPP/107", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}\nint main(){\n\tauto result = even_odd_palindrome(<FILL_ME>);\n\tassert(issame(result,{6,8}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "20", "fn": "even_odd_palindrome", "para": "(int n)", "pass": false}
{"task_id": "CPP/107", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}\nint main(){\n\tauto result = even_odd_palindrome(<FILL_ME>);\n\tassert(issame(result,{6,8}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "20", "fn": "even_odd_palindrome", "para": "(int n)", "pass": false}
{"task_id": "CPP/107", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}\nint main(){\n\tauto result = even_odd_palindrome(<FILL_ME>);\n\tassert(issame(result,{6,8}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "20", "fn": "even_odd_palindrome", "para": "(int n)", "pass": false}
{"task_id": "CPP/107", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}\nint main(){\n\tauto result = even_odd_palindrome(<FILL_ME>);\n\tassert(issame(result,{6,8}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "20", "fn": "even_odd_palindrome", "para": "(int n)", "pass": false}
{"task_id": "CPP/107", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}\nint main(){\n\tauto result = even_odd_palindrome(<FILL_ME>);\n\tassert(issame(result,{4,6}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "20", "fn": "even_odd_palindrome", "para": "(int n)", "pass": true}
{"task_id": "CPP/107", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}\nint main(){\n\tauto result = even_odd_palindrome(<FILL_ME>);\n\tassert(issame(result,{4,6}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "20", "fn": "even_odd_palindrome", "para": "(int n)", "pass": true}
{"task_id": "CPP/107", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}\nint main(){\n\tauto result = even_odd_palindrome(<FILL_ME>);\n\tassert(issame(result,{4,6}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "20", "fn": "even_odd_palindrome", "para": "(int n)", "pass": true}
{"task_id": "CPP/107", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}\nint main(){\n\tauto result = even_odd_palindrome(<FILL_ME>);\n\tassert(issame(result,{4,6}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "20", "fn": "even_odd_palindrome", "para": "(int n)", "pass": true}
{"task_id": "CPP/107", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}\nint main(){\n\tauto result = even_odd_palindrome(<FILL_ME>);\n\tassert(issame(result,{4,6}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "20", "fn": "even_odd_palindrome", "para": "(int n)", "pass": true}
{"task_id": "CPP/107", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}\nint main(){\n\tauto result = even_odd_palindrome(<FILL_ME>);\n\tassert(issame(result,{0,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "1", "fn": "even_odd_palindrome", "para": "(int n)", "pass": true}
{"task_id": "CPP/107", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}\nint main(){\n\tauto result = even_odd_palindrome(<FILL_ME>);\n\tassert(issame(result,{0,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "1", "fn": "even_odd_palindrome", "para": "(int n)", "pass": true}
{"task_id": "CPP/107", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}\nint main(){\n\tauto result = even_odd_palindrome(<FILL_ME>);\n\tassert(issame(result,{0,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "1", "fn": "even_odd_palindrome", "para": "(int n)", "pass": true}
{"task_id": "CPP/107", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}\nint main(){\n\tauto result = even_odd_palindrome(<FILL_ME>);\n\tassert(issame(result,{0,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "1", "fn": "even_odd_palindrome", "para": "(int n)", "pass": true}
{"task_id": "CPP/107", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}\nint main(){\n\tauto result = even_odd_palindrome(<FILL_ME>);\n\tassert(issame(result,{0,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "1", "fn": "even_odd_palindrome", "para": "(int n)", "pass": true}
{"task_id": "CPP/107", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}\nint main(){\n\tauto result = even_odd_palindrome(<FILL_ME>);\n\tassert(issame(result,{5,6}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "11", "fn": "even_odd_palindrome", "para": "(int n)", "pass": false}
{"task_id": "CPP/107", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}\nint main(){\n\tauto result = even_odd_palindrome(<FILL_ME>);\n\tassert(issame(result,{5,6}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "11", "fn": "even_odd_palindrome", "para": "(int n)", "pass": false}
{"task_id": "CPP/107", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}\nint main(){\n\tauto result = even_odd_palindrome(<FILL_ME>);\n\tassert(issame(result,{5,6}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "11", "fn": "even_odd_palindrome", "para": "(int n)", "pass": false}
{"task_id": "CPP/107", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}\nint main(){\n\tauto result = even_odd_palindrome(<FILL_ME>);\n\tassert(issame(result,{5,6}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "11", "fn": "even_odd_palindrome", "para": "(int n)", "pass": false}
{"task_id": "CPP/107", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}\nint main(){\n\tauto result = even_odd_palindrome(<FILL_ME>);\n\tassert(issame(result,{5,6}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "11", "fn": "even_odd_palindrome", "para": "(int n)", "pass": false}
{"task_id": "CPP/108", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint count_nums(vector<int> n){\n    int num=0;\n    for (int i=0;i<n.size();i++)\n        if (n[i]>0) num+=1;\n        else\n        {\n            int sum=0;\n            int w;\n            w=abs(n[i]);\n            while (w>=10)\n            {\n                sum+=w%10;\n                w=w/10;\n            }\n            sum-=w;\n            if (sum>0) num+=1;\n        }\n    return num;\n}\nint main(){\n\tauto result = count_nums(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{-7}", "fn": "count_nums", "para": "(vector<int> n)", "pass": false}
{"task_id": "CPP/108", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint count_nums(vector<int> n){\n    int num=0;\n    for (int i=0;i<n.size();i++)\n        if (n[i]>0) num+=1;\n        else\n        {\n            int sum=0;\n            int w;\n            w=abs(n[i]);\n            while (w>=10)\n            {\n                sum+=w%10;\n                w=w/10;\n            }\n            sum-=w;\n            if (sum>0) num+=1;\n        }\n    return num;\n}\nint main(){\n\tauto result = count_nums(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{-7}", "fn": "count_nums", "para": "(vector<int> n)", "pass": false}
{"task_id": "CPP/108", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint count_nums(vector<int> n){\n    int num=0;\n    for (int i=0;i<n.size();i++)\n        if (n[i]>0) num+=1;\n        else\n        {\n            int sum=0;\n            int w;\n            w=abs(n[i]);\n            while (w>=10)\n            {\n                sum+=w%10;\n                w=w/10;\n            }\n            sum-=w;\n            if (sum>0) num+=1;\n        }\n    return num;\n}\nint main(){\n\tauto result = count_nums(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{-5}", "fn": "count_nums", "para": "(vector<int> n)", "pass": false}
{"task_id": "CPP/108", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint count_nums(vector<int> n){\n    int num=0;\n    for (int i=0;i<n.size();i++)\n        if (n[i]>0) num+=1;\n        else\n        {\n            int sum=0;\n            int w;\n            w=abs(n[i]);\n            while (w>=10)\n            {\n                sum+=w%10;\n                w=w/10;\n            }\n            sum-=w;\n            if (sum>0) num+=1;\n        }\n    return num;\n}\nint main(){\n\tauto result = count_nums(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{-123}", "fn": "count_nums", "para": "(vector<int> n)", "pass": true}
{"task_id": "CPP/108", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint count_nums(vector<int> n){\n    int num=0;\n    for (int i=0;i<n.size();i++)\n        if (n[i]>0) num+=1;\n        else\n        {\n            int sum=0;\n            int w;\n            w=abs(n[i]);\n            while (w>=10)\n            {\n                sum+=w%10;\n                w=w/10;\n            }\n            sum-=w;\n            if (sum>0) num+=1;\n        }\n    return num;\n}\nint main(){\n\tauto result = count_nums(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{100}", "fn": "count_nums", "para": "(vector<int> n)", "pass": true}
{"task_id": "CPP/108", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint count_nums(vector<int> n){\n    int num=0;\n    for (int i=0;i<n.size();i++)\n        if (n[i]>0) num+=1;\n        else\n        {\n            int sum=0;\n            int w;\n            w=abs(n[i]);\n            while (w>=10)\n            {\n                sum+=w%10;\n                w=w/10;\n            }\n            sum-=w;\n            if (sum>0) num+=1;\n        }\n    return num;\n}\nint main(){\n\tauto result = count_nums(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, -23, 456, -789}", "fn": "count_nums", "para": "(vector<int> n)", "pass": true}
{"task_id": "CPP/108", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint count_nums(vector<int> n){\n    int num=0;\n    for (int i=0;i<n.size();i++)\n        if (n[i]>0) num+=1;\n        else\n        {\n            int sum=0;\n            int w;\n            w=abs(n[i]);\n            while (w>=10)\n            {\n                sum+=w%10;\n                w=w/10;\n            }\n            sum-=w;\n            if (sum>0) num+=1;\n        }\n    return num;\n}\nint main(){\n\tauto result = count_nums(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, -23, 456, -789}", "fn": "count_nums", "para": "(vector<int> n)", "pass": true}
{"task_id": "CPP/108", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint count_nums(vector<int> n){\n    int num=0;\n    for (int i=0;i<n.size();i++)\n        if (n[i]>0) num+=1;\n        else\n        {\n            int sum=0;\n            int w;\n            w=abs(n[i]);\n            while (w>=10)\n            {\n                sum+=w%10;\n                w=w/10;\n            }\n            sum-=w;\n            if (sum>0) num+=1;\n        }\n    return num;\n}\nint main(){\n\tauto result = count_nums(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, -23, 456, -789}", "fn": "count_nums", "para": "(vector<int> n)", "pass": true}
{"task_id": "CPP/108", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint count_nums(vector<int> n){\n    int num=0;\n    for (int i=0;i<n.size();i++)\n        if (n[i]>0) num+=1;\n        else\n        {\n            int sum=0;\n            int w;\n            w=abs(n[i]);\n            while (w>=10)\n            {\n                sum+=w%10;\n                w=w/10;\n            }\n            sum-=w;\n            if (sum>0) num+=1;\n        }\n    return num;\n}\nint main(){\n\tauto result = count_nums(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, -23, 456, -789}", "fn": "count_nums", "para": "(vector<int> n)", "pass": true}
{"task_id": "CPP/108", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint count_nums(vector<int> n){\n    int num=0;\n    for (int i=0;i<n.size();i++)\n        if (n[i]>0) num+=1;\n        else\n        {\n            int sum=0;\n            int w;\n            w=abs(n[i]);\n            while (w>=10)\n            {\n                sum+=w%10;\n                w=w/10;\n            }\n            sum-=w;\n            if (sum>0) num+=1;\n        }\n    return num;\n}\nint main(){\n\tauto result = count_nums(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, -23, 456, -789}", "fn": "count_nums", "para": "(vector<int> n)", "pass": true}
{"task_id": "CPP/108", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint count_nums(vector<int> n){\n    int num=0;\n    for (int i=0;i<n.size();i++)\n        if (n[i]>0) num+=1;\n        else\n        {\n            int sum=0;\n            int w;\n            w=abs(n[i]);\n            while (w>=10)\n            {\n                sum+=w%10;\n                w=w/10;\n            }\n            sum-=w;\n            if (sum>0) num+=1;\n        }\n    return num;\n}\nint main(){\n\tauto result = count_nums(<FILL_ME>);\n\tassert(result==6);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, -23, 45, -678, 910, 1112}", "fn": "count_nums", "para": "(vector<int> n)", "pass": true}
{"task_id": "CPP/108", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint count_nums(vector<int> n){\n    int num=0;\n    for (int i=0;i<n.size();i++)\n        if (n[i]>0) num+=1;\n        else\n        {\n            int sum=0;\n            int w;\n            w=abs(n[i]);\n            while (w>=10)\n            {\n                sum+=w%10;\n                w=w/10;\n            }\n            sum-=w;\n            if (sum>0) num+=1;\n        }\n    return num;\n}\nint main(){\n\tauto result = count_nums(<FILL_ME>);\n\tassert(result==6);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, -23, 45, -678, 910, 1112}", "fn": "count_nums", "para": "(vector<int> n)", "pass": true}
{"task_id": "CPP/108", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint count_nums(vector<int> n){\n    int num=0;\n    for (int i=0;i<n.size();i++)\n        if (n[i]>0) num+=1;\n        else\n        {\n            int sum=0;\n            int w;\n            w=abs(n[i]);\n            while (w>=10)\n            {\n                sum+=w%10;\n                w=w/10;\n            }\n            sum-=w;\n            if (sum>0) num+=1;\n        }\n    return num;\n}\nint main(){\n\tauto result = count_nums(<FILL_ME>);\n\tassert(result==6);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, -23, 45, -678, 910, 1112}", "fn": "count_nums", "para": "(vector<int> n)", "pass": true}
{"task_id": "CPP/108", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint count_nums(vector<int> n){\n    int num=0;\n    for (int i=0;i<n.size();i++)\n        if (n[i]>0) num+=1;\n        else\n        {\n            int sum=0;\n            int w;\n            w=abs(n[i]);\n            while (w>=10)\n            {\n                sum+=w%10;\n                w=w/10;\n            }\n            sum-=w;\n            if (sum>0) num+=1;\n        }\n    return num;\n}\nint main(){\n\tauto result = count_nums(<FILL_ME>);\n\tassert(result==6);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, -23, 45, -678, 910, 1112}", "fn": "count_nums", "para": "(vector<int> n)", "pass": true}
{"task_id": "CPP/108", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint count_nums(vector<int> n){\n    int num=0;\n    for (int i=0;i<n.size();i++)\n        if (n[i]>0) num+=1;\n        else\n        {\n            int sum=0;\n            int w;\n            w=abs(n[i]);\n            while (w>=10)\n            {\n                sum+=w%10;\n                w=w/10;\n            }\n            sum-=w;\n            if (sum>0) num+=1;\n        }\n    return num;\n}\nint main(){\n\tauto result = count_nums(<FILL_ME>);\n\tassert(result==6);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, -23, 45, -678, 910, 1112}", "fn": "count_nums", "para": "(vector<int> n)", "pass": true}
{"task_id": "CPP/108", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint count_nums(vector<int> n){\n    int num=0;\n    for (int i=0;i<n.size();i++)\n        if (n[i]>0) num+=1;\n        else\n        {\n            int sum=0;\n            int w;\n            w=abs(n[i]);\n            while (w>=10)\n            {\n                sum+=w%10;\n                w=w/10;\n            }\n            sum-=w;\n            if (sum>0) num+=1;\n        }\n    return num;\n}\nint main(){\n\tauto result = count_nums(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, -12, 63, -456, 789}", "fn": "count_nums", "para": "(vector<int> n)", "pass": true}
{"task_id": "CPP/108", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint count_nums(vector<int> n){\n    int num=0;\n    for (int i=0;i<n.size();i++)\n        if (n[i]>0) num+=1;\n        else\n        {\n            int sum=0;\n            int w;\n            w=abs(n[i]);\n            while (w>=10)\n            {\n                sum+=w%10;\n                w=w/10;\n            }\n            sum-=w;\n            if (sum>0) num+=1;\n        }\n    return num;\n}\nint main(){\n\tauto result = count_nums(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, -12, 63, -456, 789}", "fn": "count_nums", "para": "(vector<int> n)", "pass": true}
{"task_id": "CPP/108", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint count_nums(vector<int> n){\n    int num=0;\n    for (int i=0;i<n.size();i++)\n        if (n[i]>0) num+=1;\n        else\n        {\n            int sum=0;\n            int w;\n            w=abs(n[i]);\n            while (w>=10)\n            {\n                sum+=w%10;\n                w=w/10;\n            }\n            sum-=w;\n            if (sum>0) num+=1;\n        }\n    return num;\n}\nint main(){\n\tauto result = count_nums(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, -12, 63, -456, 789}", "fn": "count_nums", "para": "(vector<int> n)", "pass": true}
{"task_id": "CPP/108", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint count_nums(vector<int> n){\n    int num=0;\n    for (int i=0;i<n.size();i++)\n        if (n[i]>0) num+=1;\n        else\n        {\n            int sum=0;\n            int w;\n            w=abs(n[i]);\n            while (w>=10)\n            {\n                sum+=w%10;\n                w=w/10;\n            }\n            sum-=w;\n            if (sum>0) num+=1;\n        }\n    return num;\n}\nint main(){\n\tauto result = count_nums(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, -12, 63, -456, 789}", "fn": "count_nums", "para": "(vector<int> n)", "pass": true}
{"task_id": "CPP/108", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint count_nums(vector<int> n){\n    int num=0;\n    for (int i=0;i<n.size();i++)\n        if (n[i]>0) num+=1;\n        else\n        {\n            int sum=0;\n            int w;\n            w=abs(n[i]);\n            while (w>=10)\n            {\n                sum+=w%10;\n                w=w/10;\n            }\n            sum-=w;\n            if (sum>0) num+=1;\n        }\n    return num;\n}\nint main(){\n\tauto result = count_nums(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, -12, 63, -456, 789}", "fn": "count_nums", "para": "(vector<int> n)", "pass": true}
{"task_id": "CPP/108", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint count_nums(vector<int> n){\n    int num=0;\n    for (int i=0;i<n.size();i++)\n        if (n[i]>0) num+=1;\n        else\n        {\n            int sum=0;\n            int w;\n            w=abs(n[i]);\n            while (w>=10)\n            {\n                sum+=w%10;\n                w=w/10;\n            }\n            sum-=w;\n            if (sum>0) num+=1;\n        }\n    return num;\n}\nint main(){\n\tauto result = count_nums(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{0, -5, 12, -345}", "fn": "count_nums", "para": "(vector<int> n)", "pass": false}
{"task_id": "CPP/108", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint count_nums(vector<int> n){\n    int num=0;\n    for (int i=0;i<n.size();i++)\n        if (n[i]>0) num+=1;\n        else\n        {\n            int sum=0;\n            int w;\n            w=abs(n[i]);\n            while (w>=10)\n            {\n                sum+=w%10;\n                w=w/10;\n            }\n            sum-=w;\n            if (sum>0) num+=1;\n        }\n    return num;\n}\nint main(){\n\tauto result = count_nums(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{0, -5, 12, -345}", "fn": "count_nums", "para": "(vector<int> n)", "pass": false}
{"task_id": "CPP/108", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint count_nums(vector<int> n){\n    int num=0;\n    for (int i=0;i<n.size();i++)\n        if (n[i]>0) num+=1;\n        else\n        {\n            int sum=0;\n            int w;\n            w=abs(n[i]);\n            while (w>=10)\n            {\n                sum+=w%10;\n                w=w/10;\n            }\n            sum-=w;\n            if (sum>0) num+=1;\n        }\n    return num;\n}\nint main(){\n\tauto result = count_nums(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{0, -5, 12, -345}", "fn": "count_nums", "para": "(vector<int> n)", "pass": false}
{"task_id": "CPP/108", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint count_nums(vector<int> n){\n    int num=0;\n    for (int i=0;i<n.size();i++)\n        if (n[i]>0) num+=1;\n        else\n        {\n            int sum=0;\n            int w;\n            w=abs(n[i]);\n            while (w>=10)\n            {\n                sum+=w%10;\n                w=w/10;\n            }\n            sum-=w;\n            if (sum>0) num+=1;\n        }\n    return num;\n}\nint main(){\n\tauto result = count_nums(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{0, -5, 12, -345}", "fn": "count_nums", "para": "(vector<int> n)", "pass": false}
{"task_id": "CPP/108", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint count_nums(vector<int> n){\n    int num=0;\n    for (int i=0;i<n.size();i++)\n        if (n[i]>0) num+=1;\n        else\n        {\n            int sum=0;\n            int w;\n            w=abs(n[i]);\n            while (w>=10)\n            {\n                sum+=w%10;\n                w=w/10;\n            }\n            sum-=w;\n            if (sum>0) num+=1;\n        }\n    return num;\n}\nint main(){\n\tauto result = count_nums(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{0, -5, 12, -345}", "fn": "count_nums", "para": "(vector<int> n)", "pass": false}
{"task_id": "CPP/109", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool move_one_ball(vector<int> arr){\n    int num=0;\n    if (arr.size()==0) return true;\n    for (int i=1;i<arr.size();i++)\n        if (arr[i]<arr[i-1]) num+=1;\n    if (arr[arr.size()-1]>arr[0]) num+=1;\n    if (num<2) return true;\n    return false;\n}\nint main(){\n\tauto result = move_one_ball(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 2, 3, 4}", "fn": "move_one_ball", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/109", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool move_one_ball(vector<int> arr){\n    int num=0;\n    if (arr.size()==0) return true;\n    for (int i=1;i<arr.size();i++)\n        if (arr[i]<arr[i-1]) num+=1;\n    if (arr[arr.size()-1]>arr[0]) num+=1;\n    if (num<2) return true;\n    return false;\n}\nint main(){\n\tauto result = move_one_ball(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4}", "fn": "move_one_ball", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/109", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool move_one_ball(vector<int> arr){\n    int num=0;\n    if (arr.size()==0) return true;\n    for (int i=1;i<arr.size();i++)\n        if (arr[i]<arr[i-1]) num+=1;\n    if (arr[arr.size()-1]>arr[0]) num+=1;\n    if (num<2) return true;\n    return false;\n}\nint main(){\n\tauto result = move_one_ball(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4}", "fn": "move_one_ball", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/109", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool move_one_ball(vector<int> arr){\n    int num=0;\n    if (arr.size()==0) return true;\n    for (int i=1;i<arr.size();i++)\n        if (arr[i]<arr[i-1]) num+=1;\n    if (arr[arr.size()-1]>arr[0]) num+=1;\n    if (num<2) return true;\n    return false;\n}\nint main(){\n\tauto result = move_one_ball(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4}", "fn": "move_one_ball", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/109", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool move_one_ball(vector<int> arr){\n    int num=0;\n    if (arr.size()==0) return true;\n    for (int i=1;i<arr.size();i++)\n        if (arr[i]<arr[i-1]) num+=1;\n    if (arr[arr.size()-1]>arr[0]) num+=1;\n    if (num<2) return true;\n    return false;\n}\nint main(){\n\tauto result = move_one_ball(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4}", "fn": "move_one_ball", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/109", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool move_one_ball(vector<int> arr){\n    int num=0;\n    if (arr.size()==0) return true;\n    for (int i=1;i<arr.size();i++)\n        if (arr[i]<arr[i-1]) num+=1;\n    if (arr[arr.size()-1]>arr[0]) num+=1;\n    if (num<2) return true;\n    return false;\n}\nint main(){\n\tauto result = move_one_ball(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{2, 3, 1, 4}", "fn": "move_one_ball", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/109", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool move_one_ball(vector<int> arr){\n    int num=0;\n    if (arr.size()==0) return true;\n    for (int i=1;i<arr.size();i++)\n        if (arr[i]<arr[i-1]) num+=1;\n    if (arr[arr.size()-1]>arr[0]) num+=1;\n    if (num<2) return true;\n    return false;\n}\nint main(){\n\tauto result = move_one_ball(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{2, 3, 1, 4}", "fn": "move_one_ball", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/109", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool move_one_ball(vector<int> arr){\n    int num=0;\n    if (arr.size()==0) return true;\n    for (int i=1;i<arr.size();i++)\n        if (arr[i]<arr[i-1]) num+=1;\n    if (arr[arr.size()-1]>arr[0]) num+=1;\n    if (num<2) return true;\n    return false;\n}\nint main(){\n\tauto result = move_one_ball(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{2, 3, 1, 4}", "fn": "move_one_ball", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/109", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool move_one_ball(vector<int> arr){\n    int num=0;\n    if (arr.size()==0) return true;\n    for (int i=1;i<arr.size();i++)\n        if (arr[i]<arr[i-1]) num+=1;\n    if (arr[arr.size()-1]>arr[0]) num+=1;\n    if (num<2) return true;\n    return false;\n}\nint main(){\n\tauto result = move_one_ball(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{2, 3, 1, 4}", "fn": "move_one_ball", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/109", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool move_one_ball(vector<int> arr){\n    int num=0;\n    if (arr.size()==0) return true;\n    for (int i=1;i<arr.size();i++)\n        if (arr[i]<arr[i-1]) num+=1;\n    if (arr[arr.size()-1]>arr[0]) num+=1;\n    if (num<2) return true;\n    return false;\n}\nint main(){\n\tauto result = move_one_ball(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{2, 3, 1, 4}", "fn": "move_one_ball", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/110", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring exchange(vector<int> lst1,vector<int> lst2){\n    int num=0;\n    for (int i=0;i<lst1.size();i++)\n    if (lst1[i]%2==0) num+=1;\n    for (int i=0;i<lst2.size();i++)\n    if (lst2[i]%2==0) num+=1;\n    if (num>=lst1.size()) return \"YES\";\n    return \"NO\";\n}\nint main(){\n\tauto result = exchange(<FILL_ME>);\n\tassert(result==\"NO\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 3, 5}, {2, 4, 6}", "fn": "exchange", "para": "(vector<int> lst1,vector<int> lst2)", "pass": false}
{"task_id": "CPP/110", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring exchange(vector<int> lst1,vector<int> lst2){\n    int num=0;\n    for (int i=0;i<lst1.size();i++)\n    if (lst1[i]%2==0) num+=1;\n    for (int i=0;i<lst2.size();i++)\n    if (lst2[i]%2==0) num+=1;\n    if (num>=lst1.size()) return \"YES\";\n    return \"NO\";\n}\nint main(){\n\tauto result = exchange(<FILL_ME>);\n\tassert(result==\"NO\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 3, 5}, {2, 4, 6}", "fn": "exchange", "para": "(vector<int> lst1,vector<int> lst2)", "pass": false}
{"task_id": "CPP/110", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring exchange(vector<int> lst1,vector<int> lst2){\n    int num=0;\n    for (int i=0;i<lst1.size();i++)\n    if (lst1[i]%2==0) num+=1;\n    for (int i=0;i<lst2.size();i++)\n    if (lst2[i]%2==0) num+=1;\n    if (num>=lst1.size()) return \"YES\";\n    return \"NO\";\n}\nint main(){\n\tauto result = exchange(<FILL_ME>);\n\tassert(result==\"NO\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 3, 5}, {2, 4, 6}", "fn": "exchange", "para": "(vector<int> lst1,vector<int> lst2)", "pass": false}
{"task_id": "CPP/110", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring exchange(vector<int> lst1,vector<int> lst2){\n    int num=0;\n    for (int i=0;i<lst1.size();i++)\n    if (lst1[i]%2==0) num+=1;\n    for (int i=0;i<lst2.size();i++)\n    if (lst2[i]%2==0) num+=1;\n    if (num>=lst1.size()) return \"YES\";\n    return \"NO\";\n}\nint main(){\n\tauto result = exchange(<FILL_ME>);\n\tassert(result==\"NO\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 3, 5}, {2, 4, 6}", "fn": "exchange", "para": "(vector<int> lst1,vector<int> lst2)", "pass": false}
{"task_id": "CPP/110", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring exchange(vector<int> lst1,vector<int> lst2){\n    int num=0;\n    for (int i=0;i<lst1.size();i++)\n    if (lst1[i]%2==0) num+=1;\n    for (int i=0;i<lst2.size();i++)\n    if (lst2[i]%2==0) num+=1;\n    if (num>=lst1.size()) return \"YES\";\n    return \"NO\";\n}\nint main(){\n\tauto result = exchange(<FILL_ME>);\n\tassert(result==\"NO\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 3, 5}, {2, 4, 6}", "fn": "exchange", "para": "(vector<int> lst1,vector<int> lst2)", "pass": false}
{"task_id": "CPP/110", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring exchange(vector<int> lst1,vector<int> lst2){\n    int num=0;\n    for (int i=0;i<lst1.size();i++)\n    if (lst1[i]%2==0) num+=1;\n    for (int i=0;i<lst2.size();i++)\n    if (lst2[i]%2==0) num+=1;\n    if (num>=lst1.size()) return \"YES\";\n    return \"NO\";\n}\nint main(){\n\tauto result = exchange(<FILL_ME>);\n\tassert(result==\"YES\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 3, 5, 7}, {2, 4, 6, 8}", "fn": "exchange", "para": "(vector<int> lst1,vector<int> lst2)", "pass": true}
{"task_id": "CPP/110", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring exchange(vector<int> lst1,vector<int> lst2){\n    int num=0;\n    for (int i=0;i<lst1.size();i++)\n    if (lst1[i]%2==0) num+=1;\n    for (int i=0;i<lst2.size();i++)\n    if (lst2[i]%2==0) num+=1;\n    if (num>=lst1.size()) return \"YES\";\n    return \"NO\";\n}\nint main(){\n\tauto result = exchange(<FILL_ME>);\n\tassert(result==\"YES\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 3, 5, 7}, {2, 4, 6, 8}", "fn": "exchange", "para": "(vector<int> lst1,vector<int> lst2)", "pass": true}
{"task_id": "CPP/110", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring exchange(vector<int> lst1,vector<int> lst2){\n    int num=0;\n    for (int i=0;i<lst1.size();i++)\n    if (lst1[i]%2==0) num+=1;\n    for (int i=0;i<lst2.size();i++)\n    if (lst2[i]%2==0) num+=1;\n    if (num>=lst1.size()) return \"YES\";\n    return \"NO\";\n}\nint main(){\n\tauto result = exchange(<FILL_ME>);\n\tassert(result==\"YES\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 3, 5, 7}, {2, 4, 6, 8}", "fn": "exchange", "para": "(vector<int> lst1,vector<int> lst2)", "pass": true}
{"task_id": "CPP/110", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring exchange(vector<int> lst1,vector<int> lst2){\n    int num=0;\n    for (int i=0;i<lst1.size();i++)\n    if (lst1[i]%2==0) num+=1;\n    for (int i=0;i<lst2.size();i++)\n    if (lst2[i]%2==0) num+=1;\n    if (num>=lst1.size()) return \"YES\";\n    return \"NO\";\n}\nint main(){\n\tauto result = exchange(<FILL_ME>);\n\tassert(result==\"YES\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 3, 5, 7}, {2, 4, 6, 8}", "fn": "exchange", "para": "(vector<int> lst1,vector<int> lst2)", "pass": true}
{"task_id": "CPP/110", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring exchange(vector<int> lst1,vector<int> lst2){\n    int num=0;\n    for (int i=0;i<lst1.size();i++)\n    if (lst1[i]%2==0) num+=1;\n    for (int i=0;i<lst2.size();i++)\n    if (lst2[i]%2==0) num+=1;\n    if (num>=lst1.size()) return \"YES\";\n    return \"NO\";\n}\nint main(){\n\tauto result = exchange(<FILL_ME>);\n\tassert(result==\"YES\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 3, 5, 7}, {2, 4, 6, 8}", "fn": "exchange", "para": "(vector<int> lst1,vector<int> lst2)", "pass": true}
{"task_id": "CPP/111", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nmap<char,int> histogram(string test){\n    map<char,int> count={},out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=0;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            count[test[i]]+=1;\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}\nint main(){\n\tauto result = histogram(<FILL_ME>);\n\tassert(issame(result,{{'b',4}}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n\n    return true;\n}\n\n", "filling": "\"bbb b\"", "fn": "histogram", "para": "(string test)", "pass": true}
{"task_id": "CPP/111", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nmap<char,int> histogram(string test){\n    map<char,int> count={},out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=0;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            count[test[i]]+=1;\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}\nint main(){\n\tauto result = histogram(<FILL_ME>);\n\tassert(issame(result,{{'b',4}}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n\n    return true;\n}\n\n", "filling": "\"bbb b\"", "fn": "histogram", "para": "(string test)", "pass": true}
{"task_id": "CPP/111", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nmap<char,int> histogram(string test){\n    map<char,int> count={},out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=0;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            count[test[i]]+=1;\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}\nint main(){\n\tauto result = histogram(<FILL_ME>);\n\tassert(issame(result,{{'b',4}}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n\n    return true;\n}\n\n", "filling": "\"bbb b\"", "fn": "histogram", "para": "(string test)", "pass": true}
{"task_id": "CPP/111", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nmap<char,int> histogram(string test){\n    map<char,int> count={},out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=0;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            count[test[i]]+=1;\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}\nint main(){\n\tauto result = histogram(<FILL_ME>);\n\tassert(issame(result,{{'b',4}}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n\n    return true;\n}\n\n", "filling": "\"bbb b\"", "fn": "histogram", "para": "(string test)", "pass": true}
{"task_id": "CPP/111", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nmap<char,int> histogram(string test){\n    map<char,int> count={},out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=0;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            count[test[i]]+=1;\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}\nint main(){\n\tauto result = histogram(<FILL_ME>);\n\tassert(issame(result,{{'b',4}}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n\n    return true;\n}\n\n", "filling": "\"bbb b\"", "fn": "histogram", "para": "(string test)", "pass": true}
{"task_id": "CPP/111", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nmap<char,int> histogram(string test){\n    map<char,int> count={},out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=0;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            count[test[i]]+=1;\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}\nint main(){\n\tauto result = histogram(<FILL_ME>);\n\tassert(issame(result,{{'a',1},{'b',1},{'c',1},{'d',1},{'g',1}}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n\n    return true;\n}\n\n", "filling": "\"abcd g\"", "fn": "histogram", "para": "(string test)", "pass": true}
{"task_id": "CPP/111", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nmap<char,int> histogram(string test){\n    map<char,int> count={},out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=0;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            count[test[i]]+=1;\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}\nint main(){\n\tauto result = histogram(<FILL_ME>);\n\tassert(issame(result,{{'a',1},{'b',1},{'c',1},{'d',1},{'g',1}}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n\n    return true;\n}\n\n", "filling": "\"abcd g\"", "fn": "histogram", "para": "(string test)", "pass": true}
{"task_id": "CPP/111", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nmap<char,int> histogram(string test){\n    map<char,int> count={},out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=0;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            count[test[i]]+=1;\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}\nint main(){\n\tauto result = histogram(<FILL_ME>);\n\tassert(issame(result,{{'a',1},{'b',1},{'c',1},{'d',1},{'g',1}}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n\n    return true;\n}\n\n", "filling": "\"abcd g\"", "fn": "histogram", "para": "(string test)", "pass": true}
{"task_id": "CPP/111", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nmap<char,int> histogram(string test){\n    map<char,int> count={},out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=0;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            count[test[i]]+=1;\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}\nint main(){\n\tauto result = histogram(<FILL_ME>);\n\tassert(issame(result,{{'a',1},{'b',1},{'c',1},{'d',1},{'g',1}}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n\n    return true;\n}\n\n", "filling": "\"abcd g\"", "fn": "histogram", "para": "(string test)", "pass": true}
{"task_id": "CPP/111", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nmap<char,int> histogram(string test){\n    map<char,int> count={},out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=0;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            count[test[i]]+=1;\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}\nint main(){\n\tauto result = histogram(<FILL_ME>);\n\tassert(issame(result,{{'a',1},{'b',1},{'c',1},{'d',1},{'g',1}}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n\n    return true;\n}\n\n", "filling": "\"abcd g\"", "fn": "histogram", "para": "(string test)", "pass": true}
{"task_id": "CPP/111", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nmap<char,int> histogram(string test){\n    map<char,int> count={},out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=0;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            count[test[i]]+=1;\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}\nint main(){\n\tauto result = histogram(<FILL_ME>);\n\tassert(issame(result,{{'r',1},{'t',1},{'g',1}}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n\n    return true;\n}\n\n", "filling": "\"programming test\"", "fn": "histogram", "para": "(string test)", "pass": false}
{"task_id": "CPP/111", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nmap<char,int> histogram(string test){\n    map<char,int> count={},out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=0;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            count[test[i]]+=1;\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}\nint main(){\n\tauto result = histogram(<FILL_ME>);\n\tassert(issame(result,{{'r',1},{'t',1},{'g',1}}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n\n    return true;\n}\n\n", "filling": "\"programming\"", "fn": "histogram", "para": "(string test)", "pass": false}
{"task_id": "CPP/111", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nmap<char,int> histogram(string test){\n    map<char,int> count={},out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=0;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            count[test[i]]+=1;\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}\nint main(){\n\tauto result = histogram(<FILL_ME>);\n\tassert(issame(result,{{'r',1},{'t',1},{'g',1}}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n\n    return true;\n}\n\n", "filling": "\"programming\"", "fn": "histogram", "para": "(string test)", "pass": false}
{"task_id": "CPP/111", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nmap<char,int> histogram(string test){\n    map<char,int> count={},out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=0;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            count[test[i]]+=1;\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}\nint main(){\n\tauto result = histogram(<FILL_ME>);\n\tassert(issame(result,{{'r',1},{'t',1},{'g',1}}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n\n    return true;\n}\n\n", "filling": "\"programming test\"", "fn": "histogram", "para": "(string test)", "pass": false}
{"task_id": "CPP/111", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nmap<char,int> histogram(string test){\n    map<char,int> count={},out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=0;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            count[test[i]]+=1;\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}\nint main(){\n\tauto result = histogram(<FILL_ME>);\n\tassert(issame(result,{{'r',1},{'t',1},{'g',1}}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n\n    return true;\n}\n\n", "filling": "\"great\"", "fn": "histogram", "para": "(string test)", "pass": false}
{"task_id": "CPP/111", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nmap<char,int> histogram(string test){\n    map<char,int> count={},out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=0;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            count[test[i]]+=1;\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}\nint main(){\n\tauto result = histogram(<FILL_ME>);\n\tassert(issame(result,{{'a',2},{'b',2}}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n\n    return true;\n}\n\n", "filling": "\"ab ab\"", "fn": "histogram", "para": "(string test)", "pass": true}
{"task_id": "CPP/111", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nmap<char,int> histogram(string test){\n    map<char,int> count={},out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=0;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            count[test[i]]+=1;\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}\nint main(){\n\tauto result = histogram(<FILL_ME>);\n\tassert(issame(result,{{'a',2},{'b',2}}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n\n    return true;\n}\n\n", "filling": "\"ab ab\"", "fn": "histogram", "para": "(string test)", "pass": true}
{"task_id": "CPP/111", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nmap<char,int> histogram(string test){\n    map<char,int> count={},out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=0;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            count[test[i]]+=1;\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}\nint main(){\n\tauto result = histogram(<FILL_ME>);\n\tassert(issame(result,{{'a',2},{'b',2}}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n\n    return true;\n}\n\n", "filling": "\"ab ab\"", "fn": "histogram", "para": "(string test)", "pass": true}
{"task_id": "CPP/111", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nmap<char,int> histogram(string test){\n    map<char,int> count={},out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=0;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            count[test[i]]+=1;\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}\nint main(){\n\tauto result = histogram(<FILL_ME>);\n\tassert(issame(result,{{'a',2},{'b',2}}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n\n    return true;\n}\n\n", "filling": "\"ab ab\"", "fn": "histogram", "para": "(string test)", "pass": true}
{"task_id": "CPP/111", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nmap<char,int> histogram(string test){\n    map<char,int> count={},out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=0;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            count[test[i]]+=1;\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}\nint main(){\n\tauto result = histogram(<FILL_ME>);\n\tassert(issame(result,{{'a',2},{'b',2}}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n\n    return true;\n}\n\n", "filling": "\"ab ab\"", "fn": "histogram", "para": "(string test)", "pass": true}
{"task_id": "CPP/111", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nmap<char,int> histogram(string test){\n    map<char,int> count={},out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=0;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            count[test[i]]+=1;\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}\nint main(){\n\tauto result = histogram(<FILL_ME>);\n\tassert(issame(result,{{'a',1}}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n\n    return true;\n}\n\n", "filling": "\"a\"", "fn": "histogram", "para": "(string test)", "pass": true}
{"task_id": "CPP/111", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nmap<char,int> histogram(string test){\n    map<char,int> count={},out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=0;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            count[test[i]]+=1;\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}\nint main(){\n\tauto result = histogram(<FILL_ME>);\n\tassert(issame(result,{{'a',1}}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n\n    return true;\n}\n\n", "filling": "\"a\"", "fn": "histogram", "para": "(string test)", "pass": true}
{"task_id": "CPP/111", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nmap<char,int> histogram(string test){\n    map<char,int> count={},out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=0;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            count[test[i]]+=1;\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}\nint main(){\n\tauto result = histogram(<FILL_ME>);\n\tassert(issame(result,{{'a',1}}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n\n    return true;\n}\n\n", "filling": "\"a\"", "fn": "histogram", "para": "(string test)", "pass": true}
{"task_id": "CPP/111", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nmap<char,int> histogram(string test){\n    map<char,int> count={},out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=0;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            count[test[i]]+=1;\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}\nint main(){\n\tauto result = histogram(<FILL_ME>);\n\tassert(issame(result,{{'a',1}}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n\n    return true;\n}\n\n", "filling": "\"a\"", "fn": "histogram", "para": "(string test)", "pass": true}
{"task_id": "CPP/111", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nmap<char,int> histogram(string test){\n    map<char,int> count={},out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=0;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            count[test[i]]+=1;\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}\nint main(){\n\tauto result = histogram(<FILL_ME>);\n\tassert(issame(result,{{'a',1}}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n\n    return true;\n}\n\n", "filling": "\"a\"", "fn": "histogram", "para": "(string test)", "pass": true}
{"task_id": "CPP/111", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nmap<char,int> histogram(string test){\n    map<char,int> count={},out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=0;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            count[test[i]]+=1;\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}\nint main(){\n\tauto result = histogram(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n\n    return true;\n}\n\n", "filling": "\"hello world\"", "fn": "histogram", "para": "(string test)", "pass": false}
{"task_id": "CPP/111", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nmap<char,int> histogram(string test){\n    map<char,int> count={},out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=0;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            count[test[i]]+=1;\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}\nint main(){\n\tauto result = histogram(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n\n    return true;\n}\n\n", "filling": "\"hello world\"", "fn": "histogram", "para": "(string test)", "pass": false}
{"task_id": "CPP/111", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nmap<char,int> histogram(string test){\n    map<char,int> count={},out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=0;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            count[test[i]]+=1;\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}\nint main(){\n\tauto result = histogram(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n\n    return true;\n}\n\n", "filling": "\"hello world\"", "fn": "histogram", "para": "(string test)", "pass": false}
{"task_id": "CPP/111", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nmap<char,int> histogram(string test){\n    map<char,int> count={},out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=0;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            count[test[i]]+=1;\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}\nint main(){\n\tauto result = histogram(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n\n    return true;\n}\n\n", "filling": "\"hello world\"", "fn": "histogram", "para": "(string test)", "pass": false}
{"task_id": "CPP/111", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nmap<char,int> histogram(string test){\n    map<char,int> count={},out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=0;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            count[test[i]]+=1;\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}\nint main(){\n\tauto result = histogram(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n\n    return true;\n}\n\n", "filling": "\"hello world\"", "fn": "histogram", "para": "(string test)", "pass": false}
{"task_id": "CPP/112", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n    string n=\"\";\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"True\"};\n    return {n,\"False\"};\n}\nint main(){\n\tauto result = reverse_delete(<FILL_ME>);\n\tassert(issame(result,{\"acdef\",\"False\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"abcdef\", \"b\"", "fn": "reverse_delete", "para": "(string s,string c)", "pass": true}
{"task_id": "CPP/112", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n    string n=\"\";\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"True\"};\n    return {n,\"False\"};\n}\nint main(){\n\tauto result = reverse_delete(<FILL_ME>);\n\tassert(issame(result,{\"acdef\",\"False\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"abcdef\", \"b\"", "fn": "reverse_delete", "para": "(string s,string c)", "pass": true}
{"task_id": "CPP/112", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n    string n=\"\";\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"True\"};\n    return {n,\"False\"};\n}\nint main(){\n\tauto result = reverse_delete(<FILL_ME>);\n\tassert(issame(result,{\"acdef\",\"False\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"abcdef\", \"b\"", "fn": "reverse_delete", "para": "(string s,string c)", "pass": true}
{"task_id": "CPP/112", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n    string n=\"\";\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"True\"};\n    return {n,\"False\"};\n}\nint main(){\n\tauto result = reverse_delete(<FILL_ME>);\n\tassert(issame(result,{\"acdef\",\"False\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"abcdef\", \"b\"", "fn": "reverse_delete", "para": "(string s,string c)", "pass": true}
{"task_id": "CPP/112", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n    string n=\"\";\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"True\"};\n    return {n,\"False\"};\n}\nint main(){\n\tauto result = reverse_delete(<FILL_ME>);\n\tassert(issame(result,{\"acdef\",\"False\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"abcdef\", \"b\"", "fn": "reverse_delete", "para": "(string s,string c)", "pass": true}
{"task_id": "CPP/112", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n    string n=\"\";\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"True\"};\n    return {n,\"False\"};\n}\nint main(){\n\tauto result = reverse_delete(<FILL_ME>);\n\tassert(issame(result,{\"abba\",\"True\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"abba\", \"\"", "fn": "reverse_delete", "para": "(string s,string c)", "pass": true}
{"task_id": "CPP/112", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n    string n=\"\";\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"True\"};\n    return {n,\"False\"};\n}\nint main(){\n\tauto result = reverse_delete(<FILL_ME>);\n\tassert(issame(result,{\"abba\",\"True\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"abba\", \"\"", "fn": "reverse_delete", "para": "(string s,string c)", "pass": true}
{"task_id": "CPP/112", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n    string n=\"\";\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"True\"};\n    return {n,\"False\"};\n}\nint main(){\n\tauto result = reverse_delete(<FILL_ME>);\n\tassert(issame(result,{\"abba\",\"True\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"abba\", \"\"", "fn": "reverse_delete", "para": "(string s,string c)", "pass": true}
{"task_id": "CPP/112", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n    string n=\"\";\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"True\"};\n    return {n,\"False\"};\n}\nint main(){\n\tauto result = reverse_delete(<FILL_ME>);\n\tassert(issame(result,{\"abba\",\"True\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"abba\", \"\"", "fn": "reverse_delete", "para": "(string s,string c)", "pass": true}
{"task_id": "CPP/112", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n    string n=\"\";\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"True\"};\n    return {n,\"False\"};\n}\nint main(){\n\tauto result = reverse_delete(<FILL_ME>);\n\tassert(issame(result,{\"abba\",\"True\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"abba\", \"\"", "fn": "reverse_delete", "para": "(string s,string c)", "pass": true}
{"task_id": "CPP/112", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n    string n=\"\";\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"True\"};\n    return {n,\"False\"};\n}\nint main(){\n\tauto result = reverse_delete(<FILL_ME>);\n\tassert(issame(result,{\"dik\",\"False\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"kid\",\"i\"", "fn": "reverse_delete", "para": "(string s,string c)", "pass": false}
{"task_id": "CPP/112", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n    string n=\"\";\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"True\"};\n    return {n,\"False\"};\n}\nint main(){\n\tauto result = reverse_delete(<FILL_ME>);\n\tassert(issame(result,{\"dik\",\"False\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"kid\",\"i\"", "fn": "reverse_delete", "para": "(string s,string c)", "pass": false}
{"task_id": "CPP/112", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n    string n=\"\";\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"True\"};\n    return {n,\"False\"};\n}\nint main(){\n\tauto result = reverse_delete(<FILL_ME>);\n\tassert(issame(result,{\"dik\",\"False\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"kid\",\"i\"", "fn": "reverse_delete", "para": "(string s,string c)", "pass": false}
{"task_id": "CPP/112", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n    string n=\"\";\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"True\"};\n    return {n,\"False\"};\n}\nint main(){\n\tauto result = reverse_delete(<FILL_ME>);\n\tassert(issame(result,{\"dik\",\"False\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"kid\",\"i\"", "fn": "reverse_delete", "para": "(string s,string c)", "pass": false}
{"task_id": "CPP/112", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n    string n=\"\";\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"True\"};\n    return {n,\"False\"};\n}\nint main(){\n\tauto result = reverse_delete(<FILL_ME>);\n\tassert(issame(result,{\"dik\",\"False\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"kid\",\"i\"", "fn": "reverse_delete", "para": "(string s,string c)", "pass": false}
{"task_id": "CPP/112", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n    string n=\"\";\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"True\"};\n    return {n,\"False\"};\n}\nint main(){\n\tauto result = reverse_delete(<FILL_ME>);\n\tassert(issame(result,{\"cdedc\",\"True\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"abcdedcba\", \"ab\"", "fn": "reverse_delete", "para": "(string s,string c)", "pass": true}
{"task_id": "CPP/112", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n    string n=\"\";\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"True\"};\n    return {n,\"False\"};\n}\nint main(){\n\tauto result = reverse_delete(<FILL_ME>);\n\tassert(issame(result,{\"cdedc\",\"True\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"abcdedcba\",\"ab\"", "fn": "reverse_delete", "para": "(string s,string c)", "pass": true}
{"task_id": "CPP/112", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n    string n=\"\";\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"True\"};\n    return {n,\"False\"};\n}\nint main(){\n\tauto result = reverse_delete(<FILL_ME>);\n\tassert(issame(result,{\"cdedc\",\"True\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"abcdedcba\", \"ab\"", "fn": "reverse_delete", "para": "(string s,string c)", "pass": true}
{"task_id": "CPP/112", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n    string n=\"\";\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"True\"};\n    return {n,\"False\"};\n}\nint main(){\n\tauto result = reverse_delete(<FILL_ME>);\n\tassert(issame(result,{\"cdedc\",\"True\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"abcdedcba\", \"ab\"", "fn": "reverse_delete", "para": "(string s,string c)", "pass": true}
{"task_id": "CPP/112", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n    string n=\"\";\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"True\"};\n    return {n,\"False\"};\n}\nint main(){\n\tauto result = reverse_delete(<FILL_ME>);\n\tassert(issame(result,{\"cdedc\",\"True\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"abcdedcba\",\"ab\"", "fn": "reverse_delete", "para": "(string s,string c)", "pass": true}
{"task_id": "CPP/112", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n    string n=\"\";\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"True\"};\n    return {n,\"False\"};\n}\nint main(){\n\tauto result = reverse_delete(<FILL_ME>);\n\tassert(issame(result,{\"abcdedcba\",\"True\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"abcdeedcba\", \"e\"", "fn": "reverse_delete", "para": "(string s,string c)", "pass": false}
{"task_id": "CPP/112", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n    string n=\"\";\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"True\"};\n    return {n,\"False\"};\n}\nint main(){\n\tauto result = reverse_delete(<FILL_ME>);\n\tassert(issame(result,{\"abcdedcba\",\"True\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"abcdeedcba\", \"e\"", "fn": "reverse_delete", "para": "(string s,string c)", "pass": false}
{"task_id": "CPP/112", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n    string n=\"\";\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"True\"};\n    return {n,\"False\"};\n}\nint main(){\n\tauto result = reverse_delete(<FILL_ME>);\n\tassert(issame(result,{\"abcdedcba\",\"True\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"abcdeedcba\", \"e\"", "fn": "reverse_delete", "para": "(string s,string c)", "pass": false}
{"task_id": "CPP/112", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n    string n=\"\";\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"True\"};\n    return {n,\"False\"};\n}\nint main(){\n\tauto result = reverse_delete(<FILL_ME>);\n\tassert(issame(result,{\"abcdedcba\",\"True\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"abcdeedcba\", \"e\"", "fn": "reverse_delete", "para": "(string s,string c)", "pass": false}
{"task_id": "CPP/112", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n    string n=\"\";\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"True\"};\n    return {n,\"False\"};\n}\nint main(){\n\tauto result = reverse_delete(<FILL_ME>);\n\tassert(issame(result,{\"abcdedcba\",\"True\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"abcdeedcba\", \"e\"", "fn": "reverse_delete", "para": "(string s,string c)", "pass": false}
{"task_id": "CPP/112", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n    string n=\"\";\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"True\"};\n    return {n,\"False\"};\n}\nint main(){\n\tauto result = reverse_delete(<FILL_ME>);\n\tassert(issame(result,{\"\",\"True\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"racecar\",\"aeiou\"", "fn": "reverse_delete", "para": "(string s,string c)", "pass": false}
{"task_id": "CPP/112", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n    string n=\"\";\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"True\"};\n    return {n,\"False\"};\n}\nint main(){\n\tauto result = reverse_delete(<FILL_ME>);\n\tassert(issame(result,{\"\",\"True\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"racecar\",\"aeiou\"", "fn": "reverse_delete", "para": "(string s,string c)", "pass": false}
{"task_id": "CPP/112", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n    string n=\"\";\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"True\"};\n    return {n,\"False\"};\n}\nint main(){\n\tauto result = reverse_delete(<FILL_ME>);\n\tassert(issame(result,{\"\",\"True\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"racecar\",\"aeiou\"", "fn": "reverse_delete", "para": "(string s,string c)", "pass": false}
{"task_id": "CPP/112", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n    string n=\"\";\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"True\"};\n    return {n,\"False\"};\n}\nint main(){\n\tauto result = reverse_delete(<FILL_ME>);\n\tassert(issame(result,{\"\",\"True\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"racecar\",\"aeiou\"", "fn": "reverse_delete", "para": "(string s,string c)", "pass": false}
{"task_id": "CPP/112", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n    string n=\"\";\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"True\"};\n    return {n,\"False\"};\n}\nint main(){\n\tauto result = reverse_delete(<FILL_ME>);\n\tassert(issame(result,{\"\",\"True\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"racecar\",\"aeiou\"", "fn": "reverse_delete", "para": "(string s,string c)", "pass": false}
{"task_id": "CPP/112", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n    string n=\"\";\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"True\"};\n    return {n,\"False\"};\n}\nint main(){\n\tauto result = reverse_delete(<FILL_ME>);\n\tassert(issame(result,{\"bcd\",\"False\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"abcd\", \"a\"", "fn": "reverse_delete", "para": "(string s,string c)", "pass": true}
{"task_id": "CPP/112", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n    string n=\"\";\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"True\"};\n    return {n,\"False\"};\n}\nint main(){\n\tauto result = reverse_delete(<FILL_ME>);\n\tassert(issame(result,{\"bcd\",\"False\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"abcd\", \"a\"", "fn": "reverse_delete", "para": "(string s,string c)", "pass": true}
{"task_id": "CPP/112", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n    string n=\"\";\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"True\"};\n    return {n,\"False\"};\n}\nint main(){\n\tauto result = reverse_delete(<FILL_ME>);\n\tassert(issame(result,{\"bcd\",\"False\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"abcd\", \"a\"", "fn": "reverse_delete", "para": "(string s,string c)", "pass": true}
{"task_id": "CPP/112", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n    string n=\"\";\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"True\"};\n    return {n,\"False\"};\n}\nint main(){\n\tauto result = reverse_delete(<FILL_ME>);\n\tassert(issame(result,{\"bcd\",\"False\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"abcd\", \"a\"", "fn": "reverse_delete", "para": "(string s,string c)", "pass": true}
{"task_id": "CPP/112", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n    string n=\"\";\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"True\"};\n    return {n,\"False\"};\n}\nint main(){\n\tauto result = reverse_delete(<FILL_ME>);\n\tassert(issame(result,{\"bcd\",\"False\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"abcd\", \"a\"", "fn": "reverse_delete", "para": "(string s,string c)", "pass": true}
{"task_id": "CPP/113", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> odd_count(vector<string> lst){\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n        {\n            int sum=0;\n            for (int j=0;j<lst[i].length();j++)\n                if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)\n                sum+=1;\n            string s=\"the number of odd elements in the string i of the input.\";\n            string s2=\"\";\n            for (int j=0;j<s.length();j++)\n                if (s[j]=='i') s2=s2+to_string(sum);\n                else s2=s2+s[j];\n            out.push_back(s2);\n        }\n    return out;\n}\nint main(){\n\tauto result = odd_count(<FILL_ME>);\n\tassertassert(issame(result,{\n\"thenumberofoddelements2nthestr2ng2ofthe2nput.\",\n\"thenumberofoddelements3nthestr3ng3ofthe3nput.\",\n\"thenumberofoddelements2nthestr2ng2ofthe2nput.\"\n}));;\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"12\",\"135\",\"246\"}", "fn": "odd_count", "para": "(vector<string> lst)", "pass": false}
{"task_id": "CPP/113", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> odd_count(vector<string> lst){\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n        {\n            int sum=0;\n            for (int j=0;j<lst[i].length();j++)\n                if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)\n                sum+=1;\n            string s=\"the number of odd elements in the string i of the input.\";\n            string s2=\"\";\n            for (int j=0;j<s.length();j++)\n                if (s[j]=='i') s2=s2+to_string(sum);\n                else s2=s2+s[j];\n            out.push_back(s2);\n        }\n    return out;\n}\nint main(){\n\tauto result = odd_count(<FILL_ME>);\n\tassertassert(issame(result,{\n\"thenumberofoddelements2nthestr2ng2ofthe2nput.\",\n\"thenumberofoddelements3nthestr3ng3ofthe3nput.\",\n\"thenumberofoddelements2nthestr2ng2ofthe2nput.\"\n}));;\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"12\",\"135\",\"246\"}", "fn": "odd_count", "para": "(vector<string> lst)", "pass": false}
{"task_id": "CPP/113", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> odd_count(vector<string> lst){\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n        {\n            int sum=0;\n            for (int j=0;j<lst[i].length();j++)\n                if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)\n                sum+=1;\n            string s=\"the number of odd elements in the string i of the input.\";\n            string s2=\"\";\n            for (int j=0;j<s.length();j++)\n                if (s[j]=='i') s2=s2+to_string(sum);\n                else s2=s2+s[j];\n            out.push_back(s2);\n        }\n    return out;\n}\nint main(){\n\tauto result = odd_count(<FILL_ME>);\n\tassertassert(issame(result,{\n\"thenumberofoddelements2nthestr2ng2ofthe2nput.\",\n\"thenumberofoddelements3nthestr3ng3ofthe3nput.\",\n\"thenumberofoddelements2nthestr2ng2ofthe2nput.\"\n}));;\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"12\",\"135\",\"246\"}", "fn": "odd_count", "para": "(vector<string> lst)", "pass": false}
{"task_id": "CPP/113", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> odd_count(vector<string> lst){\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n        {\n            int sum=0;\n            for (int j=0;j<lst[i].length();j++)\n                if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)\n                sum+=1;\n            string s=\"the number of odd elements in the string i of the input.\";\n            string s2=\"\";\n            for (int j=0;j<s.length();j++)\n                if (s[j]=='i') s2=s2+to_string(sum);\n                else s2=s2+s[j];\n            out.push_back(s2);\n        }\n    return out;\n}\nint main(){\n\tauto result = odd_count(<FILL_ME>);\n\tassertassert(issame(result,{\n\"thenumberofoddelements2nthestr2ng2ofthe2nput.\",\n\"thenumberofoddelements3nthestr3ng3ofthe3nput.\",\n\"thenumberofoddelements2nthestr2ng2ofthe2nput.\"\n}));;\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"12\",\"135\",\"246\"}", "fn": "odd_count", "para": "(vector<string> lst)", "pass": false}
{"task_id": "CPP/113", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> odd_count(vector<string> lst){\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n        {\n            int sum=0;\n            for (int j=0;j<lst[i].length();j++)\n                if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)\n                sum+=1;\n            string s=\"the number of odd elements in the string i of the input.\";\n            string s2=\"\";\n            for (int j=0;j<s.length();j++)\n                if (s[j]=='i') s2=s2+to_string(sum);\n                else s2=s2+s[j];\n            out.push_back(s2);\n        }\n    return out;\n}\nint main(){\n\tauto result = odd_count(<FILL_ME>);\n\tassertassert(issame(result,{\n\"thenumberofoddelements2nthestr2ng2ofthe2nput.\",\n\"thenumberofoddelements3nthestr3ng3ofthe3nput.\",\n\"thenumberofoddelements2nthestr2ng2ofthe2nput.\"\n}));;\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"12\",\"135\",\"246\"}", "fn": "odd_count", "para": "(vector<string> lst)", "pass": false}
{"task_id": "CPP/113", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> odd_count(vector<string> lst){\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n        {\n            int sum=0;\n            for (int j=0;j<lst[i].length();j++)\n                if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)\n                sum+=1;\n            string s=\"the number of odd elements in the string i of the input.\";\n            string s2=\"\";\n            for (int j=0;j<s.length();j++)\n                if (s[j]=='i') s2=s2+to_string(sum);\n                else s2=s2+s[j];\n            out.push_back(s2);\n        }\n    return out;\n}\nint main(){\n\tauto result = odd_count(<FILL_ME>);\n\tassert(issame(result,{\"thenumberofoddelements4nthestr4ng4ofthe4nput.\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"444444\"}", "fn": "odd_count", "para": "(vector<string> lst)", "pass": false}
{"task_id": "CPP/113", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> odd_count(vector<string> lst){\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n        {\n            int sum=0;\n            for (int j=0;j<lst[i].length();j++)\n                if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)\n                sum+=1;\n            string s=\"the number of odd elements in the string i of the input.\";\n            string s2=\"\";\n            for (int j=0;j<s.length();j++)\n                if (s[j]=='i') s2=s2+to_string(sum);\n                else s2=s2+s[j];\n            out.push_back(s2);\n        }\n    return out;\n}\nint main(){\n\tauto result = odd_count(<FILL_ME>);\n\tassert(issame(result,{\"thenumberofoddelements4nthestr4ng4ofthe4nput.\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"456789\",\"1234\",\"5678\"}", "fn": "odd_count", "para": "(vector<string> lst)", "pass": false}
{"task_id": "CPP/113", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> odd_count(vector<string> lst){\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n        {\n            int sum=0;\n            for (int j=0;j<lst[i].length();j++)\n                if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)\n                sum+=1;\n            string s=\"the number of odd elements in the string i of the input.\";\n            string s2=\"\";\n            for (int j=0;j<s.length();j++)\n                if (s[j]=='i') s2=s2+to_string(sum);\n                else s2=s2+s[j];\n            out.push_back(s2);\n        }\n    return out;\n}\nint main(){\n\tauto result = odd_count(<FILL_ME>);\n\tassert(issame(result,{\"thenumberofoddelements4nthestr4ng4ofthe4nput.\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"1234\"}", "fn": "odd_count", "para": "(vector<string> lst)", "pass": false}
{"task_id": "CPP/113", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> odd_count(vector<string> lst){\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n        {\n            int sum=0;\n            for (int j=0;j<lst[i].length();j++)\n                if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)\n                sum+=1;\n            string s=\"the number of odd elements in the string i of the input.\";\n            string s2=\"\";\n            for (int j=0;j<s.length();j++)\n                if (s[j]=='i') s2=s2+to_string(sum);\n                else s2=s2+s[j];\n            out.push_back(s2);\n        }\n    return out;\n}\nint main(){\n\tauto result = odd_count(<FILL_ME>);\n\tassert(issame(result,{\"thenumberofoddelements4nthestr4ng4ofthe4nput.\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"1234\"}", "fn": "odd_count", "para": "(vector<string> lst)", "pass": false}
{"task_id": "CPP/113", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> odd_count(vector<string> lst){\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n        {\n            int sum=0;\n            for (int j=0;j<lst[i].length();j++)\n                if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)\n                sum+=1;\n            string s=\"the number of odd elements in the string i of the input.\";\n            string s2=\"\";\n            for (int j=0;j<s.length();j++)\n                if (s[j]=='i') s2=s2+to_string(sum);\n                else s2=s2+s[j];\n            out.push_back(s2);\n        }\n    return out;\n}\nint main(){\n\tauto result = odd_count(<FILL_ME>);\n\tassert(issame(result,{\"thenumberofoddelements4nthestr4ng4ofthe4nput.\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"1234\"}", "fn": "odd_count", "para": "(vector<string> lst)", "pass": false}
{"task_id": "CPP/113", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> odd_count(vector<string> lst){\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n        {\n            int sum=0;\n            for (int j=0;j<lst[i].length();j++)\n                if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)\n                sum+=1;\n            string s=\"the number of odd elements in the string i of the input.\";\n            string s2=\"\";\n            for (int j=0;j<s.length();j++)\n                if (s[j]=='i') s2=s2+to_string(sum);\n                else s2=s2+s[j];\n            out.push_back(s2);\n        }\n    return out;\n}\nint main(){\n\tauto result = odd_count(<FILL_ME>);\n\tassert(issame(result,{\"thenumberofoddelements1nthestr1ng1ofthe1nput.\",\"thenumberofoddelements8nthestr8ng8ofthe8nput.\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"111\",\"888\"}", "fn": "odd_count", "para": "(vector<string> lst)", "pass": false}
{"task_id": "CPP/113", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> odd_count(vector<string> lst){\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n        {\n            int sum=0;\n            for (int j=0;j<lst[i].length();j++)\n                if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)\n                sum+=1;\n            string s=\"the number of odd elements in the string i of the input.\";\n            string s2=\"\";\n            for (int j=0;j<s.length();j++)\n                if (s[j]=='i') s2=s2+to_string(sum);\n                else s2=s2+s[j];\n            out.push_back(s2);\n        }\n    return out;\n}\nint main(){\n\tauto result = odd_count(<FILL_ME>);\n\tassert(issame(result,{\"thenumberofoddelements1nthestr1ng1ofthe1nput.\",\"thenumberofoddelements8nthestr8ng8ofthe8nput.\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"111\",\"888\"}", "fn": "odd_count", "para": "(vector<string> lst)", "pass": false}
{"task_id": "CPP/113", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> odd_count(vector<string> lst){\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n        {\n            int sum=0;\n            for (int j=0;j<lst[i].length();j++)\n                if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)\n                sum+=1;\n            string s=\"the number of odd elements in the string i of the input.\";\n            string s2=\"\";\n            for (int j=0;j<s.length();j++)\n                if (s[j]=='i') s2=s2+to_string(sum);\n                else s2=s2+s[j];\n            out.push_back(s2);\n        }\n    return out;\n}\nint main(){\n\tauto result = odd_count(<FILL_ME>);\n\tassert(issame(result,{\"thenumberofoddelements1nthestr1ng1ofthe1nput.\",\"thenumberofoddelements8nthestr8ng8ofthe8nput.\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"111\",\"888\"}", "fn": "odd_count", "para": "(vector<string> lst)", "pass": false}
{"task_id": "CPP/113", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> odd_count(vector<string> lst){\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n        {\n            int sum=0;\n            for (int j=0;j<lst[i].length();j++)\n                if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)\n                sum+=1;\n            string s=\"the number of odd elements in the string i of the input.\";\n            string s2=\"\";\n            for (int j=0;j<s.length();j++)\n                if (s[j]=='i') s2=s2+to_string(sum);\n                else s2=s2+s[j];\n            out.push_back(s2);\n        }\n    return out;\n}\nint main(){\n\tauto result = odd_count(<FILL_ME>);\n\tassert(issame(result,{\"thenumberofoddelements1nthestr1ng1ofthe1nput.\",\"thenumberofoddelements8nthestr8ng8ofthe8nput.\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"11\",\"888\"}", "fn": "odd_count", "para": "(vector<string> lst)", "pass": false}
{"task_id": "CPP/113", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> odd_count(vector<string> lst){\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n        {\n            int sum=0;\n            for (int j=0;j<lst[i].length();j++)\n                if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)\n                sum+=1;\n            string s=\"the number of odd elements in the string i of the input.\";\n            string s2=\"\";\n            for (int j=0;j<s.length();j++)\n                if (s[j]=='i') s2=s2+to_string(sum);\n                else s2=s2+s[j];\n            out.push_back(s2);\n        }\n    return out;\n}\nint main(){\n\tauto result = odd_count(<FILL_ME>);\n\tassert(issame(result,{\"thenumberofoddelements1nthestr1ng1ofthe1nput.\",\"thenumberofoddelements8nthestr8ng8ofthe8nput.\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"123\",\"888\"}", "fn": "odd_count", "para": "(vector<string> lst)", "pass": false}
{"task_id": "CPP/114", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\nint main(){\n\tauto result = minSubArraySum(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, -2, 3, -1, 2, -3}", "fn": "minSubArraySum", "para": "(vector<long long> nums)", "pass": false}
{"task_id": "CPP/114", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\nint main(){\n\tauto result = minSubArraySum(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, -2, 3, -1, 2, -3}", "fn": "minSubArraySum", "para": "(vector<long long> nums)", "pass": false}
{"task_id": "CPP/114", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\nint main(){\n\tauto result = minSubArraySum(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, -2, 3, -1, 2, -3}", "fn": "minSubArraySum", "para": "(vector<long long> nums)", "pass": false}
{"task_id": "CPP/114", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\nint main(){\n\tauto result = minSubArraySum(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, -2, 3, -1, 2, -3}", "fn": "minSubArraySum", "para": "(vector<long long> nums)", "pass": false}
{"task_id": "CPP/114", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\nint main(){\n\tauto result = minSubArraySum(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, -2, 3, -1, 2, -3}", "fn": "minSubArraySum", "para": "(vector<long long> nums)", "pass": false}
{"task_id": "CPP/114", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\nint main(){\n\tauto result = minSubArraySum(<FILL_ME>);\n\tassert(result==-6);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{-2, -3, 4, -1, -2, 1, 5, -3}", "fn": "minSubArraySum", "para": "(vector<long long> nums)", "pass": false}
{"task_id": "CPP/114", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\nint main(){\n\tauto result = minSubArraySum(<FILL_ME>);\n\tassert(result==-6);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<long long>{-2, -3, 4, -1, -2, 1, 5, -3}", "fn": "minSubArraySum", "para": "(vector<long long> nums)", "pass": false}
{"task_id": "CPP/114", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\nint main(){\n\tauto result = minSubArraySum(<FILL_ME>);\n\tassert(result==-6);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<long long>{-2, -3, 4, -1, -2, 1, 5, -3}", "fn": "minSubArraySum", "para": "(vector<long long> nums)", "pass": false}
{"task_id": "CPP/114", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\nint main(){\n\tauto result = minSubArraySum(<FILL_ME>);\n\tassert(result==-6);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<long long>{-2, -3, 4, -1, -2, 1, 5, -3}", "fn": "minSubArraySum", "para": "(vector<long long> nums)", "pass": false}
{"task_id": "CPP/114", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\nint main(){\n\tauto result = minSubArraySum(<FILL_ME>);\n\tassert(result==-6);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<long long>{-2, -3, 4, -1, -2, 1, 5, -3}", "fn": "minSubArraySum", "para": "(vector<long long> nums)", "pass": false}
{"task_id": "CPP/114", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\nint main(){\n\tauto result = minSubArraySum(<FILL_ME>);\n\tassert(result==-10);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<long long>{-2, -3, 4, -1, -2, 1, 5, -3}", "fn": "minSubArraySum", "para": "(vector<long long> nums)", "pass": false}
{"task_id": "CPP/114", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\nint main(){\n\tauto result = minSubArraySum(<FILL_ME>);\n\tassert(result==-10);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<long long>{-2, -3, 4, -1, -2, 1, 5, -3}", "fn": "minSubArraySum", "para": "(vector<long long> nums)", "pass": false}
{"task_id": "CPP/114", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\nint main(){\n\tauto result = minSubArraySum(<FILL_ME>);\n\tassert(result==-10);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<long long>{-10, 2, 3, -2, 0, 5}", "fn": "minSubArraySum", "para": "(vector<long long> nums)", "pass": true}
{"task_id": "CPP/114", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\nint main(){\n\tauto result = minSubArraySum(<FILL_ME>);\n\tassert(result==-10);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<long long>{-2, -3, 4, -1, -2, 1, 5, -3}", "fn": "minSubArraySum", "para": "(vector<long long> nums)", "pass": false}
{"task_id": "CPP/114", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\nint main(){\n\tauto result = minSubArraySum(<FILL_ME>);\n\tassert(result==-10);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<long long>{-2, -3, 4, -1, -2, 1, 5, -3}", "fn": "minSubArraySum", "para": "(vector<long long> nums)", "pass": false}
{"task_id": "CPP/114", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\nint main(){\n\tauto result = minSubArraySum(<FILL_ME>);\n\tassert(result==-14);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<long long>{10, -5, -3, -6, 12, -7, 4}", "fn": "minSubArraySum", "para": "(vector<long long> nums)", "pass": true}
{"task_id": "CPP/114", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\nint main(){\n\tauto result = minSubArraySum(<FILL_ME>);\n\tassert(result==-14);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{10, -5, -3, -6, 12, -7, 4}", "fn": "minSubArraySum", "para": "(vector<long long> nums)", "pass": true}
{"task_id": "CPP/114", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\nint main(){\n\tauto result = minSubArraySum(<FILL_ME>);\n\tassert(result==-14);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<long long>{10, -5, -3, -6, 12, -7, 4}", "fn": "minSubArraySum", "para": "(vector<long long> nums)", "pass": true}
{"task_id": "CPP/114", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\nint main(){\n\tauto result = minSubArraySum(<FILL_ME>);\n\tassert(result==-14);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{10, -5, -3, -6, 12, -7, 4}", "fn": "minSubArraySum", "para": "(vector<long long> nums)", "pass": true}
{"task_id": "CPP/114", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\nint main(){\n\tauto result = minSubArraySum(<FILL_ME>);\n\tassert(result==-14);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{10, -5, -3, -6, 12, -7, 4}", "fn": "minSubArraySum", "para": "(vector<long long> nums)", "pass": true}
{"task_id": "CPP/114", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\nint main(){\n\tauto result = minSubArraySum(<FILL_ME>);\n\tassert(result==-9999999999999999);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{10, -5, 4, -2, 3}", "fn": "minSubArraySum", "para": "(vector<long long> nums)", "pass": false}
{"task_id": "CPP/114", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\nint main(){\n\tauto result = minSubArraySum(<FILL_ME>);\n\tassert(result==-9999999999999999);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{10, -5, 4, -2, 3}", "fn": "minSubArraySum", "para": "(vector<long long> nums)", "pass": false}
{"task_id": "CPP/114", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\nint main(){\n\tauto result = minSubArraySum(<FILL_ME>);\n\tassert(result==-9999999999999999);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{10, -5, 4, -2, 3}", "fn": "minSubArraySum", "para": "(vector<long long> nums)", "pass": false}
{"task_id": "CPP/114", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\nint main(){\n\tauto result = minSubArraySum(<FILL_ME>);\n\tassert(result==-9999999999999999);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{10, -5, 4, -2, 3}", "fn": "minSubArraySum", "para": "(vector<long long> nums)", "pass": false}
{"task_id": "CPP/114", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\nint main(){\n\tauto result = minSubArraySum(<FILL_ME>);\n\tassert(result==-9999999999999999);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{10, -5, 4, -2, 3}", "fn": "minSubArraySum", "para": "(vector<long long> nums)", "pass": false}
{"task_id": "CPP/114", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\nint main(){\n\tauto result = minSubArraySum(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<long long>{0, 0, 0}", "fn": "minSubArraySum", "para": "(vector<long long> nums)", "pass": true}
{"task_id": "CPP/114", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\nint main(){\n\tauto result = minSubArraySum(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<long long>{0, 0, 0}", "fn": "minSubArraySum", "para": "(vector<long long> nums)", "pass": true}
{"task_id": "CPP/114", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\nint main(){\n\tauto result = minSubArraySum(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<long long>{0, 0, 0}", "fn": "minSubArraySum", "para": "(vector<long long> nums)", "pass": true}
{"task_id": "CPP/114", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\nint main(){\n\tauto result = minSubArraySum(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<long long>{0, 0, 0}", "fn": "minSubArraySum", "para": "(vector<long long> nums)", "pass": true}
{"task_id": "CPP/114", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\nint main(){\n\tauto result = minSubArraySum(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<long long>{0, 0, 0}", "fn": "minSubArraySum", "para": "(vector<long long> nums)", "pass": true}
{"task_id": "CPP/114", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\nint main(){\n\tauto result = minSubArraySum(<FILL_ME>);\n\tassert(result==7);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{10,2,-2,-20,10}", "fn": "minSubArraySum", "para": "(vector<long long> nums)", "pass": false}
{"task_id": "CPP/114", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\nint main(){\n\tauto result = minSubArraySum(<FILL_ME>);\n\tassert(result==7);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{10,2,-2,-20,10}", "fn": "minSubArraySum", "para": "(vector<long long> nums)", "pass": false}
{"task_id": "CPP/114", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\nint main(){\n\tauto result = minSubArraySum(<FILL_ME>);\n\tassert(result==7);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{10,2,-2,-20,10}", "fn": "minSubArraySum", "para": "(vector<long long> nums)", "pass": false}
{"task_id": "CPP/114", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\nint main(){\n\tauto result = minSubArraySum(<FILL_ME>);\n\tassert(result==7);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{10, 2, -2, -20, 10}", "fn": "minSubArraySum", "para": "(vector<long long> nums)", "pass": false}
{"task_id": "CPP/114", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\nint main(){\n\tauto result = minSubArraySum(<FILL_ME>);\n\tassert(result==7);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{10,2,-2,-20,10}", "fn": "minSubArraySum", "para": "(vector<long long> nums)", "pass": false}
{"task_id": "CPP/114", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\nint main(){\n\tauto result = minSubArraySum(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<long long> {1, -1, 2, 3, -4}", "fn": "minSubArraySum", "para": "(vector<long long> nums)", "pass": false}
{"task_id": "CPP/114", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\nint main(){\n\tauto result = minSubArraySum(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<long long>{1, -1, 2, 3, -4}", "fn": "minSubArraySum", "para": "(vector<long long> nums)", "pass": false}
{"task_id": "CPP/114", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\nint main(){\n\tauto result = minSubArraySum(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<long long>{1, -1, 2, 3, -4}", "fn": "minSubArraySum", "para": "(vector<long long> nums)", "pass": false}
{"task_id": "CPP/114", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\nint main(){\n\tauto result = minSubArraySum(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<long long> {1, -1, 2, 3, -4}", "fn": "minSubArraySum", "para": "(vector<long long> nums)", "pass": false}
{"task_id": "CPP/114", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\nint main(){\n\tauto result = minSubArraySum(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<long long>{1, -1, 2, 3, -4}", "fn": "minSubArraySum", "para": "(vector<long long> nums)", "pass": false}
{"task_id": "CPP/114", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\nint main(){\n\tauto result = minSubArraySum(<FILL_ME>);\n\tassert(result==-33);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<long long>{7, -5, -6, 8, -33}", "fn": "minSubArraySum", "para": "(vector<long long> nums)", "pass": false}
{"task_id": "CPP/114", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\nint main(){\n\tauto result = minSubArraySum(<FILL_ME>);\n\tassert(result==-33);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<long long> {7, -5, -6, 8, -33}", "fn": "minSubArraySum", "para": "(vector<long long> nums)", "pass": false}
{"task_id": "CPP/114", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\nint main(){\n\tauto result = minSubArraySum(<FILL_ME>);\n\tassert(result==-33);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<long long> {7, -5, -6, 8, -33}", "fn": "minSubArraySum", "para": "(vector<long long> nums)", "pass": false}
{"task_id": "CPP/114", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\nint main(){\n\tauto result = minSubArraySum(<FILL_ME>);\n\tassert(result==-33);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<long long> {7, -5, -6, 8, -33}", "fn": "minSubArraySum", "para": "(vector<long long> nums)", "pass": false}
{"task_id": "CPP/114", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\nint main(){\n\tauto result = minSubArraySum(<FILL_ME>);\n\tassert(result==-33);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<long long> {7, -5, -6, 8, -33}", "fn": "minSubArraySum", "para": "(vector<long long> nums)", "pass": false}
{"task_id": "CPP/114", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\nint main(){\n\tauto result = minSubArraySum(<FILL_ME>);\n\tassert(result==-1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<long long>{1, -3, 2, 1, -1}", "fn": "minSubArraySum", "para": "(vector<long long> nums)", "pass": false}
{"task_id": "CPP/114", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\nint main(){\n\tauto result = minSubArraySum(<FILL_ME>);\n\tassert(result==-1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, -3, 2, 1, -1}", "fn": "minSubArraySum", "para": "(vector<long long> nums)", "pass": false}
{"task_id": "CPP/114", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\nint main(){\n\tauto result = minSubArraySum(<FILL_ME>);\n\tassert(result==-1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<long long>{1, -3, 2, 1, -1}", "fn": "minSubArraySum", "para": "(vector<long long> nums)", "pass": false}
{"task_id": "CPP/114", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\nint main(){\n\tauto result = minSubArraySum(<FILL_ME>);\n\tassert(result==-1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, -3, 2, 1, -1}", "fn": "minSubArraySum", "para": "(vector<long long> nums)", "pass": false}
{"task_id": "CPP/114", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\nint main(){\n\tauto result = minSubArraySum(<FILL_ME>);\n\tassert(result==-1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, -3, 2, 1, -1}", "fn": "minSubArraySum", "para": "(vector<long long> nums)", "pass": false}
{"task_id": "CPP/115", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint max_fill(vector<vector<int>> grid,int capacity){\n    int out=0;\n    for (int i=0;i<grid.size();i++)\n    {\n        int sum=0;\n        for (int j=0;j<grid[i].size();j++)\n            sum+=grid[i][j];\n        if (sum>0)  out+=(sum-1)/capacity+1;\n    }\n    return out;\n}\nint main(){\n\tauto result = max_fill(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<vector<int>>{{3, 1, 2}, {0, 0, 5}}, 2", "fn": "max_fill", "para": "(vector<vector<int>> grid,int capacity)", "pass": false}
{"task_id": "CPP/115", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint max_fill(vector<vector<int>> grid,int capacity){\n    int out=0;\n    for (int i=0;i<grid.size();i++)\n    {\n        int sum=0;\n        for (int j=0;j<grid[i].size();j++)\n            sum+=grid[i][j];\n        if (sum>0)  out+=(sum-1)/capacity+1;\n    }\n    return out;\n}\nint main(){\n\tauto result = max_fill(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<vector<int>>{{3, 2, 0}, {1, 4, 5}}, 3", "fn": "max_fill", "para": "(vector<vector<int>> grid,int capacity)", "pass": false}
{"task_id": "CPP/115", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint max_fill(vector<vector<int>> grid,int capacity){\n    int out=0;\n    for (int i=0;i<grid.size();i++)\n    {\n        int sum=0;\n        for (int j=0;j<grid[i].size();j++)\n            sum+=grid[i][j];\n        if (sum>0)  out+=(sum-1)/capacity+1;\n    }\n    return out;\n}\nint main(){\n\tauto result = max_fill(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<vector<int>>{{3, 2, 0}, {1, 4, 5}}, 3", "fn": "max_fill", "para": "(vector<vector<int>> grid,int capacity)", "pass": false}
{"task_id": "CPP/115", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint max_fill(vector<vector<int>> grid,int capacity){\n    int out=0;\n    for (int i=0;i<grid.size();i++)\n    {\n        int sum=0;\n        for (int j=0;j<grid[i].size();j++)\n            sum+=grid[i][j];\n        if (sum>0)  out+=(sum-1)/capacity+1;\n    }\n    return out;\n}\nint main(){\n\tauto result = max_fill(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<vector<int>>{{3, 2, 0}, {1, 4, 5}}, 3", "fn": "max_fill", "para": "(vector<vector<int>> grid,int capacity)", "pass": false}
{"task_id": "CPP/115", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint max_fill(vector<vector<int>> grid,int capacity){\n    int out=0;\n    for (int i=0;i<grid.size();i++)\n    {\n        int sum=0;\n        for (int j=0;j<grid[i].size();j++)\n            sum+=grid[i][j];\n        if (sum>0)  out+=(sum-1)/capacity+1;\n    }\n    return out;\n}\nint main(){\n\tauto result = max_fill(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<vector<int>>{{3, 2, 0}, {1, 4, 5}}, 3", "fn": "max_fill", "para": "(vector<vector<int>> grid,int capacity)", "pass": false}
{"task_id": "CPP/115", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint max_fill(vector<vector<int>> grid,int capacity){\n    int out=0;\n    for (int i=0;i<grid.size();i++)\n    {\n        int sum=0;\n        for (int j=0;j<grid[i].size();j++)\n            sum+=grid[i][j];\n        if (sum>0)  out+=(sum-1)/capacity+1;\n    }\n    return out;\n}\nint main(){\n\tauto result = max_fill(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<vector<int>>{{1, 1, 0, 1}, {1, 0, 1, 0}, {0, 1, 0, 0}}, 2", "fn": "max_fill", "para": "(vector<vector<int>> grid,int capacity)", "pass": true}
{"task_id": "CPP/115", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint max_fill(vector<vector<int>> grid,int capacity){\n    int out=0;\n    for (int i=0;i<grid.size();i++)\n    {\n        int sum=0;\n        for (int j=0;j<grid[i].size();j++)\n            sum+=grid[i][j];\n        if (sum>0)  out+=(sum-1)/capacity+1;\n    }\n    return out;\n}\nint main(){\n\tauto result = max_fill(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<vector<int>>{{1, 1, 0, 1}, {1, 0, 1, 0}, {0, 1, 0, 0}}, 2", "fn": "max_fill", "para": "(vector<vector<int>> grid,int capacity)", "pass": true}
{"task_id": "CPP/115", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint max_fill(vector<vector<int>> grid,int capacity){\n    int out=0;\n    for (int i=0;i<grid.size();i++)\n    {\n        int sum=0;\n        for (int j=0;j<grid[i].size();j++)\n            sum+=grid[i][j];\n        if (sum>0)  out+=(sum-1)/capacity+1;\n    }\n    return out;\n}\nint main(){\n\tauto result = max_fill(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<vector<int>>{{1, 1, 0, 1}, {1, 0, 1, 0}, {0, 1, 0, 0}}, 2", "fn": "max_fill", "para": "(vector<vector<int>> grid,int capacity)", "pass": true}
{"task_id": "CPP/115", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint max_fill(vector<vector<int>> grid,int capacity){\n    int out=0;\n    for (int i=0;i<grid.size();i++)\n    {\n        int sum=0;\n        for (int j=0;j<grid[i].size();j++)\n            sum+=grid[i][j];\n        if (sum>0)  out+=(sum-1)/capacity+1;\n    }\n    return out;\n}\nint main(){\n\tauto result = max_fill(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<vector<int>>{{1, 1, 0, 1}, {1, 0, 1, 0}, {0, 1, 0, 0}}, 2", "fn": "max_fill", "para": "(vector<vector<int>> grid,int capacity)", "pass": true}
{"task_id": "CPP/115", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint max_fill(vector<vector<int>> grid,int capacity){\n    int out=0;\n    for (int i=0;i<grid.size();i++)\n    {\n        int sum=0;\n        for (int j=0;j<grid[i].size();j++)\n            sum+=grid[i][j];\n        if (sum>0)  out+=(sum-1)/capacity+1;\n    }\n    return out;\n}\nint main(){\n\tauto result = max_fill(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<vector<int>>{{1, 1, 0, 1}, {1, 0, 1, 0}, {0, 1, 0, 0}}, 2", "fn": "max_fill", "para": "(vector<vector<int>> grid,int capacity)", "pass": true}
{"task_id": "CPP/115", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint max_fill(vector<vector<int>> grid,int capacity){\n    int out=0;\n    for (int i=0;i<grid.size();i++)\n    {\n        int sum=0;\n        for (int j=0;j<grid[i].size();j++)\n            sum+=grid[i][j];\n        if (sum>0)  out+=(sum-1)/capacity+1;\n    }\n    return out;\n}\nint main(){\n\tauto result = max_fill(<FILL_ME>);\n\tassert(result==6);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{{3, 4, 1}, {7, 2, 1}, {0, 5, 3}}, 4", "fn": "max_fill", "para": "(vector<vector<int>> grid,int capacity)", "pass": false}
{"task_id": "CPP/115", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint max_fill(vector<vector<int>> grid,int capacity){\n    int out=0;\n    for (int i=0;i<grid.size();i++)\n    {\n        int sum=0;\n        for (int j=0;j<grid[i].size();j++)\n            sum+=grid[i][j];\n        if (sum>0)  out+=(sum-1)/capacity+1;\n    }\n    return out;\n}\nint main(){\n\tauto result = max_fill(<FILL_ME>);\n\tassert(result==6);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{{3, 4, 1}, {7, 2, 1}, {0, 5, 3}}, 4", "fn": "max_fill", "para": "(vector<vector<int>> grid,int capacity)", "pass": false}
{"task_id": "CPP/115", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint max_fill(vector<vector<int>> grid,int capacity){\n    int out=0;\n    for (int i=0;i<grid.size();i++)\n    {\n        int sum=0;\n        for (int j=0;j<grid[i].size();j++)\n            sum+=grid[i][j];\n        if (sum>0)  out+=(sum-1)/capacity+1;\n    }\n    return out;\n}\nint main(){\n\tauto result = max_fill(<FILL_ME>);\n\tassert(result==6);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{{3, 4, 1}, {7, 2, 1}, {0, 5, 3}}, 4", "fn": "max_fill", "para": "(vector<vector<int>> grid,int capacity)", "pass": false}
{"task_id": "CPP/115", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint max_fill(vector<vector<int>> grid,int capacity){\n    int out=0;\n    for (int i=0;i<grid.size();i++)\n    {\n        int sum=0;\n        for (int j=0;j<grid[i].size();j++)\n            sum+=grid[i][j];\n        if (sum>0)  out+=(sum-1)/capacity+1;\n    }\n    return out;\n}\nint main(){\n\tauto result = max_fill(<FILL_ME>);\n\tassert(result==6);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<vector<int>> {{3, 4, 1}, {7, 2, 1}, {0, 5, 3}}, 4", "fn": "max_fill", "para": "(vector<vector<int>> grid,int capacity)", "pass": false}
{"task_id": "CPP/115", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint max_fill(vector<vector<int>> grid,int capacity){\n    int out=0;\n    for (int i=0;i<grid.size();i++)\n    {\n        int sum=0;\n        for (int j=0;j<grid[i].size();j++)\n            sum+=grid[i][j];\n        if (sum>0)  out+=(sum-1)/capacity+1;\n    }\n    return out;\n}\nint main(){\n\tauto result = max_fill(<FILL_ME>);\n\tassert(result==6);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{{1, 2, 3}, {4, 5, 6}}, 3", "fn": "max_fill", "para": "(vector<vector<int>> grid,int capacity)", "pass": false}
{"task_id": "CPP/115", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint max_fill(vector<vector<int>> grid,int capacity){\n    int out=0;\n    for (int i=0;i<grid.size();i++)\n    {\n        int sum=0;\n        for (int j=0;j<grid[i].size();j++)\n            sum+=grid[i][j];\n        if (sum>0)  out+=(sum-1)/capacity+1;\n    }\n    return out;\n}\nint main(){\n\tauto result = max_fill(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<vector<int>>{{1, 2, 3, 4, 5}, {6, 7, 8, 9, 10}, {11, 12, 13, 14, 15}}, 2", "fn": "max_fill", "para": "(vector<vector<int>> grid,int capacity)", "pass": false}
{"task_id": "CPP/115", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint max_fill(vector<vector<int>> grid,int capacity){\n    int out=0;\n    for (int i=0;i<grid.size();i++)\n    {\n        int sum=0;\n        for (int j=0;j<grid[i].size();j++)\n            sum+=grid[i][j];\n        if (sum>0)  out+=(sum-1)/capacity+1;\n    }\n    return out;\n}\nint main(){\n\tauto result = max_fill(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<vector<int>>{{3, 4, 1}, {0, 2, 5}, {1, 1, 3}}, 3", "fn": "max_fill", "para": "(vector<vector<int>> grid,int capacity)", "pass": false}
{"task_id": "CPP/115", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint max_fill(vector<vector<int>> grid,int capacity){\n    int out=0;\n    for (int i=0;i<grid.size();i++)\n    {\n        int sum=0;\n        for (int j=0;j<grid[i].size();j++)\n            sum+=grid[i][j];\n        if (sum>0)  out+=(sum-1)/capacity+1;\n    }\n    return out;\n}\nint main(){\n\tauto result = max_fill(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<vector<int>>{{1, 2, 3, 4, 5}, {6, 7, 8, 9, 10}, {11, 12, 13, 14, 15}}, 2", "fn": "max_fill", "para": "(vector<vector<int>> grid,int capacity)", "pass": false}
{"task_id": "CPP/115", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint max_fill(vector<vector<int>> grid,int capacity){\n    int out=0;\n    for (int i=0;i<grid.size();i++)\n    {\n        int sum=0;\n        for (int j=0;j<grid[i].size();j++)\n            sum+=grid[i][j];\n        if (sum>0)  out+=(sum-1)/capacity+1;\n    }\n    return out;\n}\nint main(){\n\tauto result = max_fill(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<vector<int>>{{1, 2, 3, 4, 5}, {6, 7, 8, 9, 10}, {11, 12, 13, 14, 15}}, 2", "fn": "max_fill", "para": "(vector<vector<int>> grid,int capacity)", "pass": false}
{"task_id": "CPP/115", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint max_fill(vector<vector<int>> grid,int capacity){\n    int out=0;\n    for (int i=0;i<grid.size();i++)\n    {\n        int sum=0;\n        for (int j=0;j<grid[i].size();j++)\n            sum+=grid[i][j];\n        if (sum>0)  out+=(sum-1)/capacity+1;\n    }\n    return out;\n}\nint main(){\n\tauto result = max_fill(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<vector<int>>{{1, 2, 3, 4, 5}, {6, 7, 8, 9, 10}, {11, 12, 13, 14, 15}}, 2", "fn": "max_fill", "para": "(vector<vector<int>> grid,int capacity)", "pass": false}
{"task_id": "CPP/115", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint max_fill(vector<vector<int>> grid,int capacity){\n    int out=0;\n    for (int i=0;i<grid.size();i++)\n    {\n        int sum=0;\n        for (int j=0;j<grid[i].size();j++)\n            sum+=grid[i][j];\n        if (sum>0)  out+=(sum-1)/capacity+1;\n    }\n    return out;\n}\nint main(){\n\tauto result = max_fill(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{{0, 1, 0}, {0, 0, 0}, {0, 0, 0}}, 2", "fn": "max_fill", "para": "(vector<vector<int>> grid,int capacity)", "pass": false}
{"task_id": "CPP/115", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint max_fill(vector<vector<int>> grid,int capacity){\n    int out=0;\n    for (int i=0;i<grid.size();i++)\n    {\n        int sum=0;\n        for (int j=0;j<grid[i].size();j++)\n            sum+=grid[i][j];\n        if (sum>0)  out+=(sum-1)/capacity+1;\n    }\n    return out;\n}\nint main(){\n\tauto result = max_fill(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{{0, 0, 0}, {0, 0, 0}, {0, 0, 0}}, 1", "fn": "max_fill", "para": "(vector<vector<int>> grid,int capacity)", "pass": true}
{"task_id": "CPP/115", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint max_fill(vector<vector<int>> grid,int capacity){\n    int out=0;\n    for (int i=0;i<grid.size();i++)\n    {\n        int sum=0;\n        for (int j=0;j<grid[i].size();j++)\n            sum+=grid[i][j];\n        if (sum>0)  out+=(sum-1)/capacity+1;\n    }\n    return out;\n}\nint main(){\n\tauto result = max_fill(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{{0, 0, 0}, {0, 0, 0}, {0, 0, 0}}, 1", "fn": "max_fill", "para": "(vector<vector<int>> grid,int capacity)", "pass": true}
{"task_id": "CPP/115", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint max_fill(vector<vector<int>> grid,int capacity){\n    int out=0;\n    for (int i=0;i<grid.size();i++)\n    {\n        int sum=0;\n        for (int j=0;j<grid[i].size();j++)\n            sum+=grid[i][j];\n        if (sum>0)  out+=(sum-1)/capacity+1;\n    }\n    return out;\n}\nint main(){\n\tauto result = max_fill(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<vector<int>>{{0, 0, 0}, {0, 0, 0}, {0, 0, 0}}, 1", "fn": "max_fill", "para": "(vector<vector<int>> grid,int capacity)", "pass": true}
{"task_id": "CPP/115", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint max_fill(vector<vector<int>> grid,int capacity){\n    int out=0;\n    for (int i=0;i<grid.size();i++)\n    {\n        int sum=0;\n        for (int j=0;j<grid[i].size();j++)\n            sum+=grid[i][j];\n        if (sum>0)  out+=(sum-1)/capacity+1;\n    }\n    return out;\n}\nint main(){\n\tauto result = max_fill(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{{0, 0, 0}, {0, 0, 0}, {0, 0, 0}}, 1", "fn": "max_fill", "para": "(vector<vector<int>> grid,int capacity)", "pass": true}
{"task_id": "CPP/116", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;\n        m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;\n    }\n    return arr;\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{-4,-2,-6,-5,-3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{2, -3, -4, -5, -6}", "fn": "sort_array", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/116", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;\n        m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;\n    }\n    return arr;\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{-4,-2,-6,-5,-3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{2, -3, -4, -5, -6}", "fn": "sort_array", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/116", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;\n        m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;\n    }\n    return arr;\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{-4,-2,-6,-5,-3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{2, -3, -4, -5, -6}", "fn": "sort_array", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/116", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;\n        m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;\n    }\n    return arr;\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{-4,-2,-6,-5,-3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{2, -3, -4, -5, -6}", "fn": "sort_array", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/116", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;\n        m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;\n    }\n    return arr;\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{-4,-2,-6,-5,-3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{2, -3, -4, -5, -6}", "fn": "sort_array", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/116", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;\n        m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;\n    }\n    return arr;\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{2,2,4,4,3,3,5,5,5,7,77}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{5,3,5,2,4,3,7,2,77,4,5}", "fn": "sort_array", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/116", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;\n        m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;\n    }\n    return arr;\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{2,2,4,4,3,3,5,5,5,7,77}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{5,3,5,2,4,3,7,2,77,4,5}", "fn": "sort_array", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/116", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;\n        m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;\n    }\n    return arr;\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{2,2,4,4,3,3,5,5,5,7,77}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{5,3,5,2,4,3,7,2,77,4,5}", "fn": "sort_array", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/116", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;\n        m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;\n    }\n    return arr;\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{2,2,4,4,3,3,5,5,5,7,77}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{5,3,5,2,4,3,7,2,77,4,5}", "fn": "sort_array", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/116", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;\n        m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;\n    }\n    return arr;\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{2,2,4,4,3,3,5,5,5,7,77}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{5,3,5,2,4,3,7,2,77,4,5}", "fn": "sort_array", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/116", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;\n        m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;\n    }\n    return arr;\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{32,3,5,6,12,44}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{3, 5, 6, 12, 32, 44}", "fn": "sort_array", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/116", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;\n        m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;\n    }\n    return arr;\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{32,3,5,6,12,44}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{32, 6, 5, 44, 12, 3}", "fn": "sort_array", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/116", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;\n        m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;\n    }\n    return arr;\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{32,3,5,6,12,44}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{3, 5, 6, 12, 32, 44}", "fn": "sort_array", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/116", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;\n        m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;\n    }\n    return arr;\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{32,3,5,6,12,44}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{32, 6, 5, 44, 12, 3}", "fn": "sort_array", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/116", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;\n        m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;\n    }\n    return arr;\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{32,3,5,6,12,44}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{3, 5, 6, 12, 32, 44}", "fn": "sort_array", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/116", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;\n        m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;\n    }\n    return arr;\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{1,2,4,3,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1,2,4,3,5}", "fn": "sort_array", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/116", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;\n        m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;\n    }\n    return arr;\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{1,2,4,3,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1,2,4,3,5}", "fn": "sort_array", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/116", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;\n        m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;\n    }\n    return arr;\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{1,2,4,3,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1,2,4,3,5}", "fn": "sort_array", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/116", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;\n        m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;\n    }\n    return arr;\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{1,2,4,3,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1,2,4,3,5}", "fn": "sort_array", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/116", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;\n        m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;\n    }\n    return arr;\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{1,2,4,3,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1,2,4,3,5}", "fn": "sort_array", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/116", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;\n        m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;\n    }\n    return arr;\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{2,4,8,16,32}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{32, 16, 8, 4, 2}", "fn": "sort_array", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/116", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;\n        m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;\n    }\n    return arr;\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{2,4,8,16,32}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{32, 16, 8, 4, 2}", "fn": "sort_array", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/116", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;\n        m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;\n    }\n    return arr;\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{2,4,8,16,32}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{32, 16, 8, 4, 2}", "fn": "sort_array", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/116", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;\n        m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;\n    }\n    return arr;\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{2,4,8,16,32}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{32, 16, 8, 4, 2}", "fn": "sort_array", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/116", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;\n        m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;\n    }\n    return arr;\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{2,4,8,16,32}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{32, 16, 8, 4, 2}", "fn": "sort_array", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/116", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;\n        m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;\n    }\n    return arr;\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{2, 5, -7, 0, -3}", "fn": "sort_array", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/116", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;\n        m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;\n    }\n    return arr;\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{2, 5, -7, 0, -3}", "fn": "sort_array", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/116", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;\n        m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;\n    }\n    return arr;\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{2, 5, -7, 0, -3}", "fn": "sort_array", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/116", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;\n        m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;\n    }\n    return arr;\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{2, 5, -7, 0, -3}", "fn": "sort_array", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/116", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;\n        m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;\n    }\n    return arr;\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{2, 5, -7, 0, -3}", "fn": "sort_array", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/116", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;\n        m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;\n    }\n    return arr;\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{0,1,2,4,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{4,1,3,2,0}", "fn": "sort_array", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/116", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;\n        m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;\n    }\n    return arr;\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{0,1,2,4,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{4,1,3,2,0}", "fn": "sort_array", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/116", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;\n        m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;\n    }\n    return arr;\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{0,1,2,4,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{4,1,3,2,0}", "fn": "sort_array", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/116", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;\n        m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;\n    }\n    return arr;\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{0,1,2,4,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{4,1,3,2,0}", "fn": "sort_array", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/116", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;\n        m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;\n    }\n    return arr;\n}\nint main(){\n\tauto result = sort_array(<FILL_ME>);\n\tassert(issame(result,{0,1,2,4,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{4,1,3,2,0}", "fn": "sort_array", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/117", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s,int n){\n    string vowels=\"aeiouAEIOU\";\n    string current=\"\";\n    vector<string> out={};\n    int numc=0;\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n        if (s[i]==' ')\n        {\n            if (numc==n) out.push_back(current);\n            current=\"\";\n            numc=0;\n        }\n        else\n        {\n            current=current+s[i];\n            if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))\n            if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())\n                numc+=1;\n        }\n    return out;\n}\nint main(){\n\tauto result = select_words(<FILL_ME>);\n\tassert(issame(result,{\"world\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Hello world\", 1", "fn": "select_words", "para": "(string s,int n)", "pass": false}
{"task_id": "CPP/117", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s,int n){\n    string vowels=\"aeiouAEIOU\";\n    string current=\"\";\n    vector<string> out={};\n    int numc=0;\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n        if (s[i]==' ')\n        {\n            if (numc==n) out.push_back(current);\n            current=\"\";\n            numc=0;\n        }\n        else\n        {\n            current=current+s[i];\n            if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))\n            if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())\n                numc+=1;\n        }\n    return out;\n}\nint main(){\n\tauto result = select_words(<FILL_ME>);\n\tassert(issame(result,{\"world\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Hello world\", 1", "fn": "select_words", "para": "(string s,int n)", "pass": false}
{"task_id": "CPP/117", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s,int n){\n    string vowels=\"aeiouAEIOU\";\n    string current=\"\";\n    vector<string> out={};\n    int numc=0;\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n        if (s[i]==' ')\n        {\n            if (numc==n) out.push_back(current);\n            current=\"\";\n            numc=0;\n        }\n        else\n        {\n            current=current+s[i];\n            if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))\n            if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())\n                numc+=1;\n        }\n    return out;\n}\nint main(){\n\tauto result = select_words(<FILL_ME>);\n\tassert(issame(result,{\"world\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Hello world\", 1", "fn": "select_words", "para": "(string s,int n)", "pass": false}
{"task_id": "CPP/117", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s,int n){\n    string vowels=\"aeiouAEIOU\";\n    string current=\"\";\n    vector<string> out={};\n    int numc=0;\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n        if (s[i]==' ')\n        {\n            if (numc==n) out.push_back(current);\n            current=\"\";\n            numc=0;\n        }\n        else\n        {\n            current=current+s[i];\n            if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))\n            if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())\n                numc+=1;\n        }\n    return out;\n}\nint main(){\n\tauto result = select_words(<FILL_ME>);\n\tassert(issame(result,{\"world\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Hello world\", 2", "fn": "select_words", "para": "(string s,int n)", "pass": false}
{"task_id": "CPP/117", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s,int n){\n    string vowels=\"aeiouAEIOU\";\n    string current=\"\";\n    vector<string> out={};\n    int numc=0;\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n        if (s[i]==' ')\n        {\n            if (numc==n) out.push_back(current);\n            current=\"\";\n            numc=0;\n        }\n        else\n        {\n            current=current+s[i];\n            if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))\n            if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())\n                numc+=1;\n        }\n    return out;\n}\nint main(){\n\tauto result = select_words(<FILL_ME>);\n\tassert(issame(result,{\"world\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Hello world\", 1", "fn": "select_words", "para": "(string s,int n)", "pass": false}
{"task_id": "CPP/117", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s,int n){\n    string vowels=\"aeiouAEIOU\";\n    string current=\"\";\n    vector<string> out={};\n    int numc=0;\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n        if (s[i]==' ')\n        {\n            if (numc==n) out.push_back(current);\n            current=\"\";\n            numc=0;\n        }\n        else\n        {\n            current=current+s[i];\n            if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))\n            if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())\n                numc+=1;\n        }\n    return out;\n}\nint main(){\n\tauto result = select_words(<FILL_ME>);\n\tassert(issame(result,{\"b\",\"c\",\"d\",\"f\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"a b c d e f\", 1", "fn": "select_words", "para": "(string s,int n)", "pass": true}
{"task_id": "CPP/117", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s,int n){\n    string vowels=\"aeiouAEIOU\";\n    string current=\"\";\n    vector<string> out={};\n    int numc=0;\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n        if (s[i]==' ')\n        {\n            if (numc==n) out.push_back(current);\n            current=\"\";\n            numc=0;\n        }\n        else\n        {\n            current=current+s[i];\n            if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))\n            if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())\n                numc+=1;\n        }\n    return out;\n}\nint main(){\n\tauto result = select_words(<FILL_ME>);\n\tassert(issame(result,{\"b\",\"c\",\"d\",\"f\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"a b c d e f\", 1", "fn": "select_words", "para": "(string s,int n)", "pass": true}
{"task_id": "CPP/117", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s,int n){\n    string vowels=\"aeiouAEIOU\";\n    string current=\"\";\n    vector<string> out={};\n    int numc=0;\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n        if (s[i]==' ')\n        {\n            if (numc==n) out.push_back(current);\n            current=\"\";\n            numc=0;\n        }\n        else\n        {\n            current=current+s[i];\n            if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))\n            if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())\n                numc+=1;\n        }\n    return out;\n}\nint main(){\n\tauto result = select_words(<FILL_ME>);\n\tassert(issame(result,{\"b\",\"c\",\"d\",\"f\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"a b c d e f\", 1", "fn": "select_words", "para": "(string s,int n)", "pass": true}
{"task_id": "CPP/117", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s,int n){\n    string vowels=\"aeiouAEIOU\";\n    string current=\"\";\n    vector<string> out={};\n    int numc=0;\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n        if (s[i]==' ')\n        {\n            if (numc==n) out.push_back(current);\n            current=\"\";\n            numc=0;\n        }\n        else\n        {\n            current=current+s[i];\n            if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))\n            if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())\n                numc+=1;\n        }\n    return out;\n}\nint main(){\n\tauto result = select_words(<FILL_ME>);\n\tassert(issame(result,{\"b\",\"c\",\"d\",\"f\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"a b c d e f\", 1", "fn": "select_words", "para": "(string s,int n)", "pass": true}
{"task_id": "CPP/117", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s,int n){\n    string vowels=\"aeiouAEIOU\";\n    string current=\"\";\n    vector<string> out={};\n    int numc=0;\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n        if (s[i]==' ')\n        {\n            if (numc==n) out.push_back(current);\n            current=\"\";\n            numc=0;\n        }\n        else\n        {\n            current=current+s[i];\n            if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))\n            if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())\n                numc+=1;\n        }\n    return out;\n}\nint main(){\n\tauto result = select_words(<FILL_ME>);\n\tassert(issame(result,{\"b\",\"c\",\"d\",\"f\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"a b c d e f\", 1", "fn": "select_words", "para": "(string s,int n)", "pass": true}
{"task_id": "CPP/117", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s,int n){\n    string vowels=\"aeiouAEIOU\";\n    string current=\"\";\n    vector<string> out={};\n    int numc=0;\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n        if (s[i]==' ')\n        {\n            if (numc==n) out.push_back(current);\n            current=\"\";\n            numc=0;\n        }\n        else\n        {\n            current=current+s[i];\n            if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))\n            if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())\n                numc+=1;\n        }\n    return out;\n}\nint main(){\n\tauto result = select_words(<FILL_ME>);\n\tassert(issame(result,{\"Mary\",\"lamb\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Mary had a little lamb\", 2", "fn": "select_words", "para": "(string s,int n)", "pass": false}
{"task_id": "CPP/117", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s,int n){\n    string vowels=\"aeiouAEIOU\";\n    string current=\"\";\n    vector<string> out={};\n    int numc=0;\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n        if (s[i]==' ')\n        {\n            if (numc==n) out.push_back(current);\n            current=\"\";\n            numc=0;\n        }\n        else\n        {\n            current=current+s[i];\n            if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))\n            if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())\n                numc+=1;\n        }\n    return out;\n}\nint main(){\n\tauto result = select_words(<FILL_ME>);\n\tassert(issame(result,{\"Mary\",\"lamb\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Mary had a little lamb\", 2", "fn": "select_words", "para": "(string s,int n)", "pass": false}
{"task_id": "CPP/117", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s,int n){\n    string vowels=\"aeiouAEIOU\";\n    string current=\"\";\n    vector<string> out={};\n    int numc=0;\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n        if (s[i]==' ')\n        {\n            if (numc==n) out.push_back(current);\n            current=\"\";\n            numc=0;\n        }\n        else\n        {\n            current=current+s[i];\n            if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))\n            if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())\n                numc+=1;\n        }\n    return out;\n}\nint main(){\n\tauto result = select_words(<FILL_ME>);\n\tassert(issame(result,{\"Mary\",\"lamb\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Mary had a little lamb\", 2", "fn": "select_words", "para": "(string s,int n)", "pass": false}
{"task_id": "CPP/117", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s,int n){\n    string vowels=\"aeiouAEIOU\";\n    string current=\"\";\n    vector<string> out={};\n    int numc=0;\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n        if (s[i]==' ')\n        {\n            if (numc==n) out.push_back(current);\n            current=\"\";\n            numc=0;\n        }\n        else\n        {\n            current=current+s[i];\n            if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))\n            if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())\n                numc+=1;\n        }\n    return out;\n}\nint main(){\n\tauto result = select_words(<FILL_ME>);\n\tassert(issame(result,{\"Mary\",\"lamb\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Mary had a little lamb\", 2", "fn": "select_words", "para": "(string s,int n)", "pass": false}
{"task_id": "CPP/117", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s,int n){\n    string vowels=\"aeiouAEIOU\";\n    string current=\"\";\n    vector<string> out={};\n    int numc=0;\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n        if (s[i]==' ')\n        {\n            if (numc==n) out.push_back(current);\n            current=\"\";\n            numc=0;\n        }\n        else\n        {\n            current=current+s[i];\n            if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))\n            if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())\n                numc+=1;\n        }\n    return out;\n}\nint main(){\n\tauto result = select_words(<FILL_ME>);\n\tassert(issame(result,{\"Mary\",\"lamb\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Mary had a little lamb\", 2", "fn": "select_words", "para": "(string s,int n)", "pass": false}
{"task_id": "CPP/117", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s,int n){\n    string vowels=\"aeiouAEIOU\";\n    string current=\"\";\n    vector<string> out={};\n    int numc=0;\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n        if (s[i]==' ')\n        {\n            if (numc==n) out.push_back(current);\n            current=\"\";\n            numc=0;\n        }\n        else\n        {\n            current=current+s[i];\n            if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))\n            if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())\n                numc+=1;\n        }\n    return out;\n}\nint main(){\n\tauto result = select_words(<FILL_ME>);\n\tassert(issame(result,{\"Uncle\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Uncle is a good man\", 3", "fn": "select_words", "para": "(string s,int n)", "pass": true}
{"task_id": "CPP/117", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s,int n){\n    string vowels=\"aeiouAEIOU\";\n    string current=\"\";\n    vector<string> out={};\n    int numc=0;\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n        if (s[i]==' ')\n        {\n            if (numc==n) out.push_back(current);\n            current=\"\";\n            numc=0;\n        }\n        else\n        {\n            current=current+s[i];\n            if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))\n            if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())\n                numc+=1;\n        }\n    return out;\n}\nint main(){\n\tauto result = select_words(<FILL_ME>);\n\tassert(issame(result,{\"Uncle\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Uncle is a good man\", 3", "fn": "select_words", "para": "(string s,int n)", "pass": true}
{"task_id": "CPP/117", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s,int n){\n    string vowels=\"aeiouAEIOU\";\n    string current=\"\";\n    vector<string> out={};\n    int numc=0;\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n        if (s[i]==' ')\n        {\n            if (numc==n) out.push_back(current);\n            current=\"\";\n            numc=0;\n        }\n        else\n        {\n            current=current+s[i];\n            if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))\n            if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())\n                numc+=1;\n        }\n    return out;\n}\nint main(){\n\tauto result = select_words(<FILL_ME>);\n\tassert(issame(result,{\"Uncle\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Uncle is a good man\" , 3", "fn": "select_words", "para": "(string s,int n)", "pass": true}
{"task_id": "CPP/117", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s,int n){\n    string vowels=\"aeiouAEIOU\";\n    string current=\"\";\n    vector<string> out={};\n    int numc=0;\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n        if (s[i]==' ')\n        {\n            if (numc==n) out.push_back(current);\n            current=\"\";\n            numc=0;\n        }\n        else\n        {\n            current=current+s[i];\n            if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))\n            if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())\n                numc+=1;\n        }\n    return out;\n}\nint main(){\n\tauto result = select_words(<FILL_ME>);\n\tassert(issame(result,{\"Uncle\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Uncle is a good man\", 3", "fn": "select_words", "para": "(string s,int n)", "pass": true}
{"task_id": "CPP/117", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s,int n){\n    string vowels=\"aeiouAEIOU\";\n    string current=\"\";\n    vector<string> out={};\n    int numc=0;\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n        if (s[i]==' ')\n        {\n            if (numc==n) out.push_back(current);\n            current=\"\";\n            numc=0;\n        }\n        else\n        {\n            current=current+s[i];\n            if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))\n            if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())\n                numc+=1;\n        }\n    return out;\n}\nint main(){\n\tauto result = select_words(<FILL_ME>);\n\tassert(issame(result,{\"Uncle\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Uncle is a good man\", 3", "fn": "select_words", "para": "(string s,int n)", "pass": true}
{"task_id": "CPP/117", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s,int n){\n    string vowels=\"aeiouAEIOU\";\n    string current=\"\";\n    vector<string> out={};\n    int numc=0;\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n        if (s[i]==' ')\n        {\n            if (numc==n) out.push_back(current);\n            current=\"\";\n            numc=0;\n        }\n        else\n        {\n            current=current+s[i];\n            if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))\n            if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())\n                numc+=1;\n        }\n    return out;\n}\nint main(){\n\tauto result = select_words(<FILL_ME>);\n\tassert(issame(result,{\"little\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"The little brown fox\", 1", "fn": "select_words", "para": "(string s,int n)", "pass": false}
{"task_id": "CPP/117", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s,int n){\n    string vowels=\"aeiouAEIOU\";\n    string current=\"\";\n    vector<string> out={};\n    int numc=0;\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n        if (s[i]==' ')\n        {\n            if (numc==n) out.push_back(current);\n            current=\"\";\n            numc=0;\n        }\n        else\n        {\n            current=current+s[i];\n            if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))\n            if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())\n                numc+=1;\n        }\n    return out;\n}\nint main(){\n\tauto result = select_words(<FILL_ME>);\n\tassert(issame(result,{\"little\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"The little brown fox\", 1", "fn": "select_words", "para": "(string s,int n)", "pass": false}
{"task_id": "CPP/117", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s,int n){\n    string vowels=\"aeiouAEIOU\";\n    string current=\"\";\n    vector<string> out={};\n    int numc=0;\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n        if (s[i]==' ')\n        {\n            if (numc==n) out.push_back(current);\n            current=\"\";\n            numc=0;\n        }\n        else\n        {\n            current=current+s[i];\n            if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))\n            if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())\n                numc+=1;\n        }\n    return out;\n}\nint main(){\n\tauto result = select_words(<FILL_ME>);\n\tassert(issame(result,{\"little\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"The little brown fox\", 1", "fn": "select_words", "para": "(string s,int n)", "pass": false}
{"task_id": "CPP/117", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s,int n){\n    string vowels=\"aeiouAEIOU\";\n    string current=\"\";\n    vector<string> out={};\n    int numc=0;\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n        if (s[i]==' ')\n        {\n            if (numc==n) out.push_back(current);\n            current=\"\";\n            numc=0;\n        }\n        else\n        {\n            current=current+s[i];\n            if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))\n            if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())\n                numc+=1;\n        }\n    return out;\n}\nint main(){\n\tauto result = select_words(<FILL_ME>);\n\tassert(issame(result,{\"little\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"The little brown fox\", 2", "fn": "select_words", "para": "(string s,int n)", "pass": false}
{"task_id": "CPP/117", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s,int n){\n    string vowels=\"aeiouAEIOU\";\n    string current=\"\";\n    vector<string> out={};\n    int numc=0;\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n        if (s[i]==' ')\n        {\n            if (numc==n) out.push_back(current);\n            current=\"\";\n            numc=0;\n        }\n        else\n        {\n            current=current+s[i];\n            if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))\n            if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())\n                numc+=1;\n        }\n    return out;\n}\nint main(){\n\tauto result = select_words(<FILL_ME>);\n\tassert(issame(result,{\"little\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"The quick brown fox jumps over the lazy dog\", 3", "fn": "select_words", "para": "(string s,int n)", "pass": false}
{"task_id": "CPP/117", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s,int n){\n    string vowels=\"aeiouAEIOU\";\n    string current=\"\";\n    vector<string> out={};\n    int numc=0;\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n        if (s[i]==' ')\n        {\n            if (numc==n) out.push_back(current);\n            current=\"\";\n            numc=0;\n        }\n        else\n        {\n            current=current+s[i];\n            if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))\n            if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())\n                numc+=1;\n        }\n    return out;\n}\nint main(){\n\tauto result = select_words(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Hello World\", 2", "fn": "select_words", "para": "(string s,int n)", "pass": true}
{"task_id": "CPP/117", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s,int n){\n    string vowels=\"aeiouAEIOU\";\n    string current=\"\";\n    vector<string> out={};\n    int numc=0;\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n        if (s[i]==' ')\n        {\n            if (numc==n) out.push_back(current);\n            current=\"\";\n            numc=0;\n        }\n        else\n        {\n            current=current+s[i];\n            if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))\n            if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())\n                numc+=1;\n        }\n    return out;\n}\nint main(){\n\tauto result = select_words(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Hello World\", 2", "fn": "select_words", "para": "(string s,int n)", "pass": true}
{"task_id": "CPP/117", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s,int n){\n    string vowels=\"aeiouAEIOU\";\n    string current=\"\";\n    vector<string> out={};\n    int numc=0;\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n        if (s[i]==' ')\n        {\n            if (numc==n) out.push_back(current);\n            current=\"\";\n            numc=0;\n        }\n        else\n        {\n            current=current+s[i];\n            if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))\n            if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())\n                numc+=1;\n        }\n    return out;\n}\nint main(){\n\tauto result = select_words(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Hello World\", 2", "fn": "select_words", "para": "(string s,int n)", "pass": true}
{"task_id": "CPP/117", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s,int n){\n    string vowels=\"aeiouAEIOU\";\n    string current=\"\";\n    vector<string> out={};\n    int numc=0;\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n        if (s[i]==' ')\n        {\n            if (numc==n) out.push_back(current);\n            current=\"\";\n            numc=0;\n        }\n        else\n        {\n            current=current+s[i];\n            if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))\n            if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())\n                numc+=1;\n        }\n    return out;\n}\nint main(){\n\tauto result = select_words(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Hello World\", 2", "fn": "select_words", "para": "(string s,int n)", "pass": true}
{"task_id": "CPP/117", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s,int n){\n    string vowels=\"aeiouAEIOU\";\n    string current=\"\";\n    vector<string> out={};\n    int numc=0;\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n        if (s[i]==' ')\n        {\n            if (numc==n) out.push_back(current);\n            current=\"\";\n            numc=0;\n        }\n        else\n        {\n            current=current+s[i];\n            if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))\n            if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())\n                numc+=1;\n        }\n    return out;\n}\nint main(){\n\tauto result = select_words(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Hello World\", 2", "fn": "select_words", "para": "(string s,int n)", "pass": true}
{"task_id": "CPP/118", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring get_closest_vowel(string word){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return out+word[i];\n    return out;\n}\nint main(){\n\tauto result = get_closest_vowel(<FILL_ME>);\n\tassert(result==\"\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Hello\"", "fn": "get_closest_vowel", "para": "(string word)", "pass": false}
{"task_id": "CPP/118", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring get_closest_vowel(string word){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return out+word[i];\n    return out;\n}\nint main(){\n\tauto result = get_closest_vowel(<FILL_ME>);\n\tassert(result==\"\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\"", "fn": "get_closest_vowel", "para": "(string word)", "pass": false}
{"task_id": "CPP/118", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring get_closest_vowel(string word){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return out+word[i];\n    return out;\n}\nint main(){\n\tauto result = get_closest_vowel(<FILL_ME>);\n\tassert(result==\"\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\"", "fn": "get_closest_vowel", "para": "(string word)", "pass": false}
{"task_id": "CPP/118", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring get_closest_vowel(string word){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return out+word[i];\n    return out;\n}\nint main(){\n\tauto result = get_closest_vowel(<FILL_ME>);\n\tassert(result==\"\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\"", "fn": "get_closest_vowel", "para": "(string word)", "pass": false}
{"task_id": "CPP/118", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring get_closest_vowel(string word){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return out+word[i];\n    return out;\n}\nint main(){\n\tauto result = get_closest_vowel(<FILL_ME>);\n\tassert(result==\"\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\"", "fn": "get_closest_vowel", "para": "(string word)", "pass": false}
{"task_id": "CPP/118", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring get_closest_vowel(string word){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return out+word[i];\n    return out;\n}\nint main(){\n\tauto result = get_closest_vowel(<FILL_ME>);\n\tassert(result==\"u\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"beautiful\"", "fn": "get_closest_vowel", "para": "(string word)", "pass": true}
{"task_id": "CPP/118", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring get_closest_vowel(string word){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return out+word[i];\n    return out;\n}\nint main(){\n\tauto result = get_closest_vowel(<FILL_ME>);\n\tassert(result==\"u\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"beautiful\"", "fn": "get_closest_vowel", "para": "(string word)", "pass": true}
{"task_id": "CPP/118", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring get_closest_vowel(string word){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return out+word[i];\n    return out;\n}\nint main(){\n\tauto result = get_closest_vowel(<FILL_ME>);\n\tassert(result==\"u\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"beautiful\"", "fn": "get_closest_vowel", "para": "(string word)", "pass": true}
{"task_id": "CPP/118", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring get_closest_vowel(string word){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return out+word[i];\n    return out;\n}\nint main(){\n\tauto result = get_closest_vowel(<FILL_ME>);\n\tassert(result==\"u\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"beautiful\"", "fn": "get_closest_vowel", "para": "(string word)", "pass": true}
{"task_id": "CPP/118", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring get_closest_vowel(string word){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return out+word[i];\n    return out;\n}\nint main(){\n\tauto result = get_closest_vowel(<FILL_ME>);\n\tassert(result==\"u\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"beautiful\"", "fn": "get_closest_vowel", "para": "(string word)", "pass": true}
{"task_id": "CPP/118", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring get_closest_vowel(string word){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return out+word[i];\n    return out;\n}\nint main(){\n\tauto result = get_closest_vowel(<FILL_ME>);\n\tassert(result==\"o\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"programming\"", "fn": "get_closest_vowel", "para": "(string word)", "pass": false}
{"task_id": "CPP/118", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring get_closest_vowel(string word){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return out+word[i];\n    return out;\n}\nint main(){\n\tauto result = get_closest_vowel(<FILL_ME>);\n\tassert(result==\"o\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"programming\"", "fn": "get_closest_vowel", "para": "(string word)", "pass": false}
{"task_id": "CPP/118", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring get_closest_vowel(string word){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return out+word[i];\n    return out;\n}\nint main(){\n\tauto result = get_closest_vowel(<FILL_ME>);\n\tassert(result==\"o\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Hello\"", "fn": "get_closest_vowel", "para": "(string word)", "pass": false}
{"task_id": "CPP/118", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring get_closest_vowel(string word){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return out+word[i];\n    return out;\n}\nint main(){\n\tauto result = get_closest_vowel(<FILL_ME>);\n\tassert(result==\"o\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"programming\"", "fn": "get_closest_vowel", "para": "(string word)", "pass": false}
{"task_id": "CPP/118", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring get_closest_vowel(string word){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return out+word[i];\n    return out;\n}\nint main(){\n\tauto result = get_closest_vowel(<FILL_ME>);\n\tassert(result==\"o\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"programming\"", "fn": "get_closest_vowel", "para": "(string word)", "pass": false}
{"task_id": "CPP/118", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring get_closest_vowel(string word){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return out+word[i];\n    return out;\n}\nint main(){\n\tauto result = get_closest_vowel(<FILL_ME>);\n\tassert(result==\"a\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"banana\"", "fn": "get_closest_vowel", "para": "(string word)", "pass": true}
{"task_id": "CPP/118", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring get_closest_vowel(string word){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return out+word[i];\n    return out;\n}\nint main(){\n\tauto result = get_closest_vowel(<FILL_ME>);\n\tassert(result==\"a\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"banana\"", "fn": "get_closest_vowel", "para": "(string word)", "pass": true}
{"task_id": "CPP/118", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring get_closest_vowel(string word){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return out+word[i];\n    return out;\n}\nint main(){\n\tauto result = get_closest_vowel(<FILL_ME>);\n\tassert(result==\"a\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"banana\"", "fn": "get_closest_vowel", "para": "(string word)", "pass": true}
{"task_id": "CPP/118", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring get_closest_vowel(string word){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return out+word[i];\n    return out;\n}\nint main(){\n\tauto result = get_closest_vowel(<FILL_ME>);\n\tassert(result==\"a\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"banana\"", "fn": "get_closest_vowel", "para": "(string word)", "pass": true}
{"task_id": "CPP/118", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring get_closest_vowel(string word){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return out+word[i];\n    return out;\n}\nint main(){\n\tauto result = get_closest_vowel(<FILL_ME>);\n\tassert(result==\"a\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"banana\"", "fn": "get_closest_vowel", "para": "(string word)", "pass": true}
{"task_id": "CPP/118", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring get_closest_vowel(string word){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return out+word[i];\n    return out;\n}\nint main(){\n\tauto result = get_closest_vowel(<FILL_ME>);\n\tassert(result==\"i\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "interview", "fn": "get_closest_vowel", "para": "(string word)", "pass": false}
{"task_id": "CPP/118", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring get_closest_vowel(string word){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return out+word[i];\n    return out;\n}\nint main(){\n\tauto result = get_closest_vowel(<FILL_ME>);\n\tassert(result==\"i\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Mississippi\"", "fn": "get_closest_vowel", "para": "(string word)", "pass": true}
{"task_id": "CPP/118", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring get_closest_vowel(string word){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return out+word[i];\n    return out;\n}\nint main(){\n\tauto result = get_closest_vowel(<FILL_ME>);\n\tassert(result==\"i\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Mississippi\"", "fn": "get_closest_vowel", "para": "(string word)", "pass": true}
{"task_id": "CPP/118", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring get_closest_vowel(string word){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return out+word[i];\n    return out;\n}\nint main(){\n\tauto result = get_closest_vowel(<FILL_ME>);\n\tassert(result==\"i\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Mississippi\"", "fn": "get_closest_vowel", "para": "(string word)", "pass": true}
{"task_id": "CPP/118", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring get_closest_vowel(string word){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return out+word[i];\n    return out;\n}\nint main(){\n\tauto result = get_closest_vowel(<FILL_ME>);\n\tassert(result==\"i\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Mississippi\"", "fn": "get_closest_vowel", "para": "(string word)", "pass": true}
{"task_id": "CPP/119", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring match_parens(vector<string> lst){\n    string l1=lst[0]+lst[1];\n    int i,count=0;\n    bool can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (count!=0) return \"No\";\n    if (can==true) return \"Yes\";\n    l1=lst[1]+lst[0];\n    can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (can==true) return \"Yes\";\n    return \"No\";\n}\nint main(){\n\tauto result = match_parens(<FILL_ME>);\n\tassert(result==\"No\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{\"(\": \"(\"}", "fn": "match_parens", "para": "(vector<string> lst)", "pass": false}
{"task_id": "CPP/119", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring match_parens(vector<string> lst){\n    string l1=lst[0]+lst[1];\n    int i,count=0;\n    bool can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (count!=0) return \"No\";\n    if (can==true) return \"Yes\";\n    l1=lst[1]+lst[0];\n    can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (can==true) return \"Yes\";\n    return \"No\";\n}\nint main(){\n\tauto result = match_parens(<FILL_ME>);\n\tassert(result==\"No\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{\"FILL_ME\", \"(\"}", "fn": "match_parens", "para": "(vector<string> lst)", "pass": true}
{"task_id": "CPP/119", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring match_parens(vector<string> lst){\n    string l1=lst[0]+lst[1];\n    int i,count=0;\n    bool can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (count!=0) return \"No\";\n    if (can==true) return \"Yes\";\n    l1=lst[1]+lst[0];\n    can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (can==true) return \"Yes\";\n    return \"No\";\n}\nint main(){\n\tauto result = match_parens(<FILL_ME>);\n\tassert(result==\"No\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{\"(\", \")\"}", "fn": "match_parens", "para": "(vector<string> lst)", "pass": false}
{"task_id": "CPP/119", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring match_parens(vector<string> lst){\n    string l1=lst[0]+lst[1];\n    int i,count=0;\n    bool can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (count!=0) return \"No\";\n    if (can==true) return \"Yes\";\n    l1=lst[1]+lst[0];\n    can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (can==true) return \"Yes\";\n    return \"No\";\n}\nint main(){\n\tauto result = match_parens(<FILL_ME>);\n\tassert(result==\"No\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{\"(\", \")\"}", "fn": "match_parens", "para": "(vector<string> lst)", "pass": false}
{"task_id": "CPP/119", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring match_parens(vector<string> lst){\n    string l1=lst[0]+lst[1];\n    int i,count=0;\n    bool can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (count!=0) return \"No\";\n    if (can==true) return \"Yes\";\n    l1=lst[1]+lst[0];\n    can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (can==true) return \"Yes\";\n    return \"No\";\n}\nint main(){\n\tauto result = match_parens(<FILL_ME>);\n\tassert(result==\"No\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{\"(\", \")\"}", "fn": "match_parens", "para": "(vector<string> lst)", "pass": false}
{"task_id": "CPP/119", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring match_parens(vector<string> lst){\n    string l1=lst[0]+lst[1];\n    int i,count=0;\n    bool can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (count!=0) return \"No\";\n    if (can==true) return \"Yes\";\n    l1=lst[1]+lst[0];\n    can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (can==true) return \"Yes\";\n    return \"No\";\n}\nint main(){\n\tauto result = match_parens(<FILL_ME>);\n\tassert(result==\"Yes\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{\"(())\", \"()\"}", "fn": "match_parens", "para": "(vector<string> lst)", "pass": true}
{"task_id": "CPP/119", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring match_parens(vector<string> lst){\n    string l1=lst[0]+lst[1];\n    int i,count=0;\n    bool can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (count!=0) return \"No\";\n    if (can==true) return \"Yes\";\n    l1=lst[1]+lst[0];\n    can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (can==true) return \"Yes\";\n    return \"No\";\n}\nint main(){\n\tauto result = match_parens(<FILL_ME>);\n\tassert(result==\"Yes\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{\"(())\", \"()\"}", "fn": "match_parens", "para": "(vector<string> lst)", "pass": true}
{"task_id": "CPP/119", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring match_parens(vector<string> lst){\n    string l1=lst[0]+lst[1];\n    int i,count=0;\n    bool can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (count!=0) return \"No\";\n    if (can==true) return \"Yes\";\n    l1=lst[1]+lst[0];\n    can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (can==true) return \"Yes\";\n    return \"No\";\n}\nint main(){\n\tauto result = match_parens(<FILL_ME>);\n\tassert(result==\"Yes\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{\"(())\", \"()\"}", "fn": "match_parens", "para": "(vector<string> lst)", "pass": true}
{"task_id": "CPP/119", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring match_parens(vector<string> lst){\n    string l1=lst[0]+lst[1];\n    int i,count=0;\n    bool can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (count!=0) return \"No\";\n    if (can==true) return \"Yes\";\n    l1=lst[1]+lst[0];\n    can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (can==true) return \"Yes\";\n    return \"No\";\n}\nint main(){\n\tauto result = match_parens(<FILL_ME>);\n\tassert(result==\"Yes\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{\"(())\", \"()\"}", "fn": "match_parens", "para": "(vector<string> lst)", "pass": true}
{"task_id": "CPP/119", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring match_parens(vector<string> lst){\n    string l1=lst[0]+lst[1];\n    int i,count=0;\n    bool can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (count!=0) return \"No\";\n    if (can==true) return \"Yes\";\n    l1=lst[1]+lst[0];\n    can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (can==true) return \"Yes\";\n    return \"No\";\n}\nint main(){\n\tauto result = match_parens(<FILL_ME>);\n\tassert(result==\"Yes\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{\"(())\", \"()\"}", "fn": "match_parens", "para": "(vector<string> lst)", "pass": true}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{2,20,123}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{1, 5, 10, 20, 2, 123}, 3", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": false}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{2,20,123}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{1, 5, 10, 20, 2, 123}, 3", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": false}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{2,20,123}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{1, 5, 10, 20, 2, 123}, 3", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": false}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{2,20,123}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, 5, 10, 20, 2, 123}, 3", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": false}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{2,20,123}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{1, 5, 10, 20, 2, 123}, 3", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": false}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{3,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{1,3,5,2,7,9,4,6}, 2", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": false}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{3,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{1, 3, 5, 2, 7, 9, 4, 6}, 2", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": false}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{3,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{1,3,5,2,7,9,4,6}, 2", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": false}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{3,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{1, 3, 5, 2, 7, 9, 4, 6}, 2", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": false}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{3,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{1,3,5,2,7,9,4,6}, 2", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": false}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{1, 3, 5, 2, 4}, 1", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": true}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{1, 3, 5, 2, 4}, 1", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": true}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{1, 3, 5, 2, 4}, 1", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": true}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{1, 3, 5, 2, 4}, 1", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": true}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{1, 3, 5, 2, 4}, 1", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": true}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{-13,-8,0,0,3,5,15}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{-13,-8,0,0,3,5,15}, 2", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": false}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{-13,-8,0,0,3,5,15}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{-13,-8,0,0,3,5,15}, 2", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": false}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{-13,-8,0,0,3,5,15}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{-13,-8,0,0,3,5,15}, 2", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": false}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{-13,-8,0,0,3,5,15}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{-13,-8,-6,-2,0,0,3,5,15}, 2", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": false}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{-13,-8,0,0,3,5,15}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{-13,-8,0,0,3,5,15}, 2", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": false}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{-4,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "arr, k", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": false}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{-4,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "arr, k", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": false}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{-4,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "arr, k", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": false}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{-4,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "arr, k", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": false}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{-4,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "arr, k", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": false}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{4,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, 3, 4, 2, 4}, 2", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": true}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{4,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, 3, 4, 2, 4}, 2", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": true}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{4,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, 3, 4, 2, 4}, 2", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": true}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{4,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, 3, 4, 2, 4},2", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": true}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{4,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, 3, 4, 2, 4}, 2", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": true}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, 2, 3}, 2", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": false}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, 2, 3}, 2", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": false}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, 2, 3}, 2", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": false}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "arr, k", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": false}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "arr, k", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": false}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{0,1,2,20}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{0, 1, 2, 20}, 4", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": true}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{0,1,2,20}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{0, 1, 2, 20}, 4", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": true}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{0,1,2,20}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{0, 1, 2, 20}, 4", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": true}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{0,1,2,20}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{0, 1, 2, 20}, 4", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": true}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{0,1,2,20}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{0, 1, 2, 20}, 4", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": true}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{-4,-3,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{-10, -7, -4, -3, 5, 9, 10}, 3", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": false}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{-4,-3,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{-10, -7, -4, -3, 5, 9, 10}, 3", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": false}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{-4,-3,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{-10, -7, -4, -3, 5, 9, 10}, 3", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": false}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{-4,-3,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{-10, -7, -4, -3, 5, 9, 10}, 3", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": false}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{-4,-3,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{-10, -7, -4, -3, 5, 9, 10}, 3", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": false}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": false}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": false}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": false}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": false}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": false}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{-10,10}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{-10, -5, 0, 5, 10}, 2", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": false}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{-10,10}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{-10, -5, 0, 5, 10}, 2", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": false}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{-10,10}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{-10, -5, 0, 5, 10}, 2", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": false}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{-10,10}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{-10, -5, 0, 5, 10}, 2", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": false}
{"task_id": "CPP/120", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\nint main(){\n\tauto result = maximum(<FILL_ME>);\n\tassert(issame(result,{-10,10}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{-10, -5, 0, 5, 10}, 2", "fn": "maximum", "para": "(vector<int> arr,int k)", "pass": false}
{"task_id": "CPP/121", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n    int sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==1) sum+=lst[i*2];\n    return sum;\n}\nint main(){\n\tauto result = solutions(<FILL_ME>);\n\tassert(result==9);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 2, 3, 4, 5}", "fn": "solutions", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/121", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n    int sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==1) sum+=lst[i*2];\n    return sum;\n}\nint main(){\n\tauto result = solutions(<FILL_ME>);\n\tassert(result==9);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 2, 3, 4, 5}", "fn": "solutions", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/121", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n    int sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==1) sum+=lst[i*2];\n    return sum;\n}\nint main(){\n\tauto result = solutions(<FILL_ME>);\n\tassert(result==9);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 2, 3, 4, 5}", "fn": "solutions", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/121", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n    int sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==1) sum+=lst[i*2];\n    return sum;\n}\nint main(){\n\tauto result = solutions(<FILL_ME>);\n\tassert(result==9);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 2, 3, 4, 5}", "fn": "solutions", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/121", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n    int sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==1) sum+=lst[i*2];\n    return sum;\n}\nint main(){\n\tauto result = solutions(<FILL_ME>);\n\tassert(result==9);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 2, 3, 4, 5}", "fn": "solutions", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/121", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n    int sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==1) sum+=lst[i*2];\n    return sum;\n}\nint main(){\n\tauto result = solutions(<FILL_ME>);\n\tassert(result==23);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9}", "fn": "solutions", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/121", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n    int sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==1) sum+=lst[i*2];\n    return sum;\n}\nint main(){\n\tauto result = solutions(<FILL_ME>);\n\tassert(result==23);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{4, 7, 2, 5, 9, 1}", "fn": "solutions", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/121", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n    int sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==1) sum+=lst[i*2];\n    return sum;\n}\nint main(){\n\tauto result = solutions(<FILL_ME>);\n\tassert(result==23);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{4, 7, 2, 5, 9, 1}", "fn": "solutions", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/121", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n    int sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==1) sum+=lst[i*2];\n    return sum;\n}\nint main(){\n\tauto result = solutions(<FILL_ME>);\n\tassert(result==23);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{4, 7, 2, 5, 9, 1}", "fn": "solutions", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/121", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n    int sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==1) sum+=lst[i*2];\n    return sum;\n}\nint main(){\n\tauto result = solutions(<FILL_ME>);\n\tassert(result==23);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{4, 7, 2, 5, 9, 1}", "fn": "solutions", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/121", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n    int sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==1) sum+=lst[i*2];\n    return sum;\n}\nint main(){\n\tauto result = solutions(<FILL_ME>);\n\tassert(result==12);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5, 6}", "fn": "solutions", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/121", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n    int sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==1) sum+=lst[i*2];\n    return sum;\n}\nint main(){\n\tauto result = solutions(<FILL_ME>);\n\tassert(result==12);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5, 6, 7, 8}", "fn": "solutions", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/121", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n    int sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==1) sum+=lst[i*2];\n    return sum;\n}\nint main(){\n\tauto result = solutions(<FILL_ME>);\n\tassert(result==12);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5, 6, 7, 8}", "fn": "solutions", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/121", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n    int sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==1) sum+=lst[i*2];\n    return sum;\n}\nint main(){\n\tauto result = solutions(<FILL_ME>);\n\tassert(result==12);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5, 6}", "fn": "solutions", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/121", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n    int sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==1) sum+=lst[i*2];\n    return sum;\n}\nint main(){\n\tauto result = solutions(<FILL_ME>);\n\tassert(result==12);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{3, 2, 1, 4, 5, 6, 7, 8}", "fn": "solutions", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/121", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n    int sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==1) sum+=lst[i*2];\n    return sum;\n}\nint main(){\n\tauto result = solutions(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5}", "fn": "solutions", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/121", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n    int sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==1) sum+=lst[i*2];\n    return sum;\n}\nint main(){\n\tauto result = solutions(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 2, 3, 4, 5}", "fn": "solutions", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/121", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n    int sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==1) sum+=lst[i*2];\n    return sum;\n}\nint main(){\n\tauto result = solutions(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5}", "fn": "solutions", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/121", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n    int sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==1) sum+=lst[i*2];\n    return sum;\n}\nint main(){\n\tauto result = solutions(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5}", "fn": "solutions", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/121", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n    int sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==1) sum+=lst[i*2];\n    return sum;\n}\nint main(){\n\tauto result = solutions(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5}", "fn": "solutions", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/121", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n    int sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==1) sum+=lst[i*2];\n    return sum;\n}\nint main(){\n\tauto result = solutions(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{2, 4, 6, 8}", "fn": "solutions", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/121", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n    int sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==1) sum+=lst[i*2];\n    return sum;\n}\nint main(){\n\tauto result = solutions(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{2, 4, 6, 8}", "fn": "solutions", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/121", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n    int sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==1) sum+=lst[i*2];\n    return sum;\n}\nint main(){\n\tauto result = solutions(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{2, 4, 6, 8}", "fn": "solutions", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/121", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n    int sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==1) sum+=lst[i*2];\n    return sum;\n}\nint main(){\n\tauto result = solutions(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{2, 4, 6, 8}", "fn": "solutions", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/121", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n    int sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==1) sum+=lst[i*2];\n    return sum;\n}\nint main(){\n\tauto result = solutions(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{2, 4, 6, 8}", "fn": "solutions", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/121", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n    int sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==1) sum+=lst[i*2];\n    return sum;\n}\nint main(){\n\tauto result = solutions(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 2, 3, 4, 5}", "fn": "solutions", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/121", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n    int sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==1) sum+=lst[i*2];\n    return sum;\n}\nint main(){\n\tauto result = solutions(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3}", "fn": "solutions", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/121", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n    int sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==1) sum+=lst[i*2];\n    return sum;\n}\nint main(){\n\tauto result = solutions(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5}", "fn": "solutions", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/121", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n    int sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==1) sum+=lst[i*2];\n    return sum;\n}\nint main(){\n\tauto result = solutions(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5}", "fn": "solutions", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/121", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n    int sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==1) sum+=lst[i*2];\n    return sum;\n}\nint main(){\n\tauto result = solutions(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5}", "fn": "solutions", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/122", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add_elements(vector<int> arr,int k){\n    int sum=0;\n    for (int i=0;i<k;i++)\n        if( arr[i]>=-99 and arr[i]<=99)\n            sum+=arr[i];\n    return sum;\n}\nint main(){\n\tauto result = add_elements(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{-5, 10, 15, -20, 1}, 5", "fn": "add_elements", "para": "(vector<int> arr,int k)", "pass": true}
{"task_id": "CPP/122", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add_elements(vector<int> arr,int k){\n    int sum=0;\n    for (int i=0;i<k;i++)\n        if( arr[i]>=-99 and arr[i]<=99)\n            sum+=arr[i];\n    return sum;\n}\nint main(){\n\tauto result = add_elements(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5}, 3", "fn": "add_elements", "para": "(vector<int> arr,int k)", "pass": false}
{"task_id": "CPP/122", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add_elements(vector<int> arr,int k){\n    int sum=0;\n    for (int i=0;i<k;i++)\n        if( arr[i]>=-99 and arr[i]<=99)\n            sum+=arr[i];\n    return sum;\n}\nint main(){\n\tauto result = add_elements(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{-5, 10, 15, -20, 1}, 5", "fn": "add_elements", "para": "(vector<int> arr,int k)", "pass": true}
{"task_id": "CPP/122", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add_elements(vector<int> arr,int k){\n    int sum=0;\n    for (int i=0;i<k;i++)\n        if( arr[i]>=-99 and arr[i]<=99)\n            sum+=arr[i];\n    return sum;\n}\nint main(){\n\tauto result = add_elements(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{-5, 10, 15, -20, 1}, 5", "fn": "add_elements", "para": "(vector<int> arr,int k)", "pass": true}
{"task_id": "CPP/122", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add_elements(vector<int> arr,int k){\n    int sum=0;\n    for (int i=0;i<k;i++)\n        if( arr[i]>=-99 and arr[i]<=99)\n            sum+=arr[i];\n    return sum;\n}\nint main(){\n\tauto result = add_elements(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{-5, 10, 15, -20, 1}, 5", "fn": "add_elements", "para": "(vector<int> arr,int k)", "pass": true}
{"task_id": "CPP/122", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add_elements(vector<int> arr,int k){\n    int sum=0;\n    for (int i=0;i<k;i++)\n        if( arr[i]>=-99 and arr[i]<=99)\n            sum+=arr[i];\n    return sum;\n}\nint main(){\n\tauto result = add_elements(<FILL_ME>);\n\tassert(result==24);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{5, 10, 12, -3, 0, 100, -50}, 4", "fn": "add_elements", "para": "(vector<int> arr,int k)", "pass": true}
{"task_id": "CPP/122", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add_elements(vector<int> arr,int k){\n    int sum=0;\n    for (int i=0;i<k;i++)\n        if( arr[i]>=-99 and arr[i]<=99)\n            sum+=arr[i];\n    return sum;\n}\nint main(){\n\tauto result = add_elements(<FILL_ME>);\n\tassert(result==24);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{5, 10, 12, -3, 0, 100, -50}, 4", "fn": "add_elements", "para": "(vector<int> arr,int k)", "pass": true}
{"task_id": "CPP/122", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add_elements(vector<int> arr,int k){\n    int sum=0;\n    for (int i=0;i<k;i++)\n        if( arr[i]>=-99 and arr[i]<=99)\n            sum+=arr[i];\n    return sum;\n}\nint main(){\n\tauto result = add_elements(<FILL_ME>);\n\tassert(result==24);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{5, 10, 12, -3, 0, 100, -50}, 4", "fn": "add_elements", "para": "(vector<int> arr,int k)", "pass": true}
{"task_id": "CPP/122", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add_elements(vector<int> arr,int k){\n    int sum=0;\n    for (int i=0;i<k;i++)\n        if( arr[i]>=-99 and arr[i]<=99)\n            sum+=arr[i];\n    return sum;\n}\nint main(){\n\tauto result = add_elements(<FILL_ME>);\n\tassert(result==24);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{5, 10, 12, -3, 0, 100, -50}, 4", "fn": "add_elements", "para": "(vector<int> arr,int k)", "pass": true}
{"task_id": "CPP/122", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add_elements(vector<int> arr,int k){\n    int sum=0;\n    for (int i=0;i<k;i++)\n        if( arr[i]>=-99 and arr[i]<=99)\n            sum+=arr[i];\n    return sum;\n}\nint main(){\n\tauto result = add_elements(<FILL_ME>);\n\tassert(result==24);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{5, 10, 12, -3, 0, 100, -50}, 4", "fn": "add_elements", "para": "(vector<int> arr,int k)", "pass": true}
{"task_id": "CPP/122", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add_elements(vector<int> arr,int k){\n    int sum=0;\n    for (int i=0;i<k;i++)\n        if( arr[i]>=-99 and arr[i]<=99)\n            sum+=arr[i];\n    return sum;\n}\nint main(){\n\tauto result = add_elements(<FILL_ME>);\n\tassert(result==125);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int> {100, -50, 75, 0, 0, 50}, 6", "fn": "add_elements", "para": "(vector<int> arr,int k)", "pass": false}
{"task_id": "CPP/122", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add_elements(vector<int> arr,int k){\n    int sum=0;\n    for (int i=0;i<k;i++)\n        if( arr[i]>=-99 and arr[i]<=99)\n            sum+=arr[i];\n    return sum;\n}\nint main(){\n\tauto result = add_elements(<FILL_ME>);\n\tassert(result==125);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int> {50, 25, 50}, 3", "fn": "add_elements", "para": "(vector<int> arr,int k)", "pass": true}
{"task_id": "CPP/122", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add_elements(vector<int> arr,int k){\n    int sum=0;\n    for (int i=0;i<k;i++)\n        if( arr[i]>=-99 and arr[i]<=99)\n            sum+=arr[i];\n    return sum;\n}\nint main(){\n\tauto result = add_elements(<FILL_ME>);\n\tassert(result==125);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int> {100, -50, 75, 0, 0, 50}, 6", "fn": "add_elements", "para": "(vector<int> arr,int k)", "pass": false}
{"task_id": "CPP/122", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add_elements(vector<int> arr,int k){\n    int sum=0;\n    for (int i=0;i<k;i++)\n        if( arr[i]>=-99 and arr[i]<=99)\n            sum+=arr[i];\n    return sum;\n}\nint main(){\n\tauto result = add_elements(<FILL_ME>);\n\tassert(result==125);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int> {50, 25, 75}, 3", "fn": "add_elements", "para": "(vector<int> arr,int k)", "pass": false}
{"task_id": "CPP/122", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add_elements(vector<int> arr,int k){\n    int sum=0;\n    for (int i=0;i<k;i++)\n        if( arr[i]>=-99 and arr[i]<=99)\n            sum+=arr[i];\n    return sum;\n}\nint main(){\n\tauto result = add_elements(<FILL_ME>);\n\tassert(result==125);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{100, -50, 75, 0, 0, 50}, 6", "fn": "add_elements", "para": "(vector<int> arr,int k)", "pass": false}
{"task_id": "CPP/122", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add_elements(vector<int> arr,int k){\n    int sum=0;\n    for (int i=0;i<k;i++)\n        if( arr[i]>=-99 and arr[i]<=99)\n            sum+=arr[i];\n    return sum;\n}\nint main(){\n\tauto result = add_elements(<FILL_ME>);\n\tassert(result==-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{5, -10, 3, -1, 7, -2, 0, 4, -9, -10}, 6", "fn": "add_elements", "para": "(vector<int> arr,int k)", "pass": false}
{"task_id": "CPP/122", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add_elements(vector<int> arr,int k){\n    int sum=0;\n    for (int i=0;i<k;i++)\n        if( arr[i]>=-99 and arr[i]<=99)\n            sum+=arr[i];\n    return sum;\n}\nint main(){\n\tauto result = add_elements(<FILL_ME>);\n\tassert(result==-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{5, -10, 3, -1, 7, -2, 0, 4, -9, -10}, 6", "fn": "add_elements", "para": "(vector<int> arr,int k)", "pass": false}
{"task_id": "CPP/122", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add_elements(vector<int> arr,int k){\n    int sum=0;\n    for (int i=0;i<k;i++)\n        if( arr[i]>=-99 and arr[i]<=99)\n            sum+=arr[i];\n    return sum;\n}\nint main(){\n\tauto result = add_elements(<FILL_ME>);\n\tassert(result==-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{5, -10, 3, -1, 7, -2, 0, 4, -9, -10}, 6", "fn": "add_elements", "para": "(vector<int> arr,int k)", "pass": false}
{"task_id": "CPP/122", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add_elements(vector<int> arr,int k){\n    int sum=0;\n    for (int i=0;i<k;i++)\n        if( arr[i]>=-99 and arr[i]<=99)\n            sum+=arr[i];\n    return sum;\n}\nint main(){\n\tauto result = add_elements(<FILL_ME>);\n\tassert(result==-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{5, -10, 3, -1, 7, -2, 0, 4, -9, -10}, 6", "fn": "add_elements", "para": "(vector<int> arr,int k)", "pass": false}
{"task_id": "CPP/122", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add_elements(vector<int> arr,int k){\n    int sum=0;\n    for (int i=0;i<k;i++)\n        if( arr[i]>=-99 and arr[i]<=99)\n            sum+=arr[i];\n    return sum;\n}\nint main(){\n\tauto result = add_elements(<FILL_ME>);\n\tassert(result==-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{5, -10, 3, -1, 7, -2, 0, 4, -9, -10}, 6", "fn": "add_elements", "para": "(vector<int> arr,int k)", "pass": false}
{"task_id": "CPP/122", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add_elements(vector<int> arr,int k){\n    int sum=0;\n    for (int i=0;i<k;i++)\n        if( arr[i]>=-99 and arr[i]<=99)\n            sum+=arr[i];\n    return sum;\n}\nint main(){\n\tauto result = add_elements(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{0, 1, 2, 3, 4, 5}, 0", "fn": "add_elements", "para": "(vector<int> arr,int k)", "pass": true}
{"task_id": "CPP/122", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add_elements(vector<int> arr,int k){\n    int sum=0;\n    for (int i=0;i<k;i++)\n        if( arr[i]>=-99 and arr[i]<=99)\n            sum+=arr[i];\n    return sum;\n}\nint main(){\n\tauto result = add_elements(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{0, 1, 2, 3, 4, 5}, 0", "fn": "add_elements", "para": "(vector<int> arr,int k)", "pass": true}
{"task_id": "CPP/122", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add_elements(vector<int> arr,int k){\n    int sum=0;\n    for (int i=0;i<k;i++)\n        if( arr[i]>=-99 and arr[i]<=99)\n            sum+=arr[i];\n    return sum;\n}\nint main(){\n\tauto result = add_elements(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{0, 1, 2, 3, 4, 5}, 0", "fn": "add_elements", "para": "(vector<int> arr,int k)", "pass": true}
{"task_id": "CPP/122", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add_elements(vector<int> arr,int k){\n    int sum=0;\n    for (int i=0;i<k;i++)\n        if( arr[i]>=-99 and arr[i]<=99)\n            sum+=arr[i];\n    return sum;\n}\nint main(){\n\tauto result = add_elements(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{0, 1, 2, 3, 4, 5}, 0", "fn": "add_elements", "para": "(vector<int> arr,int k)", "pass": true}
{"task_id": "CPP/122", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add_elements(vector<int> arr,int k){\n    int sum=0;\n    for (int i=0;i<k;i++)\n        if( arr[i]>=-99 and arr[i]<=99)\n            sum+=arr[i];\n    return sum;\n}\nint main(){\n\tauto result = add_elements(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{0, 1, 2, 3, 4, 5}, 0", "fn": "add_elements", "para": "(vector<int> arr,int k)", "pass": true}
{"task_id": "CPP/123", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> get_odd_collatz(int n){\n    vector<int> out={1};\n    while (n!=1)\n    {\n        if (n%2==1) {out.push_back(n); n=n*3+1;}\n        else n=n/2;\n    }\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = get_odd_collatz(<FILL_ME>);\n\tassert(issame(result,{1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "1", "fn": "get_odd_collatz", "para": "(int n)", "pass": true}
{"task_id": "CPP/123", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> get_odd_collatz(int n){\n    vector<int> out={1};\n    while (n!=1)\n    {\n        if (n%2==1) {out.push_back(n); n=n*3+1;}\n        else n=n/2;\n    }\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = get_odd_collatz(<FILL_ME>);\n\tassert(issame(result,{1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "1", "fn": "get_odd_collatz", "para": "(int n)", "pass": true}
{"task_id": "CPP/123", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> get_odd_collatz(int n){\n    vector<int> out={1};\n    while (n!=1)\n    {\n        if (n%2==1) {out.push_back(n); n=n*3+1;}\n        else n=n/2;\n    }\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = get_odd_collatz(<FILL_ME>);\n\tassert(issame(result,{1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "1", "fn": "get_odd_collatz", "para": "(int n)", "pass": true}
{"task_id": "CPP/123", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> get_odd_collatz(int n){\n    vector<int> out={1};\n    while (n!=1)\n    {\n        if (n%2==1) {out.push_back(n); n=n*3+1;}\n        else n=n/2;\n    }\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = get_odd_collatz(<FILL_ME>);\n\tassert(issame(result,{1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "1", "fn": "get_odd_collatz", "para": "(int n)", "pass": true}
{"task_id": "CPP/123", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> get_odd_collatz(int n){\n    vector<int> out={1};\n    while (n!=1)\n    {\n        if (n%2==1) {out.push_back(n); n=n*3+1;}\n        else n=n/2;\n    }\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = get_odd_collatz(<FILL_ME>);\n\tassert(issame(result,{1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "1", "fn": "get_odd_collatz", "para": "(int n)", "pass": true}
{"task_id": "CPP/123", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> get_odd_collatz(int n){\n    vector<int> out={1};\n    while (n!=1)\n    {\n        if (n%2==1) {out.push_back(n); n=n*3+1;}\n        else n=n/2;\n    }\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = get_odd_collatz(<FILL_ME>);\n\tassert(issame(result,{1,3,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "3", "fn": "get_odd_collatz", "para": "(int n)", "pass": true}
{"task_id": "CPP/123", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> get_odd_collatz(int n){\n    vector<int> out={1};\n    while (n!=1)\n    {\n        if (n%2==1) {out.push_back(n); n=n*3+1;}\n        else n=n/2;\n    }\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = get_odd_collatz(<FILL_ME>);\n\tassert(issame(result,{1,3,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "3", "fn": "get_odd_collatz", "para": "(int n)", "pass": true}
{"task_id": "CPP/123", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> get_odd_collatz(int n){\n    vector<int> out={1};\n    while (n!=1)\n    {\n        if (n%2==1) {out.push_back(n); n=n*3+1;}\n        else n=n/2;\n    }\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = get_odd_collatz(<FILL_ME>);\n\tassert(issame(result,{1,3,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "3", "fn": "get_odd_collatz", "para": "(int n)", "pass": true}
{"task_id": "CPP/123", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> get_odd_collatz(int n){\n    vector<int> out={1};\n    while (n!=1)\n    {\n        if (n%2==1) {out.push_back(n); n=n*3+1;}\n        else n=n/2;\n    }\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = get_odd_collatz(<FILL_ME>);\n\tassert(issame(result,{1,3,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "3", "fn": "get_odd_collatz", "para": "(int n)", "pass": true}
{"task_id": "CPP/123", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> get_odd_collatz(int n){\n    vector<int> out={1};\n    while (n!=1)\n    {\n        if (n%2==1) {out.push_back(n); n=n*3+1;}\n        else n=n/2;\n    }\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = get_odd_collatz(<FILL_ME>);\n\tassert(issame(result,{1,3,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "3", "fn": "get_odd_collatz", "para": "(int n)", "pass": true}
{"task_id": "CPP/123", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> get_odd_collatz(int n){\n    vector<int> out={1};\n    while (n!=1)\n    {\n        if (n%2==1) {out.push_back(n); n=n*3+1;}\n        else n=n/2;\n    }\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = get_odd_collatz(<FILL_ME>);\n\tassert(issame(result,{1,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "14", "fn": "get_odd_collatz", "para": "(int n)", "pass": false}
{"task_id": "CPP/123", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> get_odd_collatz(int n){\n    vector<int> out={1};\n    while (n!=1)\n    {\n        if (n%2==1) {out.push_back(n); n=n*3+1;}\n        else n=n/2;\n    }\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = get_odd_collatz(<FILL_ME>);\n\tassert(issame(result,{1,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "14", "fn": "get_odd_collatz", "para": "(int n)", "pass": false}
{"task_id": "CPP/123", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> get_odd_collatz(int n){\n    vector<int> out={1};\n    while (n!=1)\n    {\n        if (n%2==1) {out.push_back(n); n=n*3+1;}\n        else n=n/2;\n    }\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = get_odd_collatz(<FILL_ME>);\n\tassert(issame(result,{1,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "14", "fn": "get_odd_collatz", "para": "(int n)", "pass": false}
{"task_id": "CPP/123", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> get_odd_collatz(int n){\n    vector<int> out={1};\n    while (n!=1)\n    {\n        if (n%2==1) {out.push_back(n); n=n*3+1;}\n        else n=n/2;\n    }\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = get_odd_collatz(<FILL_ME>);\n\tassert(issame(result,{1,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "14", "fn": "get_odd_collatz", "para": "(int n)", "pass": false}
{"task_id": "CPP/123", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> get_odd_collatz(int n){\n    vector<int> out={1};\n    while (n!=1)\n    {\n        if (n%2==1) {out.push_back(n); n=n*3+1;}\n        else n=n/2;\n    }\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = get_odd_collatz(<FILL_ME>);\n\tassert(issame(result,{1,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "14", "fn": "get_odd_collatz", "para": "(int n)", "pass": false}
{"task_id": "CPP/123", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> get_odd_collatz(int n){\n    vector<int> out={1};\n    while (n!=1)\n    {\n        if (n%2==1) {out.push_back(n); n=n*3+1;}\n        else n=n/2;\n    }\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = get_odd_collatz(<FILL_ME>);\n\tassert(issame(result,{1,5,7,11,13,17}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "7", "fn": "get_odd_collatz", "para": "(int n)", "pass": true}
{"task_id": "CPP/123", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> get_odd_collatz(int n){\n    vector<int> out={1};\n    while (n!=1)\n    {\n        if (n%2==1) {out.push_back(n); n=n*3+1;}\n        else n=n/2;\n    }\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = get_odd_collatz(<FILL_ME>);\n\tassert(issame(result,{1,5,7,11,13,17}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "7", "fn": "get_odd_collatz", "para": "(int n)", "pass": true}
{"task_id": "CPP/123", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> get_odd_collatz(int n){\n    vector<int> out={1};\n    while (n!=1)\n    {\n        if (n%2==1) {out.push_back(n); n=n*3+1;}\n        else n=n/2;\n    }\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = get_odd_collatz(<FILL_ME>);\n\tassert(issame(result,{1,5,7,11,13,17}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "7", "fn": "get_odd_collatz", "para": "(int n)", "pass": true}
{"task_id": "CPP/123", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> get_odd_collatz(int n){\n    vector<int> out={1};\n    while (n!=1)\n    {\n        if (n%2==1) {out.push_back(n); n=n*3+1;}\n        else n=n/2;\n    }\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = get_odd_collatz(<FILL_ME>);\n\tassert(issame(result,{1,5,7,11,13,17}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "7", "fn": "get_odd_collatz", "para": "(int n)", "pass": true}
{"task_id": "CPP/123", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> get_odd_collatz(int n){\n    vector<int> out={1};\n    while (n!=1)\n    {\n        if (n%2==1) {out.push_back(n); n=n*3+1;}\n        else n=n/2;\n    }\n    sort(out.begin(),out.end());\n    return out;\n}\nint main(){\n\tauto result = get_odd_collatz(<FILL_ME>);\n\tassert(issame(result,{1,5,7,11,13,17}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "7", "fn": "get_odd_collatz", "para": "(int n)", "pass": true}
{"task_id": "CPP/124", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool valid_date(string date){\n    int mm,dd,yy,i;\n    if (date.length()!=10) return false;\n    for (int i=0;i<10;i++)\n        if (i==2 or i==5)\n        {\n            if (date[i]!='-') return false;\n        }\n        else\n            if (date[i]<48 or date[i]>57) return false;\n\n    mm=atoi(date.substr(0,2).c_str());\n    dd=atoi(date.substr(3,2).c_str());\n    yy=atoi(date.substr(6,4).c_str());\n    if (mm<1 or mm>12) return false;\n    if (dd<1 or dd>31) return false;\n    if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;\n    if (dd==30 and mm==2) return false;\n    return true;\n\n}\nint main(){\n\tauto result = valid_date(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"01-12-2022\"", "fn": "valid_date", "para": "(string date)", "pass": true}
{"task_id": "CPP/124", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool valid_date(string date){\n    int mm,dd,yy,i;\n    if (date.length()!=10) return false;\n    for (int i=0;i<10;i++)\n        if (i==2 or i==5)\n        {\n            if (date[i]!='-') return false;\n        }\n        else\n            if (date[i]<48 or date[i]>57) return false;\n\n    mm=atoi(date.substr(0,2).c_str());\n    dd=atoi(date.substr(3,2).c_str());\n    yy=atoi(date.substr(6,4).c_str());\n    if (mm<1 or mm>12) return false;\n    if (dd<1 or dd>31) return false;\n    if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;\n    if (dd==30 and mm==2) return false;\n    return true;\n\n}\nint main(){\n\tauto result = valid_date(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"01-12-2022\"", "fn": "valid_date", "para": "(string date)", "pass": true}
{"task_id": "CPP/124", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool valid_date(string date){\n    int mm,dd,yy,i;\n    if (date.length()!=10) return false;\n    for (int i=0;i<10;i++)\n        if (i==2 or i==5)\n        {\n            if (date[i]!='-') return false;\n        }\n        else\n            if (date[i]<48 or date[i]>57) return false;\n\n    mm=atoi(date.substr(0,2).c_str());\n    dd=atoi(date.substr(3,2).c_str());\n    yy=atoi(date.substr(6,4).c_str());\n    if (mm<1 or mm>12) return false;\n    if (dd<1 or dd>31) return false;\n    if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;\n    if (dd==30 and mm==2) return false;\n    return true;\n\n}\nint main(){\n\tauto result = valid_date(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"01-12-2022\"", "fn": "valid_date", "para": "(string date)", "pass": true}
{"task_id": "CPP/124", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool valid_date(string date){\n    int mm,dd,yy,i;\n    if (date.length()!=10) return false;\n    for (int i=0;i<10;i++)\n        if (i==2 or i==5)\n        {\n            if (date[i]!='-') return false;\n        }\n        else\n            if (date[i]<48 or date[i]>57) return false;\n\n    mm=atoi(date.substr(0,2).c_str());\n    dd=atoi(date.substr(3,2).c_str());\n    yy=atoi(date.substr(6,4).c_str());\n    if (mm<1 or mm>12) return false;\n    if (dd<1 or dd>31) return false;\n    if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;\n    if (dd==30 and mm==2) return false;\n    return true;\n\n}\nint main(){\n\tauto result = valid_date(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"01-12-2022\"", "fn": "valid_date", "para": "(string date)", "pass": true}
{"task_id": "CPP/124", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool valid_date(string date){\n    int mm,dd,yy,i;\n    if (date.length()!=10) return false;\n    for (int i=0;i<10;i++)\n        if (i==2 or i==5)\n        {\n            if (date[i]!='-') return false;\n        }\n        else\n            if (date[i]<48 or date[i]>57) return false;\n\n    mm=atoi(date.substr(0,2).c_str());\n    dd=atoi(date.substr(3,2).c_str());\n    yy=atoi(date.substr(6,4).c_str());\n    if (mm<1 or mm>12) return false;\n    if (dd<1 or dd>31) return false;\n    if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;\n    if (dd==30 and mm==2) return false;\n    return true;\n\n}\nint main(){\n\tauto result = valid_date(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"01-12-2022\"", "fn": "valid_date", "para": "(string date)", "pass": true}
{"task_id": "CPP/124", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool valid_date(string date){\n    int mm,dd,yy,i;\n    if (date.length()!=10) return false;\n    for (int i=0;i<10;i++)\n        if (i==2 or i==5)\n        {\n            if (date[i]!='-') return false;\n        }\n        else\n            if (date[i]<48 or date[i]>57) return false;\n\n    mm=atoi(date.substr(0,2).c_str());\n    dd=atoi(date.substr(3,2).c_str());\n    yy=atoi(date.substr(6,4).c_str());\n    if (mm<1 or mm>12) return false;\n    if (dd<1 or dd>31) return false;\n    if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;\n    if (dd==30 and mm==2) return false;\n    return true;\n\n}\nint main(){\n\tauto result = valid_date(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"01-11-2022\"", "fn": "valid_date", "para": "(string date)", "pass": false}
{"task_id": "CPP/124", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool valid_date(string date){\n    int mm,dd,yy,i;\n    if (date.length()!=10) return false;\n    for (int i=0;i<10;i++)\n        if (i==2 or i==5)\n        {\n            if (date[i]!='-') return false;\n        }\n        else\n            if (date[i]<48 or date[i]>57) return false;\n\n    mm=atoi(date.substr(0,2).c_str());\n    dd=atoi(date.substr(3,2).c_str());\n    yy=atoi(date.substr(6,4).c_str());\n    if (mm<1 or mm>12) return false;\n    if (dd<1 or dd>31) return false;\n    if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;\n    if (dd==30 and mm==2) return false;\n    return true;\n\n}\nint main(){\n\tauto result = valid_date(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"13-11-2022\"", "fn": "valid_date", "para": "(string date)", "pass": true}
{"task_id": "CPP/124", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool valid_date(string date){\n    int mm,dd,yy,i;\n    if (date.length()!=10) return false;\n    for (int i=0;i<10;i++)\n        if (i==2 or i==5)\n        {\n            if (date[i]!='-') return false;\n        }\n        else\n            if (date[i]<48 or date[i]>57) return false;\n\n    mm=atoi(date.substr(0,2).c_str());\n    dd=atoi(date.substr(3,2).c_str());\n    yy=atoi(date.substr(6,4).c_str());\n    if (mm<1 or mm>12) return false;\n    if (dd<1 or dd>31) return false;\n    if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;\n    if (dd==30 and mm==2) return false;\n    return true;\n\n}\nint main(){\n\tauto result = valid_date(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"01-11-2022\"", "fn": "valid_date", "para": "(string date)", "pass": false}
{"task_id": "CPP/124", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool valid_date(string date){\n    int mm,dd,yy,i;\n    if (date.length()!=10) return false;\n    for (int i=0;i<10;i++)\n        if (i==2 or i==5)\n        {\n            if (date[i]!='-') return false;\n        }\n        else\n            if (date[i]<48 or date[i]>57) return false;\n\n    mm=atoi(date.substr(0,2).c_str());\n    dd=atoi(date.substr(3,2).c_str());\n    yy=atoi(date.substr(6,4).c_str());\n    if (mm<1 or mm>12) return false;\n    if (dd<1 or dd>31) return false;\n    if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;\n    if (dd==30 and mm==2) return false;\n    return true;\n\n}\nint main(){\n\tauto result = valid_date(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"13-11-2022\"", "fn": "valid_date", "para": "(string date)", "pass": true}
{"task_id": "CPP/124", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool valid_date(string date){\n    int mm,dd,yy,i;\n    if (date.length()!=10) return false;\n    for (int i=0;i<10;i++)\n        if (i==2 or i==5)\n        {\n            if (date[i]!='-') return false;\n        }\n        else\n            if (date[i]<48 or date[i]>57) return false;\n\n    mm=atoi(date.substr(0,2).c_str());\n    dd=atoi(date.substr(3,2).c_str());\n    yy=atoi(date.substr(6,4).c_str());\n    if (mm<1 or mm>12) return false;\n    if (dd<1 or dd>31) return false;\n    if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;\n    if (dd==30 and mm==2) return false;\n    return true;\n\n}\nint main(){\n\tauto result = valid_date(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"13-11-2022\"", "fn": "valid_date", "para": "(string date)", "pass": true}
{"task_id": "CPP/125", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+' ';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    int num=0;\n    for (i=0;i<txt.length();i++)\n        if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)\n            num+=1;\n    return {to_string(num)};\n}\nint main(){\n\tauto result = split_words(<FILL_ME>);\n\tassert(issame(result,{\"Hello\",\"world,!\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Hello world,!\"", "fn": "split_words", "para": "(string txt)", "pass": true}
{"task_id": "CPP/125", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+' ';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    int num=0;\n    for (i=0;i<txt.length();i++)\n        if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)\n            num+=1;\n    return {to_string(num)};\n}\nint main(){\n\tauto result = split_words(<FILL_ME>);\n\tassert(issame(result,{\"Hello\",\"world,!\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Hello world,!\"", "fn": "split_words", "para": "(string txt)", "pass": true}
{"task_id": "CPP/125", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+' ';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    int num=0;\n    for (i=0;i<txt.length();i++)\n        if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)\n            num+=1;\n    return {to_string(num)};\n}\nint main(){\n\tauto result = split_words(<FILL_ME>);\n\tassert(issame(result,{\"Hello\",\"world,!\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Hello world,!\"", "fn": "split_words", "para": "(string txt)", "pass": true}
{"task_id": "CPP/125", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+' ';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    int num=0;\n    for (i=0;i<txt.length();i++)\n        if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)\n            num+=1;\n    return {to_string(num)};\n}\nint main(){\n\tauto result = split_words(<FILL_ME>);\n\tassert(issame(result,{\"Hello\",\"world,!\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Hello world,!\"", "fn": "split_words", "para": "(string txt)", "pass": true}
{"task_id": "CPP/125", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+' ';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    int num=0;\n    for (i=0;i<txt.length();i++)\n        if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)\n            num+=1;\n    return {to_string(num)};\n}\nint main(){\n\tauto result = split_words(<FILL_ME>);\n\tassert(issame(result,{\"Hello\",\"world,!\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Hello world,!\"", "fn": "split_words", "para": "(string txt)", "pass": true}
{"task_id": "CPP/125", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+' ';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    int num=0;\n    for (i=0;i<txt.length();i++)\n        if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)\n            num+=1;\n    return {to_string(num)};\n}\nint main(){\n\tauto result = split_words(<FILL_ME>);\n\tassert(issame(result,{\"Hello,Hello,world\",\"!\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Hello, Hello, world !\"", "fn": "split_words", "para": "(string txt)", "pass": false}
{"task_id": "CPP/125", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+' ';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    int num=0;\n    for (i=0;i<txt.length();i++)\n        if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)\n            num+=1;\n    return {to_string(num)};\n}\nint main(){\n\tauto result = split_words(<FILL_ME>);\n\tassert(issame(result,{\"Hello,Hello,world\",\"!\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Hello, Hello, world !\"", "fn": "split_words", "para": "(string txt)", "pass": false}
{"task_id": "CPP/125", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+' ';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    int num=0;\n    for (i=0;i<txt.length();i++)\n        if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)\n            num+=1;\n    return {to_string(num)};\n}\nint main(){\n\tauto result = split_words(<FILL_ME>);\n\tassert(issame(result,{\"Hello,Hello,world\",\"!\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Hello, Hello, world !\"", "fn": "split_words", "para": "(string txt)", "pass": false}
{"task_id": "CPP/125", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+' ';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    int num=0;\n    for (i=0;i<txt.length();i++)\n        if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)\n            num+=1;\n    return {to_string(num)};\n}\nint main(){\n\tauto result = split_words(<FILL_ME>);\n\tassert(issame(result,{\"Hello,Hello,world\",\"!\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Hello, Hello, world !\"", "fn": "split_words", "para": "(string txt)", "pass": false}
{"task_id": "CPP/125", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+' ';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    int num=0;\n    for (i=0;i<txt.length();i++)\n        if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)\n            num+=1;\n    return {to_string(num)};\n}\nint main(){\n\tauto result = split_words(<FILL_ME>);\n\tassert(issame(result,{\"Hello,Hello,world\",\"!\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Hello, Hello, world !\"", "fn": "split_words", "para": "(string txt)", "pass": false}
{"task_id": "CPP/125", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+' ';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    int num=0;\n    for (i=0;i<txt.length();i++)\n        if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)\n            num+=1;\n    return {to_string(num)};\n}\nint main(){\n\tauto result = split_words(<FILL_ME>);\n\tassert(issame(result,{\"Hello\",\"world!\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Hello world!\"", "fn": "split_words", "para": "(string txt)", "pass": true}
{"task_id": "CPP/125", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+' ';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    int num=0;\n    for (i=0;i<txt.length();i++)\n        if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)\n            num+=1;\n    return {to_string(num)};\n}\nint main(){\n\tauto result = split_words(<FILL_ME>);\n\tassert(issame(result,{\"Hello\",\"world!\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Hello world!\"", "fn": "split_words", "para": "(string txt)", "pass": true}
{"task_id": "CPP/125", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+' ';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    int num=0;\n    for (i=0;i<txt.length();i++)\n        if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)\n            num+=1;\n    return {to_string(num)};\n}\nint main(){\n\tauto result = split_words(<FILL_ME>);\n\tassert(issame(result,{\"Hello\",\"world!\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Hello world!\"", "fn": "split_words", "para": "(string txt)", "pass": true}
{"task_id": "CPP/125", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+' ';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    int num=0;\n    for (i=0;i<txt.length();i++)\n        if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)\n            num+=1;\n    return {to_string(num)};\n}\nint main(){\n\tauto result = split_words(<FILL_ME>);\n\tassert(issame(result,{\"Hello\",\"world!\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Hello world!\"", "fn": "split_words", "para": "(string txt)", "pass": true}
{"task_id": "CPP/125", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+' ';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    int num=0;\n    for (i=0;i<txt.length();i++)\n        if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)\n            num+=1;\n    return {to_string(num)};\n}\nint main(){\n\tauto result = split_words(<FILL_ME>);\n\tassert(issame(result,{\"Hello\",\"world!\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Hello world!\"", "fn": "split_words", "para": "(string txt)", "pass": true}
{"task_id": "CPP/125", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+' ';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    int num=0;\n    for (i=0;i<txt.length();i++)\n        if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)\n            num+=1;\n    return {to_string(num)};\n}\nint main(){\n\tauto result = split_words(<FILL_ME>);\n\tassert(issame(result,{\"2\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"hello,world\"", "fn": "split_words", "para": "(string txt)", "pass": false}
{"task_id": "CPP/125", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+' ';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    int num=0;\n    for (i=0;i<txt.length();i++)\n        if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)\n            num+=1;\n    return {to_string(num)};\n}\nint main(){\n\tauto result = split_words(<FILL_ME>);\n\tassert(issame(result,{\"2\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"hello,world\"", "fn": "split_words", "para": "(string txt)", "pass": false}
{"task_id": "CPP/125", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+' ';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    int num=0;\n    for (i=0;i<txt.length();i++)\n        if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)\n            num+=1;\n    return {to_string(num)};\n}\nint main(){\n\tauto result = split_words(<FILL_ME>);\n\tassert(issame(result,{\"2\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"hello,world\"", "fn": "split_words", "para": "(string txt)", "pass": false}
{"task_id": "CPP/125", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+' ';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    int num=0;\n    for (i=0;i<txt.length();i++)\n        if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)\n            num+=1;\n    return {to_string(num)};\n}\nint main(){\n\tauto result = split_words(<FILL_ME>);\n\tassert(issame(result,{\"2\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"hello,world\"", "fn": "split_words", "para": "(string txt)", "pass": false}
{"task_id": "CPP/125", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+' ';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    int num=0;\n    for (i=0;i<txt.length();i++)\n        if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)\n            num+=1;\n    return {to_string(num)};\n}\nint main(){\n\tauto result = split_words(<FILL_ME>);\n\tassert(issame(result,{\"2\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"hello,world\"", "fn": "split_words", "para": "(string txt)", "pass": false}
{"task_id": "CPP/125", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+' ';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    int num=0;\n    for (i=0;i<txt.length();i++)\n        if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)\n            num+=1;\n    return {to_string(num)};\n}\nint main(){\n\tauto result = split_words(<FILL_ME>);\n\tassert(issame(result,{\"1\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"hello\"", "fn": "split_words", "para": "(string txt)", "pass": false}
{"task_id": "CPP/125", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+' ';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    int num=0;\n    for (i=0;i<txt.length();i++)\n        if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)\n            num+=1;\n    return {to_string(num)};\n}\nint main(){\n\tauto result = split_words(<FILL_ME>);\n\tassert(issame(result,{\"1\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"apple\"", "fn": "split_words", "para": "(string txt)", "pass": false}
{"task_id": "CPP/125", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+' ';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    int num=0;\n    for (i=0;i<txt.length();i++)\n        if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)\n            num+=1;\n    return {to_string(num)};\n}\nint main(){\n\tauto result = split_words(<FILL_ME>);\n\tassert(issame(result,{\"1\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"hello\"", "fn": "split_words", "para": "(string txt)", "pass": false}
{"task_id": "CPP/125", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+' ';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    int num=0;\n    for (i=0;i<txt.length();i++)\n        if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)\n            num+=1;\n    return {to_string(num)};\n}\nint main(){\n\tauto result = split_words(<FILL_ME>);\n\tassert(issame(result,{\"1\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"hello\"", "fn": "split_words", "para": "(string txt)", "pass": false}
{"task_id": "CPP/125", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+' ';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    int num=0;\n    for (i=0;i<txt.length();i++)\n        if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)\n            num+=1;\n    return {to_string(num)};\n}\nint main(){\n\tauto result = split_words(<FILL_ME>);\n\tassert(issame(result,{\"1\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"apple\"", "fn": "split_words", "para": "(string txt)", "pass": false}
{"task_id": "CPP/125", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+' ';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    int num=0;\n    for (i=0;i<txt.length();i++)\n        if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)\n            num+=1;\n    return {to_string(num)};\n}\nint main(){\n\tauto result = split_words(<FILL_ME>);\n\tassert(issame(result,{\"0\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"hello world\"", "fn": "split_words", "para": "(string txt)", "pass": false}
{"task_id": "CPP/125", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+' ';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    int num=0;\n    for (i=0;i<txt.length();i++)\n        if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)\n            num+=1;\n    return {to_string(num)};\n}\nint main(){\n\tauto result = split_words(<FILL_ME>);\n\tassert(issame(result,{\"0\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"123,456\"", "fn": "split_words", "para": "(string txt)", "pass": false}
{"task_id": "CPP/125", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+' ';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    int num=0;\n    for (i=0;i<txt.length();i++)\n        if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)\n            num+=1;\n    return {to_string(num)};\n}\nint main(){\n\tauto result = split_words(<FILL_ME>);\n\tassert(issame(result,{\"0\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Hello, world!\"", "fn": "split_words", "para": "(string txt)", "pass": false}
{"task_id": "CPP/125", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+' ';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    int num=0;\n    for (i=0;i<txt.length();i++)\n        if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)\n            num+=1;\n    return {to_string(num)};\n}\nint main(){\n\tauto result = split_words(<FILL_ME>);\n\tassert(issame(result,{\"0\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Hello, world!\"", "fn": "split_words", "para": "(string txt)", "pass": false}
{"task_id": "CPP/125", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+' ';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    int num=0;\n    for (i=0;i<txt.length();i++)\n        if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)\n            num+=1;\n    return {to_string(num)};\n}\nint main(){\n\tauto result = split_words(<FILL_ME>);\n\tassert(issame(result,{\"0\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Hello, world!\"", "fn": "split_words", "para": "(string txt)", "pass": false}
{"task_id": "CPP/125", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+' ';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    int num=0;\n    for (i=0;i<txt.length();i++)\n        if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)\n            num+=1;\n    return {to_string(num)};\n}\nint main(){\n\tauto result = split_words(<FILL_ME>);\n\tassert(issame(result,{\"3\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"hello,world,123\"", "fn": "split_words", "para": "(string txt)", "pass": false}
{"task_id": "CPP/125", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+' ';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    int num=0;\n    for (i=0;i<txt.length();i++)\n        if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)\n            num+=1;\n    return {to_string(num)};\n}\nint main(){\n\tauto result = split_words(<FILL_ME>);\n\tassert(issame(result,{\"3\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"hello world\"", "fn": "split_words", "para": "(string txt)", "pass": false}
{"task_id": "CPP/125", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+' ';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    int num=0;\n    for (i=0;i<txt.length();i++)\n        if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)\n            num+=1;\n    return {to_string(num)};\n}\nint main(){\n\tauto result = split_words(<FILL_ME>);\n\tassert(issame(result,{\"3\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"hello,world,123\"", "fn": "split_words", "para": "(string txt)", "pass": false}
{"task_id": "CPP/125", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+' ';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    int num=0;\n    for (i=0;i<txt.length();i++)\n        if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)\n            num+=1;\n    return {to_string(num)};\n}\nint main(){\n\tauto result = split_words(<FILL_ME>);\n\tassert(issame(result,{\"3\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"hello,world,123\"", "fn": "split_words", "para": "(string txt)", "pass": false}
{"task_id": "CPP/125", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+' ';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    int num=0;\n    for (i=0;i<txt.length();i++)\n        if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)\n            num+=1;\n    return {to_string(num)};\n}\nint main(){\n\tauto result = split_words(<FILL_ME>);\n\tassert(issame(result,{\"3\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"hello,world,123\"", "fn": "split_words", "para": "(string txt)", "pass": false}
{"task_id": "CPP/126", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_sorted(vector<int> lst){\n    for (int i=1;i<lst.size();i++)\n    {\n        if (lst[i]<lst[i-1]) return false;\n        if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;\n    }\n    return true;\n}\nint main(){\n\tauto result = is_sorted(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5}", "fn": "is_sorted", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/126", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_sorted(vector<int> lst){\n    for (int i=1;i<lst.size();i++)\n    {\n        if (lst[i]<lst[i-1]) return false;\n        if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;\n    }\n    return true;\n}\nint main(){\n\tauto result = is_sorted(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5}", "fn": "is_sorted", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/126", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_sorted(vector<int> lst){\n    for (int i=1;i<lst.size();i++)\n    {\n        if (lst[i]<lst[i-1]) return false;\n        if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;\n    }\n    return true;\n}\nint main(){\n\tauto result = is_sorted(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5}", "fn": "is_sorted", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/126", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_sorted(vector<int> lst){\n    for (int i=1;i<lst.size();i++)\n    {\n        if (lst[i]<lst[i-1]) return false;\n        if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;\n    }\n    return true;\n}\nint main(){\n\tauto result = is_sorted(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5}", "fn": "is_sorted", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/126", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_sorted(vector<int> lst){\n    for (int i=1;i<lst.size();i++)\n    {\n        if (lst[i]<lst[i-1]) return false;\n        if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;\n    }\n    return true;\n}\nint main(){\n\tauto result = is_sorted(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5}", "fn": "is_sorted", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/126", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_sorted(vector<int> lst){\n    for (int i=1;i<lst.size();i++)\n    {\n        if (lst[i]<lst[i-1]) return false;\n        if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;\n    }\n    return true;\n}\nint main(){\n\tauto result = is_sorted(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{3, 2, 1}", "fn": "is_sorted", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/126", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_sorted(vector<int> lst){\n    for (int i=1;i<lst.size();i++)\n    {\n        if (lst[i]<lst[i-1]) return false;\n        if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;\n    }\n    return true;\n}\nint main(){\n\tauto result = is_sorted(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{3, 2, 1}", "fn": "is_sorted", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/126", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_sorted(vector<int> lst){\n    for (int i=1;i<lst.size();i++)\n    {\n        if (lst[i]<lst[i-1]) return false;\n        if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;\n    }\n    return true;\n}\nint main(){\n\tauto result = is_sorted(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{3, 2, 1}", "fn": "is_sorted", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/126", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_sorted(vector<int> lst){\n    for (int i=1;i<lst.size();i++)\n    {\n        if (lst[i]<lst[i-1]) return false;\n        if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;\n    }\n    return true;\n}\nint main(){\n\tauto result = is_sorted(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{3, 2, 1}", "fn": "is_sorted", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/126", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_sorted(vector<int> lst){\n    for (int i=1;i<lst.size();i++)\n    {\n        if (lst[i]<lst[i-1]) return false;\n        if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;\n    }\n    return true;\n}\nint main(){\n\tauto result = is_sorted(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{3, 2, 1}", "fn": "is_sorted", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/127", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring intersection( vector<int> interval1,vector<int> interval2){\n    int inter1,inter2,l,i;\n    inter1=max(interval1[0],interval2[0]);\n    inter2=min(interval1[1],interval2[1]);\n    l=inter2-inter1;\n    if (l<2) return \"NO\";\n    for (i=2;i*i<=l;i++)\n        if (l%i==0) return \"NO\";\n    return \"YES\";\n}\nint main(){\n\tauto result = intersection(<FILL_ME>);\n\tassert(result==\"NO\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1,5},{7,10}", "fn": "intersection", "para": "( vector<int> interval1,vector<int> interval2)", "pass": true}
{"task_id": "CPP/127", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring intersection( vector<int> interval1,vector<int> interval2){\n    int inter1,inter2,l,i;\n    inter1=max(interval1[0],interval2[0]);\n    inter2=min(interval1[1],interval2[1]);\n    l=inter2-inter1;\n    if (l<2) return \"NO\";\n    for (i=2;i*i<=l;i++)\n        if (l%i==0) return \"NO\";\n    return \"YES\";\n}\nint main(){\n\tauto result = intersection(<FILL_ME>);\n\tassert(result==\"NO\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1,5},{7,10}", "fn": "intersection", "para": "( vector<int> interval1,vector<int> interval2)", "pass": true}
{"task_id": "CPP/127", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring intersection( vector<int> interval1,vector<int> interval2){\n    int inter1,inter2,l,i;\n    inter1=max(interval1[0],interval2[0]);\n    inter2=min(interval1[1],interval2[1]);\n    l=inter2-inter1;\n    if (l<2) return \"NO\";\n    for (i=2;i*i<=l;i++)\n        if (l%i==0) return \"NO\";\n    return \"YES\";\n}\nint main(){\n\tauto result = intersection(<FILL_ME>);\n\tassert(result==\"NO\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1,5},{7,10}", "fn": "intersection", "para": "( vector<int> interval1,vector<int> interval2)", "pass": true}
{"task_id": "CPP/127", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring intersection( vector<int> interval1,vector<int> interval2){\n    int inter1,inter2,l,i;\n    inter1=max(interval1[0],interval2[0]);\n    inter2=min(interval1[1],interval2[1]);\n    l=inter2-inter1;\n    if (l<2) return \"NO\";\n    for (i=2;i*i<=l;i++)\n        if (l%i==0) return \"NO\";\n    return \"YES\";\n}\nint main(){\n\tauto result = intersection(<FILL_ME>);\n\tassert(result==\"NO\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 5},{7, 10}", "fn": "intersection", "para": "( vector<int> interval1,vector<int> interval2)", "pass": true}
{"task_id": "CPP/127", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring intersection( vector<int> interval1,vector<int> interval2){\n    int inter1,inter2,l,i;\n    inter1=max(interval1[0],interval2[0]);\n    inter2=min(interval1[1],interval2[1]);\n    l=inter2-inter1;\n    if (l<2) return \"NO\";\n    for (i=2;i*i<=l;i++)\n        if (l%i==0) return \"NO\";\n    return \"YES\";\n}\nint main(){\n\tauto result = intersection(<FILL_ME>);\n\tassert(result==\"NO\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 5}, {7, 10}", "fn": "intersection", "para": "( vector<int> interval1,vector<int> interval2)", "pass": true}
{"task_id": "CPP/127", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring intersection( vector<int> interval1,vector<int> interval2){\n    int inter1,inter2,l,i;\n    inter1=max(interval1[0],interval2[0]);\n    inter2=min(interval1[1],interval2[1]);\n    l=inter2-inter1;\n    if (l<2) return \"NO\";\n    for (i=2;i*i<=l;i++)\n        if (l%i==0) return \"NO\";\n    return \"YES\";\n}\nint main(){\n\tauto result = intersection(<FILL_ME>);\n\tassert(result==\"YES\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 5}, {3, 7}", "fn": "intersection", "para": "( vector<int> interval1,vector<int> interval2)", "pass": true}
{"task_id": "CPP/127", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring intersection( vector<int> interval1,vector<int> interval2){\n    int inter1,inter2,l,i;\n    inter1=max(interval1[0],interval2[0]);\n    inter2=min(interval1[1],interval2[1]);\n    l=inter2-inter1;\n    if (l<2) return \"NO\";\n    for (i=2;i*i<=l;i++)\n        if (l%i==0) return \"NO\";\n    return \"YES\";\n}\nint main(){\n\tauto result = intersection(<FILL_ME>);\n\tassert(result==\"YES\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 5}, {3, 7}", "fn": "intersection", "para": "( vector<int> interval1,vector<int> interval2)", "pass": true}
{"task_id": "CPP/127", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring intersection( vector<int> interval1,vector<int> interval2){\n    int inter1,inter2,l,i;\n    inter1=max(interval1[0],interval2[0]);\n    inter2=min(interval1[1],interval2[1]);\n    l=inter2-inter1;\n    if (l<2) return \"NO\";\n    for (i=2;i*i<=l;i++)\n        if (l%i==0) return \"NO\";\n    return \"YES\";\n}\nint main(){\n\tauto result = intersection(<FILL_ME>);\n\tassert(result==\"YES\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 5}, {3, 7}", "fn": "intersection", "para": "( vector<int> interval1,vector<int> interval2)", "pass": true}
{"task_id": "CPP/127", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring intersection( vector<int> interval1,vector<int> interval2){\n    int inter1,inter2,l,i;\n    inter1=max(interval1[0],interval2[0]);\n    inter2=min(interval1[1],interval2[1]);\n    l=inter2-inter1;\n    if (l<2) return \"NO\";\n    for (i=2;i*i<=l;i++)\n        if (l%i==0) return \"NO\";\n    return \"YES\";\n}\nint main(){\n\tauto result = intersection(<FILL_ME>);\n\tassert(result==\"YES\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 10}, {5, 15}", "fn": "intersection", "para": "( vector<int> interval1,vector<int> interval2)", "pass": true}
{"task_id": "CPP/127", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring intersection( vector<int> interval1,vector<int> interval2){\n    int inter1,inter2,l,i;\n    inter1=max(interval1[0],interval2[0]);\n    inter2=min(interval1[1],interval2[1]);\n    l=inter2-inter1;\n    if (l<2) return \"NO\";\n    for (i=2;i*i<=l;i++)\n        if (l%i==0) return \"NO\";\n    return \"YES\";\n}\nint main(){\n\tauto result = intersection(<FILL_ME>);\n\tassert(result==\"YES\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 5}, {4, 9}", "fn": "intersection", "para": "( vector<int> interval1,vector<int> interval2)", "pass": false}
{"task_id": "CPP/128", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\nint main(){\n\tauto result = prod_signs(<FILL_ME>);\n\tassert(result==20);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{2, -1, 4, -5}", "fn": "prod_signs", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/128", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\nint main(){\n\tauto result = prod_signs(<FILL_ME>);\n\tassert(result==20);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{-1, 2, -3, 4}", "fn": "prod_signs", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/128", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\nint main(){\n\tauto result = prod_signs(<FILL_ME>);\n\tassert(result==20);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, -2, 3, -4, 5, 6}", "fn": "prod_signs", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/128", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\nint main(){\n\tauto result = prod_signs(<FILL_ME>);\n\tassert(result==20);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{2, -3, 4, 5}", "fn": "prod_signs", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/128", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\nint main(){\n\tauto result = prod_signs(<FILL_ME>);\n\tassert(result==20);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{2, -3, 4, -5}", "fn": "prod_signs", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/128", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\nint main(){\n\tauto result = prod_signs(<FILL_ME>);\n\tassert(result==-10);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 2, 3, -4}", "fn": "prod_signs", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/128", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\nint main(){\n\tauto result = prod_signs(<FILL_ME>);\n\tassert(result==-10);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 2, 3, -4}", "fn": "prod_signs", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/128", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\nint main(){\n\tauto result = prod_signs(<FILL_ME>);\n\tassert(result==-10);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 2, 3, -4}", "fn": "prod_signs", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/128", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\nint main(){\n\tauto result = prod_signs(<FILL_ME>);\n\tassert(result==-10);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 2, 3, -4}", "fn": "prod_signs", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/128", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\nint main(){\n\tauto result = prod_signs(<FILL_ME>);\n\tassert(result==-10);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 2, 3, -4}", "fn": "prod_signs", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/128", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\nint main(){\n\tauto result = prod_signs(<FILL_ME>);\n\tassert(result==-32768);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{}", "fn": "prod_signs", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/128", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\nint main(){\n\tauto result = prod_signs(<FILL_ME>);\n\tassert(result==-32768);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{}", "fn": "prod_signs", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/128", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\nint main(){\n\tauto result = prod_signs(<FILL_ME>);\n\tassert(result==-32768);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{}", "fn": "prod_signs", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/128", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\nint main(){\n\tauto result = prod_signs(<FILL_ME>);\n\tassert(result==-32768);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{}", "fn": "prod_signs", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/128", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\nint main(){\n\tauto result = prod_signs(<FILL_ME>);\n\tassert(result==-32768);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{}", "fn": "prod_signs", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/128", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\nint main(){\n\tauto result = prod_signs(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{2, -2}", "fn": "prod_signs", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/128", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\nint main(){\n\tauto result = prod_signs(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{-1, 2, 2}", "fn": "prod_signs", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/128", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\nint main(){\n\tauto result = prod_signs(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{2, 2, -2}", "fn": "prod_signs", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/128", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\nint main(){\n\tauto result = prod_signs(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{2, 2}", "fn": "prod_signs", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/128", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\nint main(){\n\tauto result = prod_signs(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{-2, 2, -2}", "fn": "prod_signs", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/128", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\nint main(){\n\tauto result = prod_signs(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{0,0}", "fn": "prod_signs", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/128", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\nint main(){\n\tauto result = prod_signs(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{0, 0}", "fn": "prod_signs", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/128", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\nint main(){\n\tauto result = prod_signs(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{0,0}", "fn": "prod_signs", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/128", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\nint main(){\n\tauto result = prod_signs(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{0,0}", "fn": "prod_signs", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/128", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\nint main(){\n\tauto result = prod_signs(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{0,0}", "fn": "prod_signs", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/128", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\nint main(){\n\tauto result = prod_signs(<FILL_ME>);\n\tassert(result==-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{-1, -2, 2}", "fn": "prod_signs", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/128", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\nint main(){\n\tauto result = prod_signs(<FILL_ME>);\n\tassert(result==-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{2, -2}", "fn": "prod_signs", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/128", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\nint main(){\n\tauto result = prod_signs(<FILL_ME>);\n\tassert(result==-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{-1, 2, 2}", "fn": "prod_signs", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/128", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\nint main(){\n\tauto result = prod_signs(<FILL_ME>);\n\tassert(result==-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{-1, -2, 2}", "fn": "prod_signs", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/128", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\nint main(){\n\tauto result = prod_signs(<FILL_ME>);\n\tassert(result==-4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{-2, -2}", "fn": "prod_signs", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/128", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\nint main(){\n\tauto result = prod_signs(<FILL_ME>);\n\tassert(result==-9);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{-1, 3, 3}", "fn": "prod_signs", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/128", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\nint main(){\n\tauto result = prod_signs(<FILL_ME>);\n\tassert(result==-9);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{-3, -3}", "fn": "prod_signs", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/128", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\nint main(){\n\tauto result = prod_signs(<FILL_ME>);\n\tassert(result==-9);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{-3, -3}", "fn": "prod_signs", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/128", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\nint main(){\n\tauto result = prod_signs(<FILL_ME>);\n\tassert(result==-9);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{-1, -2, -3}", "fn": "prod_signs", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/128", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\nint main(){\n\tauto result = prod_signs(<FILL_ME>);\n\tassert(result==-9);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{3, -3, -3}", "fn": "prod_signs", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1,3,1,3,1,3,1,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<vector<int>>{{1,3,1},{3,1,3},{1,3,1}}, 8", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": true}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1,3,1,3,1,3,1,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<vector<int>>{{1,3,1},{4,1,6},{7,8,1}}, 8", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": false}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1,3,1,3,1,3,1,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<vector<int>>{{1,3,1},{3,1,3},{1,3,1}}, 8", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": true}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1,3,1,3,1,3,1,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<vector<int>>{{1,3,1},{3,4,6},{7,8,9}}, 8", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": true}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1,3,1,3,1,3,1,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<vector<int>>{{1,3,1},{3,1,3},{1,3,1}}, 8", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": true}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1,6,1,6,1,6,1,6,1,6,1,6}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<vector<int>>{{1, 1, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6}}, 6", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": false}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1,6,1,6,1,6,1,6,1,6,1,6}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<vector<int>>{{1, 1, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6}}, 6", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": false}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1,6,1,6,1,6,1,6,1,6,1,6}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<vector<int>>{{1, 1, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6}}, 6", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": false}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1,6,1,6,1,6,1,6,1,6,1,6}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<vector<int>>{{1, 1, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6}, 6}", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": false}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1,6,1,6,1,6,1,6,1,6,1,6}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<vector<int>>{{1, 1, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6}}, 6", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": false}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1,6,1,6,1,6,1,6,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<vector<int>>{{1,4,1},{6,1,3},{1,6,1}}, 9", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": false}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1,6,1,6,1,6,1,6,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<vector<int>>{{1,4,1},{6,1,3},{1,6,1}}, 9", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": false}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1,6,1,6,1,6,1,6,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<vector<int>>{{1,4,1},{6,1,3},{1,6,1}}, 9", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": false}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1,6,1,6,1,6,1,6,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<vector<int>>{{1,4,1},{6,1,3},{1,6,1}}, 9", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": false}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1,6,1,6,1,6,1,6,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<vector<int>>{{1,4,1},{6,1,3},{1,6,1}}, 9", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": false}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{ {1, 1, 1}, {0, 1, 0}, {0, 1, 0} }, 1", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": true}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{ {1, 1, 1}, {0, 1, 0}, {0, 1, 0} }, 1", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": true}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{ {1, 1, 1}, {0, 1, 0}, {0, 1, 0} }, 1", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": true}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{{1, 1, 1}, {0, 1, 0}, {0, 1, 0}}, 1", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": true}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{ {1, 1, 1}, {0, 1, 0}, {0, 1, 0} }, 1", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": true}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1,5,1,5,1,5,1,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<vector<int>>{{1,2,3},{4,1,6},{7,8,1}}, 8", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": false}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1,5,1,5,1,5,1,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<vector<int>>{{1,2,3},{4,1,6},{7,8,1}}, 8", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": false}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1,5,1,5,1,5,1,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{{1,2,3},{4,1,6},{7,8,1}}, 8", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": false}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1,5,1,5,1,5,1,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<vector<int>>{{1,2,3},{4,1,6},{7,8,1}}, 8", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": false}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1,5,1,5,1,5,1,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<vector<int>>{{1,5,1},{5,1,5},{1,5,1}}, 8", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": true}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1,2,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{{1, 2, 1}, 1}", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": false}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1,2,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{{1, 2, 1}, 1}", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": false}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1,2,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<vector<int>>{{1, 2, 1}, 1}, 3", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": false}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1,2,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{{1, 2, 1}}, 3", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": false}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1,2,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{{1, 2, 1}, 1}", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": false}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1,10,1,10,1,10,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{{1, 10, 1}, {10, 1, 10}, {1, 10, 1}}, 10", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": false}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1,10,1,10,1,10,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{{1, 10, 1}, {10, 1, 10}, {1, 10, 1}}, 10", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": false}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1,10,1,10,1,10,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{{1, 10, 1}, {10, 1, 10}, {1, 10, 1}}, 10", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": false}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1,10,1,10,1,10,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{{1, 10, 1}, {10, 1, 10}, {1, 10, 1}}, 10", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": false}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1,10,1,10,1,10,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{{1, 10, 1}, {10, 1, 10}, {1, 10, 1}}, 10", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": false}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1,2,1,2,1,2,1,2,1,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<vector<int>>{{1, 2, 3}, {2, 1, 2}, {3, 2, 1}}, 10", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": true}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1,2,1,2,1,2,1,2,1,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<vector<int>>{{1, 2, 3}, {2, 1, 2}, {3, 2, 1}}, 10", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": true}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1,2,1,2,1,2,1,2,1,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<vector<int>>{{1, 2, 3}, {2, 1, 2}, {3, 2, 1}}, 10", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": true}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1,2,1,2,1,2,1,2,1,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<vector<int>>{{1, 2, 3}, {2, 1, 2}, {3, 2, 1}}, 10", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": true}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1,2,1,2,1,2,1,2,1,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<vector<int>>{{1, 2, 3}, {2, 1, 2}, {3, 2, 1}}, 10", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": true}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1,2,1,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{{1, 2, 1, 2}}, 4", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": false}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1,2,1,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<vector<int>>{{1, 2, 1, 2}, 1}", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": false}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1,2,1,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<vector<int>>{{1, 2, 1, 2}, 1}", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": false}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1,2,1,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<vector<int>>{{1, 2, 1, 2}, 1}", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": false}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1,2,1,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<vector<int>>{{1, 2, 1, 2}, 1}", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": false}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1,3,1,3,1,3,1,3,1,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{{1, 3, 2}, {3, 1, 2}, {2, 2, 3}}, 10", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": false}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1,3,1,3,1,3,1,3,1,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{{1, 3, 2}, {2, 1, 3}, {3, 2, 1}}, 10", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": false}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1,3,1,3,1,3,1,3,1,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{{1,3,1},{2,1,3},{1,3,2}}, 10", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": false}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1,3,1,3,1,3,1,3,1,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{{1, 3, 2}, {3, 1, 2}, {2, 2, 3}}, 10", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": false}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1,3,1,3,1,3,1,3,1,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{{3, 2, 1}, {2, 1, 3}, {1, 3, 2}}, 10", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": false}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1,7,1,7,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<vector<int>>{{1,7,1},{1,1,1},{1,7,1}}, 5", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": false}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1,7,1,7,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<vector<int>>{{1, 7, 1}, {1, 1, 1}, {1, 7, 1}}, 5", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": false}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1,7,1,7,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{{1, 7, 1}, {1, 1, 1}, {1, 7, 1}}, 5", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": false}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1,7,1,7,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<vector<int>>{{1, 7, 1}, {1, 1, 1}, {1, 7, 1}}, 5", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": false}
{"task_id": "CPP/129", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\nint main(){\n\tauto result = minPath(<FILL_ME>);\n\tassert(issame(result,{1,7,1,7,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{{1, 7, 1}, {1, 1, 1}, {1, 7, 1}}, 5", "fn": "minPath", "para": "(vector<vector<int>> grid, int k)", "pass": false}
{"task_id": "CPP/130", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\nint main(){\n\tauto result = tri(<FILL_ME>);\n\tassert(issame(result,{1,3,2,8,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "4", "fn": "tri", "para": "(int n)", "pass": true}
{"task_id": "CPP/130", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\nint main(){\n\tauto result = tri(<FILL_ME>);\n\tassert(issame(result,{1,3,2,8,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "4", "fn": "tri", "para": "(int n)", "pass": true}
{"task_id": "CPP/130", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\nint main(){\n\tauto result = tri(<FILL_ME>);\n\tassert(issame(result,{1,3,2,8,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "4", "fn": "tri", "para": "(int n)", "pass": true}
{"task_id": "CPP/130", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\nint main(){\n\tauto result = tri(<FILL_ME>);\n\tassert(issame(result,{1,3,2,8,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "4", "fn": "tri", "para": "(int n)", "pass": true}
{"task_id": "CPP/130", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\nint main(){\n\tauto result = tri(<FILL_ME>);\n\tassert(issame(result,{1,3,2,8,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "4", "fn": "tri", "para": "(int n)", "pass": true}
{"task_id": "CPP/130", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\nint main(){\n\tauto result = tri(<FILL_ME>);\n\tassert(issame(result,{1,3,2,8,3,15,4,24,5,35,6,48,7,63,8,80,9,99,10,120,11}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "20", "fn": "tri", "para": "(int n)", "pass": true}
{"task_id": "CPP/130", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\nint main(){\n\tauto result = tri(<FILL_ME>);\n\tassert(issame(result,{1,3,2,8,3,15,4,24,5,35,6,48,7,63,8,80,9,99,10,120,11}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "20", "fn": "tri", "para": "(int n)", "pass": true}
{"task_id": "CPP/130", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\nint main(){\n\tauto result = tri(<FILL_ME>);\n\tassert(issame(result,{1,3,2,8,3,15,4,24,5,35,6,48,7,63,8,80,9,99,10,120,11}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "20", "fn": "tri", "para": "(int n)", "pass": true}
{"task_id": "CPP/130", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\nint main(){\n\tauto result = tri(<FILL_ME>);\n\tassert(issame(result,{1,3,2,8,3,15,4,24,5,35,6,48,7,63,8,80,9,99,10,120,11}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "20", "fn": "tri", "para": "(int n)", "pass": true}
{"task_id": "CPP/130", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\nint main(){\n\tauto result = tri(<FILL_ME>);\n\tassert(issame(result,{1,3,2,8,3,15,4,24,5,35,6,48,7,63,8,80,9,99,10,120,11}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "20", "fn": "tri", "para": "(int n)", "pass": true}
{"task_id": "CPP/130", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\nint main(){\n\tauto result = tri(<FILL_ME>);\n\tassert(issame(result,{1,3,2,8,3,15,4,24,5,35}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "9", "fn": "tri", "para": "(int n)", "pass": true}
{"task_id": "CPP/130", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\nint main(){\n\tauto result = tri(<FILL_ME>);\n\tassert(issame(result,{1,3,2,8,3,15,4,24,5,35}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "9", "fn": "tri", "para": "(int n)", "pass": true}
{"task_id": "CPP/130", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\nint main(){\n\tauto result = tri(<FILL_ME>);\n\tassert(issame(result,{1,3,2,8,3,15,4,24,5,35}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "9", "fn": "tri", "para": "(int n)", "pass": true}
{"task_id": "CPP/130", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\nint main(){\n\tauto result = tri(<FILL_ME>);\n\tassert(issame(result,{1,3,2,8,3,15,4,24,5,35}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "9", "fn": "tri", "para": "(int n)", "pass": true}
{"task_id": "CPP/130", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\nint main(){\n\tauto result = tri(<FILL_ME>);\n\tassert(issame(result,{1,3,2,8,3,15,4,24,5,35}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "9", "fn": "tri", "para": "(int n)", "pass": true}
{"task_id": "CPP/130", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\nint main(){\n\tauto result = tri(<FILL_ME>);\n\tassert(issame(result,{1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "0", "fn": "tri", "para": "(int n)", "pass": true}
{"task_id": "CPP/130", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\nint main(){\n\tauto result = tri(<FILL_ME>);\n\tassert(issame(result,{1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "0", "fn": "tri", "para": "(int n)", "pass": true}
{"task_id": "CPP/130", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\nint main(){\n\tauto result = tri(<FILL_ME>);\n\tassert(issame(result,{1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "0", "fn": "tri", "para": "(int n)", "pass": true}
{"task_id": "CPP/130", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\nint main(){\n\tauto result = tri(<FILL_ME>);\n\tassert(issame(result,{1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "0", "fn": "tri", "para": "(int n)", "pass": true}
{"task_id": "CPP/130", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\nint main(){\n\tauto result = tri(<FILL_ME>);\n\tassert(issame(result,{1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "0", "fn": "tri", "para": "(int n)", "pass": true}
{"task_id": "CPP/130", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\nint main(){\n\tauto result = tri(<FILL_ME>);\n\tassert(issame(result,{1,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "0", "fn": "tri", "para": "(int n)", "pass": false}
{"task_id": "CPP/130", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\nint main(){\n\tauto result = tri(<FILL_ME>);\n\tassert(issame(result,{1,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "0", "fn": "tri", "para": "(int n)", "pass": false}
{"task_id": "CPP/130", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\nint main(){\n\tauto result = tri(<FILL_ME>);\n\tassert(issame(result,{1,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "0", "fn": "tri", "para": "(int n)", "pass": false}
{"task_id": "CPP/130", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\nint main(){\n\tauto result = tri(<FILL_ME>);\n\tassert(issame(result,{1,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "0", "fn": "tri", "para": "(int n)", "pass": false}
{"task_id": "CPP/130", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\nint main(){\n\tauto result = tri(<FILL_ME>);\n\tassert(issame(result,{1,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "0", "fn": "tri", "para": "(int n)", "pass": false}
{"task_id": "CPP/130", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\nint main(){\n\tauto result = tri(<FILL_ME>);\n\tassert(issame(result,{1,3,2,8,3,15,4,24}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "7", "fn": "tri", "para": "(int n)", "pass": true}
{"task_id": "CPP/130", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\nint main(){\n\tauto result = tri(<FILL_ME>);\n\tassert(issame(result,{1,3,2,8,3,15,4,24}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "7", "fn": "tri", "para": "(int n)", "pass": true}
{"task_id": "CPP/130", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\nint main(){\n\tauto result = tri(<FILL_ME>);\n\tassert(issame(result,{1,3,2,8,3,15,4,24}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "7", "fn": "tri", "para": "(int n)", "pass": true}
{"task_id": "CPP/130", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\nint main(){\n\tauto result = tri(<FILL_ME>);\n\tassert(issame(result,{1,3,2,8,3,15,4,24}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "7", "fn": "tri", "para": "(int n)", "pass": true}
{"task_id": "CPP/130", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\nint main(){\n\tauto result = tri(<FILL_ME>);\n\tassert(issame(result,{1,3,2,8,3,15,4,24}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "7", "fn": "tri", "para": "(int n)", "pass": true}
{"task_id": "CPP/130", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\nint main(){\n\tauto result = tri(<FILL_ME>);\n\tassert(issame(result,{1,3,2,8}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "3", "fn": "tri", "para": "(int n)", "pass": true}
{"task_id": "CPP/130", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\nint main(){\n\tauto result = tri(<FILL_ME>);\n\tassert(issame(result,{1,3,2,8}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "3", "fn": "tri", "para": "(int n)", "pass": true}
{"task_id": "CPP/130", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\nint main(){\n\tauto result = tri(<FILL_ME>);\n\tassert(issame(result,{1,3,2,8}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "3", "fn": "tri", "para": "(int n)", "pass": true}
{"task_id": "CPP/130", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\nint main(){\n\tauto result = tri(<FILL_ME>);\n\tassert(issame(result,{1,3,2,8}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "3", "fn": "tri", "para": "(int n)", "pass": true}
{"task_id": "CPP/130", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\nint main(){\n\tauto result = tri(<FILL_ME>);\n\tassert(issame(result,{1,3,2,8}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "3", "fn": "tri", "para": "(int n)", "pass": true}
{"task_id": "CPP/130", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\nint main(){\n\tauto result = tri(<FILL_ME>);\n\tassert(issame(result,{1,3,2,8,3,15,4,24,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "9", "fn": "tri", "para": "(int n)", "pass": false}
{"task_id": "CPP/130", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\nint main(){\n\tauto result = tri(<FILL_ME>);\n\tassert(issame(result,{1,3,2,8,3,15,4,24,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "9", "fn": "tri", "para": "(int n)", "pass": false}
{"task_id": "CPP/130", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\nint main(){\n\tauto result = tri(<FILL_ME>);\n\tassert(issame(result,{1,3,2,8,3,15,4,24,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "9", "fn": "tri", "para": "(int n)", "pass": false}
{"task_id": "CPP/130", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\nint main(){\n\tauto result = tri(<FILL_ME>);\n\tassert(issame(result,{1,3,2,8,3,15,4,24,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "9", "fn": "tri", "para": "(int n)", "pass": false}
{"task_id": "CPP/130", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\nint main(){\n\tauto result = tri(<FILL_ME>);\n\tassert(issame(result,{1,3,2,8,3,15,4,24,5}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "8", "fn": "tri", "para": "(int n)", "pass": true}
{"task_id": "CPP/130", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\nint main(){\n\tauto result = tri(<FILL_ME>);\n\tassert(issame(result,{1,3,2,8,3,15,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "6", "fn": "tri", "para": "(int n)", "pass": true}
{"task_id": "CPP/130", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\nint main(){\n\tauto result = tri(<FILL_ME>);\n\tassert(issame(result,{1,3,2,8,3,15,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "6", "fn": "tri", "para": "(int n)", "pass": true}
{"task_id": "CPP/130", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\nint main(){\n\tauto result = tri(<FILL_ME>);\n\tassert(issame(result,{1,3,2,8,3,15,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "6", "fn": "tri", "para": "(int n)", "pass": true}
{"task_id": "CPP/130", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\nint main(){\n\tauto result = tri(<FILL_ME>);\n\tassert(issame(result,{1,3,2,8,3,15,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "6", "fn": "tri", "para": "(int n)", "pass": true}
{"task_id": "CPP/130", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\nint main(){\n\tauto result = tri(<FILL_ME>);\n\tassert(issame(result,{1,3,2,8,3,15,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "6", "fn": "tri", "para": "(int n)", "pass": true}
{"task_id": "CPP/130", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\nint main(){\n\tauto result = tri(<FILL_ME>);\n\tassert(issame(result,{1,3,2,8,3,15}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "5", "fn": "tri", "para": "(int n)", "pass": true}
{"task_id": "CPP/130", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\nint main(){\n\tauto result = tri(<FILL_ME>);\n\tassert(issame(result,{1,3,2,8,3,15}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "5", "fn": "tri", "para": "(int n)", "pass": true}
{"task_id": "CPP/130", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\nint main(){\n\tauto result = tri(<FILL_ME>);\n\tassert(issame(result,{1,3,2,8,3,15}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "5", "fn": "tri", "para": "(int n)", "pass": true}
{"task_id": "CPP/130", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\nint main(){\n\tauto result = tri(<FILL_ME>);\n\tassert(issame(result,{1,3,2,8,3,15}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "5", "fn": "tri", "para": "(int n)", "pass": true}
{"task_id": "CPP/130", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\nint main(){\n\tauto result = tri(<FILL_ME>);\n\tassert(issame(result,{1,3,2,8,3,15}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "5", "fn": "tri", "para": "(int n)", "pass": true}
{"task_id": "CPP/131", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint digits(int n){\n    int prod=1,has=0;\n    string s=to_string(n);\n    for (int i=0;i<s.length();i++)\n        if (s[i]%2==1) \n        {\n            has=1;\n            prod=prod*(s[i]-48);\n        }\n    if (has==0) return 0;\n    return prod;\n}\nint main(){\n\tauto result = digits(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "7", "fn": "digits", "para": "(int n)", "pass": false}
{"task_id": "CPP/131", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint digits(int n){\n    int prod=1,has=0;\n    string s=to_string(n);\n    for (int i=0;i<s.length();i++)\n        if (s[i]%2==1) \n        {\n            has=1;\n            prod=prod*(s[i]-48);\n        }\n    if (has==0) return 0;\n    return prod;\n}\nint main(){\n\tauto result = digits(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "7", "fn": "digits", "para": "(int n)", "pass": false}
{"task_id": "CPP/131", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint digits(int n){\n    int prod=1,has=0;\n    string s=to_string(n);\n    for (int i=0;i<s.length();i++)\n        if (s[i]%2==1) \n        {\n            has=1;\n            prod=prod*(s[i]-48);\n        }\n    if (has==0) return 0;\n    return prod;\n}\nint main(){\n\tauto result = digits(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "7", "fn": "digits", "para": "(int n)", "pass": false}
{"task_id": "CPP/131", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint digits(int n){\n    int prod=1,has=0;\n    string s=to_string(n);\n    for (int i=0;i<s.length();i++)\n        if (s[i]%2==1) \n        {\n            has=1;\n            prod=prod*(s[i]-48);\n        }\n    if (has==0) return 0;\n    return prod;\n}\nint main(){\n\tauto result = digits(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "7", "fn": "digits", "para": "(int n)", "pass": false}
{"task_id": "CPP/131", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint digits(int n){\n    int prod=1,has=0;\n    string s=to_string(n);\n    for (int i=0;i<s.length();i++)\n        if (s[i]%2==1) \n        {\n            has=1;\n            prod=prod*(s[i]-48);\n        }\n    if (has==0) return 0;\n    return prod;\n}\nint main(){\n\tauto result = digits(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "7", "fn": "digits", "para": "(int n)", "pass": false}
{"task_id": "CPP/131", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint digits(int n){\n    int prod=1,has=0;\n    string s=to_string(n);\n    for (int i=0;i<s.length();i++)\n        if (s[i]%2==1) \n        {\n            has=1;\n            prod=prod*(s[i]-48);\n        }\n    if (has==0) return 0;\n    return prod;\n}\nint main(){\n\tauto result = digits(<FILL_ME>);\n\tassert(result==2625);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1359", "fn": "digits", "para": "(int n)", "pass": false}
{"task_id": "CPP/131", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint digits(int n){\n    int prod=1,has=0;\n    string s=to_string(n);\n    for (int i=0;i<s.length();i++)\n        if (s[i]%2==1) \n        {\n            has=1;\n            prod=prod*(s[i]-48);\n        }\n    if (has==0) return 0;\n    return prod;\n}\nint main(){\n\tauto result = digits(<FILL_ME>);\n\tassert(result==2625);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1359", "fn": "digits", "para": "(int n)", "pass": false}
{"task_id": "CPP/131", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint digits(int n){\n    int prod=1,has=0;\n    string s=to_string(n);\n    for (int i=0;i<s.length();i++)\n        if (s[i]%2==1) \n        {\n            has=1;\n            prod=prod*(s[i]-48);\n        }\n    if (has==0) return 0;\n    return prod;\n}\nint main(){\n\tauto result = digits(<FILL_ME>);\n\tassert(result==2625);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1359", "fn": "digits", "para": "(int n)", "pass": false}
{"task_id": "CPP/131", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint digits(int n){\n    int prod=1,has=0;\n    string s=to_string(n);\n    for (int i=0;i<s.length();i++)\n        if (s[i]%2==1) \n        {\n            has=1;\n            prod=prod*(s[i]-48);\n        }\n    if (has==0) return 0;\n    return prod;\n}\nint main(){\n\tauto result = digits(<FILL_ME>);\n\tassert(result==2625);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1357", "fn": "digits", "para": "(int n)", "pass": false}
{"task_id": "CPP/131", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint digits(int n){\n    int prod=1,has=0;\n    string s=to_string(n);\n    for (int i=0;i<s.length();i++)\n        if (s[i]%2==1) \n        {\n            has=1;\n            prod=prod*(s[i]-48);\n        }\n    if (has==0) return 0;\n    return prod;\n}\nint main(){\n\tauto result = digits(<FILL_ME>);\n\tassert(result==2625);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "13579", "fn": "digits", "para": "(int n)", "pass": false}
{"task_id": "CPP/131", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint digits(int n){\n    int prod=1,has=0;\n    string s=to_string(n);\n    for (int i=0;i<s.length();i++)\n        if (s[i]%2==1) \n        {\n            has=1;\n            prod=prod*(s[i]-48);\n        }\n    if (has==0) return 0;\n    return prod;\n}\nint main(){\n\tauto result = digits(<FILL_ME>);\n\tassert(result==315);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "315", "fn": "digits", "para": "(int n)", "pass": false}
{"task_id": "CPP/131", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint digits(int n){\n    int prod=1,has=0;\n    string s=to_string(n);\n    for (int i=0;i<s.length();i++)\n        if (s[i]%2==1) \n        {\n            has=1;\n            prod=prod*(s[i]-48);\n        }\n    if (has==0) return 0;\n    return prod;\n}\nint main(){\n\tauto result = digits(<FILL_ME>);\n\tassert(result==315);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "315", "fn": "digits", "para": "(int n)", "pass": false}
{"task_id": "CPP/131", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint digits(int n){\n    int prod=1,has=0;\n    string s=to_string(n);\n    for (int i=0;i<s.length();i++)\n        if (s[i]%2==1) \n        {\n            has=1;\n            prod=prod*(s[i]-48);\n        }\n    if (has==0) return 0;\n    return prod;\n}\nint main(){\n\tauto result = digits(<FILL_ME>);\n\tassert(result==315);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "315", "fn": "digits", "para": "(int n)", "pass": false}
{"task_id": "CPP/131", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint digits(int n){\n    int prod=1,has=0;\n    string s=to_string(n);\n    for (int i=0;i<s.length();i++)\n        if (s[i]%2==1) \n        {\n            has=1;\n            prod=prod*(s[i]-48);\n        }\n    if (has==0) return 0;\n    return prod;\n}\nint main(){\n\tauto result = digits(<FILL_ME>);\n\tassert(result==315);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "315", "fn": "digits", "para": "(int n)", "pass": false}
{"task_id": "CPP/131", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint digits(int n){\n    int prod=1,has=0;\n    string s=to_string(n);\n    for (int i=0;i<s.length();i++)\n        if (s[i]%2==1) \n        {\n            has=1;\n            prod=prod*(s[i]-48);\n        }\n    if (has==0) return 0;\n    return prod;\n}\nint main(){\n\tauto result = digits(<FILL_ME>);\n\tassert(result==315);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "315", "fn": "digits", "para": "(int n)", "pass": false}
{"task_id": "CPP/131", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint digits(int n){\n    int prod=1,has=0;\n    string s=to_string(n);\n    for (int i=0;i<s.length();i++)\n        if (s[i]%2==1) \n        {\n            has=1;\n            prod=prod*(s[i]-48);\n        }\n    if (has==0) return 0;\n    return prod;\n}\nint main(){\n\tauto result = digits(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "25", "fn": "digits", "para": "(int n)", "pass": true}
{"task_id": "CPP/131", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint digits(int n){\n    int prod=1,has=0;\n    string s=to_string(n);\n    for (int i=0;i<s.length();i++)\n        if (s[i]%2==1) \n        {\n            has=1;\n            prod=prod*(s[i]-48);\n        }\n    if (has==0) return 0;\n    return prod;\n}\nint main(){\n\tauto result = digits(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "25", "fn": "digits", "para": "(int n)", "pass": true}
{"task_id": "CPP/131", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint digits(int n){\n    int prod=1,has=0;\n    string s=to_string(n);\n    for (int i=0;i<s.length();i++)\n        if (s[i]%2==1) \n        {\n            has=1;\n            prod=prod*(s[i]-48);\n        }\n    if (has==0) return 0;\n    return prod;\n}\nint main(){\n\tauto result = digits(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "25", "fn": "digits", "para": "(int n)", "pass": true}
{"task_id": "CPP/131", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint digits(int n){\n    int prod=1,has=0;\n    string s=to_string(n);\n    for (int i=0;i<s.length();i++)\n        if (s[i]%2==1) \n        {\n            has=1;\n            prod=prod*(s[i]-48);\n        }\n    if (has==0) return 0;\n    return prod;\n}\nint main(){\n\tauto result = digits(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "25", "fn": "digits", "para": "(int n)", "pass": true}
{"task_id": "CPP/131", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint digits(int n){\n    int prod=1,has=0;\n    string s=to_string(n);\n    for (int i=0;i<s.length();i++)\n        if (s[i]%2==1) \n        {\n            has=1;\n            prod=prod*(s[i]-48);\n        }\n    if (has==0) return 0;\n    return prod;\n}\nint main(){\n\tauto result = digits(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "25", "fn": "digits", "para": "(int n)", "pass": true}
{"task_id": "CPP/131", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint digits(int n){\n    int prod=1,has=0;\n    string s=to_string(n);\n    for (int i=0;i<s.length();i++)\n        if (s[i]%2==1) \n        {\n            has=1;\n            prod=prod*(s[i]-48);\n        }\n    if (has==0) return 0;\n    return prod;\n}\nint main(){\n\tauto result = digits(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "2468", "fn": "digits", "para": "(int n)", "pass": true}
{"task_id": "CPP/131", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint digits(int n){\n    int prod=1,has=0;\n    string s=to_string(n);\n    for (int i=0;i<s.length();i++)\n        if (s[i]%2==1) \n        {\n            has=1;\n            prod=prod*(s[i]-48);\n        }\n    if (has==0) return 0;\n    return prod;\n}\nint main(){\n\tauto result = digits(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "2468", "fn": "digits", "para": "(int n)", "pass": true}
{"task_id": "CPP/131", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint digits(int n){\n    int prod=1,has=0;\n    string s=to_string(n);\n    for (int i=0;i<s.length();i++)\n        if (s[i]%2==1) \n        {\n            has=1;\n            prod=prod*(s[i]-48);\n        }\n    if (has==0) return 0;\n    return prod;\n}\nint main(){\n\tauto result = digits(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "2468", "fn": "digits", "para": "(int n)", "pass": true}
{"task_id": "CPP/131", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint digits(int n){\n    int prod=1,has=0;\n    string s=to_string(n);\n    for (int i=0;i<s.length();i++)\n        if (s[i]%2==1) \n        {\n            has=1;\n            prod=prod*(s[i]-48);\n        }\n    if (has==0) return 0;\n    return prod;\n}\nint main(){\n\tauto result = digits(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "2468", "fn": "digits", "para": "(int n)", "pass": true}
{"task_id": "CPP/131", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint digits(int n){\n    int prod=1,has=0;\n    string s=to_string(n);\n    for (int i=0;i<s.length();i++)\n        if (s[i]%2==1) \n        {\n            has=1;\n            prod=prod*(s[i]-48);\n        }\n    if (has==0) return 0;\n    return prod;\n}\nint main(){\n\tauto result = digits(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "2468", "fn": "digits", "para": "(int n)", "pass": true}
{"task_id": "CPP/132", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_nested(string str){\n    int count=0,maxcount=0;\n    for (int i=0;i<str.length();i++)\n    {\n        if (str[i]=='[') count+=1;\n        if (str[i]==']') count-=1;\n        if (count<0) count=0;\n        if (count>maxcount) maxcount=count;\n        if (count<=maxcount-2) return  true;\n    }\n    return false;\n}\nint main(){\n\tauto result = is_nested(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"ab[c[d]ef]\"", "fn": "is_nested", "para": "(string str)", "pass": true}
{"task_id": "CPP/132", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_nested(string str){\n    int count=0,maxcount=0;\n    for (int i=0;i<str.length();i++)\n    {\n        if (str[i]=='[') count+=1;\n        if (str[i]==']') count-=1;\n        if (count<0) count=0;\n        if (count>maxcount) maxcount=count;\n        if (count<=maxcount-2) return  true;\n    }\n    return false;\n}\nint main(){\n\tauto result = is_nested(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"ab[c[d]ef]\"", "fn": "is_nested", "para": "(string str)", "pass": true}
{"task_id": "CPP/132", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_nested(string str){\n    int count=0,maxcount=0;\n    for (int i=0;i<str.length();i++)\n    {\n        if (str[i]=='[') count+=1;\n        if (str[i]==']') count-=1;\n        if (count<0) count=0;\n        if (count>maxcount) maxcount=count;\n        if (count<=maxcount-2) return  true;\n    }\n    return false;\n}\nint main(){\n\tauto result = is_nested(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"ab[c[d]ef]\"", "fn": "is_nested", "para": "(string str)", "pass": true}
{"task_id": "CPP/132", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_nested(string str){\n    int count=0,maxcount=0;\n    for (int i=0;i<str.length();i++)\n    {\n        if (str[i]=='[') count+=1;\n        if (str[i]==']') count-=1;\n        if (count<0) count=0;\n        if (count>maxcount) maxcount=count;\n        if (count<=maxcount-2) return  true;\n    }\n    return false;\n}\nint main(){\n\tauto result = is_nested(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"ab[c[d]ef]\"", "fn": "is_nested", "para": "(string str)", "pass": true}
{"task_id": "CPP/132", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_nested(string str){\n    int count=0,maxcount=0;\n    for (int i=0;i<str.length();i++)\n    {\n        if (str[i]=='[') count+=1;\n        if (str[i]==']') count-=1;\n        if (count<0) count=0;\n        if (count>maxcount) maxcount=count;\n        if (count<=maxcount-2) return  true;\n    }\n    return false;\n}\nint main(){\n\tauto result = is_nested(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"ab[c[d]ef]\"", "fn": "is_nested", "para": "(string str)", "pass": true}
{"task_id": "CPP/132", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_nested(string str){\n    int count=0,maxcount=0;\n    for (int i=0;i<str.length();i++)\n    {\n        if (str[i]=='[') count+=1;\n        if (str[i]==']') count-=1;\n        if (count<0) count=0;\n        if (count>maxcount) maxcount=count;\n        if (count<=maxcount-2) return  true;\n    }\n    return false;\n}\nint main(){\n\tauto result = is_nested(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"is_nested('hello[world]')\"", "fn": "is_nested", "para": "(string str)", "pass": true}
{"task_id": "CPP/132", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_nested(string str){\n    int count=0,maxcount=0;\n    for (int i=0;i<str.length();i++)\n    {\n        if (str[i]=='[') count+=1;\n        if (str[i]==']') count-=1;\n        if (count<0) count=0;\n        if (count>maxcount) maxcount=count;\n        if (count<=maxcount-2) return  true;\n    }\n    return false;\n}\nint main(){\n\tauto result = is_nested(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"is_nested(\\\"This is a test\\\")\"", "fn": "is_nested", "para": "(string str)", "pass": true}
{"task_id": "CPP/132", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_nested(string str){\n    int count=0,maxcount=0;\n    for (int i=0;i<str.length();i++)\n    {\n        if (str[i]=='[') count+=1;\n        if (str[i]==']') count-=1;\n        if (count<0) count=0;\n        if (count>maxcount) maxcount=count;\n        if (count<=maxcount-2) return  true;\n    }\n    return false;\n}\nint main(){\n\tauto result = is_nested(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"is_nested('hello[world]')\"", "fn": "is_nested", "para": "(string str)", "pass": true}
{"task_id": "CPP/132", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_nested(string str){\n    int count=0,maxcount=0;\n    for (int i=0;i<str.length();i++)\n    {\n        if (str[i]=='[') count+=1;\n        if (str[i]==']') count-=1;\n        if (count<0) count=0;\n        if (count>maxcount) maxcount=count;\n        if (count<=maxcount-2) return  true;\n    }\n    return false;\n}\nint main(){\n\tauto result = is_nested(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"is_nested('hello[world]')\"", "fn": "is_nested", "para": "(string str)", "pass": true}
{"task_id": "CPP/132", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_nested(string str){\n    int count=0,maxcount=0;\n    for (int i=0;i<str.length();i++)\n    {\n        if (str[i]=='[') count+=1;\n        if (str[i]==']') count-=1;\n        if (count<0) count=0;\n        if (count>maxcount) maxcount=count;\n        if (count<=maxcount-2) return  true;\n    }\n    return false;\n}\nint main(){\n\tauto result = is_nested(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"is_nested('hello[world]')\"", "fn": "is_nested", "para": "(string str)", "pass": true}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{0.5}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": true}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{0.5}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": true}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{0.5}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": true}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{0.5}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": true}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{0.5}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": true}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==14);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1.2, 2.3}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": false}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==14);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{3.5, 2.3, 1.2}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": false}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==14);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1.5, 1.5, 1.5}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": false}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==14);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1.5, 1.5}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": false}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==14);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1.2, 2.3}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": false}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==200000000);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{7071.07, 7071.07, 7071.07, 7071.07}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": false}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==200000000);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{7071.07, 7071.07, 7071.07, 7071.07}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": false}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==200000000);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{7071.07, 7071.07, 7071.07, 7071.07}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": false}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==200000000);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{7071.07, 7071.07, 7071.07, 7071.07}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": false}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==200000000);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{7071.07, 7071.07, 7071.07, 7071.07}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": false}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==29);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{1.5, 2.3, 3.8}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": true}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==29);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{1.5, 2.3, 3.8}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": true}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==29);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{1.5, 2.3, 3.8}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": true}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==29);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{1.5, 2.3, 3.8}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": true}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==29);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{1.5, 2.3, 3.8}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": true}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1.4, -1.7}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": false}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1.0, -1.0}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": true}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, -1}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": true}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1.0, -1.0}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": true}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1.0, -1.0}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": true}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==6);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{1.5, 2.3}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": false}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==6);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{1.5, 2.3}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": false}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==6);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{1.5, 2.3}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": false}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==6);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{1.5, 2.3}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": false}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==6);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{1.5, 2.3}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": false}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==75);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{2.3, 3.4, 4.5}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": false}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==75);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{2.3, 3.4, 4.5}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": false}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==75);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{4.5, -6.7, 5.8}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": false}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==75);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{2.3, 3.4, 4.5}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": false}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==75);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{3.4, 4.5, 5.6}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": false}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==1086);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{5.5, 6.7, 7.8, 8.9}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": false}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==1086);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{6.5, 7.3, 8.8, 9.2, 10.6}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": false}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==1086);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{3.14, 4.2, 5.6, 6.7}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": false}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==1086);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{7.8, 8.9, 9.2, 10.5, 11.7, 12.3}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": false}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==1086);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{9.1, 11.2, 13.3, 14.4}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": false}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==10230);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{10.5, 20.3, 30.7, 40.9}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": false}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==10230);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{10.5, 20.3, 30.1, 40.7, 50.9}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": false}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==10230);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{10.5, 20.3, 30.7, 40.9}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": false}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==10230);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{10.5, 20.3, 30.7, 40.9}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": false}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==10230);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{10.5, 20.3, 30.1, 40.7, 50.9}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": false}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{0.0, 0.0, 0.0}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": true}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{0.0, 0.0, 0.0}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": true}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{0.0, 0.0, 0.0}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": true}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{0.0, 0.0, 0.0}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": true}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{0.0, 0.0, 0.0}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": true}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==84);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{3.5, 4.2, 5.1}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": false}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==84);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{4.0, 3.0, 5.0}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": false}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==84);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{3.5, 4.2, 5.1}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": false}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==84);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{3.5, 4.2, 5.1}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": false}
{"task_id": "CPP/133", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==84);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{3.5, -2.3, 4.8, 2.1}", "fn": "sum_squares", "para": "(vector<float> lst)", "pass": false}
{"task_id": "CPP/134", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool check_if_last_char_is_a_letter(string txt){\n    if (txt.length()==0) return false;\n    char chr=txt[txt.length()-1];\n    if (chr<65 or (chr>90 and chr<97) or chr>122) return false;\n    if (txt.length()==1) return true;\n    chr=txt[txt.length()-2];\n    if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;\n    return true;\n}\nint main(){\n\tauto result = check_if_last_char_is_a_letter(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Hello World\"", "fn": "check_if_last_char_is_a_letter", "para": "(string txt)", "pass": false}
{"task_id": "CPP/134", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool check_if_last_char_is_a_letter(string txt){\n    if (txt.length()==0) return false;\n    char chr=txt[txt.length()-1];\n    if (chr<65 or (chr>90 and chr<97) or chr>122) return false;\n    if (txt.length()==1) return true;\n    chr=txt[txt.length()-2];\n    if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;\n    return true;\n}\nint main(){\n\tauto result = check_if_last_char_is_a_letter(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Hello World\"", "fn": "check_if_last_char_is_a_letter", "para": "(string txt)", "pass": false}
{"task_id": "CPP/134", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool check_if_last_char_is_a_letter(string txt){\n    if (txt.length()==0) return false;\n    char chr=txt[txt.length()-1];\n    if (chr<65 or (chr>90 and chr<97) or chr>122) return false;\n    if (txt.length()==1) return true;\n    chr=txt[txt.length()-2];\n    if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;\n    return true;\n}\nint main(){\n\tauto result = check_if_last_char_is_a_letter(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Hello World\"", "fn": "check_if_last_char_is_a_letter", "para": "(string txt)", "pass": false}
{"task_id": "CPP/134", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool check_if_last_char_is_a_letter(string txt){\n    if (txt.length()==0) return false;\n    char chr=txt[txt.length()-1];\n    if (chr<65 or (chr>90 and chr<97) or chr>122) return false;\n    if (txt.length()==1) return true;\n    chr=txt[txt.length()-2];\n    if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;\n    return true;\n}\nint main(){\n\tauto result = check_if_last_char_is_a_letter(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Hello World\"", "fn": "check_if_last_char_is_a_letter", "para": "(string txt)", "pass": false}
{"task_id": "CPP/134", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool check_if_last_char_is_a_letter(string txt){\n    if (txt.length()==0) return false;\n    char chr=txt[txt.length()-1];\n    if (chr<65 or (chr>90 and chr<97) or chr>122) return false;\n    if (txt.length()==1) return true;\n    chr=txt[txt.length()-2];\n    if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;\n    return true;\n}\nint main(){\n\tauto result = check_if_last_char_is_a_letter(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Hello World\"", "fn": "check_if_last_char_is_a_letter", "para": "(string txt)", "pass": false}
{"task_id": "CPP/134", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool check_if_last_char_is_a_letter(string txt){\n    if (txt.length()==0) return false;\n    char chr=txt[txt.length()-1];\n    if (chr<65 or (chr>90 and chr<97) or chr>122) return false;\n    if (txt.length()==1) return true;\n    chr=txt[txt.length()-2];\n    if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;\n    return true;\n}\nint main(){\n\tauto result = check_if_last_char_is_a_letter(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\"", "fn": "check_if_last_char_is_a_letter", "para": "(string txt)", "pass": true}
{"task_id": "CPP/134", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool check_if_last_char_is_a_letter(string txt){\n    if (txt.length()==0) return false;\n    char chr=txt[txt.length()-1];\n    if (chr<65 or (chr>90 and chr<97) or chr>122) return false;\n    if (txt.length()==1) return true;\n    chr=txt[txt.length()-2];\n    if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;\n    return true;\n}\nint main(){\n\tauto result = check_if_last_char_is_a_letter(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\"", "fn": "check_if_last_char_is_a_letter", "para": "(string txt)", "pass": true}
{"task_id": "CPP/134", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool check_if_last_char_is_a_letter(string txt){\n    if (txt.length()==0) return false;\n    char chr=txt[txt.length()-1];\n    if (chr<65 or (chr>90 and chr<97) or chr>122) return false;\n    if (txt.length()==1) return true;\n    chr=txt[txt.length()-2];\n    if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;\n    return true;\n}\nint main(){\n\tauto result = check_if_last_char_is_a_letter(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\"", "fn": "check_if_last_char_is_a_letter", "para": "(string txt)", "pass": true}
{"task_id": "CPP/134", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool check_if_last_char_is_a_letter(string txt){\n    if (txt.length()==0) return false;\n    char chr=txt[txt.length()-1];\n    if (chr<65 or (chr>90 and chr<97) or chr>122) return false;\n    if (txt.length()==1) return true;\n    chr=txt[txt.length()-2];\n    if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;\n    return true;\n}\nint main(){\n\tauto result = check_if_last_char_is_a_letter(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\"", "fn": "check_if_last_char_is_a_letter", "para": "(string txt)", "pass": true}
{"task_id": "CPP/134", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool check_if_last_char_is_a_letter(string txt){\n    if (txt.length()==0) return false;\n    char chr=txt[txt.length()-1];\n    if (chr<65 or (chr>90 and chr<97) or chr>122) return false;\n    if (txt.length()==1) return true;\n    chr=txt[txt.length()-2];\n    if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;\n    return true;\n}\nint main(){\n\tauto result = check_if_last_char_is_a_letter(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\"", "fn": "check_if_last_char_is_a_letter", "para": "(string txt)", "pass": true}
{"task_id": "CPP/135", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint can_arrange(vector<int> arr){\n    int max=-1;\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]<=i) max=i;\n    return max;\n}\nint main(){\n\tauto result = can_arrange(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 3, 5, 6, 2}", "fn": "can_arrange", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/135", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint can_arrange(vector<int> arr){\n    int max=-1;\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]<=i) max=i;\n    return max;\n}\nint main(){\n\tauto result = can_arrange(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 3, 5, 6, 2}", "fn": "can_arrange", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/135", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint can_arrange(vector<int> arr){\n    int max=-1;\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]<=i) max=i;\n    return max;\n}\nint main(){\n\tauto result = can_arrange(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 3, 5, 6, 2}", "fn": "can_arrange", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/135", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint can_arrange(vector<int> arr){\n    int max=-1;\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]<=i) max=i;\n    return max;\n}\nint main(){\n\tauto result = can_arrange(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 3, 5, 6, 2}", "fn": "can_arrange", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/135", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint can_arrange(vector<int> arr){\n    int max=-1;\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]<=i) max=i;\n    return max;\n}\nint main(){\n\tauto result = can_arrange(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 3, 5, 6, 2}", "fn": "can_arrange", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/135", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint can_arrange(vector<int> arr){\n    int max=-1;\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]<=i) max=i;\n    return max;\n}\nint main(){\n\tauto result = can_arrange(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 3, 2, 4}", "fn": "can_arrange", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/135", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint can_arrange(vector<int> arr){\n    int max=-1;\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]<=i) max=i;\n    return max;\n}\nint main(){\n\tauto result = can_arrange(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 3, 2, 4}", "fn": "can_arrange", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/135", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint can_arrange(vector<int> arr){\n    int max=-1;\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]<=i) max=i;\n    return max;\n}\nint main(){\n\tauto result = can_arrange(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 3, 2, 4}", "fn": "can_arrange", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/135", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint can_arrange(vector<int> arr){\n    int max=-1;\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]<=i) max=i;\n    return max;\n}\nint main(){\n\tauto result = can_arrange(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 3, 2, 4}", "fn": "can_arrange", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/135", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint can_arrange(vector<int> arr){\n    int max=-1;\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]<=i) max=i;\n    return max;\n}\nint main(){\n\tauto result = can_arrange(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 3, 2, 4}", "fn": "can_arrange", "para": "(vector<int> arr)", "pass": true}
{"task_id": "CPP/135", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint can_arrange(vector<int> arr){\n    int max=-1;\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]<=i) max=i;\n    return max;\n}\nint main(){\n\tauto result = can_arrange(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{2, 3, 1, 4}", "fn": "can_arrange", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/135", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint can_arrange(vector<int> arr){\n    int max=-1;\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]<=i) max=i;\n    return max;\n}\nint main(){\n\tauto result = can_arrange(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{2, 3, 1, 4}", "fn": "can_arrange", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/135", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint can_arrange(vector<int> arr){\n    int max=-1;\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]<=i) max=i;\n    return max;\n}\nint main(){\n\tauto result = can_arrange(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{2, 3, 1, 4}", "fn": "can_arrange", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/135", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint can_arrange(vector<int> arr){\n    int max=-1;\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]<=i) max=i;\n    return max;\n}\nint main(){\n\tauto result = can_arrange(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{2, 3, 1, 4}", "fn": "can_arrange", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/135", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint can_arrange(vector<int> arr){\n    int max=-1;\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]<=i) max=i;\n    return max;\n}\nint main(){\n\tauto result = can_arrange(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{2, 3, 1, 4}", "fn": "can_arrange", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/135", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint can_arrange(vector<int> arr){\n    int max=-1;\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]<=i) max=i;\n    return max;\n}\nint main(){\n\tauto result = can_arrange(<FILL_ME>);\n\tassert(result==-1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{5, 3, 2, 1, 4}", "fn": "can_arrange", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/135", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint can_arrange(vector<int> arr){\n    int max=-1;\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]<=i) max=i;\n    return max;\n}\nint main(){\n\tauto result = can_arrange(<FILL_ME>);\n\tassert(result==-1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{5, 3, 2, 1, 4}", "fn": "can_arrange", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/135", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint can_arrange(vector<int> arr){\n    int max=-1;\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]<=i) max=i;\n    return max;\n}\nint main(){\n\tauto result = can_arrange(<FILL_ME>);\n\tassert(result==-1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{5, 3, 2, 1, 4}", "fn": "can_arrange", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/135", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint can_arrange(vector<int> arr){\n    int max=-1;\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]<=i) max=i;\n    return max;\n}\nint main(){\n\tauto result = can_arrange(<FILL_ME>);\n\tassert(result==-1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{5, 3, 2, 1, 4}", "fn": "can_arrange", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/135", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint can_arrange(vector<int> arr){\n    int max=-1;\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]<=i) max=i;\n    return max;\n}\nint main(){\n\tauto result = can_arrange(<FILL_ME>);\n\tassert(result==-1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{5, 3, 2, 1, 4}", "fn": "can_arrange", "para": "(vector<int> arr)", "pass": false}
{"task_id": "CPP/136", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\nint main(){\n\tauto result = largest_smallest_integers(<FILL_ME>);\n\tassert(issame(result,{0,0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{0,0}", "fn": "largest_smallest_integers", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/136", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\nint main(){\n\tauto result = largest_smallest_integers(<FILL_ME>);\n\tassert(issame(result,{0,0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{0,0}", "fn": "largest_smallest_integers", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/136", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\nint main(){\n\tauto result = largest_smallest_integers(<FILL_ME>);\n\tassert(issame(result,{0,0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{0,0}", "fn": "largest_smallest_integers", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/136", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\nint main(){\n\tauto result = largest_smallest_integers(<FILL_ME>);\n\tassert(issame(result,{0,0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{0,0}", "fn": "largest_smallest_integers", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/136", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\nint main(){\n\tauto result = largest_smallest_integers(<FILL_ME>);\n\tassert(issame(result,{0,0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{0,0}", "fn": "largest_smallest_integers", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/136", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\nint main(){\n\tauto result = largest_smallest_integers(<FILL_ME>);\n\tassert(issame(result,{-9,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{-9, 2}", "fn": "largest_smallest_integers", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/136", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\nint main(){\n\tauto result = largest_smallest_integers(<FILL_ME>);\n\tassert(issame(result,{-9,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{-9, 2}", "fn": "largest_smallest_integers", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/136", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\nint main(){\n\tauto result = largest_smallest_integers(<FILL_ME>);\n\tassert(issame(result,{-9,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{-9, 2}", "fn": "largest_smallest_integers", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/136", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\nint main(){\n\tauto result = largest_smallest_integers(<FILL_ME>);\n\tassert(issame(result,{-9,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{-9, 2}", "fn": "largest_smallest_integers", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/136", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\nint main(){\n\tauto result = largest_smallest_integers(<FILL_ME>);\n\tassert(issame(result,{-9,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{-9,2}", "fn": "largest_smallest_integers", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/136", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\nint main(){\n\tauto result = largest_smallest_integers(<FILL_ME>);\n\tassert(issame(result,{-1,0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, -1, 0, 10}", "fn": "largest_smallest_integers", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/136", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\nint main(){\n\tauto result = largest_smallest_integers(<FILL_ME>);\n\tassert(issame(result,{-1,0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, -1, 0, 10}", "fn": "largest_smallest_integers", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/136", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\nint main(){\n\tauto result = largest_smallest_integers(<FILL_ME>);\n\tassert(issame(result,{-1,0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, -1, 0, 10}", "fn": "largest_smallest_integers", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/136", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\nint main(){\n\tauto result = largest_smallest_integers(<FILL_ME>);\n\tassert(issame(result,{-1,0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, -1, 0, 10}", "fn": "largest_smallest_integers", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/136", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\nint main(){\n\tauto result = largest_smallest_integers(<FILL_ME>);\n\tassert(issame(result,{-1,0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, -3, -1, 5, -2, 0}", "fn": "largest_smallest_integers", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/136", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\nint main(){\n\tauto result = largest_smallest_integers(<FILL_ME>);\n\tassert(issame(result,{-2,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{10, -2, 5, 3, 1, -4}", "fn": "largest_smallest_integers", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/136", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\nint main(){\n\tauto result = largest_smallest_integers(<FILL_ME>);\n\tassert(issame(result,{-2,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{10, -2, 5, 3, 1, -4}", "fn": "largest_smallest_integers", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/136", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\nint main(){\n\tauto result = largest_smallest_integers(<FILL_ME>);\n\tassert(issame(result,{-2,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{10, -2, 5, 3, 1, -4}", "fn": "largest_smallest_integers", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/136", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\nint main(){\n\tauto result = largest_smallest_integers(<FILL_ME>);\n\tassert(issame(result,{-2,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{10, -2, 5, 3, 1, -4}", "fn": "largest_smallest_integers", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/136", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\nint main(){\n\tauto result = largest_smallest_integers(<FILL_ME>);\n\tassert(issame(result,{-2,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{10, -2, 5, 3, 1, -4}", "fn": "largest_smallest_integers", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/136", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\nint main(){\n\tauto result = largest_smallest_integers(<FILL_ME>);\n\tassert(issame(result,{-3,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{-3, 1}", "fn": "largest_smallest_integers", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/136", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\nint main(){\n\tauto result = largest_smallest_integers(<FILL_ME>);\n\tassert(issame(result,{-3,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{-3, 1}", "fn": "largest_smallest_integers", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/136", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\nint main(){\n\tauto result = largest_smallest_integers(<FILL_ME>);\n\tassert(issame(result,{-3,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{-3, 1}", "fn": "largest_smallest_integers", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/136", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\nint main(){\n\tauto result = largest_smallest_integers(<FILL_ME>);\n\tassert(issame(result,{-3,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{-3, 1}", "fn": "largest_smallest_integers", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/136", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\nint main(){\n\tauto result = largest_smallest_integers(<FILL_ME>);\n\tassert(issame(result,{-3,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{-3, 1}", "fn": "largest_smallest_integers", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/136", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\nint main(){\n\tauto result = largest_smallest_integers(<FILL_ME>);\n\tassert(issame(result,{0,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{0,1}", "fn": "largest_smallest_integers", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/136", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\nint main(){\n\tauto result = largest_smallest_integers(<FILL_ME>);\n\tassert(issame(result,{0,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{0,1}", "fn": "largest_smallest_integers", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/136", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\nint main(){\n\tauto result = largest_smallest_integers(<FILL_ME>);\n\tassert(issame(result,{0,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{0,1}", "fn": "largest_smallest_integers", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/136", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\nint main(){\n\tauto result = largest_smallest_integers(<FILL_ME>);\n\tassert(issame(result,{0,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{0,1}", "fn": "largest_smallest_integers", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/136", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\nint main(){\n\tauto result = largest_smallest_integers(<FILL_ME>);\n\tassert(issame(result,{0,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{0,1}", "fn": "largest_smallest_integers", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/136", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\nint main(){\n\tauto result = largest_smallest_integers(<FILL_ME>);\n\tassert(issame(result,{-7,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{-7, 2}", "fn": "largest_smallest_integers", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/136", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\nint main(){\n\tauto result = largest_smallest_integers(<FILL_ME>);\n\tassert(issame(result,{-7,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{-7, 2}", "fn": "largest_smallest_integers", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/136", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\nint main(){\n\tauto result = largest_smallest_integers(<FILL_ME>);\n\tassert(issame(result,{-7,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{-7, 2}", "fn": "largest_smallest_integers", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/136", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\nint main(){\n\tauto result = largest_smallest_integers(<FILL_ME>);\n\tassert(issame(result,{-7,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{-7, 2}", "fn": "largest_smallest_integers", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/136", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\nint main(){\n\tauto result = largest_smallest_integers(<FILL_ME>);\n\tassert(issame(result,{-7,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{-7, 2}", "fn": "largest_smallest_integers", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/137", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\nint main(){\n\tauto result = compare_one(<FILL_ME>);\n\tassert(boost::any_cast<int>(result)==6);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "boost::any(5), boost::any(6)", "fn": "compare_one", "para": "(boost::any a,boost::any b)", "pass": true}
{"task_id": "CPP/137", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\nint main(){\n\tauto result = compare_one(<FILL_ME>);\n\tassert(boost::any_cast<int>(result)==6);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "boost::any(5), boost::any(6)", "fn": "compare_one", "para": "(boost::any a,boost::any b)", "pass": true}
{"task_id": "CPP/137", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\nint main(){\n\tauto result = compare_one(<FILL_ME>);\n\tassert(boost::any_cast<int>(result)==6);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "boost::any(5), boost::any(6)", "fn": "compare_one", "para": "(boost::any a,boost::any b)", "pass": true}
{"task_id": "CPP/137", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\nint main(){\n\tauto result = compare_one(<FILL_ME>);\n\tassert(boost::any_cast<int>(result)==6);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "boost::any(6), boost::any(5.5)", "fn": "compare_one", "para": "(boost::any a,boost::any b)", "pass": true}
{"task_id": "CPP/137", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\nint main(){\n\tauto result = compare_one(<FILL_ME>);\n\tassert(boost::any_cast<int>(result)==6);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "boost::any(6), boost::any(5.5)", "fn": "compare_one", "para": "(boost::any a,boost::any b)", "pass": true}
{"task_id": "CPP/137", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\nint main(){\n\tauto result = compare_one(<FILL_ME>);\n\tassert(boost::any_cast<int>(result)==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "boost::any(3), boost::any(2)", "fn": "compare_one", "para": "(boost::any a,boost::any b)", "pass": true}
{"task_id": "CPP/137", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\nint main(){\n\tauto result = compare_one(<FILL_ME>);\n\tassert(boost::any_cast<int>(result)==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "boost::any(3), boost::any(2.5)", "fn": "compare_one", "para": "(boost::any a,boost::any b)", "pass": true}
{"task_id": "CPP/137", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\nint main(){\n\tauto result = compare_one(<FILL_ME>);\n\tassert(boost::any_cast<int>(result)==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "boost::any(3), boost::any(2.5)", "fn": "compare_one", "para": "(boost::any a,boost::any b)", "pass": true}
{"task_id": "CPP/137", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\nint main(){\n\tauto result = compare_one(<FILL_ME>);\n\tassert(boost::any_cast<int>(result)==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "boost::any(3), boost::any(2.5)", "fn": "compare_one", "para": "(boost::any a,boost::any b)", "pass": true}
{"task_id": "CPP/137", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\nint main(){\n\tauto result = compare_one(<FILL_ME>);\n\tassert(boost::any_cast<int>(result)==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "boost::any(3), boost::any(2)", "fn": "compare_one", "para": "(boost::any a,boost::any b)", "pass": true}
{"task_id": "CPP/137", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\nint main(){\n\tauto result = compare_one(<FILL_ME>);\n\tassert(boost::any_cast<string>(result)==\"None\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "boost::any(10.5), boost::any(\"10,5\")", "fn": "compare_one", "para": "(boost::any a,boost::any b)", "pass": false}
{"task_id": "CPP/137", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\nint main(){\n\tauto result = compare_one(<FILL_ME>);\n\tassert(boost::any_cast<string>(result)==\"None\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "boost::any(10.5), boost::any(\"10,5\")", "fn": "compare_one", "para": "(boost::any a,boost::any b)", "pass": false}
{"task_id": "CPP/137", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\nint main(){\n\tauto result = compare_one(<FILL_ME>);\n\tassert(boost::any_cast<string>(result)==\"None\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "boost::any(10.5), boost::any(\"10,5\")", "fn": "compare_one", "para": "(boost::any a,boost::any b)", "pass": false}
{"task_id": "CPP/137", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\nint main(){\n\tauto result = compare_one(<FILL_ME>);\n\tassert(boost::any_cast<string>(result)==\"None\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "boost::any(10.5), boost::any(\"10,5\")", "fn": "compare_one", "para": "(boost::any a,boost::any b)", "pass": false}
{"task_id": "CPP/137", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\nint main(){\n\tauto result = compare_one(<FILL_ME>);\n\tassert(boost::any_cast<string>(result)==\"None\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "boost::any(10.5), boost::any(\"10,5\")", "fn": "compare_one", "para": "(boost::any a,boost::any b)", "pass": false}
{"task_id": "CPP/137", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\nint main(){\n\tauto result = compare_one(<FILL_ME>);\n\tassert(boost::any_cast<string>(result)==\"2\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "boost::any(2.0), boost::any(\"2\")", "fn": "compare_one", "para": "(boost::any a,boost::any b)", "pass": false}
{"task_id": "CPP/137", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\nint main(){\n\tauto result = compare_one(<FILL_ME>);\n\tassert(boost::any_cast<string>(result)==\"2\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "boost::any(2.0), boost::any(\"2\")", "fn": "compare_one", "para": "(boost::any a,boost::any b)", "pass": false}
{"task_id": "CPP/137", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\nint main(){\n\tauto result = compare_one(<FILL_ME>);\n\tassert(boost::any_cast<string>(result)==\"2\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "boost::any(2.0), boost::any(\"2\")", "fn": "compare_one", "para": "(boost::any a,boost::any b)", "pass": false}
{"task_id": "CPP/137", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\nint main(){\n\tauto result = compare_one(<FILL_ME>);\n\tassert(boost::any_cast<string>(result)==\"2\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "boost::any(2.0), boost::any(\"2\")", "fn": "compare_one", "para": "(boost::any a,boost::any b)", "pass": false}
{"task_id": "CPP/137", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\nint main(){\n\tauto result = compare_one(<FILL_ME>);\n\tassert(boost::any_cast<string>(result)==\"2\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "boost::any(2.0), boost::any(\"2\")", "fn": "compare_one", "para": "(boost::any a,boost::any b)", "pass": false}
{"task_id": "CPP/137", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\nint main(){\n\tauto result = compare_one(<FILL_ME>);\n\tassert(boost::any_cast<string>(result)==\"2,3\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "boost::any(2.3), boost::any(\"2,3\")", "fn": "compare_one", "para": "(boost::any a,boost::any b)", "pass": false}
{"task_id": "CPP/137", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\nint main(){\n\tauto result = compare_one(<FILL_ME>);\n\tassert(boost::any_cast<string>(result)==\"2,3\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "boost::any(2.3), boost::any(\"2,3\")", "fn": "compare_one", "para": "(boost::any a,boost::any b)", "pass": false}
{"task_id": "CPP/137", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\nint main(){\n\tauto result = compare_one(<FILL_ME>);\n\tassert(boost::any_cast<string>(result)==\"2,3\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "boost::any(2.3), boost::any(\"2,3\")", "fn": "compare_one", "para": "(boost::any a,boost::any b)", "pass": false}
{"task_id": "CPP/137", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\nint main(){\n\tauto result = compare_one(<FILL_ME>);\n\tassert(boost::any_cast<string>(result)==\"2,3\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "boost::any(2.3), boost::any(\"2,3\")", "fn": "compare_one", "para": "(boost::any a,boost::any b)", "pass": false}
{"task_id": "CPP/137", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\nint main(){\n\tauto result = compare_one(<FILL_ME>);\n\tassert(boost::any_cast<string>(result)==\"2,3\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "boost::any(2.3), boost::any(\"2,3\")", "fn": "compare_one", "para": "(boost::any a,boost::any b)", "pass": false}
{"task_id": "CPP/137", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\nint main(){\n\tauto result = compare_one(<FILL_ME>);\n\tassert(boost::any_cast<string>(result)==\"6\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "boost::any(\"5.6\"), boost::any(\"6\")", "fn": "compare_one", "para": "(boost::any a,boost::any b)", "pass": false}
{"task_id": "CPP/137", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\nint main(){\n\tauto result = compare_one(<FILL_ME>);\n\tassert(boost::any_cast<string>(result)==\"6\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "boost::any(\"5.6\"), boost::any(\"6\")", "fn": "compare_one", "para": "(boost::any a,boost::any b)", "pass": false}
{"task_id": "CPP/137", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\nint main(){\n\tauto result = compare_one(<FILL_ME>);\n\tassert(boost::any_cast<string>(result)==\"6\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "boost::any(\"5.6\"), boost::any(\"6\")", "fn": "compare_one", "para": "(boost::any a,boost::any b)", "pass": false}
{"task_id": "CPP/137", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\nint main(){\n\tauto result = compare_one(<FILL_ME>);\n\tassert(boost::any_cast<string>(result)==\"6\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "boost::any(\"5,6\"), boost::any(6)", "fn": "compare_one", "para": "(boost::any a,boost::any b)", "pass": false}
{"task_id": "CPP/137", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\nint main(){\n\tauto result = compare_one(<FILL_ME>);\n\tassert(boost::any_cast<string>(result)==\"6\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "boost::any(\"5.6\"), boost::any(\"6\")", "fn": "compare_one", "para": "(boost::any a,boost::any b)", "pass": false}
{"task_id": "CPP/137", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\nint main(){\n\tauto result = compare_one(<FILL_ME>);\n\tassert(boost::any_cast<double>(result)==2.5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "boost::any(2.5), boost::any(1.5)", "fn": "compare_one", "para": "(boost::any a,boost::any b)", "pass": true}
{"task_id": "CPP/137", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\nint main(){\n\tauto result = compare_one(<FILL_ME>);\n\tassert(boost::any_cast<double>(result)==2.5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "boost::any(2.5), boost::any(1.5)", "fn": "compare_one", "para": "(boost::any a,boost::any b)", "pass": true}
{"task_id": "CPP/137", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\nint main(){\n\tauto result = compare_one(<FILL_ME>);\n\tassert(boost::any_cast<double>(result)==2.5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "boost::any(2.5), boost::any(1.5)", "fn": "compare_one", "para": "(boost::any a,boost::any b)", "pass": true}
{"task_id": "CPP/137", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\nint main(){\n\tauto result = compare_one(<FILL_ME>);\n\tassert(boost::any_cast<double>(result)==2.5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "boost::any(2.5), boost::any(1.5)", "fn": "compare_one", "para": "(boost::any a,boost::any b)", "pass": true}
{"task_id": "CPP/137", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\nint main(){\n\tauto result = compare_one(<FILL_ME>);\n\tassert(boost::any_cast<double>(result)==2.5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "boost::any(2.5), boost::any(3.5)", "fn": "compare_one", "para": "(boost::any a,boost::any b)", "pass": false}
{"task_id": "CPP/137", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\nint main(){\n\tauto result = compare_one(<FILL_ME>);\n\tassert(boost::any_cast<int>(result)==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "boost::any(2), boost::any(1)", "fn": "compare_one", "para": "(boost::any a,boost::any b)", "pass": true}
{"task_id": "CPP/137", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\nint main(){\n\tauto result = compare_one(<FILL_ME>);\n\tassert(boost::any_cast<int>(result)==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "boost::any(2), boost::any(1)", "fn": "compare_one", "para": "(boost::any a,boost::any b)", "pass": true}
{"task_id": "CPP/137", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\nint main(){\n\tauto result = compare_one(<FILL_ME>);\n\tassert(boost::any_cast<int>(result)==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "boost::any(2), boost::any(1)", "fn": "compare_one", "para": "(boost::any a,boost::any b)", "pass": true}
{"task_id": "CPP/137", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\nint main(){\n\tauto result = compare_one(<FILL_ME>);\n\tassert(boost::any_cast<int>(result)==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "boost::any(2), boost::any(1)", "fn": "compare_one", "para": "(boost::any a,boost::any b)", "pass": true}
{"task_id": "CPP/137", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\nint main(){\n\tauto result = compare_one(<FILL_ME>);\n\tassert(boost::any_cast<int>(result)==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "boost::any(2), boost::any(1)", "fn": "compare_one", "para": "(boost::any a,boost::any b)", "pass": true}
{"task_id": "CPP/138", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_equal_to_sum_even(int n){\n    if (n%2==0 and n>=8) return true;\n    return false;\n}\nint main(){\n\tauto result = is_equal_to_sum_even(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10", "fn": "is_equal_to_sum_even", "para": "(int n)", "pass": true}
{"task_id": "CPP/138", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_equal_to_sum_even(int n){\n    if (n%2==0 and n>=8) return true;\n    return false;\n}\nint main(){\n\tauto result = is_equal_to_sum_even(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10", "fn": "is_equal_to_sum_even", "para": "(int n)", "pass": true}
{"task_id": "CPP/138", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_equal_to_sum_even(int n){\n    if (n%2==0 and n>=8) return true;\n    return false;\n}\nint main(){\n\tauto result = is_equal_to_sum_even(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10", "fn": "is_equal_to_sum_even", "para": "(int n)", "pass": true}
{"task_id": "CPP/138", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_equal_to_sum_even(int n){\n    if (n%2==0 and n>=8) return true;\n    return false;\n}\nint main(){\n\tauto result = is_equal_to_sum_even(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10", "fn": "is_equal_to_sum_even", "para": "(int n)", "pass": true}
{"task_id": "CPP/138", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_equal_to_sum_even(int n){\n    if (n%2==0 and n>=8) return true;\n    return false;\n}\nint main(){\n\tauto result = is_equal_to_sum_even(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10", "fn": "is_equal_to_sum_even", "para": "(int n)", "pass": true}
{"task_id": "CPP/138", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_equal_to_sum_even(int n){\n    if (n%2==0 and n>=8) return true;\n    return false;\n}\nint main(){\n\tauto result = is_equal_to_sum_even(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "7", "fn": "is_equal_to_sum_even", "para": "(int n)", "pass": true}
{"task_id": "CPP/138", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_equal_to_sum_even(int n){\n    if (n%2==0 and n>=8) return true;\n    return false;\n}\nint main(){\n\tauto result = is_equal_to_sum_even(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "7", "fn": "is_equal_to_sum_even", "para": "(int n)", "pass": true}
{"task_id": "CPP/138", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_equal_to_sum_even(int n){\n    if (n%2==0 and n>=8) return true;\n    return false;\n}\nint main(){\n\tauto result = is_equal_to_sum_even(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "7", "fn": "is_equal_to_sum_even", "para": "(int n)", "pass": true}
{"task_id": "CPP/138", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_equal_to_sum_even(int n){\n    if (n%2==0 and n>=8) return true;\n    return false;\n}\nint main(){\n\tauto result = is_equal_to_sum_even(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "7", "fn": "is_equal_to_sum_even", "para": "(int n)", "pass": true}
{"task_id": "CPP/138", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_equal_to_sum_even(int n){\n    if (n%2==0 and n>=8) return true;\n    return false;\n}\nint main(){\n\tauto result = is_equal_to_sum_even(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "7", "fn": "is_equal_to_sum_even", "para": "(int n)", "pass": true}
{"task_id": "CPP/139", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long special_factorial(int n){\n    long long fact=1,bfact=1;\n    for (int i=1;i<=n;i++)\n    {\n        fact=fact*i;\n        bfact=bfact*fact;\n    }\n    return bfact;\n}\nint main(){\n\tauto result = special_factorial(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1", "fn": "special_factorial", "para": "(int n)", "pass": true}
{"task_id": "CPP/139", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long special_factorial(int n){\n    long long fact=1,bfact=1;\n    for (int i=1;i<=n;i++)\n    {\n        fact=fact*i;\n        bfact=bfact*fact;\n    }\n    return bfact;\n}\nint main(){\n\tauto result = special_factorial(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1", "fn": "special_factorial", "para": "(int n)", "pass": true}
{"task_id": "CPP/139", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long special_factorial(int n){\n    long long fact=1,bfact=1;\n    for (int i=1;i<=n;i++)\n    {\n        fact=fact*i;\n        bfact=bfact*fact;\n    }\n    return bfact;\n}\nint main(){\n\tauto result = special_factorial(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1", "fn": "special_factorial", "para": "(int n)", "pass": true}
{"task_id": "CPP/139", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long special_factorial(int n){\n    long long fact=1,bfact=1;\n    for (int i=1;i<=n;i++)\n    {\n        fact=fact*i;\n        bfact=bfact*fact;\n    }\n    return bfact;\n}\nint main(){\n\tauto result = special_factorial(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1", "fn": "special_factorial", "para": "(int n)", "pass": true}
{"task_id": "CPP/139", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long special_factorial(int n){\n    long long fact=1,bfact=1;\n    for (int i=1;i<=n;i++)\n    {\n        fact=fact*i;\n        bfact=bfact*fact;\n    }\n    return bfact;\n}\nint main(){\n\tauto result = special_factorial(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5", "fn": "special_factorial", "para": "(int n)", "pass": false}
{"task_id": "CPP/139", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long special_factorial(int n){\n    long long fact=1,bfact=1;\n    for (int i=1;i<=n;i++)\n    {\n        fact=fact*i;\n        bfact=bfact*fact;\n    }\n    return bfact;\n}\nint main(){\n\tauto result = special_factorial(<FILL_ME>);\n\tassert(result==125411328000);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5", "fn": "special_factorial", "para": "(int n)", "pass": false}
{"task_id": "CPP/139", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long special_factorial(int n){\n    long long fact=1,bfact=1;\n    for (int i=1;i<=n;i++)\n    {\n        fact=fact*i;\n        bfact=bfact*fact;\n    }\n    return bfact;\n}\nint main(){\n\tauto result = special_factorial(<FILL_ME>);\n\tassert(result==125411328000);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10", "fn": "special_factorial", "para": "(int n)", "pass": false}
{"task_id": "CPP/139", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long special_factorial(int n){\n    long long fact=1,bfact=1;\n    for (int i=1;i<=n;i++)\n    {\n        fact=fact*i;\n        bfact=bfact*fact;\n    }\n    return bfact;\n}\nint main(){\n\tauto result = special_factorial(<FILL_ME>);\n\tassert(result==125411328000);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10", "fn": "special_factorial", "para": "(int n)", "pass": false}
{"task_id": "CPP/139", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long special_factorial(int n){\n    long long fact=1,bfact=1;\n    for (int i=1;i<=n;i++)\n    {\n        fact=fact*i;\n        bfact=bfact*fact;\n    }\n    return bfact;\n}\nint main(){\n\tauto result = special_factorial(<FILL_ME>);\n\tassert(result==125411328000);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5", "fn": "special_factorial", "para": "(int n)", "pass": false}
{"task_id": "CPP/139", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long special_factorial(int n){\n    long long fact=1,bfact=1;\n    for (int i=1;i<=n;i++)\n    {\n        fact=fact*i;\n        bfact=bfact*fact;\n    }\n    return bfact;\n}\nint main(){\n\tauto result = special_factorial(<FILL_ME>);\n\tassert(result==125411328000);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10", "fn": "special_factorial", "para": "(int n)", "pass": false}
{"task_id": "CPP/139", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long special_factorial(int n){\n    long long fact=1,bfact=1;\n    for (int i=1;i<=n;i++)\n    {\n        fact=fact*i;\n        bfact=bfact*fact;\n    }\n    return bfact;\n}\nint main(){\n\tauto result = special_factorial(<FILL_ME>);\n\tassert(result==34560);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5", "fn": "special_factorial", "para": "(int n)", "pass": true}
{"task_id": "CPP/139", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long special_factorial(int n){\n    long long fact=1,bfact=1;\n    for (int i=1;i<=n;i++)\n    {\n        fact=fact*i;\n        bfact=bfact*fact;\n    }\n    return bfact;\n}\nint main(){\n\tauto result = special_factorial(<FILL_ME>);\n\tassert(result==34560);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5", "fn": "special_factorial", "para": "(int n)", "pass": true}
{"task_id": "CPP/139", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long special_factorial(int n){\n    long long fact=1,bfact=1;\n    for (int i=1;i<=n;i++)\n    {\n        fact=fact*i;\n        bfact=bfact*fact;\n    }\n    return bfact;\n}\nint main(){\n\tauto result = special_factorial(<FILL_ME>);\n\tassert(result==34560);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5", "fn": "special_factorial", "para": "(int n)", "pass": true}
{"task_id": "CPP/139", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long special_factorial(int n){\n    long long fact=1,bfact=1;\n    for (int i=1;i<=n;i++)\n    {\n        fact=fact*i;\n        bfact=bfact*fact;\n    }\n    return bfact;\n}\nint main(){\n\tauto result = special_factorial(<FILL_ME>);\n\tassert(result==34560);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5", "fn": "special_factorial", "para": "(int n)", "pass": true}
{"task_id": "CPP/139", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long special_factorial(int n){\n    long long fact=1,bfact=1;\n    for (int i=1;i<=n;i++)\n    {\n        fact=fact*i;\n        bfact=bfact*fact;\n    }\n    return bfact;\n}\nint main(){\n\tauto result = special_factorial(<FILL_ME>);\n\tassert(result==34560);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5", "fn": "special_factorial", "para": "(int n)", "pass": true}
{"task_id": "CPP/139", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long special_factorial(int n){\n    long long fact=1,bfact=1;\n    for (int i=1;i<=n;i++)\n    {\n        fact=fact*i;\n        bfact=bfact*fact;\n    }\n    return bfact;\n}\nint main(){\n\tauto result = special_factorial(<FILL_ME>);\n\tassert(result==288);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5", "fn": "special_factorial", "para": "(int n)", "pass": false}
{"task_id": "CPP/139", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long special_factorial(int n){\n    long long fact=1,bfact=1;\n    for (int i=1;i<=n;i++)\n    {\n        fact=fact*i;\n        bfact=bfact*fact;\n    }\n    return bfact;\n}\nint main(){\n\tauto result = special_factorial(<FILL_ME>);\n\tassert(result==288);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3", "fn": "special_factorial", "para": "(int n)", "pass": false}
{"task_id": "CPP/139", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long special_factorial(int n){\n    long long fact=1,bfact=1;\n    for (int i=1;i<=n;i++)\n    {\n        fact=fact*i;\n        bfact=bfact*fact;\n    }\n    return bfact;\n}\nint main(){\n\tauto result = special_factorial(<FILL_ME>);\n\tassert(result==288);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5", "fn": "special_factorial", "para": "(int n)", "pass": false}
{"task_id": "CPP/139", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long special_factorial(int n){\n    long long fact=1,bfact=1;\n    for (int i=1;i<=n;i++)\n    {\n        fact=fact*i;\n        bfact=bfact*fact;\n    }\n    return bfact;\n}\nint main(){\n\tauto result = special_factorial(<FILL_ME>);\n\tassert(result==288);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "4", "fn": "special_factorial", "para": "(int n)", "pass": true}
{"task_id": "CPP/139", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long special_factorial(int n){\n    long long fact=1,bfact=1;\n    for (int i=1;i<=n;i++)\n    {\n        fact=fact*i;\n        bfact=bfact*fact;\n    }\n    return bfact;\n}\nint main(){\n\tauto result = special_factorial(<FILL_ME>);\n\tassert(result==288);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5", "fn": "special_factorial", "para": "(int n)", "pass": false}
{"task_id": "CPP/140", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring fix_spaces(string text){\n    string out=\"\";\n    int spacelen=0;\n    for (int i=0;i<text.length();i++)\n    if (text[i]==' ') spacelen+=1;\n    else\n    {\n        if (spacelen==1) out=out+'_';\n        if (spacelen==2) out=out+\"__\";\n        if (spacelen>2) out=out+'-';\n        spacelen=0;\n        out=out+text[i];\n    }\n    if (spacelen==1) out=out+'_';\n    if (spacelen==2) out=out+\"__\";\n    if (spacelen>2) out=out+'-';\n    return out;\n}\nint main(){\n\tauto result = fix_spaces(<FILL_ME>);\n\tassert(result==\"Exa-mple\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Exa mple\"", "fn": "fix_spaces", "para": "(string text)", "pass": false}
{"task_id": "CPP/140", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring fix_spaces(string text){\n    string out=\"\";\n    int spacelen=0;\n    for (int i=0;i<text.length();i++)\n    if (text[i]==' ') spacelen+=1;\n    else\n    {\n        if (spacelen==1) out=out+'_';\n        if (spacelen==2) out=out+\"__\";\n        if (spacelen>2) out=out+'-';\n        spacelen=0;\n        out=out+text[i];\n    }\n    if (spacelen==1) out=out+'_';\n    if (spacelen==2) out=out+\"__\";\n    if (spacelen>2) out=out+'-';\n    return out;\n}\nint main(){\n\tauto result = fix_spaces(<FILL_ME>);\n\tassert(result==\"Exa-mple\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Exa mple\"", "fn": "fix_spaces", "para": "(string text)", "pass": false}
{"task_id": "CPP/140", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring fix_spaces(string text){\n    string out=\"\";\n    int spacelen=0;\n    for (int i=0;i<text.length();i++)\n    if (text[i]==' ') spacelen+=1;\n    else\n    {\n        if (spacelen==1) out=out+'_';\n        if (spacelen==2) out=out+\"__\";\n        if (spacelen>2) out=out+'-';\n        spacelen=0;\n        out=out+text[i];\n    }\n    if (spacelen==1) out=out+'_';\n    if (spacelen==2) out=out+\"__\";\n    if (spacelen>2) out=out+'-';\n    return out;\n}\nint main(){\n\tauto result = fix_spaces(<FILL_ME>);\n\tassert(result==\"Exa-mple\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Exa mple\"", "fn": "fix_spaces", "para": "(string text)", "pass": false}
{"task_id": "CPP/140", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring fix_spaces(string text){\n    string out=\"\";\n    int spacelen=0;\n    for (int i=0;i<text.length();i++)\n    if (text[i]==' ') spacelen+=1;\n    else\n    {\n        if (spacelen==1) out=out+'_';\n        if (spacelen==2) out=out+\"__\";\n        if (spacelen>2) out=out+'-';\n        spacelen=0;\n        out=out+text[i];\n    }\n    if (spacelen==1) out=out+'_';\n    if (spacelen==2) out=out+\"__\";\n    if (spacelen>2) out=out+'-';\n    return out;\n}\nint main(){\n\tauto result = fix_spaces(<FILL_ME>);\n\tassert(result==\"Exa-mple\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Exa mple\"", "fn": "fix_spaces", "para": "(string text)", "pass": false}
{"task_id": "CPP/140", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring fix_spaces(string text){\n    string out=\"\";\n    int spacelen=0;\n    for (int i=0;i<text.length();i++)\n    if (text[i]==' ') spacelen+=1;\n    else\n    {\n        if (spacelen==1) out=out+'_';\n        if (spacelen==2) out=out+\"__\";\n        if (spacelen>2) out=out+'-';\n        spacelen=0;\n        out=out+text[i];\n    }\n    if (spacelen==1) out=out+'_';\n    if (spacelen==2) out=out+\"__\";\n    if (spacelen>2) out=out+'-';\n    return out;\n}\nint main(){\n\tauto result = fix_spaces(<FILL_ME>);\n\tassert(result==\"Exa-mple\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Exa mple\"", "fn": "fix_spaces", "para": "(string text)", "pass": false}
{"task_id": "CPP/140", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring fix_spaces(string text){\n    string out=\"\";\n    int spacelen=0;\n    for (int i=0;i<text.length();i++)\n    if (text[i]==' ') spacelen+=1;\n    else\n    {\n        if (spacelen==1) out=out+'_';\n        if (spacelen==2) out=out+\"__\";\n        if (spacelen>2) out=out+'-';\n        spacelen=0;\n        out=out+text[i];\n    }\n    if (spacelen==1) out=out+'_';\n    if (spacelen==2) out=out+\"__\";\n    if (spacelen>2) out=out+'-';\n    return out;\n}\nint main(){\n\tauto result = fix_spaces(<FILL_ME>);\n\tassert(result==\"-Exa_1_2_2_mple\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\" Exa 1 2 2 mple\"", "fn": "fix_spaces", "para": "(string text)", "pass": false}
{"task_id": "CPP/140", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring fix_spaces(string text){\n    string out=\"\";\n    int spacelen=0;\n    for (int i=0;i<text.length();i++)\n    if (text[i]==' ') spacelen+=1;\n    else\n    {\n        if (spacelen==1) out=out+'_';\n        if (spacelen==2) out=out+\"__\";\n        if (spacelen>2) out=out+'-';\n        spacelen=0;\n        out=out+text[i];\n    }\n    if (spacelen==1) out=out+'_';\n    if (spacelen==2) out=out+\"__\";\n    if (spacelen>2) out=out+'-';\n    return out;\n}\nint main(){\n\tauto result = fix_spaces(<FILL_ME>);\n\tassert(result==\"-Exa_1_2_2_mple\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\" Exa 1 2 2 mple\"", "fn": "fix_spaces", "para": "(string text)", "pass": false}
{"task_id": "CPP/140", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring fix_spaces(string text){\n    string out=\"\";\n    int spacelen=0;\n    for (int i=0;i<text.length();i++)\n    if (text[i]==' ') spacelen+=1;\n    else\n    {\n        if (spacelen==1) out=out+'_';\n        if (spacelen==2) out=out+\"__\";\n        if (spacelen>2) out=out+'-';\n        spacelen=0;\n        out=out+text[i];\n    }\n    if (spacelen==1) out=out+'_';\n    if (spacelen==2) out=out+\"__\";\n    if (spacelen>2) out=out+'-';\n    return out;\n}\nint main(){\n\tauto result = fix_spaces(<FILL_ME>);\n\tassert(result==\"-Exa_1_2_2_mple\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Exa 1 2 2 mple\"", "fn": "fix_spaces", "para": "(string text)", "pass": false}
{"task_id": "CPP/140", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring fix_spaces(string text){\n    string out=\"\";\n    int spacelen=0;\n    for (int i=0;i<text.length();i++)\n    if (text[i]==' ') spacelen+=1;\n    else\n    {\n        if (spacelen==1) out=out+'_';\n        if (spacelen==2) out=out+\"__\";\n        if (spacelen>2) out=out+'-';\n        spacelen=0;\n        out=out+text[i];\n    }\n    if (spacelen==1) out=out+'_';\n    if (spacelen==2) out=out+\"__\";\n    if (spacelen>2) out=out+'-';\n    return out;\n}\nint main(){\n\tauto result = fix_spaces(<FILL_ME>);\n\tassert(result==\"-Exa_1_2_2_mple\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\" Exa 1 2 2 mple\"", "fn": "fix_spaces", "para": "(string text)", "pass": false}
{"task_id": "CPP/140", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring fix_spaces(string text){\n    string out=\"\";\n    int spacelen=0;\n    for (int i=0;i<text.length();i++)\n    if (text[i]==' ') spacelen+=1;\n    else\n    {\n        if (spacelen==1) out=out+'_';\n        if (spacelen==2) out=out+\"__\";\n        if (spacelen>2) out=out+'-';\n        spacelen=0;\n        out=out+text[i];\n    }\n    if (spacelen==1) out=out+'_';\n    if (spacelen==2) out=out+\"__\";\n    if (spacelen>2) out=out+'-';\n    return out;\n}\nint main(){\n\tauto result = fix_spaces(<FILL_ME>);\n\tassert(result==\"-Exa_1_2_2_mple\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\" Exa 1 2 2 mple\"", "fn": "fix_spaces", "para": "(string text)", "pass": false}
{"task_id": "CPP/140", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring fix_spaces(string text){\n    string out=\"\";\n    int spacelen=0;\n    for (int i=0;i<text.length();i++)\n    if (text[i]==' ') spacelen+=1;\n    else\n    {\n        if (spacelen==1) out=out+'_';\n        if (spacelen==2) out=out+\"__\";\n        if (spacelen>2) out=out+'-';\n        spacelen=0;\n        out=out+text[i];\n    }\n    if (spacelen==1) out=out+'_';\n    if (spacelen==2) out=out+\"__\";\n    if (spacelen>2) out=out+'-';\n    return out;\n}\nint main(){\n\tauto result = fix_spaces(<FILL_ME>);\n\tassert(result==\"Example\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"FILL_ME\"", "fn": "fix_spaces", "para": "(string text)", "pass": false}
{"task_id": "CPP/140", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring fix_spaces(string text){\n    string out=\"\";\n    int spacelen=0;\n    for (int i=0;i<text.length();i++)\n    if (text[i]==' ') spacelen+=1;\n    else\n    {\n        if (spacelen==1) out=out+'_';\n        if (spacelen==2) out=out+\"__\";\n        if (spacelen>2) out=out+'-';\n        spacelen=0;\n        out=out+text[i];\n    }\n    if (spacelen==1) out=out+'_';\n    if (spacelen==2) out=out+\"__\";\n    if (spacelen>2) out=out+'-';\n    return out;\n}\nint main(){\n\tauto result = fix_spaces(<FILL_ME>);\n\tassert(result==\"Example\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"FILL_ME\"", "fn": "fix_spaces", "para": "(string text)", "pass": false}
{"task_id": "CPP/140", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring fix_spaces(string text){\n    string out=\"\";\n    int spacelen=0;\n    for (int i=0;i<text.length();i++)\n    if (text[i]==' ') spacelen+=1;\n    else\n    {\n        if (spacelen==1) out=out+'_';\n        if (spacelen==2) out=out+\"__\";\n        if (spacelen>2) out=out+'-';\n        spacelen=0;\n        out=out+text[i];\n    }\n    if (spacelen==1) out=out+'_';\n    if (spacelen==2) out=out+\"__\";\n    if (spacelen>2) out=out+'-';\n    return out;\n}\nint main(){\n\tauto result = fix_spaces(<FILL_ME>);\n\tassert(result==\"Example\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"FILL_ME\"", "fn": "fix_spaces", "para": "(string text)", "pass": false}
{"task_id": "CPP/140", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring fix_spaces(string text){\n    string out=\"\";\n    int spacelen=0;\n    for (int i=0;i<text.length();i++)\n    if (text[i]==' ') spacelen+=1;\n    else\n    {\n        if (spacelen==1) out=out+'_';\n        if (spacelen==2) out=out+\"__\";\n        if (spacelen>2) out=out+'-';\n        spacelen=0;\n        out=out+text[i];\n    }\n    if (spacelen==1) out=out+'_';\n    if (spacelen==2) out=out+\"__\";\n    if (spacelen>2) out=out+'-';\n    return out;\n}\nint main(){\n\tauto result = fix_spaces(<FILL_ME>);\n\tassert(result==\"Example\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"FILL_ME\"", "fn": "fix_spaces", "para": "(string text)", "pass": false}
{"task_id": "CPP/140", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring fix_spaces(string text){\n    string out=\"\";\n    int spacelen=0;\n    for (int i=0;i<text.length();i++)\n    if (text[i]==' ') spacelen+=1;\n    else\n    {\n        if (spacelen==1) out=out+'_';\n        if (spacelen==2) out=out+\"__\";\n        if (spacelen>2) out=out+'-';\n        spacelen=0;\n        out=out+text[i];\n    }\n    if (spacelen==1) out=out+'_';\n    if (spacelen==2) out=out+\"__\";\n    if (spacelen>2) out=out+'-';\n    return out;\n}\nint main(){\n\tauto result = fix_spaces(<FILL_ME>);\n\tassert(result==\"Example\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"FILL_ME\"", "fn": "fix_spaces", "para": "(string text)", "pass": false}
{"task_id": "CPP/140", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring fix_spaces(string text){\n    string out=\"\";\n    int spacelen=0;\n    for (int i=0;i<text.length();i++)\n    if (text[i]==' ') spacelen+=1;\n    else\n    {\n        if (spacelen==1) out=out+'_';\n        if (spacelen==2) out=out+\"__\";\n        if (spacelen>2) out=out+'-';\n        spacelen=0;\n        out=out+text[i];\n    }\n    if (spacelen==1) out=out+'_';\n    if (spacelen==2) out=out+\"__\";\n    if (spacelen>2) out=out+'-';\n    return out;\n}\nint main(){\n\tauto result = fix_spaces(<FILL_ME>);\n\tassert(result==\"Mudasir_Hanif_\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Mudasir Hanif\"", "fn": "fix_spaces", "para": "(string text)", "pass": false}
{"task_id": "CPP/140", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring fix_spaces(string text){\n    string out=\"\";\n    int spacelen=0;\n    for (int i=0;i<text.length();i++)\n    if (text[i]==' ') spacelen+=1;\n    else\n    {\n        if (spacelen==1) out=out+'_';\n        if (spacelen==2) out=out+\"__\";\n        if (spacelen>2) out=out+'-';\n        spacelen=0;\n        out=out+text[i];\n    }\n    if (spacelen==1) out=out+'_';\n    if (spacelen==2) out=out+\"__\";\n    if (spacelen>2) out=out+'-';\n    return out;\n}\nint main(){\n\tauto result = fix_spaces(<FILL_ME>);\n\tassert(result==\"Mudasir_Hanif_\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Mudasir Hanif\"", "fn": "fix_spaces", "para": "(string text)", "pass": false}
{"task_id": "CPP/140", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring fix_spaces(string text){\n    string out=\"\";\n    int spacelen=0;\n    for (int i=0;i<text.length();i++)\n    if (text[i]==' ') spacelen+=1;\n    else\n    {\n        if (spacelen==1) out=out+'_';\n        if (spacelen==2) out=out+\"__\";\n        if (spacelen>2) out=out+'-';\n        spacelen=0;\n        out=out+text[i];\n    }\n    if (spacelen==1) out=out+'_';\n    if (spacelen==2) out=out+\"__\";\n    if (spacelen>2) out=out+'-';\n    return out;\n}\nint main(){\n\tauto result = fix_spaces(<FILL_ME>);\n\tassert(result==\"Mudasir_Hanif_\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Mudasir Hanif\"", "fn": "fix_spaces", "para": "(string text)", "pass": false}
{"task_id": "CPP/140", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring fix_spaces(string text){\n    string out=\"\";\n    int spacelen=0;\n    for (int i=0;i<text.length();i++)\n    if (text[i]==' ') spacelen+=1;\n    else\n    {\n        if (spacelen==1) out=out+'_';\n        if (spacelen==2) out=out+\"__\";\n        if (spacelen>2) out=out+'-';\n        spacelen=0;\n        out=out+text[i];\n    }\n    if (spacelen==1) out=out+'_';\n    if (spacelen==2) out=out+\"__\";\n    if (spacelen>2) out=out+'-';\n    return out;\n}\nint main(){\n\tauto result = fix_spaces(<FILL_ME>);\n\tassert(result==\"Mudasir_Hanif_\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Mudasir Hanif \"", "fn": "fix_spaces", "para": "(string text)", "pass": true}
{"task_id": "CPP/140", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring fix_spaces(string text){\n    string out=\"\";\n    int spacelen=0;\n    for (int i=0;i<text.length();i++)\n    if (text[i]==' ') spacelen+=1;\n    else\n    {\n        if (spacelen==1) out=out+'_';\n        if (spacelen==2) out=out+\"__\";\n        if (spacelen>2) out=out+'-';\n        spacelen=0;\n        out=out+text[i];\n    }\n    if (spacelen==1) out=out+'_';\n    if (spacelen==2) out=out+\"__\";\n    if (spacelen>2) out=out+'-';\n    return out;\n}\nint main(){\n\tauto result = fix_spaces(<FILL_ME>);\n\tassert(result==\"Mudasir_Hanif_\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Mudasir Hanif\"", "fn": "fix_spaces", "para": "(string text)", "pass": false}
{"task_id": "CPP/140", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring fix_spaces(string text){\n    string out=\"\";\n    int spacelen=0;\n    for (int i=0;i<text.length();i++)\n    if (text[i]==' ') spacelen+=1;\n    else\n    {\n        if (spacelen==1) out=out+'_';\n        if (spacelen==2) out=out+\"__\";\n        if (spacelen>2) out=out+'-';\n        spacelen=0;\n        out=out+text[i];\n    }\n    if (spacelen==1) out=out+'_';\n    if (spacelen==2) out=out+\"__\";\n    if (spacelen>2) out=out+'-';\n    return out;\n}\nint main(){\n\tauto result = fix_spaces(<FILL_ME>);\n\tassert(result==\"Yellow_Yellow__Dirty__Fellow\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Yellow Yellow  Dirty  Fellow\"", "fn": "fix_spaces", "para": "(string text)", "pass": true}
{"task_id": "CPP/140", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring fix_spaces(string text){\n    string out=\"\";\n    int spacelen=0;\n    for (int i=0;i<text.length();i++)\n    if (text[i]==' ') spacelen+=1;\n    else\n    {\n        if (spacelen==1) out=out+'_';\n        if (spacelen==2) out=out+\"__\";\n        if (spacelen>2) out=out+'-';\n        spacelen=0;\n        out=out+text[i];\n    }\n    if (spacelen==1) out=out+'_';\n    if (spacelen==2) out=out+\"__\";\n    if (spacelen>2) out=out+'-';\n    return out;\n}\nint main(){\n\tauto result = fix_spaces(<FILL_ME>);\n\tassert(result==\"Yellow_Yellow__Dirty__Fellow\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Yellow Yellow  Dirty  Fellow\"", "fn": "fix_spaces", "para": "(string text)", "pass": true}
{"task_id": "CPP/140", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring fix_spaces(string text){\n    string out=\"\";\n    int spacelen=0;\n    for (int i=0;i<text.length();i++)\n    if (text[i]==' ') spacelen+=1;\n    else\n    {\n        if (spacelen==1) out=out+'_';\n        if (spacelen==2) out=out+\"__\";\n        if (spacelen>2) out=out+'-';\n        spacelen=0;\n        out=out+text[i];\n    }\n    if (spacelen==1) out=out+'_';\n    if (spacelen==2) out=out+\"__\";\n    if (spacelen>2) out=out+'-';\n    return out;\n}\nint main(){\n\tauto result = fix_spaces(<FILL_ME>);\n\tassert(result==\"Yellow_Yellow__Dirty__Fellow\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Yellow Yellow  Dirty  Fellow\"", "fn": "fix_spaces", "para": "(string text)", "pass": true}
{"task_id": "CPP/140", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring fix_spaces(string text){\n    string out=\"\";\n    int spacelen=0;\n    for (int i=0;i<text.length();i++)\n    if (text[i]==' ') spacelen+=1;\n    else\n    {\n        if (spacelen==1) out=out+'_';\n        if (spacelen==2) out=out+\"__\";\n        if (spacelen>2) out=out+'-';\n        spacelen=0;\n        out=out+text[i];\n    }\n    if (spacelen==1) out=out+'_';\n    if (spacelen==2) out=out+\"__\";\n    if (spacelen>2) out=out+'-';\n    return out;\n}\nint main(){\n\tauto result = fix_spaces(<FILL_ME>);\n\tassert(result==\"Yellow_Yellow__Dirty__Fellow\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Yellow Yellow  Dirty  Fellow\"", "fn": "fix_spaces", "para": "(string text)", "pass": true}
{"task_id": "CPP/140", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring fix_spaces(string text){\n    string out=\"\";\n    int spacelen=0;\n    for (int i=0;i<text.length();i++)\n    if (text[i]==' ') spacelen+=1;\n    else\n    {\n        if (spacelen==1) out=out+'_';\n        if (spacelen==2) out=out+\"__\";\n        if (spacelen>2) out=out+'-';\n        spacelen=0;\n        out=out+text[i];\n    }\n    if (spacelen==1) out=out+'_';\n    if (spacelen==2) out=out+\"__\";\n    if (spacelen>2) out=out+'-';\n    return out;\n}\nint main(){\n\tauto result = fix_spaces(<FILL_ME>);\n\tassert(result==\"Yellow_Yellow__Dirty__Fellow\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Yellow Yellow  Dirty  Fellow\"", "fn": "fix_spaces", "para": "(string text)", "pass": true}
{"task_id": "CPP/141", "code": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring file_name_check(string file_name){\n    int numdigit=0,numdot=0;\n    if (file_name.length()<5) return \"No\";\n    char w=file_name[0];\n    if (w<65 or (w>90 and w<97) or w>122) return \"No\";\n    string last=file_name.substr(file_name.length()-4,4);\n    if (last!=\".txt\" and last!=\".exe\" and last!=\".dll\") return \"No\";\n    for (int i=0;i<file_name.length();i++)\n    {\n        if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;\n        if (file_name[i]=='.') numdot+=1;\n    }\n    if (numdigit>3 or numdot!=1) return \"No\";\n    return \"Yes\"; \n}\nint main(){\n\tauto result = file_name_check(<FILL_ME>);\n\tassert(result==\"No\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"my_file.txt\"", "fn": "file_name_check", "para": "(string file_name)", "pass": false}
{"task_id": "CPP/141", "code": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring file_name_check(string file_name){\n    int numdigit=0,numdot=0;\n    if (file_name.length()<5) return \"No\";\n    char w=file_name[0];\n    if (w<65 or (w>90 and w<97) or w>122) return \"No\";\n    string last=file_name.substr(file_name.length()-4,4);\n    if (last!=\".txt\" and last!=\".exe\" and last!=\".dll\") return \"No\";\n    for (int i=0;i<file_name.length();i++)\n    {\n        if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;\n        if (file_name[i]=='.') numdot+=1;\n    }\n    if (numdigit>3 or numdot!=1) return \"No\";\n    return \"Yes\"; \n}\nint main(){\n\tauto result = file_name_check(<FILL_ME>);\n\tassert(result==\"No\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"my_file.txt\"", "fn": "file_name_check", "para": "(string file_name)", "pass": false}
{"task_id": "CPP/141", "code": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring file_name_check(string file_name){\n    int numdigit=0,numdot=0;\n    if (file_name.length()<5) return \"No\";\n    char w=file_name[0];\n    if (w<65 or (w>90 and w<97) or w>122) return \"No\";\n    string last=file_name.substr(file_name.length()-4,4);\n    if (last!=\".txt\" and last!=\".exe\" and last!=\".dll\") return \"No\";\n    for (int i=0;i<file_name.length();i++)\n    {\n        if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;\n        if (file_name[i]=='.') numdot+=1;\n    }\n    if (numdigit>3 or numdot!=1) return \"No\";\n    return \"Yes\"; \n}\nint main(){\n\tauto result = file_name_check(<FILL_ME>);\n\tassert(result==\"No\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"my_file.txt\"", "fn": "file_name_check", "para": "(string file_name)", "pass": false}
{"task_id": "CPP/141", "code": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring file_name_check(string file_name){\n    int numdigit=0,numdot=0;\n    if (file_name.length()<5) return \"No\";\n    char w=file_name[0];\n    if (w<65 or (w>90 and w<97) or w>122) return \"No\";\n    string last=file_name.substr(file_name.length()-4,4);\n    if (last!=\".txt\" and last!=\".exe\" and last!=\".dll\") return \"No\";\n    for (int i=0;i<file_name.length();i++)\n    {\n        if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;\n        if (file_name[i]=='.') numdot+=1;\n    }\n    if (numdigit>3 or numdot!=1) return \"No\";\n    return \"Yes\"; \n}\nint main(){\n\tauto result = file_name_check(<FILL_ME>);\n\tassert(result==\"No\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"file.exe\"", "fn": "file_name_check", "para": "(string file_name)", "pass": false}
{"task_id": "CPP/141", "code": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring file_name_check(string file_name){\n    int numdigit=0,numdot=0;\n    if (file_name.length()<5) return \"No\";\n    char w=file_name[0];\n    if (w<65 or (w>90 and w<97) or w>122) return \"No\";\n    string last=file_name.substr(file_name.length()-4,4);\n    if (last!=\".txt\" and last!=\".exe\" and last!=\".dll\") return \"No\";\n    for (int i=0;i<file_name.length();i++)\n    {\n        if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;\n        if (file_name[i]=='.') numdot+=1;\n    }\n    if (numdigit>3 or numdot!=1) return \"No\";\n    return \"Yes\"; \n}\nint main(){\n\tauto result = file_name_check(<FILL_ME>);\n\tassert(result==\"No\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"notvalid.exe\"", "fn": "file_name_check", "para": "(string file_name)", "pass": false}
{"task_id": "CPP/141", "code": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring file_name_check(string file_name){\n    int numdigit=0,numdot=0;\n    if (file_name.length()<5) return \"No\";\n    char w=file_name[0];\n    if (w<65 or (w>90 and w<97) or w>122) return \"No\";\n    string last=file_name.substr(file_name.length()-4,4);\n    if (last!=\".txt\" and last!=\".exe\" and last!=\".dll\") return \"No\";\n    for (int i=0;i<file_name.length();i++)\n    {\n        if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;\n        if (file_name[i]=='.') numdot+=1;\n    }\n    if (numdigit>3 or numdot!=1) return \"No\";\n    return \"Yes\"; \n}\nint main(){\n\tauto result = file_name_check(<FILL_ME>);\n\tassert(result==\"Yes\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"abc123.txt\"", "fn": "file_name_check", "para": "(string file_name)", "pass": true}
{"task_id": "CPP/141", "code": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring file_name_check(string file_name){\n    int numdigit=0,numdot=0;\n    if (file_name.length()<5) return \"No\";\n    char w=file_name[0];\n    if (w<65 or (w>90 and w<97) or w>122) return \"No\";\n    string last=file_name.substr(file_name.length()-4,4);\n    if (last!=\".txt\" and last!=\".exe\" and last!=\".dll\") return \"No\";\n    for (int i=0;i<file_name.length();i++)\n    {\n        if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;\n        if (file_name[i]=='.') numdot+=1;\n    }\n    if (numdigit>3 or numdot!=1) return \"No\";\n    return \"Yes\"; \n}\nint main(){\n\tauto result = file_name_check(<FILL_ME>);\n\tassert(result==\"Yes\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"abc123.txt\"", "fn": "file_name_check", "para": "(string file_name)", "pass": true}
{"task_id": "CPP/141", "code": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring file_name_check(string file_name){\n    int numdigit=0,numdot=0;\n    if (file_name.length()<5) return \"No\";\n    char w=file_name[0];\n    if (w<65 or (w>90 and w<97) or w>122) return \"No\";\n    string last=file_name.substr(file_name.length()-4,4);\n    if (last!=\".txt\" and last!=\".exe\" and last!=\".dll\") return \"No\";\n    for (int i=0;i<file_name.length();i++)\n    {\n        if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;\n        if (file_name[i]=='.') numdot+=1;\n    }\n    if (numdigit>3 or numdot!=1) return \"No\";\n    return \"Yes\"; \n}\nint main(){\n\tauto result = file_name_check(<FILL_ME>);\n\tassert(result==\"Yes\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"abc123.txt\"", "fn": "file_name_check", "para": "(string file_name)", "pass": true}
{"task_id": "CPP/141", "code": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring file_name_check(string file_name){\n    int numdigit=0,numdot=0;\n    if (file_name.length()<5) return \"No\";\n    char w=file_name[0];\n    if (w<65 or (w>90 and w<97) or w>122) return \"No\";\n    string last=file_name.substr(file_name.length()-4,4);\n    if (last!=\".txt\" and last!=\".exe\" and last!=\".dll\") return \"No\";\n    for (int i=0;i<file_name.length();i++)\n    {\n        if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;\n        if (file_name[i]=='.') numdot+=1;\n    }\n    if (numdigit>3 or numdot!=1) return \"No\";\n    return \"Yes\"; \n}\nint main(){\n\tauto result = file_name_check(<FILL_ME>);\n\tassert(result==\"Yes\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"abc123.txt\"", "fn": "file_name_check", "para": "(string file_name)", "pass": true}
{"task_id": "CPP/141", "code": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring file_name_check(string file_name){\n    int numdigit=0,numdot=0;\n    if (file_name.length()<5) return \"No\";\n    char w=file_name[0];\n    if (w<65 or (w>90 and w<97) or w>122) return \"No\";\n    string last=file_name.substr(file_name.length()-4,4);\n    if (last!=\".txt\" and last!=\".exe\" and last!=\".dll\") return \"No\";\n    for (int i=0;i<file_name.length();i++)\n    {\n        if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;\n        if (file_name[i]=='.') numdot+=1;\n    }\n    if (numdigit>3 or numdot!=1) return \"No\";\n    return \"Yes\"; \n}\nint main(){\n\tauto result = file_name_check(<FILL_ME>);\n\tassert(result==\"Yes\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"abc123.txt\"", "fn": "file_name_check", "para": "(string file_name)", "pass": true}
{"task_id": "CPP/142", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==-1448);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{-1, -2, -3, -4, -5, -6, -7, -8, -9, -10}", "fn": "sum_squares", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/142", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==-1448);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{-1, -2, -3, -4, -5, -6, -7, -8, -9}", "fn": "sum_squares", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/142", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==-1448);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{-1, -2, -3, -4, -5, -6, -7, -8, -9}", "fn": "sum_squares", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/142", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==-1448);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{-1, -2, -3, -4, -5, -6, -7, -8, -9}", "fn": "sum_squares", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/142", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==-1448);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{-1, -2, -3, -4, -5, -6, -7, -8, -9}", "fn": "sum_squares", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/142", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==14);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 2, 3, 4}", "fn": "sum_squares", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/142", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==14);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 2, 3, 4}", "fn": "sum_squares", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/142", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==14);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 2, 3, 4}", "fn": "sum_squares", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/142", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==14);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 2, 3, 4}", "fn": "sum_squares", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/142", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==14);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 2, 3, 4}", "fn": "sum_squares", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/142", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==9);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{3}", "fn": "sum_squares", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/142", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==9);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{3}", "fn": "sum_squares", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/142", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==9);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{3}", "fn": "sum_squares", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/142", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==9);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{3}", "fn": "sum_squares", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/142", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==9);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{3}", "fn": "sum_squares", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/142", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==-126);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{-3, -2, -1, 0, 1, 2, 3}", "fn": "sum_squares", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/142", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==-126);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{-1, -2, -3, -4, -5, -6, -7, -8, -9}", "fn": "sum_squares", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/142", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==-126);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{-1, -2, -3, -4, -5, -6, -7, -8, -9}", "fn": "sum_squares", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/142", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==-126);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{-1, -2, -3, -4, -5, -6, -7, -8, -9}", "fn": "sum_squares", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/142", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==-126);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{-1, -2, -3, -4, -5, -6, -7, -8, -9}", "fn": "sum_squares", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/142", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==-14196);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{-2, 3, 5, -4, 6, 7, 8, 9}", "fn": "sum_squares", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/142", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==-14196);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{-2, 3, 5, -4, 6, 7, 8, 9}", "fn": "sum_squares", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/142", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==-14196);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{-2, 3, 5, -4, 6, 7, 8, 9}", "fn": "sum_squares", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/142", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==-14196);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{-2, 3, 5, -4, 6, 7, 8, 9}", "fn": "sum_squares", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/142", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==-14196);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{-2, 3, 5, -4, 6, 7, 8, 9}", "fn": "sum_squares", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/142", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==3030);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}", "fn": "sum_squares", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/142", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==3030);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}", "fn": "sum_squares", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/142", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==3030);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}", "fn": "sum_squares", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/142", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==3030);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1,2,3,4,5,6,7,8,9,10}", "fn": "sum_squares", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/142", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==3030);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}", "fn": "sum_squares", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/142", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==6);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 2, 3}", "fn": "sum_squares", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/142", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==6);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 2, 3}", "fn": "sum_squares", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/142", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==6);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 2, 3}", "fn": "sum_squares", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/142", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==6);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 2, 3}", "fn": "sum_squares", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/142", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==6);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, 2, 3}", "fn": "sum_squares", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/142", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==-3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, -2, 2, -1}", "fn": "sum_squares", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/142", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==-3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, -2, 2, -1}", "fn": "sum_squares", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/142", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==-3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, -2, 2, -1}", "fn": "sum_squares", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/142", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==-3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{1, -2, 2, -1}", "fn": "sum_squares", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/142", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==-3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1, -2, 3, -4}", "fn": "sum_squares", "para": "(vector<int> lst)", "pass": false}
{"task_id": "CPP/142", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{0}", "fn": "sum_squares", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/142", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{0}", "fn": "sum_squares", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/142", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{0}", "fn": "sum_squares", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/142", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int> {0}", "fn": "sum_squares", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/142", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\nint main(){\n\tauto result = sum_squares(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{0}", "fn": "sum_squares", "para": "(vector<int> lst)", "pass": true}
{"task_id": "CPP/143", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    if (out.length()>0)\n        out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = words_in_sentence(<FILL_ME>);\n\tassert(result==\"gofor\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"go for the win\"", "fn": "words_in_sentence", "para": "(string sentence)", "pass": false}
{"task_id": "CPP/143", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    if (out.length()>0)\n        out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = words_in_sentence(<FILL_ME>);\n\tassert(result==\"gofor\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"gofor the win\"", "fn": "words_in_sentence", "para": "(string sentence)", "pass": false}
{"task_id": "CPP/143", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    if (out.length()>0)\n        out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = words_in_sentence(<FILL_ME>);\n\tassert(result==\"gofor\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"gofor the win\"", "fn": "words_in_sentence", "para": "(string sentence)", "pass": false}
{"task_id": "CPP/143", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    if (out.length()>0)\n        out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = words_in_sentence(<FILL_ME>);\n\tassert(result==\"gofor\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"gofor the win\"", "fn": "words_in_sentence", "para": "(string sentence)", "pass": false}
{"task_id": "CPP/143", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    if (out.length()>0)\n        out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = words_in_sentence(<FILL_ME>);\n\tassert(result==\"gofor\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"gofor the win\"", "fn": "words_in_sentence", "para": "(string sentence)", "pass": false}
{"task_id": "CPP/143", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    if (out.length()>0)\n        out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = words_in_sentence(<FILL_ME>);\n\tassert(result==\"\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Hello world\"", "fn": "words_in_sentence", "para": "(string sentence)", "pass": false}
{"task_id": "CPP/143", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    if (out.length()>0)\n        out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = words_in_sentence(<FILL_ME>);\n\tassert(result==\"\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"The quick brown fox jumps over the lazy dog\"", "fn": "words_in_sentence", "para": "(string sentence)", "pass": false}
{"task_id": "CPP/143", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    if (out.length()>0)\n        out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = words_in_sentence(<FILL_ME>);\n\tassert(result==\"\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"The quick brown fox jumps over the lazy dog\"", "fn": "words_in_sentence", "para": "(string sentence)", "pass": false}
{"task_id": "CPP/143", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    if (out.length()>0)\n        out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = words_in_sentence(<FILL_ME>);\n\tassert(result==\"\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"The quick brown fox jumps over the lazy dog\"", "fn": "words_in_sentence", "para": "(string sentence)", "pass": false}
{"task_id": "CPP/143", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    if (out.length()>0)\n        out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = words_in_sentence(<FILL_ME>);\n\tassert(result==\"\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Hello world\"", "fn": "words_in_sentence", "para": "(string sentence)", "pass": false}
{"task_id": "CPP/143", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    if (out.length()>0)\n        out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = words_in_sentence(<FILL_ME>);\n\tassert(result==\"thereisnoplace\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"there is no place\"", "fn": "words_in_sentence", "para": "(string sentence)", "pass": false}
{"task_id": "CPP/143", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    if (out.length()>0)\n        out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = words_in_sentence(<FILL_ME>);\n\tassert(result==\"thereisnoplace\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"there is no place\"", "fn": "words_in_sentence", "para": "(string sentence)", "pass": false}
{"task_id": "CPP/143", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    if (out.length()>0)\n        out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = words_in_sentence(<FILL_ME>);\n\tassert(result==\"thereisnoplace\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"there is no place\"", "fn": "words_in_sentence", "para": "(string sentence)", "pass": false}
{"task_id": "CPP/143", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    if (out.length()>0)\n        out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = words_in_sentence(<FILL_ME>);\n\tassert(result==\"thereisnoplace\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"there is no place\"", "fn": "words_in_sentence", "para": "(string sentence)", "pass": false}
{"task_id": "CPP/143", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    if (out.length()>0)\n        out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = words_in_sentence(<FILL_ME>);\n\tassert(result==\"thereisnoplace\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"there is no place\"", "fn": "words_in_sentence", "para": "(string sentence)", "pass": false}
{"task_id": "CPP/143", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    if (out.length()>0)\n        out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = words_in_sentence(<FILL_ME>);\n\tassert(result==\"is\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"this is a test\"", "fn": "words_in_sentence", "para": "(string sentence)", "pass": true}
{"task_id": "CPP/143", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    if (out.length()>0)\n        out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = words_in_sentence(<FILL_ME>);\n\tassert(result==\"is\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"This is a test\"", "fn": "words_in_sentence", "para": "(string sentence)", "pass": true}
{"task_id": "CPP/143", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    if (out.length()>0)\n        out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = words_in_sentence(<FILL_ME>);\n\tassert(result==\"is\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"this is a test\"", "fn": "words_in_sentence", "para": "(string sentence)", "pass": true}
{"task_id": "CPP/143", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    if (out.length()>0)\n        out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = words_in_sentence(<FILL_ME>);\n\tassert(result==\"is\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"This is a test sentence\"", "fn": "words_in_sentence", "para": "(string sentence)", "pass": true}
{"task_id": "CPP/143", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    if (out.length()>0)\n        out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = words_in_sentence(<FILL_ME>);\n\tassert(result==\"is\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"this is a test\"", "fn": "words_in_sentence", "para": "(string sentence)", "pass": true}
{"task_id": "CPP/143", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    if (out.length()>0)\n        out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = words_in_sentence(<FILL_ME>);\n\tassert(result==\"HiamHussein\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Hi am Hussein\"", "fn": "words_in_sentence", "para": "(string sentence)", "pass": false}
{"task_id": "CPP/143", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    if (out.length()>0)\n        out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = words_in_sentence(<FILL_ME>);\n\tassert(result==\"HiamHussein\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Hi am Hussein\"", "fn": "words_in_sentence", "para": "(string sentence)", "pass": false}
{"task_id": "CPP/143", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    if (out.length()>0)\n        out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = words_in_sentence(<FILL_ME>);\n\tassert(result==\"HiamHussein\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Hi am Hussein\"", "fn": "words_in_sentence", "para": "(string sentence)", "pass": false}
{"task_id": "CPP/143", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    if (out.length()>0)\n        out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = words_in_sentence(<FILL_ME>);\n\tassert(result==\"HiamHussein\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Hi am Hussein\"", "fn": "words_in_sentence", "para": "(string sentence)", "pass": false}
{"task_id": "CPP/143", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    if (out.length()>0)\n        out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = words_in_sentence(<FILL_ME>);\n\tassert(result==\"HiamHussein\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Hi am Hussein\"", "fn": "words_in_sentence", "para": "(string sentence)", "pass": false}
{"task_id": "CPP/143", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    if (out.length()>0)\n        out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = words_in_sentence(<FILL_ME>);\n\tassert(result==\"goforit\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"goforit\"", "fn": "words_in_sentence", "para": "(string sentence)", "pass": true}
{"task_id": "CPP/143", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    if (out.length()>0)\n        out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = words_in_sentence(<FILL_ME>);\n\tassert(result==\"goforit\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"goforit\"", "fn": "words_in_sentence", "para": "(string sentence)", "pass": true}
{"task_id": "CPP/143", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    if (out.length()>0)\n        out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = words_in_sentence(<FILL_ME>);\n\tassert(result==\"goforit\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"goforit\"", "fn": "words_in_sentence", "para": "(string sentence)", "pass": true}
{"task_id": "CPP/143", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    if (out.length()>0)\n        out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = words_in_sentence(<FILL_ME>);\n\tassert(result==\"goforit\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"goforit\"", "fn": "words_in_sentence", "para": "(string sentence)", "pass": true}
{"task_id": "CPP/143", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    if (out.length()>0)\n        out.pop_back();\n    return out;\n}\nint main(){\n\tauto result = words_in_sentence(<FILL_ME>);\n\tassert(result==\"goforit\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"goforit\"", "fn": "words_in_sentence", "para": "(string sentence)", "pass": true}
{"task_id": "CPP/144", "code": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nbool simplify(string x,string n){\n    int a,b,c,d,i;\n    for (i=0;i<x.size();i++)\n        if (x[i]=='/') \n        {\n            a=atoi(x.substr(0,i).c_str());\n            b=atoi(x.substr(i+1).c_str());\n        }\n    for (i=0;i<n.size();i++)\n        if (n[i]=='/') \n        {\n            c=atoi(n.substr(0,i).c_str());\n            d=atoi(n.substr(i+1).c_str());\n        }\n    if ((a*c)%(b*d)==0) return true;\n    return false;\n}\nint main(){\n\tauto result = simplify(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"6/8\", \"3/4\"", "fn": "simplify", "para": "(string x,string n)", "pass": false}
{"task_id": "CPP/144", "code": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nbool simplify(string x,string n){\n    int a,b,c,d,i;\n    for (i=0;i<x.size();i++)\n        if (x[i]=='/') \n        {\n            a=atoi(x.substr(0,i).c_str());\n            b=atoi(x.substr(i+1).c_str());\n        }\n    for (i=0;i<n.size();i++)\n        if (n[i]=='/') \n        {\n            c=atoi(n.substr(0,i).c_str());\n            d=atoi(n.substr(i+1).c_str());\n        }\n    if ((a*c)%(b*d)==0) return true;\n    return false;\n}\nint main(){\n\tauto result = simplify(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"2/3\", \"4/6\"", "fn": "simplify", "para": "(string x,string n)", "pass": false}
{"task_id": "CPP/144", "code": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nbool simplify(string x,string n){\n    int a,b,c,d,i;\n    for (i=0;i<x.size();i++)\n        if (x[i]=='/') \n        {\n            a=atoi(x.substr(0,i).c_str());\n            b=atoi(x.substr(i+1).c_str());\n        }\n    for (i=0;i<n.size();i++)\n        if (n[i]=='/') \n        {\n            c=atoi(n.substr(0,i).c_str());\n            d=atoi(n.substr(i+1).c_str());\n        }\n    if ((a*c)%(b*d)==0) return true;\n    return false;\n}\nint main(){\n\tauto result = simplify(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"8/12\", \"2/3\"", "fn": "simplify", "para": "(string x,string n)", "pass": false}
{"task_id": "CPP/144", "code": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nbool simplify(string x,string n){\n    int a,b,c,d,i;\n    for (i=0;i<x.size();i++)\n        if (x[i]=='/') \n        {\n            a=atoi(x.substr(0,i).c_str());\n            b=atoi(x.substr(i+1).c_str());\n        }\n    for (i=0;i<n.size();i++)\n        if (n[i]=='/') \n        {\n            c=atoi(n.substr(0,i).c_str());\n            d=atoi(n.substr(i+1).c_str());\n        }\n    if ((a*c)%(b*d)==0) return true;\n    return false;\n}\nint main(){\n\tauto result = simplify(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"4/6\",\"2/3\"", "fn": "simplify", "para": "(string x,string n)", "pass": false}
{"task_id": "CPP/144", "code": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nbool simplify(string x,string n){\n    int a,b,c,d,i;\n    for (i=0;i<x.size();i++)\n        if (x[i]=='/') \n        {\n            a=atoi(x.substr(0,i).c_str());\n            b=atoi(x.substr(i+1).c_str());\n        }\n    for (i=0;i<n.size();i++)\n        if (n[i]=='/') \n        {\n            c=atoi(n.substr(0,i).c_str());\n            d=atoi(n.substr(i+1).c_str());\n        }\n    if ((a*c)%(b*d)==0) return true;\n    return false;\n}\nint main(){\n\tauto result = simplify(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"4/6\", \"2/3\"", "fn": "simplify", "para": "(string x,string n)", "pass": false}
{"task_id": "CPP/144", "code": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nbool simplify(string x,string n){\n    int a,b,c,d,i;\n    for (i=0;i<x.size();i++)\n        if (x[i]=='/') \n        {\n            a=atoi(x.substr(0,i).c_str());\n            b=atoi(x.substr(i+1).c_str());\n        }\n    for (i=0;i<n.size();i++)\n        if (n[i]=='/') \n        {\n            c=atoi(n.substr(0,i).c_str());\n            d=atoi(n.substr(i+1).c_str());\n        }\n    if ((a*c)%(b*d)==0) return true;\n    return false;\n}\nint main(){\n\tauto result = simplify(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"2/3\",\"4/6\"", "fn": "simplify", "para": "(string x,string n)", "pass": true}
{"task_id": "CPP/144", "code": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nbool simplify(string x,string n){\n    int a,b,c,d,i;\n    for (i=0;i<x.size();i++)\n        if (x[i]=='/') \n        {\n            a=atoi(x.substr(0,i).c_str());\n            b=atoi(x.substr(i+1).c_str());\n        }\n    for (i=0;i<n.size();i++)\n        if (n[i]=='/') \n        {\n            c=atoi(n.substr(0,i).c_str());\n            d=atoi(n.substr(i+1).c_str());\n        }\n    if ((a*c)%(b*d)==0) return true;\n    return false;\n}\nint main(){\n\tauto result = simplify(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"2/3\",\"4/6\"", "fn": "simplify", "para": "(string x,string n)", "pass": true}
{"task_id": "CPP/144", "code": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nbool simplify(string x,string n){\n    int a,b,c,d,i;\n    for (i=0;i<x.size();i++)\n        if (x[i]=='/') \n        {\n            a=atoi(x.substr(0,i).c_str());\n            b=atoi(x.substr(i+1).c_str());\n        }\n    for (i=0;i<n.size();i++)\n        if (n[i]=='/') \n        {\n            c=atoi(n.substr(0,i).c_str());\n            d=atoi(n.substr(i+1).c_str());\n        }\n    if ((a*c)%(b*d)==0) return true;\n    return false;\n}\nint main(){\n\tauto result = simplify(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"2/3\",\"4/6\"", "fn": "simplify", "para": "(string x,string n)", "pass": true}
{"task_id": "CPP/144", "code": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nbool simplify(string x,string n){\n    int a,b,c,d,i;\n    for (i=0;i<x.size();i++)\n        if (x[i]=='/') \n        {\n            a=atoi(x.substr(0,i).c_str());\n            b=atoi(x.substr(i+1).c_str());\n        }\n    for (i=0;i<n.size();i++)\n        if (n[i]=='/') \n        {\n            c=atoi(n.substr(0,i).c_str());\n            d=atoi(n.substr(i+1).c_str());\n        }\n    if ((a*c)%(b*d)==0) return true;\n    return false;\n}\nint main(){\n\tauto result = simplify(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"2/3\",\"4/6\"", "fn": "simplify", "para": "(string x,string n)", "pass": true}
{"task_id": "CPP/144", "code": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nbool simplify(string x,string n){\n    int a,b,c,d,i;\n    for (i=0;i<x.size();i++)\n        if (x[i]=='/') \n        {\n            a=atoi(x.substr(0,i).c_str());\n            b=atoi(x.substr(i+1).c_str());\n        }\n    for (i=0;i<n.size();i++)\n        if (n[i]=='/') \n        {\n            c=atoi(n.substr(0,i).c_str());\n            d=atoi(n.substr(i+1).c_str());\n        }\n    if ((a*c)%(b*d)==0) return true;\n    return false;\n}\nint main(){\n\tauto result = simplify(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"2/3\",\"4/6\"", "fn": "simplify", "para": "(string x,string n)", "pass": true}
{"task_id": "CPP/145", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n    vector<int> sumdigit={};\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=1;j<nums.size();j++)\n    if (sumdigit[j-1]>sumdigit[j])\n    {\n        m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;\n        m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;\n    }\n     \n    return nums;\n}\nint main(){\n\tauto result = order_by_points(<FILL_ME>);\n\tassert(issame(result,{1,10,2,11,3,4,5,6,7,8,9}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1,10,2,11,3,4,5,6,7,8,9}", "fn": "order_by_points", "para": "(vector<int> nums)", "pass": true}
{"task_id": "CPP/145", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n    vector<int> sumdigit={};\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=1;j<nums.size();j++)\n    if (sumdigit[j-1]>sumdigit[j])\n    {\n        m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;\n        m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;\n    }\n     \n    return nums;\n}\nint main(){\n\tauto result = order_by_points(<FILL_ME>);\n\tassert(issame(result,{1,10,2,11,3,4,5,6,7,8,9}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1,10,2,11,3,4,5,6,7,8,9}", "fn": "order_by_points", "para": "(vector<int> nums)", "pass": true}
{"task_id": "CPP/145", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n    vector<int> sumdigit={};\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=1;j<nums.size();j++)\n    if (sumdigit[j-1]>sumdigit[j])\n    {\n        m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;\n        m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;\n    }\n     \n    return nums;\n}\nint main(){\n\tauto result = order_by_points(<FILL_ME>);\n\tassert(issame(result,{1,10,2,11,3,4,5,6,7,8,9}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1,10,2,11,3,4,5,6,7,8,9}", "fn": "order_by_points", "para": "(vector<int> nums)", "pass": true}
{"task_id": "CPP/145", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n    vector<int> sumdigit={};\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=1;j<nums.size();j++)\n    if (sumdigit[j-1]>sumdigit[j])\n    {\n        m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;\n        m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;\n    }\n     \n    return nums;\n}\nint main(){\n\tauto result = order_by_points(<FILL_ME>);\n\tassert(issame(result,{1,10,2,11,3,4,5,6,7,8,9}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1,10,2,11,3,4,5,6,7,8,9}", "fn": "order_by_points", "para": "(vector<int> nums)", "pass": true}
{"task_id": "CPP/145", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n    vector<int> sumdigit={};\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=1;j<nums.size();j++)\n    if (sumdigit[j-1]>sumdigit[j])\n    {\n        m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;\n        m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;\n    }\n     \n    return nums;\n}\nint main(){\n\tauto result = order_by_points(<FILL_ME>);\n\tassert(issame(result,{1,10,2,11,3,4,5,6,7,8,9}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1,10,2,11,3,4,5,6,7,8,9}", "fn": "order_by_points", "para": "(vector<int> nums)", "pass": true}
{"task_id": "CPP/145", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n    vector<int> sumdigit={};\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=1;j<nums.size();j++)\n    if (sumdigit[j-1]>sumdigit[j])\n    {\n        m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;\n        m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;\n    }\n     \n    return nums;\n}\nint main(){\n\tauto result = order_by_points(<FILL_ME>);\n\tassert(issame(result,{-76,-21,0,4,23,6,6}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{23, 6, -21, 4, 0, 6, -76}", "fn": "order_by_points", "para": "(vector<int> nums)", "pass": false}
{"task_id": "CPP/145", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n    vector<int> sumdigit={};\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=1;j<nums.size();j++)\n    if (sumdigit[j-1]>sumdigit[j])\n    {\n        m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;\n        m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;\n    }\n     \n    return nums;\n}\nint main(){\n\tauto result = order_by_points(<FILL_ME>);\n\tassert(issame(result,{-76,-21,0,4,23,6,6}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{23, 6, -21, 4, 0, 6, -76}", "fn": "order_by_points", "para": "(vector<int> nums)", "pass": false}
{"task_id": "CPP/145", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n    vector<int> sumdigit={};\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=1;j<nums.size();j++)\n    if (sumdigit[j-1]>sumdigit[j])\n    {\n        m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;\n        m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;\n    }\n     \n    return nums;\n}\nint main(){\n\tauto result = order_by_points(<FILL_ME>);\n\tassert(issame(result,{-76,-21,0,4,23,6,6}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{23, 6, -21, 4, 0, 6, -76}", "fn": "order_by_points", "para": "(vector<int> nums)", "pass": false}
{"task_id": "CPP/145", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n    vector<int> sumdigit={};\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=1;j<nums.size();j++)\n    if (sumdigit[j-1]>sumdigit[j])\n    {\n        m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;\n        m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;\n    }\n     \n    return nums;\n}\nint main(){\n\tauto result = order_by_points(<FILL_ME>);\n\tassert(issame(result,{-76,-21,0,4,23,6,6}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{23, 6, -21, 4, 0, 6, -76}", "fn": "order_by_points", "para": "(vector<int> nums)", "pass": false}
{"task_id": "CPP/145", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n    vector<int> sumdigit={};\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=1;j<nums.size();j++)\n    if (sumdigit[j-1]>sumdigit[j])\n    {\n        m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;\n        m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;\n    }\n     \n    return nums;\n}\nint main(){\n\tauto result = order_by_points(<FILL_ME>);\n\tassert(issame(result,{-76,-21,0,4,23,6,6}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{23, 6, -21, 4, 0, 6, -76}", "fn": "order_by_points", "para": "(vector<int> nums)", "pass": false}
{"task_id": "CPP/145", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n    vector<int> sumdigit={};\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=1;j<nums.size();j++)\n    if (sumdigit[j-1]>sumdigit[j])\n    {\n        m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;\n        m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;\n    }\n     \n    return nums;\n}\nint main(){\n\tauto result = order_by_points(<FILL_ME>);\n\tassert(issame(result,{0,2,3,6,53,423,423,423,1234,145,37,46,56,463,3457}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{0,2,3,6,53,423,423,423,1234,145,37,46,56,463,3457}", "fn": "order_by_points", "para": "(vector<int> nums)", "pass": true}
{"task_id": "CPP/145", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n    vector<int> sumdigit={};\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=1;j<nums.size();j++)\n    if (sumdigit[j-1]>sumdigit[j])\n    {\n        m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;\n        m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;\n    }\n     \n    return nums;\n}\nint main(){\n\tauto result = order_by_points(<FILL_ME>);\n\tassert(issame(result,{0,2,3,6,53,423,423,423,1234,145,37,46,56,463,3457}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{0,2,3,6,53,423,423,423,1234,145,37,46,56,463,3457}", "fn": "order_by_points", "para": "(vector<int> nums)", "pass": true}
{"task_id": "CPP/145", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n    vector<int> sumdigit={};\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=1;j<nums.size();j++)\n    if (sumdigit[j-1]>sumdigit[j])\n    {\n        m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;\n        m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;\n    }\n     \n    return nums;\n}\nint main(){\n\tauto result = order_by_points(<FILL_ME>);\n\tassert(issame(result,{0,2,3,6,53,423,423,423,1234,145,37,46,56,463,3457}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{0,2,3,6,53,423,423,423,1234,145,37,46,56,463,3457}", "fn": "order_by_points", "para": "(vector<int> nums)", "pass": true}
{"task_id": "CPP/145", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n    vector<int> sumdigit={};\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=1;j<nums.size();j++)\n    if (sumdigit[j-1]>sumdigit[j])\n    {\n        m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;\n        m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;\n    }\n     \n    return nums;\n}\nint main(){\n\tauto result = order_by_points(<FILL_ME>);\n\tassert(issame(result,{0,2,3,6,53,423,423,423,1234,145,37,46,56,463,3457}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{0,2,3,6,53,423,423,423,1234,145,37,46,56,463,3457}", "fn": "order_by_points", "para": "(vector<int> nums)", "pass": true}
{"task_id": "CPP/145", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n    vector<int> sumdigit={};\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=1;j<nums.size();j++)\n    if (sumdigit[j-1]>sumdigit[j])\n    {\n        m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;\n        m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;\n    }\n     \n    return nums;\n}\nint main(){\n\tauto result = order_by_points(<FILL_ME>);\n\tassert(issame(result,{0,2,3,6,53,423,423,423,1234,145,37,46,56,463,3457}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{0,2,3,6,53,423,423,423,1234,145,37,46,56,463,3457}", "fn": "order_by_points", "para": "(vector<int> nums)", "pass": true}
{"task_id": "CPP/145", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n    vector<int> sumdigit={};\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=1;j<nums.size();j++)\n    if (sumdigit[j-1]>sumdigit[j])\n    {\n        m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;\n        m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;\n    }\n     \n    return nums;\n}\nint main(){\n\tauto result = order_by_points(<FILL_ME>);\n\tassert(issame(result,{-3,-32,-98,-11,1,2,43,54}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, -3, 2, -32, -98, -11, 43, 54}", "fn": "order_by_points", "para": "(vector<int> nums)", "pass": true}
{"task_id": "CPP/145", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n    vector<int> sumdigit={};\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=1;j<nums.size();j++)\n    if (sumdigit[j-1]>sumdigit[j])\n    {\n        m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;\n        m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;\n    }\n     \n    return nums;\n}\nint main(){\n\tauto result = order_by_points(<FILL_ME>);\n\tassert(issame(result,{-3,-32,-98,-11,1,2,43,54}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, -3, 2, -32, -98, -11, 43, 54}", "fn": "order_by_points", "para": "(vector<int> nums)", "pass": true}
{"task_id": "CPP/145", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n    vector<int> sumdigit={};\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=1;j<nums.size();j++)\n    if (sumdigit[j-1]>sumdigit[j])\n    {\n        m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;\n        m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;\n    }\n     \n    return nums;\n}\nint main(){\n\tauto result = order_by_points(<FILL_ME>);\n\tassert(issame(result,{-3,-32,-98,-11,1,2,43,54}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, -3, 2, -32, -98, -11, 43, 54}", "fn": "order_by_points", "para": "(vector<int> nums)", "pass": true}
{"task_id": "CPP/145", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n    vector<int> sumdigit={};\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=1;j<nums.size();j++)\n    if (sumdigit[j-1]>sumdigit[j])\n    {\n        m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;\n        m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;\n    }\n     \n    return nums;\n}\nint main(){\n\tauto result = order_by_points(<FILL_ME>);\n\tassert(issame(result,{-3,-32,-98,-11,1,2,43,54}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, -3, 2, -32, -98, -11, 43, 54}", "fn": "order_by_points", "para": "(vector<int> nums)", "pass": true}
{"task_id": "CPP/145", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n    vector<int> sumdigit={};\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=1;j<nums.size();j++)\n    if (sumdigit[j-1]>sumdigit[j])\n    {\n        m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;\n        m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;\n    }\n     \n    return nums;\n}\nint main(){\n\tauto result = order_by_points(<FILL_ME>);\n\tassert(issame(result,{-3,-32,-98,-11,1,2,43,54}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, -3, 2, -32, -98, -11, 43, 54}", "fn": "order_by_points", "para": "(vector<int> nums)", "pass": true}
{"task_id": "CPP/145", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n    vector<int> sumdigit={};\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=1;j<nums.size();j++)\n    if (sumdigit[j-1]>sumdigit[j])\n    {\n        m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;\n        m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;\n    }\n     \n    return nums;\n}\nint main(){\n\tauto result = order_by_points(<FILL_ME>);\n\tassert(issame(result,{-1,-11,1,-12,11}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, -12, 11, -11, -1}", "fn": "order_by_points", "para": "(vector<int> nums)", "pass": true}
{"task_id": "CPP/145", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n    vector<int> sumdigit={};\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=1;j<nums.size();j++)\n    if (sumdigit[j-1]>sumdigit[j])\n    {\n        m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;\n        m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;\n    }\n     \n    return nums;\n}\nint main(){\n\tauto result = order_by_points(<FILL_ME>);\n\tassert(issame(result,{-1,-11,1,-12,11}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, -12, 11, -11, -1}", "fn": "order_by_points", "para": "(vector<int> nums)", "pass": true}
{"task_id": "CPP/145", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n    vector<int> sumdigit={};\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=1;j<nums.size();j++)\n    if (sumdigit[j-1]>sumdigit[j])\n    {\n        m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;\n        m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;\n    }\n     \n    return nums;\n}\nint main(){\n\tauto result = order_by_points(<FILL_ME>);\n\tassert(issame(result,{-1,-11,1,-12,11}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, -12, 11, -11, -1}", "fn": "order_by_points", "para": "(vector<int> nums)", "pass": true}
{"task_id": "CPP/145", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n    vector<int> sumdigit={};\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=1;j<nums.size();j++)\n    if (sumdigit[j-1]>sumdigit[j])\n    {\n        m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;\n        m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;\n    }\n     \n    return nums;\n}\nint main(){\n\tauto result = order_by_points(<FILL_ME>);\n\tassert(issame(result,{-1,-11,1,-12,11}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, -12, 11, -11, -1}", "fn": "order_by_points", "para": "(vector<int> nums)", "pass": true}
{"task_id": "CPP/145", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n    vector<int> sumdigit={};\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=1;j<nums.size();j++)\n    if (sumdigit[j-1]>sumdigit[j])\n    {\n        m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;\n        m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;\n    }\n     \n    return nums;\n}\nint main(){\n\tauto result = order_by_points(<FILL_ME>);\n\tassert(issame(result,{-1,-11,1,-12,11}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{1, -12, 11, -11, -1}", "fn": "order_by_points", "para": "(vector<int> nums)", "pass": true}
{"task_id": "CPP/145", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n    vector<int> sumdigit={};\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=1;j<nums.size();j++)\n    if (sumdigit[j-1]>sumdigit[j])\n    {\n        m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;\n        m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;\n    }\n     \n    return nums;\n}\nint main(){\n\tauto result = order_by_points(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{}", "fn": "order_by_points", "para": "(vector<int> nums)", "pass": true}
{"task_id": "CPP/145", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n    vector<int> sumdigit={};\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=1;j<nums.size();j++)\n    if (sumdigit[j-1]>sumdigit[j])\n    {\n        m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;\n        m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;\n    }\n     \n    return nums;\n}\nint main(){\n\tauto result = order_by_points(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{0}", "fn": "order_by_points", "para": "(vector<int> nums)", "pass": false}
{"task_id": "CPP/145", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n    vector<int> sumdigit={};\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=1;j<nums.size();j++)\n    if (sumdigit[j-1]>sumdigit[j])\n    {\n        m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;\n        m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;\n    }\n     \n    return nums;\n}\nint main(){\n\tauto result = order_by_points(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{0}", "fn": "order_by_points", "para": "(vector<int> nums)", "pass": false}
{"task_id": "CPP/145", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n    vector<int> sumdigit={};\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=1;j<nums.size();j++)\n    if (sumdigit[j-1]>sumdigit[j])\n    {\n        m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;\n        m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;\n    }\n     \n    return nums;\n}\nint main(){\n\tauto result = order_by_points(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{0}", "fn": "order_by_points", "para": "(vector<int> nums)", "pass": false}
{"task_id": "CPP/145", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n    vector<int> sumdigit={};\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=1;j<nums.size();j++)\n    if (sumdigit[j-1]>sumdigit[j])\n    {\n        m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;\n        m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;\n    }\n     \n    return nums;\n}\nint main(){\n\tauto result = order_by_points(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{0}", "fn": "order_by_points", "para": "(vector<int> nums)", "pass": false}
{"task_id": "CPP/146", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint specialFilter(vector<int> nums){\n    int num=0;\n    for (int i=0;i<nums.size();i++)\n    if (nums[i]>10)\n    {\n        string w=to_string(nums[i]);\n        if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;\n    }\n    return num;\n}\nint main(){\n\tauto result = specialFilter(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{15, 23, 42, 12}", "fn": "specialFilter", "para": "(vector<int> nums)", "pass": true}
{"task_id": "CPP/146", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint specialFilter(vector<int> nums){\n    int num=0;\n    for (int i=0;i<nums.size();i++)\n    if (nums[i]>10)\n    {\n        string w=to_string(nums[i]);\n        if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;\n    }\n    return num;\n}\nint main(){\n\tauto result = specialFilter(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{15, 23, 42, 12}", "fn": "specialFilter", "para": "(vector<int> nums)", "pass": true}
{"task_id": "CPP/146", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint specialFilter(vector<int> nums){\n    int num=0;\n    for (int i=0;i<nums.size();i++)\n    if (nums[i]>10)\n    {\n        string w=to_string(nums[i]);\n        if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;\n    }\n    return num;\n}\nint main(){\n\tauto result = specialFilter(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{15, 23, 42, 12}", "fn": "specialFilter", "para": "(vector<int> nums)", "pass": true}
{"task_id": "CPP/146", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint specialFilter(vector<int> nums){\n    int num=0;\n    for (int i=0;i<nums.size();i++)\n    if (nums[i]>10)\n    {\n        string w=to_string(nums[i]);\n        if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;\n    }\n    return num;\n}\nint main(){\n\tauto result = specialFilter(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{12, 34, 56, 78}", "fn": "specialFilter", "para": "(vector<int> nums)", "pass": false}
{"task_id": "CPP/146", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint specialFilter(vector<int> nums){\n    int num=0;\n    for (int i=0;i<nums.size();i++)\n    if (nums[i]>10)\n    {\n        string w=to_string(nums[i]);\n        if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;\n    }\n    return num;\n}\nint main(){\n\tauto result = specialFilter(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{15, 23, 42, 12}", "fn": "specialFilter", "para": "(vector<int> nums)", "pass": true}
{"task_id": "CPP/146", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint specialFilter(vector<int> nums){\n    int num=0;\n    for (int i=0;i<nums.size();i++)\n    if (nums[i]>10)\n    {\n        string w=to_string(nums[i]);\n        if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;\n    }\n    return num;\n}\nint main(){\n\tauto result = specialFilter(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{15, 25, 12, 8, 37, 47}", "fn": "specialFilter", "para": "(vector<int> nums)", "pass": true}
{"task_id": "CPP/146", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint specialFilter(vector<int> nums){\n    int num=0;\n    for (int i=0;i<nums.size();i++)\n    if (nums[i]>10)\n    {\n        string w=to_string(nums[i]);\n        if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;\n    }\n    return num;\n}\nint main(){\n\tauto result = specialFilter(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{15, 25, 12, 8, 37, 47}", "fn": "specialFilter", "para": "(vector<int> nums)", "pass": true}
{"task_id": "CPP/146", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint specialFilter(vector<int> nums){\n    int num=0;\n    for (int i=0;i<nums.size();i++)\n    if (nums[i]>10)\n    {\n        string w=to_string(nums[i]);\n        if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;\n    }\n    return num;\n}\nint main(){\n\tauto result = specialFilter(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{15, 25, 12, 8, 37, 47}", "fn": "specialFilter", "para": "(vector<int> nums)", "pass": true}
{"task_id": "CPP/146", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint specialFilter(vector<int> nums){\n    int num=0;\n    for (int i=0;i<nums.size();i++)\n    if (nums[i]>10)\n    {\n        string w=to_string(nums[i]);\n        if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;\n    }\n    return num;\n}\nint main(){\n\tauto result = specialFilter(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{15, 25, 12, 8, 37, 47}", "fn": "specialFilter", "para": "(vector<int> nums)", "pass": true}
{"task_id": "CPP/146", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint specialFilter(vector<int> nums){\n    int num=0;\n    for (int i=0;i<nums.size();i++)\n    if (nums[i]>10)\n    {\n        string w=to_string(nums[i]);\n        if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;\n    }\n    return num;\n}\nint main(){\n\tauto result = specialFilter(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{15, 25, 12, 8, 37, 47}", "fn": "specialFilter", "para": "(vector<int> nums)", "pass": true}
{"task_id": "CPP/146", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint specialFilter(vector<int> nums){\n    int num=0;\n    for (int i=0;i<nums.size();i++)\n    if (nums[i]>10)\n    {\n        string w=to_string(nums[i]);\n        if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;\n    }\n    return num;\n}\nint main(){\n\tauto result = specialFilter(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{12, 21, 33, 45, 8, 9, 10, 11, 22, 31}", "fn": "specialFilter", "para": "(vector<int> nums)", "pass": false}
{"task_id": "CPP/146", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint specialFilter(vector<int> nums){\n    int num=0;\n    for (int i=0;i<nums.size();i++)\n    if (nums[i]>10)\n    {\n        string w=to_string(nums[i]);\n        if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;\n    }\n    return num;\n}\nint main(){\n\tauto result = specialFilter(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{12, 13, 15, 20, 22, 24}", "fn": "specialFilter", "para": "(vector<int> nums)", "pass": false}
{"task_id": "CPP/146", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint specialFilter(vector<int> nums){\n    int num=0;\n    for (int i=0;i<nums.size();i++)\n    if (nums[i]>10)\n    {\n        string w=to_string(nums[i]);\n        if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;\n    }\n    return num;\n}\nint main(){\n\tauto result = specialFilter(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{12, 21, 33, 45, 8, 9, 10, 11, 22, 31}", "fn": "specialFilter", "para": "(vector<int> nums)", "pass": false}
{"task_id": "CPP/146", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint specialFilter(vector<int> nums){\n    int num=0;\n    for (int i=0;i<nums.size();i++)\n    if (nums[i]>10)\n    {\n        string w=to_string(nums[i]);\n        if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;\n    }\n    return num;\n}\nint main(){\n\tauto result = specialFilter(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{12, 21, 33, 45, 8, 9, 10, 11, 22, 31}", "fn": "specialFilter", "para": "(vector<int> nums)", "pass": false}
{"task_id": "CPP/146", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint specialFilter(vector<int> nums){\n    int num=0;\n    for (int i=0;i<nums.size();i++)\n    if (nums[i]>10)\n    {\n        string w=to_string(nums[i]);\n        if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;\n    }\n    return num;\n}\nint main(){\n\tauto result = specialFilter(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{12, 21, 33, 45, 8, 9, 10, 11, 22, 31}", "fn": "specialFilter", "para": "(vector<int> nums)", "pass": false}
{"task_id": "CPP/146", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint specialFilter(vector<int> nums){\n    int num=0;\n    for (int i=0;i<nums.size();i++)\n    if (nums[i]>10)\n    {\n        string w=to_string(nums[i]);\n        if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;\n    }\n    return num;\n}\nint main(){\n\tauto result = specialFilter(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{3, 12, 24, 36}", "fn": "specialFilter", "para": "(vector<int> nums)", "pass": true}
{"task_id": "CPP/146", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint specialFilter(vector<int> nums){\n    int num=0;\n    for (int i=0;i<nums.size();i++)\n    if (nums[i]>10)\n    {\n        string w=to_string(nums[i]);\n        if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;\n    }\n    return num;\n}\nint main(){\n\tauto result = specialFilter(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{3, 12, 24, 36}", "fn": "specialFilter", "para": "(vector<int> nums)", "pass": true}
{"task_id": "CPP/146", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint specialFilter(vector<int> nums){\n    int num=0;\n    for (int i=0;i<nums.size();i++)\n    if (nums[i]>10)\n    {\n        string w=to_string(nums[i]);\n        if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;\n    }\n    return num;\n}\nint main(){\n\tauto result = specialFilter(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{3, 12, 24, 36}", "fn": "specialFilter", "para": "(vector<int> nums)", "pass": true}
{"task_id": "CPP/146", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint specialFilter(vector<int> nums){\n    int num=0;\n    for (int i=0;i<nums.size();i++)\n    if (nums[i]>10)\n    {\n        string w=to_string(nums[i]);\n        if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;\n    }\n    return num;\n}\nint main(){\n\tauto result = specialFilter(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{3, 12, 24, 36}", "fn": "specialFilter", "para": "(vector<int> nums)", "pass": true}
{"task_id": "CPP/146", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint specialFilter(vector<int> nums){\n    int num=0;\n    for (int i=0;i<nums.size();i++)\n    if (nums[i]>10)\n    {\n        string w=to_string(nums[i]);\n        if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;\n    }\n    return num;\n}\nint main(){\n\tauto result = specialFilter(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<int>{3, 12, 24, 36}", "fn": "specialFilter", "para": "(vector<int> nums)", "pass": true}
{"task_id": "CPP/146", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint specialFilter(vector<int> nums){\n    int num=0;\n    for (int i=0;i<nums.size();i++)\n    if (nums[i]>10)\n    {\n        string w=to_string(nums[i]);\n        if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;\n    }\n    return num;\n}\nint main(){\n\tauto result = specialFilter(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{12, 23, 45, 7, 8, 19}", "fn": "specialFilter", "para": "(vector<int> nums)", "pass": false}
{"task_id": "CPP/146", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint specialFilter(vector<int> nums){\n    int num=0;\n    for (int i=0;i<nums.size();i++)\n    if (nums[i]>10)\n    {\n        string w=to_string(nums[i]);\n        if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;\n    }\n    return num;\n}\nint main(){\n\tauto result = specialFilter(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{15, 23, 32, 7, 8, 12, 99}", "fn": "specialFilter", "para": "(vector<int> nums)", "pass": false}
{"task_id": "CPP/146", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint specialFilter(vector<int> nums){\n    int num=0;\n    for (int i=0;i<nums.size();i++)\n    if (nums[i]>10)\n    {\n        string w=to_string(nums[i]);\n        if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;\n    }\n    return num;\n}\nint main(){\n\tauto result = specialFilter(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{12, 15, 22, 17, 9}", "fn": "specialFilter", "para": "(vector<int> nums)", "pass": false}
{"task_id": "CPP/146", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint specialFilter(vector<int> nums){\n    int num=0;\n    for (int i=0;i<nums.size();i++)\n    if (nums[i]>10)\n    {\n        string w=to_string(nums[i]);\n        if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;\n    }\n    return num;\n}\nint main(){\n\tauto result = specialFilter(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{15, 23, 32, 7, 8, 12, 99}", "fn": "specialFilter", "para": "(vector<int> nums)", "pass": false}
{"task_id": "CPP/146", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint specialFilter(vector<int> nums){\n    int num=0;\n    for (int i=0;i<nums.size();i++)\n    if (nums[i]>10)\n    {\n        string w=to_string(nums[i]);\n        if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;\n    }\n    return num;\n}\nint main(){\n\tauto result = specialFilter(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{12, 23, 45, 7, 8, 19}", "fn": "specialFilter", "para": "(vector<int> nums)", "pass": false}
{"task_id": "CPP/147", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint get_matrix_triples(int n){\n    vector<int> a;\n    vector<vector<int>> sum={{0,0,0}};\n    vector<vector<int>> sum2={{0,0,0}};\n    for (int i=1;i<=n;i++)\n    {\n        a.push_back((i*i-i+1)%3);\n        sum.push_back(sum[sum.size()-1]);\n        sum[i][a[i-1]]+=1;\n    }\n    for (int times=1;times<3;times++)\n    {\n    for (int i=1;i<=n;i++)\n    {\n        sum2.push_back(sum2[sum2.size()-1]);\n        if (i>=1)\n        for (int j=0;j<=2;j++)\n            sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];\n    }\n    sum=sum2;\n    sum2={{0,0,0}};\n    }\n\n    return sum[n][0];\n}\nint main(){\n\tauto result = get_matrix_triples(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "6", "fn": "get_matrix_triples", "para": "(int n)", "pass": true}
{"task_id": "CPP/147", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint get_matrix_triples(int n){\n    vector<int> a;\n    vector<vector<int>> sum={{0,0,0}};\n    vector<vector<int>> sum2={{0,0,0}};\n    for (int i=1;i<=n;i++)\n    {\n        a.push_back((i*i-i+1)%3);\n        sum.push_back(sum[sum.size()-1]);\n        sum[i][a[i-1]]+=1;\n    }\n    for (int times=1;times<3;times++)\n    {\n    for (int i=1;i<=n;i++)\n    {\n        sum2.push_back(sum2[sum2.size()-1]);\n        if (i>=1)\n        for (int j=0;j<=2;j++)\n            sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];\n    }\n    sum=sum2;\n    sum2={{0,0,0}};\n    }\n\n    return sum[n][0];\n}\nint main(){\n\tauto result = get_matrix_triples(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5", "fn": "get_matrix_triples", "para": "(int n)", "pass": false}
{"task_id": "CPP/147", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint get_matrix_triples(int n){\n    vector<int> a;\n    vector<vector<int>> sum={{0,0,0}};\n    vector<vector<int>> sum2={{0,0,0}};\n    for (int i=1;i<=n;i++)\n    {\n        a.push_back((i*i-i+1)%3);\n        sum.push_back(sum[sum.size()-1]);\n        sum[i][a[i-1]]+=1;\n    }\n    for (int times=1;times<3;times++)\n    {\n    for (int i=1;i<=n;i++)\n    {\n        sum2.push_back(sum2[sum2.size()-1]);\n        if (i>=1)\n        for (int j=0;j<=2;j++)\n            sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];\n    }\n    sum=sum2;\n    sum2={{0,0,0}};\n    }\n\n    return sum[n][0];\n}\nint main(){\n\tauto result = get_matrix_triples(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "6", "fn": "get_matrix_triples", "para": "(int n)", "pass": true}
{"task_id": "CPP/147", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint get_matrix_triples(int n){\n    vector<int> a;\n    vector<vector<int>> sum={{0,0,0}};\n    vector<vector<int>> sum2={{0,0,0}};\n    for (int i=1;i<=n;i++)\n    {\n        a.push_back((i*i-i+1)%3);\n        sum.push_back(sum[sum.size()-1]);\n        sum[i][a[i-1]]+=1;\n    }\n    for (int times=1;times<3;times++)\n    {\n    for (int i=1;i<=n;i++)\n    {\n        sum2.push_back(sum2[sum2.size()-1]);\n        if (i>=1)\n        for (int j=0;j<=2;j++)\n            sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];\n    }\n    sum=sum2;\n    sum2={{0,0,0}};\n    }\n\n    return sum[n][0];\n}\nint main(){\n\tauto result = get_matrix_triples(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5", "fn": "get_matrix_triples", "para": "(int n)", "pass": false}
{"task_id": "CPP/147", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint get_matrix_triples(int n){\n    vector<int> a;\n    vector<vector<int>> sum={{0,0,0}};\n    vector<vector<int>> sum2={{0,0,0}};\n    for (int i=1;i<=n;i++)\n    {\n        a.push_back((i*i-i+1)%3);\n        sum.push_back(sum[sum.size()-1]);\n        sum[i][a[i-1]]+=1;\n    }\n    for (int times=1;times<3;times++)\n    {\n    for (int i=1;i<=n;i++)\n    {\n        sum2.push_back(sum2[sum2.size()-1]);\n        if (i>=1)\n        for (int j=0;j<=2;j++)\n            sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];\n    }\n    sum=sum2;\n    sum2={{0,0,0}};\n    }\n\n    return sum[n][0];\n}\nint main(){\n\tauto result = get_matrix_triples(<FILL_ME>);\n\tassert(result==4);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "6", "fn": "get_matrix_triples", "para": "(int n)", "pass": true}
{"task_id": "CPP/147", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint get_matrix_triples(int n){\n    vector<int> a;\n    vector<vector<int>> sum={{0,0,0}};\n    vector<vector<int>> sum2={{0,0,0}};\n    for (int i=1;i<=n;i++)\n    {\n        a.push_back((i*i-i+1)%3);\n        sum.push_back(sum[sum.size()-1]);\n        sum[i][a[i-1]]+=1;\n    }\n    for (int times=1;times<3;times++)\n    {\n    for (int i=1;i<=n;i++)\n    {\n        sum2.push_back(sum2[sum2.size()-1]);\n        if (i>=1)\n        for (int j=0;j<=2;j++)\n            sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];\n    }\n    sum=sum2;\n    sum2={{0,0,0}};\n    }\n\n    return sum[n][0];\n}\nint main(){\n\tauto result = get_matrix_triples(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5", "fn": "get_matrix_triples", "para": "(int n)", "pass": true}
{"task_id": "CPP/147", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint get_matrix_triples(int n){\n    vector<int> a;\n    vector<vector<int>> sum={{0,0,0}};\n    vector<vector<int>> sum2={{0,0,0}};\n    for (int i=1;i<=n;i++)\n    {\n        a.push_back((i*i-i+1)%3);\n        sum.push_back(sum[sum.size()-1]);\n        sum[i][a[i-1]]+=1;\n    }\n    for (int times=1;times<3;times++)\n    {\n    for (int i=1;i<=n;i++)\n    {\n        sum2.push_back(sum2[sum2.size()-1]);\n        if (i>=1)\n        for (int j=0;j<=2;j++)\n            sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];\n    }\n    sum=sum2;\n    sum2={{0,0,0}};\n    }\n\n    return sum[n][0];\n}\nint main(){\n\tauto result = get_matrix_triples(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5", "fn": "get_matrix_triples", "para": "(int n)", "pass": true}
{"task_id": "CPP/147", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint get_matrix_triples(int n){\n    vector<int> a;\n    vector<vector<int>> sum={{0,0,0}};\n    vector<vector<int>> sum2={{0,0,0}};\n    for (int i=1;i<=n;i++)\n    {\n        a.push_back((i*i-i+1)%3);\n        sum.push_back(sum[sum.size()-1]);\n        sum[i][a[i-1]]+=1;\n    }\n    for (int times=1;times<3;times++)\n    {\n    for (int i=1;i<=n;i++)\n    {\n        sum2.push_back(sum2[sum2.size()-1]);\n        if (i>=1)\n        for (int j=0;j<=2;j++)\n            sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];\n    }\n    sum=sum2;\n    sum2={{0,0,0}};\n    }\n\n    return sum[n][0];\n}\nint main(){\n\tauto result = get_matrix_triples(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5", "fn": "get_matrix_triples", "para": "(int n)", "pass": true}
{"task_id": "CPP/147", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint get_matrix_triples(int n){\n    vector<int> a;\n    vector<vector<int>> sum={{0,0,0}};\n    vector<vector<int>> sum2={{0,0,0}};\n    for (int i=1;i<=n;i++)\n    {\n        a.push_back((i*i-i+1)%3);\n        sum.push_back(sum[sum.size()-1]);\n        sum[i][a[i-1]]+=1;\n    }\n    for (int times=1;times<3;times++)\n    {\n    for (int i=1;i<=n;i++)\n    {\n        sum2.push_back(sum2[sum2.size()-1]);\n        if (i>=1)\n        for (int j=0;j<=2;j++)\n            sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];\n    }\n    sum=sum2;\n    sum2={{0,0,0}};\n    }\n\n    return sum[n][0];\n}\nint main(){\n\tauto result = get_matrix_triples(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5", "fn": "get_matrix_triples", "para": "(int n)", "pass": true}
{"task_id": "CPP/147", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint get_matrix_triples(int n){\n    vector<int> a;\n    vector<vector<int>> sum={{0,0,0}};\n    vector<vector<int>> sum2={{0,0,0}};\n    for (int i=1;i<=n;i++)\n    {\n        a.push_back((i*i-i+1)%3);\n        sum.push_back(sum[sum.size()-1]);\n        sum[i][a[i-1]]+=1;\n    }\n    for (int times=1;times<3;times++)\n    {\n    for (int i=1;i<=n;i++)\n    {\n        sum2.push_back(sum2[sum2.size()-1]);\n        if (i>=1)\n        for (int j=0;j<=2;j++)\n            sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];\n    }\n    sum=sum2;\n    sum2={{0,0,0}};\n    }\n\n    return sum[n][0];\n}\nint main(){\n\tauto result = get_matrix_triples(<FILL_ME>);\n\tassert(result==1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5", "fn": "get_matrix_triples", "para": "(int n)", "pass": true}
{"task_id": "CPP/147", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint get_matrix_triples(int n){\n    vector<int> a;\n    vector<vector<int>> sum={{0,0,0}};\n    vector<vector<int>> sum2={{0,0,0}};\n    for (int i=1;i<=n;i++)\n    {\n        a.push_back((i*i-i+1)%3);\n        sum.push_back(sum[sum.size()-1]);\n        sum[i][a[i-1]]+=1;\n    }\n    for (int times=1;times<3;times++)\n    {\n    for (int i=1;i<=n;i++)\n    {\n        sum2.push_back(sum2[sum2.size()-1]);\n        if (i>=1)\n        for (int j=0;j<=2;j++)\n            sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];\n    }\n    sum=sum2;\n    sum2={{0,0,0}};\n    }\n\n    return sum[n][0];\n}\nint main(){\n\tauto result = get_matrix_triples(<FILL_ME>);\n\tassert(result==36);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10", "fn": "get_matrix_triples", "para": "(int n)", "pass": true}
{"task_id": "CPP/147", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint get_matrix_triples(int n){\n    vector<int> a;\n    vector<vector<int>> sum={{0,0,0}};\n    vector<vector<int>> sum2={{0,0,0}};\n    for (int i=1;i<=n;i++)\n    {\n        a.push_back((i*i-i+1)%3);\n        sum.push_back(sum[sum.size()-1]);\n        sum[i][a[i-1]]+=1;\n    }\n    for (int times=1;times<3;times++)\n    {\n    for (int i=1;i<=n;i++)\n    {\n        sum2.push_back(sum2[sum2.size()-1]);\n        if (i>=1)\n        for (int j=0;j<=2;j++)\n            sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];\n    }\n    sum=sum2;\n    sum2={{0,0,0}};\n    }\n\n    return sum[n][0];\n}\nint main(){\n\tauto result = get_matrix_triples(<FILL_ME>);\n\tassert(result==36);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10", "fn": "get_matrix_triples", "para": "(int n)", "pass": true}
{"task_id": "CPP/147", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint get_matrix_triples(int n){\n    vector<int> a;\n    vector<vector<int>> sum={{0,0,0}};\n    vector<vector<int>> sum2={{0,0,0}};\n    for (int i=1;i<=n;i++)\n    {\n        a.push_back((i*i-i+1)%3);\n        sum.push_back(sum[sum.size()-1]);\n        sum[i][a[i-1]]+=1;\n    }\n    for (int times=1;times<3;times++)\n    {\n    for (int i=1;i<=n;i++)\n    {\n        sum2.push_back(sum2[sum2.size()-1]);\n        if (i>=1)\n        for (int j=0;j<=2;j++)\n            sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];\n    }\n    sum=sum2;\n    sum2={{0,0,0}};\n    }\n\n    return sum[n][0];\n}\nint main(){\n\tauto result = get_matrix_triples(<FILL_ME>);\n\tassert(result==36);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10", "fn": "get_matrix_triples", "para": "(int n)", "pass": true}
{"task_id": "CPP/147", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint get_matrix_triples(int n){\n    vector<int> a;\n    vector<vector<int>> sum={{0,0,0}};\n    vector<vector<int>> sum2={{0,0,0}};\n    for (int i=1;i<=n;i++)\n    {\n        a.push_back((i*i-i+1)%3);\n        sum.push_back(sum[sum.size()-1]);\n        sum[i][a[i-1]]+=1;\n    }\n    for (int times=1;times<3;times++)\n    {\n    for (int i=1;i<=n;i++)\n    {\n        sum2.push_back(sum2[sum2.size()-1]);\n        if (i>=1)\n        for (int j=0;j<=2;j++)\n            sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];\n    }\n    sum=sum2;\n    sum2={{0,0,0}};\n    }\n\n    return sum[n][0];\n}\nint main(){\n\tauto result = get_matrix_triples(<FILL_ME>);\n\tassert(result==36);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10", "fn": "get_matrix_triples", "para": "(int n)", "pass": true}
{"task_id": "CPP/147", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint get_matrix_triples(int n){\n    vector<int> a;\n    vector<vector<int>> sum={{0,0,0}};\n    vector<vector<int>> sum2={{0,0,0}};\n    for (int i=1;i<=n;i++)\n    {\n        a.push_back((i*i-i+1)%3);\n        sum.push_back(sum[sum.size()-1]);\n        sum[i][a[i-1]]+=1;\n    }\n    for (int times=1;times<3;times++)\n    {\n    for (int i=1;i<=n;i++)\n    {\n        sum2.push_back(sum2[sum2.size()-1]);\n        if (i>=1)\n        for (int j=0;j<=2;j++)\n            sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];\n    }\n    sum=sum2;\n    sum2={{0,0,0}};\n    }\n\n    return sum[n][0];\n}\nint main(){\n\tauto result = get_matrix_triples(<FILL_ME>);\n\tassert(result==36);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "10", "fn": "get_matrix_triples", "para": "(int n)", "pass": true}
{"task_id": "CPP/147", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint get_matrix_triples(int n){\n    vector<int> a;\n    vector<vector<int>> sum={{0,0,0}};\n    vector<vector<int>> sum2={{0,0,0}};\n    for (int i=1;i<=n;i++)\n    {\n        a.push_back((i*i-i+1)%3);\n        sum.push_back(sum[sum.size()-1]);\n        sum[i][a[i-1]]+=1;\n    }\n    for (int times=1;times<3;times++)\n    {\n    for (int i=1;i<=n;i++)\n    {\n        sum2.push_back(sum2[sum2.size()-1]);\n        if (i>=1)\n        for (int j=0;j<=2;j++)\n            sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];\n    }\n    sum=sum2;\n    sum2={{0,0,0}};\n    }\n\n    return sum[n][0];\n}\nint main(){\n\tauto result = get_matrix_triples(<FILL_ME>);\n\tassert(result==53361);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1000", "fn": "get_matrix_triples", "para": "(int n)", "pass": false}
{"task_id": "CPP/147", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint get_matrix_triples(int n){\n    vector<int> a;\n    vector<vector<int>> sum={{0,0,0}};\n    vector<vector<int>> sum2={{0,0,0}};\n    for (int i=1;i<=n;i++)\n    {\n        a.push_back((i*i-i+1)%3);\n        sum.push_back(sum[sum.size()-1]);\n        sum[i][a[i-1]]+=1;\n    }\n    for (int times=1;times<3;times++)\n    {\n    for (int i=1;i<=n;i++)\n    {\n        sum2.push_back(sum2[sum2.size()-1]);\n        if (i>=1)\n        for (int j=0;j<=2;j++)\n            sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];\n    }\n    sum=sum2;\n    sum2={{0,0,0}};\n    }\n\n    return sum[n][0];\n}\nint main(){\n\tauto result = get_matrix_triples(<FILL_ME>);\n\tassert(result==53361);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1000", "fn": "get_matrix_triples", "para": "(int n)", "pass": false}
{"task_id": "CPP/147", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint get_matrix_triples(int n){\n    vector<int> a;\n    vector<vector<int>> sum={{0,0,0}};\n    vector<vector<int>> sum2={{0,0,0}};\n    for (int i=1;i<=n;i++)\n    {\n        a.push_back((i*i-i+1)%3);\n        sum.push_back(sum[sum.size()-1]);\n        sum[i][a[i-1]]+=1;\n    }\n    for (int times=1;times<3;times++)\n    {\n    for (int i=1;i<=n;i++)\n    {\n        sum2.push_back(sum2[sum2.size()-1]);\n        if (i>=1)\n        for (int j=0;j<=2;j++)\n            sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];\n    }\n    sum=sum2;\n    sum2={{0,0,0}};\n    }\n\n    return sum[n][0];\n}\nint main(){\n\tauto result = get_matrix_triples(<FILL_ME>);\n\tassert(result==53361);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1000", "fn": "get_matrix_triples", "para": "(int n)", "pass": false}
{"task_id": "CPP/147", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint get_matrix_triples(int n){\n    vector<int> a;\n    vector<vector<int>> sum={{0,0,0}};\n    vector<vector<int>> sum2={{0,0,0}};\n    for (int i=1;i<=n;i++)\n    {\n        a.push_back((i*i-i+1)%3);\n        sum.push_back(sum[sum.size()-1]);\n        sum[i][a[i-1]]+=1;\n    }\n    for (int times=1;times<3;times++)\n    {\n    for (int i=1;i<=n;i++)\n    {\n        sum2.push_back(sum2[sum2.size()-1]);\n        if (i>=1)\n        for (int j=0;j<=2;j++)\n            sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];\n    }\n    sum=sum2;\n    sum2={{0,0,0}};\n    }\n\n    return sum[n][0];\n}\nint main(){\n\tauto result = get_matrix_triples(<FILL_ME>);\n\tassert(result==53361);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1000", "fn": "get_matrix_triples", "para": "(int n)", "pass": false}
{"task_id": "CPP/147", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint get_matrix_triples(int n){\n    vector<int> a;\n    vector<vector<int>> sum={{0,0,0}};\n    vector<vector<int>> sum2={{0,0,0}};\n    for (int i=1;i<=n;i++)\n    {\n        a.push_back((i*i-i+1)%3);\n        sum.push_back(sum[sum.size()-1]);\n        sum[i][a[i-1]]+=1;\n    }\n    for (int times=1;times<3;times++)\n    {\n    for (int i=1;i<=n;i++)\n    {\n        sum2.push_back(sum2[sum2.size()-1]);\n        if (i>=1)\n        for (int j=0;j<=2;j++)\n            sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];\n    }\n    sum=sum2;\n    sum2={{0,0,0}};\n    }\n\n    return sum[n][0];\n}\nint main(){\n\tauto result = get_matrix_triples(<FILL_ME>);\n\tassert(result==53361);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1000", "fn": "get_matrix_triples", "para": "(int n)", "pass": false}
{"task_id": "CPP/148", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> bf(string planet1,string planet2){\n    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    int pos1=-1,pos2=-1,m;\n    for (m=0;m<planets.size();m++)\n    {\n    if (planets[m]==planet1) pos1=m;\n    if (planets[m]==planet2) pos2=m;\n    }\n    if (pos1==-1 or pos2==-1) return {};\n    if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}\n    vector<string> out={};\n    for (m=pos1+1;m<pos2;m++)\n    out.push_back(planets[m]);\n    return out;\n}\nint main(){\n\tauto result = bf(<FILL_ME>);\n\tassert(issame(result,{\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Venus\", \"Uranus\"", "fn": "bf", "para": "(string planet1,string planet2)", "pass": false}
{"task_id": "CPP/148", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> bf(string planet1,string planet2){\n    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    int pos1=-1,pos2=-1,m;\n    for (m=0;m<planets.size();m++)\n    {\n    if (planets[m]==planet1) pos1=m;\n    if (planets[m]==planet2) pos2=m;\n    }\n    if (pos1==-1 or pos2==-1) return {};\n    if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}\n    vector<string> out={};\n    for (m=pos1+1;m<pos2;m++)\n    out.push_back(planets[m]);\n    return out;\n}\nint main(){\n\tauto result = bf(<FILL_ME>);\n\tassert(issame(result,{\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Venus\",\"Uranus\"", "fn": "bf", "para": "(string planet1,string planet2)", "pass": false}
{"task_id": "CPP/148", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> bf(string planet1,string planet2){\n    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    int pos1=-1,pos2=-1,m;\n    for (m=0;m<planets.size();m++)\n    {\n    if (planets[m]==planet1) pos1=m;\n    if (planets[m]==planet2) pos2=m;\n    }\n    if (pos1==-1 or pos2==-1) return {};\n    if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}\n    vector<string> out={};\n    for (m=pos1+1;m<pos2;m++)\n    out.push_back(planets[m]);\n    return out;\n}\nint main(){\n\tauto result = bf(<FILL_ME>);\n\tassert(issame(result,{\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Venus\",\"Uranus\"", "fn": "bf", "para": "(string planet1,string planet2)", "pass": false}
{"task_id": "CPP/148", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> bf(string planet1,string planet2){\n    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    int pos1=-1,pos2=-1,m;\n    for (m=0;m<planets.size();m++)\n    {\n    if (planets[m]==planet1) pos1=m;\n    if (planets[m]==planet2) pos2=m;\n    }\n    if (pos1==-1 or pos2==-1) return {};\n    if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}\n    vector<string> out={};\n    for (m=pos1+1;m<pos2;m++)\n    out.push_back(planets[m]);\n    return out;\n}\nint main(){\n\tauto result = bf(<FILL_ME>);\n\tassert(issame(result,{\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Venus\",\"Uranus\"", "fn": "bf", "para": "(string planet1,string planet2)", "pass": false}
{"task_id": "CPP/148", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> bf(string planet1,string planet2){\n    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    int pos1=-1,pos2=-1,m;\n    for (m=0;m<planets.size();m++)\n    {\n    if (planets[m]==planet1) pos1=m;\n    if (planets[m]==planet2) pos2=m;\n    }\n    if (pos1==-1 or pos2==-1) return {};\n    if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}\n    vector<string> out={};\n    for (m=pos1+1;m<pos2;m++)\n    out.push_back(planets[m]);\n    return out;\n}\nint main(){\n\tauto result = bf(<FILL_ME>);\n\tassert(issame(result,{\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Venus\",\"Uranus\"", "fn": "bf", "para": "(string planet1,string planet2)", "pass": false}
{"task_id": "CPP/148", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> bf(string planet1,string planet2){\n    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    int pos1=-1,pos2=-1,m;\n    for (m=0;m<planets.size();m++)\n    {\n    if (planets[m]==planet1) pos1=m;\n    if (planets[m]==planet2) pos2=m;\n    }\n    if (pos1==-1 or pos2==-1) return {};\n    if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}\n    vector<string> out={};\n    for (m=pos1+1;m<pos2;m++)\n    out.push_back(planets[m]);\n    return out;\n}\nint main(){\n\tauto result = bf(<FILL_ME>);\n\tassert(issame(result,{\"Venus\",}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Mercury\",\"Earth\"", "fn": "bf", "para": "(string planet1,string planet2)", "pass": true}
{"task_id": "CPP/148", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> bf(string planet1,string planet2){\n    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    int pos1=-1,pos2=-1,m;\n    for (m=0;m<planets.size();m++)\n    {\n    if (planets[m]==planet1) pos1=m;\n    if (planets[m]==planet2) pos2=m;\n    }\n    if (pos1==-1 or pos2==-1) return {};\n    if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}\n    vector<string> out={};\n    for (m=pos1+1;m<pos2;m++)\n    out.push_back(planets[m]);\n    return out;\n}\nint main(){\n\tauto result = bf(<FILL_ME>);\n\tassert(issame(result,{\"Venus\",}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Mercury\", \"Earth\"", "fn": "bf", "para": "(string planet1,string planet2)", "pass": true}
{"task_id": "CPP/148", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> bf(string planet1,string planet2){\n    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    int pos1=-1,pos2=-1,m;\n    for (m=0;m<planets.size();m++)\n    {\n    if (planets[m]==planet1) pos1=m;\n    if (planets[m]==planet2) pos2=m;\n    }\n    if (pos1==-1 or pos2==-1) return {};\n    if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}\n    vector<string> out={};\n    for (m=pos1+1;m<pos2;m++)\n    out.push_back(planets[m]);\n    return out;\n}\nint main(){\n\tauto result = bf(<FILL_ME>);\n\tassert(issame(result,{\"Venus\",}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Mercury\", \"Earth\"", "fn": "bf", "para": "(string planet1,string planet2)", "pass": true}
{"task_id": "CPP/148", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> bf(string planet1,string planet2){\n    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    int pos1=-1,pos2=-1,m;\n    for (m=0;m<planets.size();m++)\n    {\n    if (planets[m]==planet1) pos1=m;\n    if (planets[m]==planet2) pos2=m;\n    }\n    if (pos1==-1 or pos2==-1) return {};\n    if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}\n    vector<string> out={};\n    for (m=pos1+1;m<pos2;m++)\n    out.push_back(planets[m]);\n    return out;\n}\nint main(){\n\tauto result = bf(<FILL_ME>);\n\tassert(issame(result,{\"Venus\",}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Mercury\", \"Earth\"", "fn": "bf", "para": "(string planet1,string planet2)", "pass": true}
{"task_id": "CPP/148", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> bf(string planet1,string planet2){\n    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    int pos1=-1,pos2=-1,m;\n    for (m=0;m<planets.size();m++)\n    {\n    if (planets[m]==planet1) pos1=m;\n    if (planets[m]==planet2) pos2=m;\n    }\n    if (pos1==-1 or pos2==-1) return {};\n    if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}\n    vector<string> out={};\n    for (m=pos1+1;m<pos2;m++)\n    out.push_back(planets[m]);\n    return out;\n}\nint main(){\n\tauto result = bf(<FILL_ME>);\n\tassert(issame(result,{\"Venus\",}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Mercury\", \"Earth\"", "fn": "bf", "para": "(string planet1,string planet2)", "pass": true}
{"task_id": "CPP/148", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> bf(string planet1,string planet2){\n    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    int pos1=-1,pos2=-1,m;\n    for (m=0;m<planets.size();m++)\n    {\n    if (planets[m]==planet1) pos1=m;\n    if (planets[m]==planet2) pos2=m;\n    }\n    if (pos1==-1 or pos2==-1) return {};\n    if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}\n    vector<string> out={};\n    for (m=pos1+1;m<pos2;m++)\n    out.push_back(planets[m]);\n    return out;\n}\nint main(){\n\tauto result = bf(<FILL_ME>);\n\tassert(issame(result,{\"Saturn\",\"Uranus\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Jupiter\",\"Neptune\"", "fn": "bf", "para": "(string planet1,string planet2)", "pass": true}
{"task_id": "CPP/148", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> bf(string planet1,string planet2){\n    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    int pos1=-1,pos2=-1,m;\n    for (m=0;m<planets.size();m++)\n    {\n    if (planets[m]==planet1) pos1=m;\n    if (planets[m]==planet2) pos2=m;\n    }\n    if (pos1==-1 or pos2==-1) return {};\n    if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}\n    vector<string> out={};\n    for (m=pos1+1;m<pos2;m++)\n    out.push_back(planets[m]);\n    return out;\n}\nint main(){\n\tauto result = bf(<FILL_ME>);\n\tassert(issame(result,{\"Saturn\",\"Uranus\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Jupiter\",\"Neptune\"", "fn": "bf", "para": "(string planet1,string planet2)", "pass": true}
{"task_id": "CPP/148", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> bf(string planet1,string planet2){\n    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    int pos1=-1,pos2=-1,m;\n    for (m=0;m<planets.size();m++)\n    {\n    if (planets[m]==planet1) pos1=m;\n    if (planets[m]==planet2) pos2=m;\n    }\n    if (pos1==-1 or pos2==-1) return {};\n    if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}\n    vector<string> out={};\n    for (m=pos1+1;m<pos2;m++)\n    out.push_back(planets[m]);\n    return out;\n}\nint main(){\n\tauto result = bf(<FILL_ME>);\n\tassert(issame(result,{\"Saturn\",\"Uranus\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Jupiter\",\"Neptune\"", "fn": "bf", "para": "(string planet1,string planet2)", "pass": true}
{"task_id": "CPP/148", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> bf(string planet1,string planet2){\n    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    int pos1=-1,pos2=-1,m;\n    for (m=0;m<planets.size();m++)\n    {\n    if (planets[m]==planet1) pos1=m;\n    if (planets[m]==planet2) pos2=m;\n    }\n    if (pos1==-1 or pos2==-1) return {};\n    if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}\n    vector<string> out={};\n    for (m=pos1+1;m<pos2;m++)\n    out.push_back(planets[m]);\n    return out;\n}\nint main(){\n\tauto result = bf(<FILL_ME>);\n\tassert(issame(result,{\"Saturn\",\"Uranus\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Jupiter\",\"Neptune\"", "fn": "bf", "para": "(string planet1,string planet2)", "pass": true}
{"task_id": "CPP/148", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> bf(string planet1,string planet2){\n    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    int pos1=-1,pos2=-1,m;\n    for (m=0;m<planets.size();m++)\n    {\n    if (planets[m]==planet1) pos1=m;\n    if (planets[m]==planet2) pos2=m;\n    }\n    if (pos1==-1 or pos2==-1) return {};\n    if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}\n    vector<string> out={};\n    for (m=pos1+1;m<pos2;m++)\n    out.push_back(planets[m]);\n    return out;\n}\nint main(){\n\tauto result = bf(<FILL_ME>);\n\tassert(issame(result,{\"Saturn\",\"Uranus\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Jupiter\",\"Neptune\"", "fn": "bf", "para": "(string planet1,string planet2)", "pass": true}
{"task_id": "CPP/148", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> bf(string planet1,string planet2){\n    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    int pos1=-1,pos2=-1,m;\n    for (m=0;m<planets.size();m++)\n    {\n    if (planets[m]==planet1) pos1=m;\n    if (planets[m]==planet2) pos2=m;\n    }\n    if (pos1==-1 or pos2==-1) return {};\n    if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}\n    vector<string> out={};\n    for (m=pos1+1;m<pos2;m++)\n    out.push_back(planets[m]);\n    return out;\n}\nint main(){\n\tauto result = bf(<FILL_ME>);\n\tassert(issame(result,{\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Earth\", \"Uranus\"", "fn": "bf", "para": "(string planet1,string planet2)", "pass": false}
{"task_id": "CPP/148", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> bf(string planet1,string planet2){\n    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    int pos1=-1,pos2=-1,m;\n    for (m=0;m<planets.size();m++)\n    {\n    if (planets[m]==planet1) pos1=m;\n    if (planets[m]==planet2) pos2=m;\n    }\n    if (pos1==-1 or pos2==-1) return {};\n    if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}\n    vector<string> out={};\n    for (m=pos1+1;m<pos2;m++)\n    out.push_back(planets[m]);\n    return out;\n}\nint main(){\n\tauto result = bf(<FILL_ME>);\n\tassert(issame(result,{\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Earth\",\"Uranus\"", "fn": "bf", "para": "(string planet1,string planet2)", "pass": false}
{"task_id": "CPP/148", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> bf(string planet1,string planet2){\n    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    int pos1=-1,pos2=-1,m;\n    for (m=0;m<planets.size();m++)\n    {\n    if (planets[m]==planet1) pos1=m;\n    if (planets[m]==planet2) pos2=m;\n    }\n    if (pos1==-1 or pos2==-1) return {};\n    if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}\n    vector<string> out={};\n    for (m=pos1+1;m<pos2;m++)\n    out.push_back(planets[m]);\n    return out;\n}\nint main(){\n\tauto result = bf(<FILL_ME>);\n\tassert(issame(result,{\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Earth\",\"Uranus\"", "fn": "bf", "para": "(string planet1,string planet2)", "pass": false}
{"task_id": "CPP/148", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> bf(string planet1,string planet2){\n    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    int pos1=-1,pos2=-1,m;\n    for (m=0;m<planets.size();m++)\n    {\n    if (planets[m]==planet1) pos1=m;\n    if (planets[m]==planet2) pos2=m;\n    }\n    if (pos1==-1 or pos2==-1) return {};\n    if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}\n    vector<string> out={};\n    for (m=pos1+1;m<pos2;m++)\n    out.push_back(planets[m]);\n    return out;\n}\nint main(){\n\tauto result = bf(<FILL_ME>);\n\tassert(issame(result,{\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Earth\",\"Uranus\"", "fn": "bf", "para": "(string planet1,string planet2)", "pass": false}
{"task_id": "CPP/148", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> bf(string planet1,string planet2){\n    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    int pos1=-1,pos2=-1,m;\n    for (m=0;m<planets.size();m++)\n    {\n    if (planets[m]==planet1) pos1=m;\n    if (planets[m]==planet2) pos2=m;\n    }\n    if (pos1==-1 or pos2==-1) return {};\n    if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}\n    vector<string> out={};\n    for (m=pos1+1;m<pos2;m++)\n    out.push_back(planets[m]);\n    return out;\n}\nint main(){\n\tauto result = bf(<FILL_ME>);\n\tassert(issame(result,{\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Earth\", \"Uranus\"", "fn": "bf", "para": "(string planet1,string planet2)", "pass": false}
{"task_id": "CPP/148", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> bf(string planet1,string planet2){\n    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    int pos1=-1,pos2=-1,m;\n    for (m=0;m<planets.size();m++)\n    {\n    if (planets[m]==planet1) pos1=m;\n    if (planets[m]==planet2) pos2=m;\n    }\n    if (pos1==-1 or pos2==-1) return {};\n    if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}\n    vector<string> out={};\n    for (m=pos1+1;m<pos2;m++)\n    out.push_back(planets[m]);\n    return out;\n}\nint main(){\n\tauto result = bf(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Earth\",\"Mars\"", "fn": "bf", "para": "(string planet1,string planet2)", "pass": true}
{"task_id": "CPP/148", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> bf(string planet1,string planet2){\n    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    int pos1=-1,pos2=-1,m;\n    for (m=0;m<planets.size();m++)\n    {\n    if (planets[m]==planet1) pos1=m;\n    if (planets[m]==planet2) pos2=m;\n    }\n    if (pos1==-1 or pos2==-1) return {};\n    if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}\n    vector<string> out={};\n    for (m=pos1+1;m<pos2;m++)\n    out.push_back(planets[m]);\n    return out;\n}\nint main(){\n\tauto result = bf(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Earth\",\"Mars\"", "fn": "bf", "para": "(string planet1,string planet2)", "pass": true}
{"task_id": "CPP/148", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> bf(string planet1,string planet2){\n    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    int pos1=-1,pos2=-1,m;\n    for (m=0;m<planets.size();m++)\n    {\n    if (planets[m]==planet1) pos1=m;\n    if (planets[m]==planet2) pos2=m;\n    }\n    if (pos1==-1 or pos2==-1) return {};\n    if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}\n    vector<string> out={};\n    for (m=pos1+1;m<pos2;m++)\n    out.push_back(planets[m]);\n    return out;\n}\nint main(){\n\tauto result = bf(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Earth\",\"Mars\"", "fn": "bf", "para": "(string planet1,string planet2)", "pass": true}
{"task_id": "CPP/148", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> bf(string planet1,string planet2){\n    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    int pos1=-1,pos2=-1,m;\n    for (m=0;m<planets.size();m++)\n    {\n    if (planets[m]==planet1) pos1=m;\n    if (planets[m]==planet2) pos2=m;\n    }\n    if (pos1==-1 or pos2==-1) return {};\n    if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}\n    vector<string> out={};\n    for (m=pos1+1;m<pos2;m++)\n    out.push_back(planets[m]);\n    return out;\n}\nint main(){\n\tauto result = bf(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Earth\",\"Mars\"", "fn": "bf", "para": "(string planet1,string planet2)", "pass": true}
{"task_id": "CPP/148", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> bf(string planet1,string planet2){\n    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    int pos1=-1,pos2=-1,m;\n    for (m=0;m<planets.size();m++)\n    {\n    if (planets[m]==planet1) pos1=m;\n    if (planets[m]==planet2) pos2=m;\n    }\n    if (pos1==-1 or pos2==-1) return {};\n    if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}\n    vector<string> out={};\n    for (m=pos1+1;m<pos2;m++)\n    out.push_back(planets[m]);\n    return out;\n}\nint main(){\n\tauto result = bf(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "\"Earth\",\"Mars\"", "fn": "bf", "para": "(string planet1,string planet2)", "pass": true}
{"task_id": "CPP/149", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> sorted_list_sum(vector<string> lst){\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n    if (lst[i].length()%2==0) out.push_back(lst[i]);\n    string mid;\n    sort(out.begin(),out.end());\n    for (int i=0;i<out.size();i++)\n    for (int j=1;j<out.size();j++)\n    if (out[j].length()<out[j-1].length())\n    {\n        mid=out[j];out[j]=out[j-1];out[j-1]=mid;\n    }\n    return out;\n}\nint main(){\n\tauto result = sorted_list_sum(<FILL_ME>);\n\tassert(issame(result,{\"aa\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"aa\", \"abc\"}", "fn": "sorted_list_sum", "para": "(vector<string> lst)", "pass": true}
{"task_id": "CPP/149", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> sorted_list_sum(vector<string> lst){\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n    if (lst[i].length()%2==0) out.push_back(lst[i]);\n    string mid;\n    sort(out.begin(),out.end());\n    for (int i=0;i<out.size();i++)\n    for (int j=1;j<out.size();j++)\n    if (out[j].length()<out[j-1].length())\n    {\n        mid=out[j];out[j]=out[j-1];out[j-1]=mid;\n    }\n    return out;\n}\nint main(){\n\tauto result = sorted_list_sum(<FILL_ME>);\n\tassert(issame(result,{\"aa\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"aa\",\"bbb\"}", "fn": "sorted_list_sum", "para": "(vector<string> lst)", "pass": true}
{"task_id": "CPP/149", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> sorted_list_sum(vector<string> lst){\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n    if (lst[i].length()%2==0) out.push_back(lst[i]);\n    string mid;\n    sort(out.begin(),out.end());\n    for (int i=0;i<out.size();i++)\n    for (int j=1;j<out.size();j++)\n    if (out[j].length()<out[j-1].length())\n    {\n        mid=out[j];out[j]=out[j-1];out[j-1]=mid;\n    }\n    return out;\n}\nint main(){\n\tauto result = sorted_list_sum(<FILL_ME>);\n\tassert(issame(result,{\"aa\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"aa\",\"bbb\"}", "fn": "sorted_list_sum", "para": "(vector<string> lst)", "pass": true}
{"task_id": "CPP/149", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> sorted_list_sum(vector<string> lst){\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n    if (lst[i].length()%2==0) out.push_back(lst[i]);\n    string mid;\n    sort(out.begin(),out.end());\n    for (int i=0;i<out.size();i++)\n    for (int j=1;j<out.size();j++)\n    if (out[j].length()<out[j-1].length())\n    {\n        mid=out[j];out[j]=out[j-1];out[j-1]=mid;\n    }\n    return out;\n}\nint main(){\n\tauto result = sorted_list_sum(<FILL_ME>);\n\tassert(issame(result,{\"aa\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"aa\", \"abc\"}", "fn": "sorted_list_sum", "para": "(vector<string> lst)", "pass": true}
{"task_id": "CPP/149", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> sorted_list_sum(vector<string> lst){\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n    if (lst[i].length()%2==0) out.push_back(lst[i]);\n    string mid;\n    sort(out.begin(),out.end());\n    for (int i=0;i<out.size();i++)\n    for (int j=1;j<out.size();j++)\n    if (out[j].length()<out[j-1].length())\n    {\n        mid=out[j];out[j]=out[j-1];out[j-1]=mid;\n    }\n    return out;\n}\nint main(){\n\tauto result = sorted_list_sum(<FILL_ME>);\n\tassert(issame(result,{\"aa\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"aa\",\"bbb\"}", "fn": "sorted_list_sum", "para": "(vector<string> lst)", "pass": true}
{"task_id": "CPP/149", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> sorted_list_sum(vector<string> lst){\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n    if (lst[i].length()%2==0) out.push_back(lst[i]);\n    string mid;\n    sort(out.begin(),out.end());\n    for (int i=0;i<out.size();i++)\n    for (int j=1;j<out.size();j++)\n    if (out[j].length()<out[j-1].length())\n    {\n        mid=out[j];out[j]=out[j-1];out[j-1]=mid;\n    }\n    return out;\n}\nint main(){\n\tauto result = sorted_list_sum(<FILL_ME>);\n\tassert(issame(result,{\"AI\",\"ai\",\"au\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"AI\",\"ai\",\"au\"}", "fn": "sorted_list_sum", "para": "(vector<string> lst)", "pass": true}
{"task_id": "CPP/149", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> sorted_list_sum(vector<string> lst){\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n    if (lst[i].length()%2==0) out.push_back(lst[i]);\n    string mid;\n    sort(out.begin(),out.end());\n    for (int i=0;i<out.size();i++)\n    for (int j=1;j<out.size();j++)\n    if (out[j].length()<out[j-1].length())\n    {\n        mid=out[j];out[j]=out[j-1];out[j-1]=mid;\n    }\n    return out;\n}\nint main(){\n\tauto result = sorted_list_sum(<FILL_ME>);\n\tassert(issame(result,{\"AI\",\"ai\",\"au\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"AI\",\"ai\",\"au\"}", "fn": "sorted_list_sum", "para": "(vector<string> lst)", "pass": true}
{"task_id": "CPP/149", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> sorted_list_sum(vector<string> lst){\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n    if (lst[i].length()%2==0) out.push_back(lst[i]);\n    string mid;\n    sort(out.begin(),out.end());\n    for (int i=0;i<out.size();i++)\n    for (int j=1;j<out.size();j++)\n    if (out[j].length()<out[j-1].length())\n    {\n        mid=out[j];out[j]=out[j-1];out[j-1]=mid;\n    }\n    return out;\n}\nint main(){\n\tauto result = sorted_list_sum(<FILL_ME>);\n\tassert(issame(result,{\"AI\",\"ai\",\"au\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"AI\",\"ai\",\"au\"}", "fn": "sorted_list_sum", "para": "(vector<string> lst)", "pass": true}
{"task_id": "CPP/149", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> sorted_list_sum(vector<string> lst){\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n    if (lst[i].length()%2==0) out.push_back(lst[i]);\n    string mid;\n    sort(out.begin(),out.end());\n    for (int i=0;i<out.size();i++)\n    for (int j=1;j<out.size();j++)\n    if (out[j].length()<out[j-1].length())\n    {\n        mid=out[j];out[j]=out[j-1];out[j-1]=mid;\n    }\n    return out;\n}\nint main(){\n\tauto result = sorted_list_sum(<FILL_ME>);\n\tassert(issame(result,{\"AI\",\"ai\",\"au\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"AI\",\"ai\",\"au\"}", "fn": "sorted_list_sum", "para": "(vector<string> lst)", "pass": true}
{"task_id": "CPP/149", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> sorted_list_sum(vector<string> lst){\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n    if (lst[i].length()%2==0) out.push_back(lst[i]);\n    string mid;\n    sort(out.begin(),out.end());\n    for (int i=0;i<out.size();i++)\n    for (int j=1;j<out.size();j++)\n    if (out[j].length()<out[j-1].length())\n    {\n        mid=out[j];out[j]=out[j-1];out[j-1]=mid;\n    }\n    return out;\n}\nint main(){\n\tauto result = sorted_list_sum(<FILL_ME>);\n\tassert(issame(result,{\"AI\",\"ai\",\"au\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"AI\",\"ai\",\"au\"}", "fn": "sorted_list_sum", "para": "(vector<string> lst)", "pass": true}
{"task_id": "CPP/149", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> sorted_list_sum(vector<string> lst){\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n    if (lst[i].length()%2==0) out.push_back(lst[i]);\n    string mid;\n    sort(out.begin(),out.end());\n    for (int i=0;i<out.size();i++)\n    for (int j=1;j<out.size();j++)\n    if (out[j].length()<out[j-1].length())\n    {\n        mid=out[j];out[j]=out[j-1];out[j-1]=mid;\n    }\n    return out;\n}\nint main(){\n\tauto result = sorted_list_sum(<FILL_ME>);\n\tassert(issame(result,{\"AI\",\"asdf\",\"school\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"AI\", \"asdf\", \"school\"}", "fn": "sorted_list_sum", "para": "(vector<string> lst)", "pass": true}
{"task_id": "CPP/149", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> sorted_list_sum(vector<string> lst){\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n    if (lst[i].length()%2==0) out.push_back(lst[i]);\n    string mid;\n    sort(out.begin(),out.end());\n    for (int i=0;i<out.size();i++)\n    for (int j=1;j<out.size();j++)\n    if (out[j].length()<out[j-1].length())\n    {\n        mid=out[j];out[j]=out[j-1];out[j-1]=mid;\n    }\n    return out;\n}\nint main(){\n\tauto result = sorted_list_sum(<FILL_ME>);\n\tassert(issame(result,{\"AI\",\"asdf\",\"school\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"AI\",\"asdf\",\"school\"}", "fn": "sorted_list_sum", "para": "(vector<string> lst)", "pass": true}
{"task_id": "CPP/149", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> sorted_list_sum(vector<string> lst){\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n    if (lst[i].length()%2==0) out.push_back(lst[i]);\n    string mid;\n    sort(out.begin(),out.end());\n    for (int i=0;i<out.size();i++)\n    for (int j=1;j<out.size();j++)\n    if (out[j].length()<out[j-1].length())\n    {\n        mid=out[j];out[j]=out[j-1];out[j-1]=mid;\n    }\n    return out;\n}\nint main(){\n\tauto result = sorted_list_sum(<FILL_ME>);\n\tassert(issame(result,{\"AI\",\"asdf\",\"school\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"AI\",\"asdf\",\"school\"}", "fn": "sorted_list_sum", "para": "(vector<string> lst)", "pass": true}
{"task_id": "CPP/149", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> sorted_list_sum(vector<string> lst){\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n    if (lst[i].length()%2==0) out.push_back(lst[i]);\n    string mid;\n    sort(out.begin(),out.end());\n    for (int i=0;i<out.size();i++)\n    for (int j=1;j<out.size();j++)\n    if (out[j].length()<out[j-1].length())\n    {\n        mid=out[j];out[j]=out[j-1];out[j-1]=mid;\n    }\n    return out;\n}\nint main(){\n\tauto result = sorted_list_sum(<FILL_ME>);\n\tassert(issame(result,{\"AI\",\"asdf\",\"school\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"AI\", \"asdf\", \"school\"}", "fn": "sorted_list_sum", "para": "(vector<string> lst)", "pass": true}
{"task_id": "CPP/149", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> sorted_list_sum(vector<string> lst){\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n    if (lst[i].length()%2==0) out.push_back(lst[i]);\n    string mid;\n    sort(out.begin(),out.end());\n    for (int i=0;i<out.size();i++)\n    for (int j=1;j<out.size();j++)\n    if (out[j].length()<out[j-1].length())\n    {\n        mid=out[j];out[j]=out[j-1];out[j-1]=mid;\n    }\n    return out;\n}\nint main(){\n\tauto result = sorted_list_sum(<FILL_ME>);\n\tassert(issame(result,{\"AI\",\"asdf\",\"school\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"AI\", \"asdf\", \"school\"}", "fn": "sorted_list_sum", "para": "(vector<string> lst)", "pass": true}
{"task_id": "CPP/149", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> sorted_list_sum(vector<string> lst){\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n    if (lst[i].length()%2==0) out.push_back(lst[i]);\n    string mid;\n    sort(out.begin(),out.end());\n    for (int i=0;i<out.size();i++)\n    for (int j=1;j<out.size();j++)\n    if (out[j].length()<out[j-1].length())\n    {\n        mid=out[j];out[j]=out[j-1];out[j-1]=mid;\n    }\n    return out;\n}\nint main(){\n\tauto result = sorted_list_sum(<FILL_ME>);\n\tassert(issame(result,{\"cc\",\"dd\",\"aaaa\",\"bbbb\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"cc\",\"dd\",\"aaaa\",\"bbbb\"}", "fn": "sorted_list_sum", "para": "(vector<string> lst)", "pass": true}
{"task_id": "CPP/149", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> sorted_list_sum(vector<string> lst){\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n    if (lst[i].length()%2==0) out.push_back(lst[i]);\n    string mid;\n    sort(out.begin(),out.end());\n    for (int i=0;i<out.size();i++)\n    for (int j=1;j<out.size();j++)\n    if (out[j].length()<out[j-1].length())\n    {\n        mid=out[j];out[j]=out[j-1];out[j-1]=mid;\n    }\n    return out;\n}\nint main(){\n\tauto result = sorted_list_sum(<FILL_ME>);\n\tassert(issame(result,{\"cc\",\"dd\",\"aaaa\",\"bbbb\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"aaaa\", \"bbbb\", \"cc\", \"dd\"}", "fn": "sorted_list_sum", "para": "(vector<string> lst)", "pass": true}
{"task_id": "CPP/149", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> sorted_list_sum(vector<string> lst){\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n    if (lst[i].length()%2==0) out.push_back(lst[i]);\n    string mid;\n    sort(out.begin(),out.end());\n    for (int i=0;i<out.size();i++)\n    for (int j=1;j<out.size();j++)\n    if (out[j].length()<out[j-1].length())\n    {\n        mid=out[j];out[j]=out[j-1];out[j-1]=mid;\n    }\n    return out;\n}\nint main(){\n\tauto result = sorted_list_sum(<FILL_ME>);\n\tassert(issame(result,{\"cc\",\"dd\",\"aaaa\",\"bbbb\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"cc\",\"dd\",\"aaaa\",\"bbbb\"}", "fn": "sorted_list_sum", "para": "(vector<string> lst)", "pass": true}
{"task_id": "CPP/149", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> sorted_list_sum(vector<string> lst){\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n    if (lst[i].length()%2==0) out.push_back(lst[i]);\n    string mid;\n    sort(out.begin(),out.end());\n    for (int i=0;i<out.size();i++)\n    for (int j=1;j<out.size();j++)\n    if (out[j].length()<out[j-1].length())\n    {\n        mid=out[j];out[j]=out[j-1];out[j-1]=mid;\n    }\n    return out;\n}\nint main(){\n\tauto result = sorted_list_sum(<FILL_ME>);\n\tassert(issame(result,{\"cc\",\"dd\",\"aaaa\",\"bbbb\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"cc\",\"dd\",\"aaaa\",\"bbbb\"}", "fn": "sorted_list_sum", "para": "(vector<string> lst)", "pass": true}
{"task_id": "CPP/149", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> sorted_list_sum(vector<string> lst){\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n    if (lst[i].length()%2==0) out.push_back(lst[i]);\n    string mid;\n    sort(out.begin(),out.end());\n    for (int i=0;i<out.size();i++)\n    for (int j=1;j<out.size();j++)\n    if (out[j].length()<out[j-1].length())\n    {\n        mid=out[j];out[j]=out[j-1];out[j-1]=mid;\n    }\n    return out;\n}\nint main(){\n\tauto result = sorted_list_sum(<FILL_ME>);\n\tassert(issame(result,{\"cc\",\"dd\",\"aaaa\",\"bbbb\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"cc\",\"dd\",\"aaaa\",\"bbbb\"}", "fn": "sorted_list_sum", "para": "(vector<string> lst)", "pass": true}
{"task_id": "CPP/149", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> sorted_list_sum(vector<string> lst){\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n    if (lst[i].length()%2==0) out.push_back(lst[i]);\n    string mid;\n    sort(out.begin(),out.end());\n    for (int i=0;i<out.size();i++)\n    for (int j=1;j<out.size();j++)\n    if (out[j].length()<out[j-1].length())\n    {\n        mid=out[j];out[j]=out[j-1];out[j-1]=mid;\n    }\n    return out;\n}\nint main(){\n\tauto result = sorted_list_sum(<FILL_ME>);\n\tassert(issame(result,{\"abcd\",\"dcba\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"abcd\",\"dcba\"}", "fn": "sorted_list_sum", "para": "(vector<string> lst)", "pass": true}
{"task_id": "CPP/149", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> sorted_list_sum(vector<string> lst){\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n    if (lst[i].length()%2==0) out.push_back(lst[i]);\n    string mid;\n    sort(out.begin(),out.end());\n    for (int i=0;i<out.size();i++)\n    for (int j=1;j<out.size();j++)\n    if (out[j].length()<out[j-1].length())\n    {\n        mid=out[j];out[j]=out[j-1];out[j-1]=mid;\n    }\n    return out;\n}\nint main(){\n\tauto result = sorted_list_sum(<FILL_ME>);\n\tassert(issame(result,{\"abcd\",\"dcba\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"abcd\",\"dcba\"}", "fn": "sorted_list_sum", "para": "(vector<string> lst)", "pass": true}
{"task_id": "CPP/149", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> sorted_list_sum(vector<string> lst){\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n    if (lst[i].length()%2==0) out.push_back(lst[i]);\n    string mid;\n    sort(out.begin(),out.end());\n    for (int i=0;i<out.size();i++)\n    for (int j=1;j<out.size();j++)\n    if (out[j].length()<out[j-1].length())\n    {\n        mid=out[j];out[j]=out[j-1];out[j-1]=mid;\n    }\n    return out;\n}\nint main(){\n\tauto result = sorted_list_sum(<FILL_ME>);\n\tassert(issame(result,{\"abcd\",\"dcba\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"abcd\",\"dcba\"}", "fn": "sorted_list_sum", "para": "(vector<string> lst)", "pass": true}
{"task_id": "CPP/149", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> sorted_list_sum(vector<string> lst){\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n    if (lst[i].length()%2==0) out.push_back(lst[i]);\n    string mid;\n    sort(out.begin(),out.end());\n    for (int i=0;i<out.size();i++)\n    for (int j=1;j<out.size();j++)\n    if (out[j].length()<out[j-1].length())\n    {\n        mid=out[j];out[j]=out[j-1];out[j-1]=mid;\n    }\n    return out;\n}\nint main(){\n\tauto result = sorted_list_sum(<FILL_ME>);\n\tassert(issame(result,{\"abcd\",\"dcba\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"abcd\", \"dcba\"}", "fn": "sorted_list_sum", "para": "(vector<string> lst)", "pass": true}
{"task_id": "CPP/149", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> sorted_list_sum(vector<string> lst){\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n    if (lst[i].length()%2==0) out.push_back(lst[i]);\n    string mid;\n    sort(out.begin(),out.end());\n    for (int i=0;i<out.size();i++)\n    for (int j=1;j<out.size();j++)\n    if (out[j].length()<out[j-1].length())\n    {\n        mid=out[j];out[j]=out[j-1];out[j-1]=mid;\n    }\n    return out;\n}\nint main(){\n\tauto result = sorted_list_sum(<FILL_ME>);\n\tassert(issame(result,{\"abcd\",\"dcba\"}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"abcd\", \"dcba\"}", "fn": "sorted_list_sum", "para": "(vector<string> lst)", "pass": true}
{"task_id": "CPP/149", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> sorted_list_sum(vector<string> lst){\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n    if (lst[i].length()%2==0) out.push_back(lst[i]);\n    string mid;\n    sort(out.begin(),out.end());\n    for (int i=0;i<out.size();i++)\n    for (int j=1;j<out.size();j++)\n    if (out[j].length()<out[j-1].length())\n    {\n        mid=out[j];out[j]=out[j-1];out[j-1]=mid;\n    }\n    return out;\n}\nint main(){\n\tauto result = sorted_list_sum(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"abc\",\"def\",\"ghi\"}", "fn": "sorted_list_sum", "para": "(vector<string> lst)", "pass": true}
{"task_id": "CPP/149", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> sorted_list_sum(vector<string> lst){\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n    if (lst[i].length()%2==0) out.push_back(lst[i]);\n    string mid;\n    sort(out.begin(),out.end());\n    for (int i=0;i<out.size();i++)\n    for (int j=1;j<out.size();j++)\n    if (out[j].length()<out[j-1].length())\n    {\n        mid=out[j];out[j]=out[j-1];out[j-1]=mid;\n    }\n    return out;\n}\nint main(){\n\tauto result = sorted_list_sum(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<string>{\"apple\", \"banana\", \"orange\", \"grape\"}", "fn": "sorted_list_sum", "para": "(vector<string> lst)", "pass": false}
{"task_id": "CPP/149", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> sorted_list_sum(vector<string> lst){\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n    if (lst[i].length()%2==0) out.push_back(lst[i]);\n    string mid;\n    sort(out.begin(),out.end());\n    for (int i=0;i<out.size();i++)\n    for (int j=1;j<out.size();j++)\n    if (out[j].length()<out[j-1].length())\n    {\n        mid=out[j];out[j]=out[j-1];out[j-1]=mid;\n    }\n    return out;\n}\nint main(){\n\tauto result = sorted_list_sum(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"abc\",\"def\",\"ghi\"}", "fn": "sorted_list_sum", "para": "(vector<string> lst)", "pass": true}
{"task_id": "CPP/149", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> sorted_list_sum(vector<string> lst){\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n    if (lst[i].length()%2==0) out.push_back(lst[i]);\n    string mid;\n    sort(out.begin(),out.end());\n    for (int i=0;i<out.size();i++)\n    for (int j=1;j<out.size();j++)\n    if (out[j].length()<out[j-1].length())\n    {\n        mid=out[j];out[j]=out[j-1];out[j-1]=mid;\n    }\n    return out;\n}\nint main(){\n\tauto result = sorted_list_sum(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"apple\", \"banana\", \"orange\", \"grape\"}", "fn": "sorted_list_sum", "para": "(vector<string> lst)", "pass": false}
{"task_id": "CPP/149", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> sorted_list_sum(vector<string> lst){\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n    if (lst[i].length()%2==0) out.push_back(lst[i]);\n    string mid;\n    sort(out.begin(),out.end());\n    for (int i=0;i<out.size();i++)\n    for (int j=1;j<out.size();j++)\n    if (out[j].length()<out[j-1].length())\n    {\n        mid=out[j];out[j]=out[j-1];out[j-1]=mid;\n    }\n    return out;\n}\nint main(){\n\tauto result = sorted_list_sum(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "{\"abc\",\"def\",\"ghi\"}", "fn": "sorted_list_sum", "para": "(vector<string> lst)", "pass": true}
{"task_id": "CPP/150", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\nint main(){\n\tauto result = x_or_y(<FILL_ME>);\n\tassert(result==129);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "131, 129, 130", "fn": "x_or_y", "para": "(int n,int x,int y)", "pass": true}
{"task_id": "CPP/150", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\nint main(){\n\tauto result = x_or_y(<FILL_ME>);\n\tassert(result==129);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "131, 129, 130", "fn": "x_or_y", "para": "(int n,int x,int y)", "pass": true}
{"task_id": "CPP/150", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\nint main(){\n\tauto result = x_or_y(<FILL_ME>);\n\tassert(result==129);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "131, 129, 130", "fn": "x_or_y", "para": "(int n,int x,int y)", "pass": true}
{"task_id": "CPP/150", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\nint main(){\n\tauto result = x_or_y(<FILL_ME>);\n\tassert(result==129);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "131, 129, 130", "fn": "x_or_y", "para": "(int n,int x,int y)", "pass": true}
{"task_id": "CPP/150", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\nint main(){\n\tauto result = x_or_y(<FILL_ME>);\n\tassert(result==129);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "131, 129, 130", "fn": "x_or_y", "para": "(int n,int x,int y)", "pass": true}
{"task_id": "CPP/150", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\nint main(){\n\tauto result = x_or_y(<FILL_ME>);\n\tassert(result==1234);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "11, 1234, 5678", "fn": "x_or_y", "para": "(int n,int x,int y)", "pass": true}
{"task_id": "CPP/150", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\nint main(){\n\tauto result = x_or_y(<FILL_ME>);\n\tassert(result==1234);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "11, 1234, 5678", "fn": "x_or_y", "para": "(int n,int x,int y)", "pass": true}
{"task_id": "CPP/150", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\nint main(){\n\tauto result = x_or_y(<FILL_ME>);\n\tassert(result==1234);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "11, 1234, 5678", "fn": "x_or_y", "para": "(int n,int x,int y)", "pass": true}
{"task_id": "CPP/150", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\nint main(){\n\tauto result = x_or_y(<FILL_ME>);\n\tassert(result==1234);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "11, 1234, 5678", "fn": "x_or_y", "para": "(int n,int x,int y)", "pass": true}
{"task_id": "CPP/150", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\nint main(){\n\tauto result = x_or_y(<FILL_ME>);\n\tassert(result==1234);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "11, 1234, 5678", "fn": "x_or_y", "para": "(int n,int x,int y)", "pass": true}
{"task_id": "CPP/150", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\nint main(){\n\tauto result = x_or_y(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "2, 2, 3", "fn": "x_or_y", "para": "(int n,int x,int y)", "pass": true}
{"task_id": "CPP/150", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\nint main(){\n\tauto result = x_or_y(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "2, 2, 3", "fn": "x_or_y", "para": "(int n,int x,int y)", "pass": true}
{"task_id": "CPP/150", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\nint main(){\n\tauto result = x_or_y(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "2, 2, 3", "fn": "x_or_y", "para": "(int n,int x,int y)", "pass": true}
{"task_id": "CPP/150", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\nint main(){\n\tauto result = x_or_y(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "2, 2, 3", "fn": "x_or_y", "para": "(int n,int x,int y)", "pass": true}
{"task_id": "CPP/150", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\nint main(){\n\tauto result = x_or_y(<FILL_ME>);\n\tassert(result==2);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "2, 2, 3", "fn": "x_or_y", "para": "(int n,int x,int y)", "pass": true}
{"task_id": "CPP/150", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\nint main(){\n\tauto result = x_or_y(<FILL_ME>);\n\tassert(result==583);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "587, 583, 791", "fn": "x_or_y", "para": "(int n,int x,int y)", "pass": true}
{"task_id": "CPP/150", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\nint main(){\n\tauto result = x_or_y(<FILL_ME>);\n\tassert(result==583);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "587, 583, 791", "fn": "x_or_y", "para": "(int n,int x,int y)", "pass": true}
{"task_id": "CPP/150", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\nint main(){\n\tauto result = x_or_y(<FILL_ME>);\n\tassert(result==583);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "587, 583, 791", "fn": "x_or_y", "para": "(int n,int x,int y)", "pass": true}
{"task_id": "CPP/150", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\nint main(){\n\tauto result = x_or_y(<FILL_ME>);\n\tassert(result==583);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "587, 583, 791", "fn": "x_or_y", "para": "(int n,int x,int y)", "pass": true}
{"task_id": "CPP/150", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\nint main(){\n\tauto result = x_or_y(<FILL_ME>);\n\tassert(result==583);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "587, 583, 791", "fn": "x_or_y", "para": "(int n,int x,int y)", "pass": true}
{"task_id": "CPP/150", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\nint main(){\n\tauto result = x_or_y(<FILL_ME>);\n\tassert(result==34);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3, 34, 57", "fn": "x_or_y", "para": "(int n,int x,int y)", "pass": true}
{"task_id": "CPP/150", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\nint main(){\n\tauto result = x_or_y(<FILL_ME>);\n\tassert(result==34);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3, 34, 57", "fn": "x_or_y", "para": "(int n,int x,int y)", "pass": true}
{"task_id": "CPP/150", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\nint main(){\n\tauto result = x_or_y(<FILL_ME>);\n\tassert(result==34);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3, 34, 57", "fn": "x_or_y", "para": "(int n,int x,int y)", "pass": true}
{"task_id": "CPP/150", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\nint main(){\n\tauto result = x_or_y(<FILL_ME>);\n\tassert(result==34);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3, 34, 57", "fn": "x_or_y", "para": "(int n,int x,int y)", "pass": true}
{"task_id": "CPP/150", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\nint main(){\n\tauto result = x_or_y(<FILL_ME>);\n\tassert(result==34);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3, 34, 57", "fn": "x_or_y", "para": "(int n,int x,int y)", "pass": true}
{"task_id": "CPP/150", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\nint main(){\n\tauto result = x_or_y(<FILL_ME>);\n\tassert(result==33);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "33, 33, 33", "fn": "x_or_y", "para": "(int n,int x,int y)", "pass": true}
{"task_id": "CPP/150", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\nint main(){\n\tauto result = x_or_y(<FILL_ME>);\n\tassert(result==33);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "33, 33, 33", "fn": "x_or_y", "para": "(int n,int x,int y)", "pass": true}
{"task_id": "CPP/150", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\nint main(){\n\tauto result = x_or_y(<FILL_ME>);\n\tassert(result==33);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "33, 33, 33", "fn": "x_or_y", "para": "(int n,int x,int y)", "pass": true}
{"task_id": "CPP/150", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\nint main(){\n\tauto result = x_or_y(<FILL_ME>);\n\tassert(result==33);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "33, 33, 33", "fn": "x_or_y", "para": "(int n,int x,int y)", "pass": true}
{"task_id": "CPP/150", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\nint main(){\n\tauto result = x_or_y(<FILL_ME>);\n\tassert(result==33);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "33, 33, 33", "fn": "x_or_y", "para": "(int n,int x,int y)", "pass": true}
{"task_id": "CPP/150", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\nint main(){\n\tauto result = x_or_y(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5, 5, 5", "fn": "x_or_y", "para": "(int n,int x,int y)", "pass": true}
{"task_id": "CPP/150", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\nint main(){\n\tauto result = x_or_y(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5, 5, 5", "fn": "x_or_y", "para": "(int n,int x,int y)", "pass": true}
{"task_id": "CPP/150", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\nint main(){\n\tauto result = x_or_y(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5, 5, 5", "fn": "x_or_y", "para": "(int n,int x,int y)", "pass": true}
{"task_id": "CPP/150", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\nint main(){\n\tauto result = x_or_y(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5, 5, 5", "fn": "x_or_y", "para": "(int n,int x,int y)", "pass": true}
{"task_id": "CPP/150", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\nint main(){\n\tauto result = x_or_y(<FILL_ME>);\n\tassert(result==5);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "5, 5, 5", "fn": "x_or_y", "para": "(int n,int x,int y)", "pass": true}
{"task_id": "CPP/150", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\nint main(){\n\tauto result = x_or_y(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3, 0, 1", "fn": "x_or_y", "para": "(int n,int x,int y)", "pass": true}
{"task_id": "CPP/150", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\nint main(){\n\tauto result = x_or_y(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3, 0, 1", "fn": "x_or_y", "para": "(int n,int x,int y)", "pass": true}
{"task_id": "CPP/150", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\nint main(){\n\tauto result = x_or_y(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3, 0, 1", "fn": "x_or_y", "para": "(int n,int x,int y)", "pass": true}
{"task_id": "CPP/150", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\nint main(){\n\tauto result = x_or_y(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3, 0, 1", "fn": "x_or_y", "para": "(int n,int x,int y)", "pass": true}
{"task_id": "CPP/150", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\nint main(){\n\tauto result = x_or_y(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3, 0, 1", "fn": "x_or_y", "para": "(int n,int x,int y)", "pass": true}
{"task_id": "CPP/150", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\nint main(){\n\tauto result = x_or_y(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3, 3, 5", "fn": "x_or_y", "para": "(int n,int x,int y)", "pass": true}
{"task_id": "CPP/150", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\nint main(){\n\tauto result = x_or_y(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3, 3, 5", "fn": "x_or_y", "para": "(int n,int x,int y)", "pass": true}
{"task_id": "CPP/150", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\nint main(){\n\tauto result = x_or_y(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3, 3, 5", "fn": "x_or_y", "para": "(int n,int x,int y)", "pass": true}
{"task_id": "CPP/150", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\nint main(){\n\tauto result = x_or_y(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3, 3, 5", "fn": "x_or_y", "para": "(int n,int x,int y)", "pass": true}
{"task_id": "CPP/150", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\nint main(){\n\tauto result = x_or_y(<FILL_ME>);\n\tassert(result==3);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3, 3, 5", "fn": "x_or_y", "para": "(int n,int x,int y)", "pass": true}
{"task_id": "CPP/150", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\nint main(){\n\tauto result = x_or_y(<FILL_ME>);\n\tassert(result==-1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3, 1, -1", "fn": "x_or_y", "para": "(int n,int x,int y)", "pass": false}
{"task_id": "CPP/150", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\nint main(){\n\tauto result = x_or_y(<FILL_ME>);\n\tassert(result==-1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3, 1, -1", "fn": "x_or_y", "para": "(int n,int x,int y)", "pass": false}
{"task_id": "CPP/150", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\nint main(){\n\tauto result = x_or_y(<FILL_ME>);\n\tassert(result==-1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3, 1, -1", "fn": "x_or_y", "para": "(int n,int x,int y)", "pass": false}
{"task_id": "CPP/150", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\nint main(){\n\tauto result = x_or_y(<FILL_ME>);\n\tassert(result==-1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3, 1, -1", "fn": "x_or_y", "para": "(int n,int x,int y)", "pass": false}
{"task_id": "CPP/150", "code": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\nint main(){\n\tauto result = x_or_y(<FILL_ME>);\n\tassert(result==-1);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "3, 1, -1", "fn": "x_or_y", "para": "(int n,int x,int y)", "pass": false}
{"task_id": "CPP/151", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long double_the_difference(vector<float> lst){\n    long long sum=0;\n    for (int i=0;i<lst.size();i++)\n    if (lst[i]-round(lst[i])<1e-4)\n    if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));\n    return sum;\n}\nint main(){\n\tauto result = double_the_difference(<FILL_ME>);\n\tassert(result==34);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{2.5, 3.5, 4.7, 5.2}", "fn": "double_the_difference", "para": "(vector<float> lst)", "pass": true}
{"task_id": "CPP/151", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long double_the_difference(vector<float> lst){\n    long long sum=0;\n    for (int i=0;i<lst.size();i++)\n    if (lst[i]-round(lst[i])<1e-4)\n    if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));\n    return sum;\n}\nint main(){\n\tauto result = double_the_difference(<FILL_ME>);\n\tassert(result==34);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{2.5, 3.5, 4.7, 5.2}", "fn": "double_the_difference", "para": "(vector<float> lst)", "pass": true}
{"task_id": "CPP/151", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long double_the_difference(vector<float> lst){\n    long long sum=0;\n    for (int i=0;i<lst.size();i++)\n    if (lst[i]-round(lst[i])<1e-4)\n    if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));\n    return sum;\n}\nint main(){\n\tauto result = double_the_difference(<FILL_ME>);\n\tassert(result==34);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{2.5, 3.5, 4.7, 5.2}", "fn": "double_the_difference", "para": "(vector<float> lst)", "pass": true}
{"task_id": "CPP/151", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long double_the_difference(vector<float> lst){\n    long long sum=0;\n    for (int i=0;i<lst.size();i++)\n    if (lst[i]-round(lst[i])<1e-4)\n    if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));\n    return sum;\n}\nint main(){\n\tauto result = double_the_difference(<FILL_ME>);\n\tassert(result==34);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{2.5, 3.5, 4.7, 5.2}", "fn": "double_the_difference", "para": "(vector<float> lst)", "pass": true}
{"task_id": "CPP/151", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long double_the_difference(vector<float> lst){\n    long long sum=0;\n    for (int i=0;i<lst.size();i++)\n    if (lst[i]-round(lst[i])<1e-4)\n    if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));\n    return sum;\n}\nint main(){\n\tauto result = double_the_difference(<FILL_ME>);\n\tassert(result==34);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{2.5, 3.5, 4.7, 5.2}", "fn": "double_the_difference", "para": "(vector<float> lst)", "pass": true}
{"task_id": "CPP/151", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long double_the_difference(vector<float> lst){\n    long long sum=0;\n    for (int i=0;i<lst.size();i++)\n    if (lst[i]-round(lst[i])<1e-4)\n    if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));\n    return sum;\n}\nint main(){\n\tauto result = double_the_difference(<FILL_ME>);\n\tassert(result==25);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1.1, 3.5, 5.0, 7.2}", "fn": "double_the_difference", "para": "(vector<float> lst)", "pass": true}
{"task_id": "CPP/151", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long double_the_difference(vector<float> lst){\n    long long sum=0;\n    for (int i=0;i<lst.size();i++)\n    if (lst[i]-round(lst[i])<1e-4)\n    if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));\n    return sum;\n}\nint main(){\n\tauto result = double_the_difference(<FILL_ME>);\n\tassert(result==25);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1.1, 3.5, 5.0, 7.2}", "fn": "double_the_difference", "para": "(vector<float> lst)", "pass": true}
{"task_id": "CPP/151", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long double_the_difference(vector<float> lst){\n    long long sum=0;\n    for (int i=0;i<lst.size();i++)\n    if (lst[i]-round(lst[i])<1e-4)\n    if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));\n    return sum;\n}\nint main(){\n\tauto result = double_the_difference(<FILL_ME>);\n\tassert(result==25);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1.1, 3.5, 5.0, 7.2}", "fn": "double_the_difference", "para": "(vector<float> lst)", "pass": true}
{"task_id": "CPP/151", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long double_the_difference(vector<float> lst){\n    long long sum=0;\n    for (int i=0;i<lst.size();i++)\n    if (lst[i]-round(lst[i])<1e-4)\n    if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));\n    return sum;\n}\nint main(){\n\tauto result = double_the_difference(<FILL_ME>);\n\tassert(result==25);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1.1, 3.5, 5.0, 7.2}", "fn": "double_the_difference", "para": "(vector<float> lst)", "pass": true}
{"task_id": "CPP/151", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long double_the_difference(vector<float> lst){\n    long long sum=0;\n    for (int i=0;i<lst.size();i++)\n    if (lst[i]-round(lst[i])<1e-4)\n    if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));\n    return sum;\n}\nint main(){\n\tauto result = double_the_difference(<FILL_ME>);\n\tassert(result==25);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{1.1, 3.5, 5.0, 7.2}", "fn": "double_the_difference", "para": "(vector<float> lst)", "pass": true}
{"task_id": "CPP/151", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long double_the_difference(vector<float> lst){\n    long long sum=0;\n    for (int i=0;i<lst.size();i++)\n    if (lst[i]-round(lst[i])<1e-4)\n    if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));\n    return sum;\n}\nint main(){\n\tauto result = double_the_difference(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{1.5, 2.3, 3.7}", "fn": "double_the_difference", "para": "(vector<float> lst)", "pass": true}
{"task_id": "CPP/151", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long double_the_difference(vector<float> lst){\n    long long sum=0;\n    for (int i=0;i<lst.size();i++)\n    if (lst[i]-round(lst[i])<1e-4)\n    if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));\n    return sum;\n}\nint main(){\n\tauto result = double_the_difference(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{1.5, 2.3, 3.7}", "fn": "double_the_difference", "para": "(vector<float> lst)", "pass": true}
{"task_id": "CPP/151", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long double_the_difference(vector<float> lst){\n    long long sum=0;\n    for (int i=0;i<lst.size();i++)\n    if (lst[i]-round(lst[i])<1e-4)\n    if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));\n    return sum;\n}\nint main(){\n\tauto result = double_the_difference(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{1.5, 2.3, 3.7}", "fn": "double_the_difference", "para": "(vector<float> lst)", "pass": true}
{"task_id": "CPP/151", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long double_the_difference(vector<float> lst){\n    long long sum=0;\n    for (int i=0;i<lst.size();i++)\n    if (lst[i]-round(lst[i])<1e-4)\n    if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));\n    return sum;\n}\nint main(){\n\tauto result = double_the_difference(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{1.5, 2.3, 3.7}", "fn": "double_the_difference", "para": "(vector<float> lst)", "pass": true}
{"task_id": "CPP/151", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long double_the_difference(vector<float> lst){\n    long long sum=0;\n    for (int i=0;i<lst.size();i++)\n    if (lst[i]-round(lst[i])<1e-4)\n    if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));\n    return sum;\n}\nint main(){\n\tauto result = double_the_difference(<FILL_ME>);\n\tassert(result==0);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{1.5, 2.3, 3.7}", "fn": "double_the_difference", "para": "(vector<float> lst)", "pass": true}
{"task_id": "CPP/151", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long double_the_difference(vector<float> lst){\n    long long sum=0;\n    for (int i=0;i<lst.size();i++)\n    if (lst[i]-round(lst[i])<1e-4)\n    if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));\n    return sum;\n}\nint main(){\n\tauto result = double_the_difference(<FILL_ME>);\n\tassert(result==odd_sum);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{1.5, 2.3, 3.6, 4.8}", "fn": "double_the_difference", "para": "(vector<float> lst)", "pass": false}
{"task_id": "CPP/151", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long double_the_difference(vector<float> lst){\n    long long sum=0;\n    for (int i=0;i<lst.size();i++)\n    if (lst[i]-round(lst[i])<1e-4)\n    if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));\n    return sum;\n}\nint main(){\n\tauto result = double_the_difference(<FILL_ME>);\n\tassert(result==odd_sum);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{1.5, 2.3, 3.6, 4.8}", "fn": "double_the_difference", "para": "(vector<float> lst)", "pass": false}
{"task_id": "CPP/151", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long double_the_difference(vector<float> lst){\n    long long sum=0;\n    for (int i=0;i<lst.size();i++)\n    if (lst[i]-round(lst[i])<1e-4)\n    if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));\n    return sum;\n}\nint main(){\n\tauto result = double_the_difference(<FILL_ME>);\n\tassert(result==odd_sum);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{1.5, 2.3, 3.6, 4.8}", "fn": "double_the_difference", "para": "(vector<float> lst)", "pass": false}
{"task_id": "CPP/151", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long double_the_difference(vector<float> lst){\n    long long sum=0;\n    for (int i=0;i<lst.size();i++)\n    if (lst[i]-round(lst[i])<1e-4)\n    if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));\n    return sum;\n}\nint main(){\n\tauto result = double_the_difference(<FILL_ME>);\n\tassert(result==odd_sum);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{1.5, 2.3, 3.6, 4.8}", "fn": "double_the_difference", "para": "(vector<float> lst)", "pass": false}
{"task_id": "CPP/151", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long double_the_difference(vector<float> lst){\n    long long sum=0;\n    for (int i=0;i<lst.size();i++)\n    if (lst[i]-round(lst[i])<1e-4)\n    if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));\n    return sum;\n}\nint main(){\n\tauto result = double_the_difference(<FILL_ME>);\n\tassert(result==odd_sum);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<float>{1.5, 2.3, 3.6, 4.8}", "fn": "double_the_difference", "para": "(vector<float> lst)", "pass": false}
{"task_id": "CPP/152", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> compare(vector<int> game,vector<int> guess){\n    vector<int> out;\n    for (int i=0;i<game.size();i++)\n    out.push_back(abs(game[i]-guess[i]));\n    return out;\n}\nint main(){\n\tauto result = compare(<FILL_ME>);\n\tassert(issame(result,{4,4,1,0,0,6}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "game, guess", "fn": "compare", "para": "(vector<int> game,vector<int> guess)", "pass": false}
{"task_id": "CPP/152", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> compare(vector<int> game,vector<int> guess){\n    vector<int> out;\n    for (int i=0;i<game.size();i++)\n    out.push_back(abs(game[i]-guess[i]));\n    return out;\n}\nint main(){\n\tauto result = compare(<FILL_ME>);\n\tassert(issame(result,{4,4,1,0,0,6}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "game, guess", "fn": "compare", "para": "(vector<int> game,vector<int> guess)", "pass": false}
{"task_id": "CPP/152", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> compare(vector<int> game,vector<int> guess){\n    vector<int> out;\n    for (int i=0;i<game.size();i++)\n    out.push_back(abs(game[i]-guess[i]));\n    return out;\n}\nint main(){\n\tauto result = compare(<FILL_ME>);\n\tassert(issame(result,{4,4,1,0,0,6}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "game, guess", "fn": "compare", "para": "(vector<int> game,vector<int> guess)", "pass": false}
{"task_id": "CPP/152", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> compare(vector<int> game,vector<int> guess){\n    vector<int> out;\n    for (int i=0;i<game.size();i++)\n    out.push_back(abs(game[i]-guess[i]));\n    return out;\n}\nint main(){\n\tauto result = compare(<FILL_ME>);\n\tassert(issame(result,{4,4,1,0,0,6}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "game, guess", "fn": "compare", "para": "(vector<int> game,vector<int> guess)", "pass": false}
{"task_id": "CPP/152", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> compare(vector<int> game,vector<int> guess){\n    vector<int> out;\n    for (int i=0;i<game.size();i++)\n    out.push_back(abs(game[i]-guess[i]));\n    return out;\n}\nint main(){\n\tauto result = compare(<FILL_ME>);\n\tassert(issame(result,{4,4,1,0,0,6}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "game, guess", "fn": "compare", "para": "(vector<int> game,vector<int> guess)", "pass": false}
{"task_id": "CPP/152", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> compare(vector<int> game,vector<int> guess){\n    vector<int> out;\n    for (int i=0;i<game.size();i++)\n    out.push_back(abs(game[i]-guess[i]));\n    return out;\n}\nint main(){\n\tauto result = compare(<FILL_ME>);\n\tassert(issame(result,{2,0,0,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "game, guess", "fn": "compare", "para": "(vector<int> game,vector<int> guess)", "pass": false}
{"task_id": "CPP/152", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> compare(vector<int> game,vector<int> guess){\n    vector<int> out;\n    for (int i=0;i<game.size();i++)\n    out.push_back(abs(game[i]-guess[i]));\n    return out;\n}\nint main(){\n\tauto result = compare(<FILL_ME>);\n\tassert(issame(result,{2,0,0,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "game, guess", "fn": "compare", "para": "(vector<int> game,vector<int> guess)", "pass": false}
{"task_id": "CPP/152", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> compare(vector<int> game,vector<int> guess){\n    vector<int> out;\n    for (int i=0;i<game.size();i++)\n    out.push_back(abs(game[i]-guess[i]));\n    return out;\n}\nint main(){\n\tauto result = compare(<FILL_ME>);\n\tassert(issame(result,{2,0,0,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "game, guess", "fn": "compare", "para": "(vector<int> game,vector<int> guess)", "pass": false}
{"task_id": "CPP/152", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> compare(vector<int> game,vector<int> guess){\n    vector<int> out;\n    for (int i=0;i<game.size();i++)\n    out.push_back(abs(game[i]-guess[i]));\n    return out;\n}\nint main(){\n\tauto result = compare(<FILL_ME>);\n\tassert(issame(result,{2,0,0,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "game, guess", "fn": "compare", "para": "(vector<int> game,vector<int> guess)", "pass": false}
{"task_id": "CPP/152", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> compare(vector<int> game,vector<int> guess){\n    vector<int> out;\n    for (int i=0;i<game.size();i++)\n    out.push_back(abs(game[i]-guess[i]));\n    return out;\n}\nint main(){\n\tauto result = compare(<FILL_ME>);\n\tassert(issame(result,{2,0,0,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "game, guess", "fn": "compare", "para": "(vector<int> game,vector<int> guess)", "pass": false}
{"task_id": "CPP/152", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> compare(vector<int> game,vector<int> guess){\n    vector<int> out;\n    for (int i=0;i<game.size();i++)\n    out.push_back(abs(game[i]-guess[i]));\n    return out;\n}\nint main(){\n\tauto result = compare(<FILL_ME>);\n\tassert(issame(result,{2,4,6}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{5,1,9}, vector<int>{3,5,3}", "fn": "compare", "para": "(vector<int> game,vector<int> guess)", "pass": true}
{"task_id": "CPP/152", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> compare(vector<int> game,vector<int> guess){\n    vector<int> out;\n    for (int i=0;i<game.size();i++)\n    out.push_back(abs(game[i]-guess[i]));\n    return out;\n}\nint main(){\n\tauto result = compare(<FILL_ME>);\n\tassert(issame(result,{2,4,6}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{5,1,9}, vector<int>{3,5,3}", "fn": "compare", "para": "(vector<int> game,vector<int> guess)", "pass": true}
{"task_id": "CPP/152", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> compare(vector<int> game,vector<int> guess){\n    vector<int> out;\n    for (int i=0;i<game.size();i++)\n    out.push_back(abs(game[i]-guess[i]));\n    return out;\n}\nint main(){\n\tauto result = compare(<FILL_ME>);\n\tassert(issame(result,{2,4,6}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{5,1,9}, vector<int>{3,5,3}", "fn": "compare", "para": "(vector<int> game,vector<int> guess)", "pass": true}
{"task_id": "CPP/152", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> compare(vector<int> game,vector<int> guess){\n    vector<int> out;\n    for (int i=0;i<game.size();i++)\n    out.push_back(abs(game[i]-guess[i]));\n    return out;\n}\nint main(){\n\tauto result = compare(<FILL_ME>);\n\tassert(issame(result,{2,4,6}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{5,1,9}, vector<int>{3,5,3}", "fn": "compare", "para": "(vector<int> game,vector<int> guess)", "pass": true}
{"task_id": "CPP/152", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> compare(vector<int> game,vector<int> guess){\n    vector<int> out;\n    for (int i=0;i<game.size();i++)\n    out.push_back(abs(game[i]-guess[i]));\n    return out;\n}\nint main(){\n\tauto result = compare(<FILL_ME>);\n\tassert(issame(result,{2,4,6}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{5,1,9}, vector<int>{3,5,3}", "fn": "compare", "para": "(vector<int> game,vector<int> guess)", "pass": true}
{"task_id": "CPP/152", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> compare(vector<int> game,vector<int> guess){\n    vector<int> out;\n    for (int i=0;i<game.size();i++)\n    out.push_back(abs(game[i]-guess[i]));\n    return out;\n}\nint main(){\n\tauto result = compare(<FILL_ME>);\n\tassert(issame(result,{0,0,0,0,3,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "game,guess", "fn": "compare", "para": "(vector<int> game,vector<int> guess)", "pass": false}
{"task_id": "CPP/152", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> compare(vector<int> game,vector<int> guess){\n    vector<int> out;\n    for (int i=0;i<game.size();i++)\n    out.push_back(abs(game[i]-guess[i]));\n    return out;\n}\nint main(){\n\tauto result = compare(<FILL_ME>);\n\tassert(issame(result,{0,0,0,0,3,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "game, guess", "fn": "compare", "para": "(vector<int> game,vector<int> guess)", "pass": false}
{"task_id": "CPP/152", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> compare(vector<int> game,vector<int> guess){\n    vector<int> out;\n    for (int i=0;i<game.size();i++)\n    out.push_back(abs(game[i]-guess[i]));\n    return out;\n}\nint main(){\n\tauto result = compare(<FILL_ME>);\n\tassert(issame(result,{0,0,0,0,3,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "game, guess", "fn": "compare", "para": "(vector<int> game,vector<int> guess)", "pass": false}
{"task_id": "CPP/152", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> compare(vector<int> game,vector<int> guess){\n    vector<int> out;\n    for (int i=0;i<game.size();i++)\n    out.push_back(abs(game[i]-guess[i]));\n    return out;\n}\nint main(){\n\tauto result = compare(<FILL_ME>);\n\tassert(issame(result,{0,0,0,0,3,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "game, guess", "fn": "compare", "para": "(vector<int> game,vector<int> guess)", "pass": false}
{"task_id": "CPP/152", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> compare(vector<int> game,vector<int> guess){\n    vector<int> out;\n    for (int i=0;i<game.size();i++)\n    out.push_back(abs(game[i]-guess[i]));\n    return out;\n}\nint main(){\n\tauto result = compare(<FILL_ME>);\n\tassert(issame(result,{0,0,0,0,3,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "game, guess", "fn": "compare", "para": "(vector<int> game,vector<int> guess)", "pass": false}
{"task_id": "CPP/152", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> compare(vector<int> game,vector<int> guess){\n    vector<int> out;\n    for (int i=0;i<game.size();i++)\n    out.push_back(abs(game[i]-guess[i]));\n    return out;\n}\nint main(){\n\tauto result = compare(<FILL_ME>);\n\tassert(issame(result,{0,0,0,0,0,0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{1,2,3,4,5,6}, vector<int>{1,2,3,4,5,6}", "fn": "compare", "para": "(vector<int> game,vector<int> guess)", "pass": true}
{"task_id": "CPP/152", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> compare(vector<int> game,vector<int> guess){\n    vector<int> out;\n    for (int i=0;i<game.size();i++)\n    out.push_back(abs(game[i]-guess[i]));\n    return out;\n}\nint main(){\n\tauto result = compare(<FILL_ME>);\n\tassert(issame(result,{0,0,0,0,0,0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{1,2,3,4,5,6}, vector<int>{1,2,3,4,5,6}", "fn": "compare", "para": "(vector<int> game,vector<int> guess)", "pass": true}
{"task_id": "CPP/152", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> compare(vector<int> game,vector<int> guess){\n    vector<int> out;\n    for (int i=0;i<game.size();i++)\n    out.push_back(abs(game[i]-guess[i]));\n    return out;\n}\nint main(){\n\tauto result = compare(<FILL_ME>);\n\tassert(issame(result,{0,0,0,0,0,0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{1,2,3,4,5,6}, vector<int>{1,2,3,4,5,6}", "fn": "compare", "para": "(vector<int> game,vector<int> guess)", "pass": true}
{"task_id": "CPP/152", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> compare(vector<int> game,vector<int> guess){\n    vector<int> out;\n    for (int i=0;i<game.size();i++)\n    out.push_back(abs(game[i]-guess[i]));\n    return out;\n}\nint main(){\n\tauto result = compare(<FILL_ME>);\n\tassert(issame(result,{0,0,0,0,0,0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{1,2,3,4,5,6}, vector<int>{1,2,3,4,5,6}", "fn": "compare", "para": "(vector<int> game,vector<int> guess)", "pass": true}
{"task_id": "CPP/152", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> compare(vector<int> game,vector<int> guess){\n    vector<int> out;\n    for (int i=0;i<game.size();i++)\n    out.push_back(abs(game[i]-guess[i]));\n    return out;\n}\nint main(){\n\tauto result = compare(<FILL_ME>);\n\tassert(issame(result,{0,0,0,0,0,0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "vector<int>{1,2,3,4,5,6}, vector<int>{1,2,3,4,5,6}", "fn": "compare", "para": "(vector<int> game,vector<int> guess)", "pass": true}
{"task_id": "CPP/153", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\nint main(){\n\tauto result = Strongest_Extension(<FILL_ME>);\n\tassert(result==\"Watashi.eIGHt8OKe\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Watashi\", {\"eight\", \"eIGHt8OKe\"}", "fn": "Strongest_Extension", "para": "(string class_name,vector<string> extensions)", "pass": true}
{"task_id": "CPP/153", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\nint main(){\n\tauto result = Strongest_Extension(<FILL_ME>);\n\tassert(result==\"Watashi.eIGHt8OKe\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Watashi\", {\"eight\", \"eIGHt8OKe\"}", "fn": "Strongest_Extension", "para": "(string class_name,vector<string> extensions)", "pass": true}
{"task_id": "CPP/153", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\nint main(){\n\tauto result = Strongest_Extension(<FILL_ME>);\n\tassert(result==\"Watashi.eIGHt8OKe\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Watashi\", {\"eight\", \"eIGHt8OKe\"}", "fn": "Strongest_Extension", "para": "(string class_name,vector<string> extensions)", "pass": true}
{"task_id": "CPP/153", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\nint main(){\n\tauto result = Strongest_Extension(<FILL_ME>);\n\tassert(result==\"Watashi.eIGHt8OKe\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Watashi\", {\"eight\", \"eIGHt8OKe\"}", "fn": "Strongest_Extension", "para": "(string class_name,vector<string> extensions)", "pass": true}
{"task_id": "CPP/153", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\nint main(){\n\tauto result = Strongest_Extension(<FILL_ME>);\n\tassert(result==\"Watashi.eIGHt8OKe\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Watashi\", {\"eight\", \"eIGHt8OKe\"}", "fn": "Strongest_Extension", "para": "(string class_name,vector<string> extensions)", "pass": true}
{"task_id": "CPP/153", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\nint main(){\n\tauto result = Strongest_Extension(<FILL_ME>);\n\tassert(result==\"_.Bb\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"_\" , {\"Aa\", \"Bb\", \"Cc\"}", "fn": "Strongest_Extension", "para": "(string class_name,vector<string> extensions)", "pass": false}
{"task_id": "CPP/153", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\nint main(){\n\tauto result = Strongest_Extension(<FILL_ME>);\n\tassert(result==\"_.Bb\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"_\" , {\"Aa\", \"Bb\", \"Cc\"}", "fn": "Strongest_Extension", "para": "(string class_name,vector<string> extensions)", "pass": false}
{"task_id": "CPP/153", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\nint main(){\n\tauto result = Strongest_Extension(<FILL_ME>);\n\tassert(result==\"_.Bb\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"_\" , {\"Aa\", \"Bb\", \"Cc\"}", "fn": "Strongest_Extension", "para": "(string class_name,vector<string> extensions)", "pass": false}
{"task_id": "CPP/153", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\nint main(){\n\tauto result = Strongest_Extension(<FILL_ME>);\n\tassert(result==\"_.Bb\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"_\" , {\"Aa\", \"Bb\", \"Cc\"}", "fn": "Strongest_Extension", "para": "(string class_name,vector<string> extensions)", "pass": false}
{"task_id": "CPP/153", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\nint main(){\n\tauto result = Strongest_Extension(<FILL_ME>);\n\tassert(result==\"_.Bb\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"_\" , {\"Aa\", \"Bb\", \"Cc\"}", "fn": "Strongest_Extension", "para": "(string class_name,vector<string> extensions)", "pass": false}
{"task_id": "CPP/153", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\nint main(){\n\tauto result = Strongest_Extension(<FILL_ME>);\n\tassert(result==\"K.TAR\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"K\", {\"TAR\", \"txt\", \"CPP\"}", "fn": "Strongest_Extension", "para": "(string class_name,vector<string> extensions)", "pass": true}
{"task_id": "CPP/153", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\nint main(){\n\tauto result = Strongest_Extension(<FILL_ME>);\n\tassert(result==\"K.TAR\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"K\", {\"TAR\", \"txt\", \"CPP\"}", "fn": "Strongest_Extension", "para": "(string class_name,vector<string> extensions)", "pass": true}
{"task_id": "CPP/153", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\nint main(){\n\tauto result = Strongest_Extension(<FILL_ME>);\n\tassert(result==\"K.TAR\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"K\", {\"TAR\", \"txt\", \"CPP\"}", "fn": "Strongest_Extension", "para": "(string class_name,vector<string> extensions)", "pass": true}
{"task_id": "CPP/153", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\nint main(){\n\tauto result = Strongest_Extension(<FILL_ME>);\n\tassert(result==\"K.TAR\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"K\", {\"TAR\", \"txt\", \"CPP\"}", "fn": "Strongest_Extension", "para": "(string class_name,vector<string> extensions)", "pass": true}
{"task_id": "CPP/153", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\nint main(){\n\tauto result = Strongest_Extension(<FILL_ME>);\n\tassert(result==\"K.TAR\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"K\", {\"TAR\", \"txt\", \"CPP\"}", "fn": "Strongest_Extension", "para": "(string class_name,vector<string> extensions)", "pass": true}
{"task_id": "CPP/153", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\nint main(){\n\tauto result = Strongest_Extension(<FILL_ME>);\n\tassert(result==\"__YESIMHERE.NuLl__\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"__YESIMHERE\", {\"NuLl\"}", "fn": "Strongest_Extension", "para": "(string class_name,vector<string> extensions)", "pass": false}
{"task_id": "CPP/153", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\nint main(){\n\tauto result = Strongest_Extension(<FILL_ME>);\n\tassert(result==\"__YESIMHERE.NuLl__\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"__YESIMHERE\", {\"NuLl\"}", "fn": "Strongest_Extension", "para": "(string class_name,vector<string> extensions)", "pass": false}
{"task_id": "CPP/153", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\nint main(){\n\tauto result = Strongest_Extension(<FILL_ME>);\n\tassert(result==\"__YESIMHERE.NuLl__\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"__YESIMHERE\", {\"NuLl\"}", "fn": "Strongest_Extension", "para": "(string class_name,vector<string> extensions)", "pass": false}
{"task_id": "CPP/153", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\nint main(){\n\tauto result = Strongest_Extension(<FILL_ME>);\n\tassert(result==\"__YESIMHERE.NuLl__\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"__YESIMHERE\", {\"NuLl\"}", "fn": "Strongest_Extension", "para": "(string class_name,vector<string> extensions)", "pass": false}
{"task_id": "CPP/153", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\nint main(){\n\tauto result = Strongest_Extension(<FILL_ME>);\n\tassert(result==\"__YESIMHERE.NuLl__\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"__YESIMHERE\", {\"NuLl\"}", "fn": "Strongest_Extension", "para": "(string class_name,vector<string> extensions)", "pass": false}
{"task_id": "CPP/153", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\nint main(){\n\tauto result = Strongest_Extension(<FILL_ME>);\n\tassert(result==\"__HAHA.123\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"__HAHA\", {\"123\"}", "fn": "Strongest_Extension", "para": "(string class_name,vector<string> extensions)", "pass": true}
{"task_id": "CPP/153", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\nint main(){\n\tauto result = Strongest_Extension(<FILL_ME>);\n\tassert(result==\"__HAHA.123\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"__HAHA\", {\"123\"}", "fn": "Strongest_Extension", "para": "(string class_name,vector<string> extensions)", "pass": true}
{"task_id": "CPP/153", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\nint main(){\n\tauto result = Strongest_Extension(<FILL_ME>);\n\tassert(result==\"__HAHA.123\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"__HAHA\", {\"123\"}", "fn": "Strongest_Extension", "para": "(string class_name,vector<string> extensions)", "pass": true}
{"task_id": "CPP/153", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\nint main(){\n\tauto result = Strongest_Extension(<FILL_ME>);\n\tassert(result==\"__HAHA.123\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"__HAHA\", {\"123\"}", "fn": "Strongest_Extension", "para": "(string class_name,vector<string> extensions)", "pass": true}
{"task_id": "CPP/153", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\nint main(){\n\tauto result = Strongest_Extension(<FILL_ME>);\n\tassert(result==\"__HAHA.123\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"__HAHA\", {\"123\"}", "fn": "Strongest_Extension", "para": "(string class_name,vector<string> extensions)", "pass": true}
{"task_id": "CPP/153", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\nint main(){\n\tauto result = Strongest_Extension(<FILL_ME>);\n\tassert(result==\"Sp.671235\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Sp\", {\"671235\"}", "fn": "Strongest_Extension", "para": "(string class_name,vector<string> extensions)", "pass": true}
{"task_id": "CPP/153", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\nint main(){\n\tauto result = Strongest_Extension(<FILL_ME>);\n\tassert(result==\"Sp.671235\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Sp\", {\"671235\"}", "fn": "Strongest_Extension", "para": "(string class_name,vector<string> extensions)", "pass": true}
{"task_id": "CPP/153", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\nint main(){\n\tauto result = Strongest_Extension(<FILL_ME>);\n\tassert(result==\"Sp.671235\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Sp\", {\"671235\"}", "fn": "Strongest_Extension", "para": "(string class_name,vector<string> extensions)", "pass": true}
{"task_id": "CPP/153", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\nint main(){\n\tauto result = Strongest_Extension(<FILL_ME>);\n\tassert(result==\"Sp.671235\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Sp\", {\"671235\"}", "fn": "Strongest_Extension", "para": "(string class_name,vector<string> extensions)", "pass": true}
{"task_id": "CPP/153", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\nint main(){\n\tauto result = Strongest_Extension(<FILL_ME>);\n\tassert(result==\"Sp.671235\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Sp\", {\"671235\"}", "fn": "Strongest_Extension", "para": "(string class_name,vector<string> extensions)", "pass": true}
{"task_id": "CPP/153", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\nint main(){\n\tauto result = Strongest_Extension(<FILL_ME>);\n\tassert(result==\"YameRore.okIWILL123\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"YameRore\", {\"okIWILL123\", \"YameRore\", \"strongest\"}", "fn": "Strongest_Extension", "para": "(string class_name,vector<string> extensions)", "pass": true}
{"task_id": "CPP/153", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\nint main(){\n\tauto result = Strongest_Extension(<FILL_ME>);\n\tassert(result==\"YameRore.okIWILL123\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"YameRore\", {\"okIWILL123\", \"YameRore\", \"strongest\"}", "fn": "Strongest_Extension", "para": "(string class_name,vector<string> extensions)", "pass": true}
{"task_id": "CPP/153", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\nint main(){\n\tauto result = Strongest_Extension(<FILL_ME>);\n\tassert(result==\"YameRore.okIWILL123\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"YameRore\", {\"okIWILL123\", \"YameRore\", \"strongest\"}", "fn": "Strongest_Extension", "para": "(string class_name,vector<string> extensions)", "pass": true}
{"task_id": "CPP/153", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\nint main(){\n\tauto result = Strongest_Extension(<FILL_ME>);\n\tassert(result==\"YameRore.okIWILL123\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"YameRore\", {\"okIWILL123\", \"YameRore\", \"strongest\"}", "fn": "Strongest_Extension", "para": "(string class_name,vector<string> extensions)", "pass": true}
{"task_id": "CPP/153", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\nint main(){\n\tauto result = Strongest_Extension(<FILL_ME>);\n\tassert(result==\"YameRore.okIWILL123\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"YameRore\", {\"okIWILL123\", \"YameRore\", \"strongest\"}", "fn": "Strongest_Extension", "para": "(string class_name,vector<string> extensions)", "pass": true}
{"task_id": "CPP/153", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\nint main(){\n\tauto result = Strongest_Extension(<FILL_ME>);\n\tassert(result==\"Boku123.YEs.WeCaNe\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Boku123\", {\"Yes\", \"YEs\", \"WeCaNe\", \"Boku123\"}", "fn": "Strongest_Extension", "para": "(string class_name,vector<string> extensions)", "pass": false}
{"task_id": "CPP/153", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\nint main(){\n\tauto result = Strongest_Extension(<FILL_ME>);\n\tassert(result==\"Boku123.YEs.WeCaNe\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Boku123\", {\"Yes\", \"YEs\", \"WeCaNe\"}", "fn": "Strongest_Extension", "para": "(string class_name,vector<string> extensions)", "pass": false}
{"task_id": "CPP/153", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\nint main(){\n\tauto result = Strongest_Extension(<FILL_ME>);\n\tassert(result==\"Boku123.YEs.WeCaNe\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Boku123\", {\"Yes\", \"YEs\", \"WeCaNe\"}", "fn": "Strongest_Extension", "para": "(string class_name,vector<string> extensions)", "pass": false}
{"task_id": "CPP/153", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\nint main(){\n\tauto result = Strongest_Extension(<FILL_ME>);\n\tassert(result==\"Boku123.YEs.WeCaNe\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Boku123\", {\"Yes\", \"WeCaNe\", \"YEs\"}", "fn": "Strongest_Extension", "para": "(string class_name,vector<string> extensions)", "pass": false}
{"task_id": "CPP/153", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\nint main(){\n\tauto result = Strongest_Extension(<FILL_ME>);\n\tassert(result==\"Boku123.YEs.WeCaNe\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Boku123\", {\"Yes\", \"YEs\", \"WeCaNe\"}", "fn": "Strongest_Extension", "para": "(string class_name,vector<string> extensions)", "pass": false}
{"task_id": "CPP/153", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\nint main(){\n\tauto result = Strongest_Extension(<FILL_ME>);\n\tassert(result==\"finNNalLLly.WoW\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"finNNalLLly\", {\"Wow\", \"WoW\", \"WOW\"}", "fn": "Strongest_Extension", "para": "(string class_name,vector<string> extensions)", "pass": false}
{"task_id": "CPP/153", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\nint main(){\n\tauto result = Strongest_Extension(<FILL_ME>);\n\tassert(result==\"finNNalLLly.WoW\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"finNNalLLly\", {\"WoW\", \"finNNalLLly\", \"wow\"}", "fn": "Strongest_Extension", "para": "(string class_name,vector<string> extensions)", "pass": true}
{"task_id": "CPP/153", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\nint main(){\n\tauto result = Strongest_Extension(<FILL_ME>);\n\tassert(result==\"finNNalLLly.WoW\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"finNNalLLly\", {\"Wow\", \"WoW\", \"WOW\"}", "fn": "Strongest_Extension", "para": "(string class_name,vector<string> extensions)", "pass": false}
{"task_id": "CPP/153", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\nint main(){\n\tauto result = Strongest_Extension(<FILL_ME>);\n\tassert(result==\"finNNalLLly.WoW\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"finNNalLLly\", {\"Wow\", \"WoW\", \"WOW\"}", "fn": "Strongest_Extension", "para": "(string class_name,vector<string> extensions)", "pass": false}
{"task_id": "CPP/153", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\nint main(){\n\tauto result = Strongest_Extension(<FILL_ME>);\n\tassert(result==\"finNNalLLly.WoW\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"finNNalLLly\", {\"WoW\", \"finNNalLLly\", \"wow\"}", "fn": "Strongest_Extension", "para": "(string class_name,vector<string> extensions)", "pass": true}
{"task_id": "CPP/154", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool cycpattern_check(string a,string b){\n    for (int i=0;i<b.size();i++)\n    {\n        string rotate=b.substr(i)+b.substr(0,i);\n        if (a.find(rotate)!=string::npos) return true;\n    }\n    return false;\n\n}\nint main(){\n\tauto result = cycpattern_check(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\",\"lohel\"", "fn": "cycpattern_check", "para": "(string a,string b)", "pass": true}
{"task_id": "CPP/154", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool cycpattern_check(string a,string b){\n    for (int i=0;i<b.size();i++)\n    {\n        string rotate=b.substr(i)+b.substr(0,i);\n        if (a.find(rotate)!=string::npos) return true;\n    }\n    return false;\n\n}\nint main(){\n\tauto result = cycpattern_check(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\",\"lohel\"", "fn": "cycpattern_check", "para": "(string a,string b)", "pass": true}
{"task_id": "CPP/154", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool cycpattern_check(string a,string b){\n    for (int i=0;i<b.size();i++)\n    {\n        string rotate=b.substr(i)+b.substr(0,i);\n        if (a.find(rotate)!=string::npos) return true;\n    }\n    return false;\n\n}\nint main(){\n\tauto result = cycpattern_check(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\",\"lohel\"", "fn": "cycpattern_check", "para": "(string a,string b)", "pass": true}
{"task_id": "CPP/154", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool cycpattern_check(string a,string b){\n    for (int i=0;i<b.size();i++)\n    {\n        string rotate=b.substr(i)+b.substr(0,i);\n        if (a.find(rotate)!=string::npos) return true;\n    }\n    return false;\n\n}\nint main(){\n\tauto result = cycpattern_check(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\",\"lohel\"", "fn": "cycpattern_check", "para": "(string a,string b)", "pass": true}
{"task_id": "CPP/154", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool cycpattern_check(string a,string b){\n    for (int i=0;i<b.size();i++)\n    {\n        string rotate=b.substr(i)+b.substr(0,i);\n        if (a.find(rotate)!=string::npos) return true;\n    }\n    return false;\n\n}\nint main(){\n\tauto result = cycpattern_check(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\",\"lohel\"", "fn": "cycpattern_check", "para": "(string a,string b)", "pass": true}
{"task_id": "CPP/154", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool cycpattern_check(string a,string b){\n    for (int i=0;i<b.size();i++)\n    {\n        string rotate=b.substr(i)+b.substr(0,i);\n        if (a.find(rotate)!=string::npos) return true;\n    }\n    return false;\n\n}\nint main(){\n\tauto result = cycpattern_check(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\", \"world\"", "fn": "cycpattern_check", "para": "(string a,string b)", "pass": true}
{"task_id": "CPP/154", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool cycpattern_check(string a,string b){\n    for (int i=0;i<b.size();i++)\n    {\n        string rotate=b.substr(i)+b.substr(0,i);\n        if (a.find(rotate)!=string::npos) return true;\n    }\n    return false;\n\n}\nint main(){\n\tauto result = cycpattern_check(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\", \"world\"", "fn": "cycpattern_check", "para": "(string a,string b)", "pass": true}
{"task_id": "CPP/154", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool cycpattern_check(string a,string b){\n    for (int i=0;i<b.size();i++)\n    {\n        string rotate=b.substr(i)+b.substr(0,i);\n        if (a.find(rotate)!=string::npos) return true;\n    }\n    return false;\n\n}\nint main(){\n\tauto result = cycpattern_check(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\", \"world\"", "fn": "cycpattern_check", "para": "(string a,string b)", "pass": true}
{"task_id": "CPP/154", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool cycpattern_check(string a,string b){\n    for (int i=0;i<b.size();i++)\n    {\n        string rotate=b.substr(i)+b.substr(0,i);\n        if (a.find(rotate)!=string::npos) return true;\n    }\n    return false;\n\n}\nint main(){\n\tauto result = cycpattern_check(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\", \"world\"", "fn": "cycpattern_check", "para": "(string a,string b)", "pass": true}
{"task_id": "CPP/154", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool cycpattern_check(string a,string b){\n    for (int i=0;i<b.size();i++)\n    {\n        string rotate=b.substr(i)+b.substr(0,i);\n        if (a.find(rotate)!=string::npos) return true;\n    }\n    return false;\n\n}\nint main(){\n\tauto result = cycpattern_check(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello\", \"world\"", "fn": "cycpattern_check", "para": "(string a,string b)", "pass": true}
{"task_id": "CPP/155", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n    string w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    else n2+=1;\n    return {n2,n1};\n}\nint main(){\n\tauto result = even_odd_count(<FILL_ME>);\n\tassert(issame(result,{3,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "333333", "fn": "even_odd_count", "para": "(int num)", "pass": false}
{"task_id": "CPP/155", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n    string w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    else n2+=1;\n    return {n2,n1};\n}\nint main(){\n\tauto result = even_odd_count(<FILL_ME>);\n\tassert(issame(result,{3,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "123456", "fn": "even_odd_count", "para": "(int num)", "pass": true}
{"task_id": "CPP/155", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n    string w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    else n2+=1;\n    return {n2,n1};\n}\nint main(){\n\tauto result = even_odd_count(<FILL_ME>);\n\tassert(issame(result,{3,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "333", "fn": "even_odd_count", "para": "(int num)", "pass": false}
{"task_id": "CPP/155", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n    string w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    else n2+=1;\n    return {n2,n1};\n}\nint main(){\n\tauto result = even_odd_count(<FILL_ME>);\n\tassert(issame(result,{3,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "333", "fn": "even_odd_count", "para": "(int num)", "pass": false}
{"task_id": "CPP/155", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n    string w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    else n2+=1;\n    return {n2,n1};\n}\nint main(){\n\tauto result = even_odd_count(<FILL_ME>);\n\tassert(issame(result,{3,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "333", "fn": "even_odd_count", "para": "(int num)", "pass": false}
{"task_id": "CPP/155", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n    string w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    else n2+=1;\n    return {n2,n1};\n}\nint main(){\n\tauto result = even_odd_count(<FILL_ME>);\n\tassert(issame(result,{1,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "11", "fn": "even_odd_count", "para": "(int num)", "pass": false}
{"task_id": "CPP/155", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n    string w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    else n2+=1;\n    return {n2,n1};\n}\nint main(){\n\tauto result = even_odd_count(<FILL_ME>);\n\tassert(issame(result,{1,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "11", "fn": "even_odd_count", "para": "(int num)", "pass": false}
{"task_id": "CPP/155", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n    string w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    else n2+=1;\n    return {n2,n1};\n}\nint main(){\n\tauto result = even_odd_count(<FILL_ME>);\n\tassert(issame(result,{1,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "11", "fn": "even_odd_count", "para": "(int num)", "pass": false}
{"task_id": "CPP/155", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n    string w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    else n2+=1;\n    return {n2,n1};\n}\nint main(){\n\tauto result = even_odd_count(<FILL_ME>);\n\tassert(issame(result,{1,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "11", "fn": "even_odd_count", "para": "(int num)", "pass": false}
{"task_id": "CPP/155", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n    string w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    else n2+=1;\n    return {n2,n1};\n}\nint main(){\n\tauto result = even_odd_count(<FILL_ME>);\n\tassert(issame(result,{1,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "11", "fn": "even_odd_count", "para": "(int num)", "pass": false}
{"task_id": "CPP/155", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n    string w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    else n2+=1;\n    return {n2,n1};\n}\nint main(){\n\tauto result = even_odd_count(<FILL_ME>);\n\tassert(issame(result,{2,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "23", "fn": "even_odd_count", "para": "(int num)", "pass": false}
{"task_id": "CPP/155", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n    string w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    else n2+=1;\n    return {n2,n1};\n}\nint main(){\n\tauto result = even_odd_count(<FILL_ME>);\n\tassert(issame(result,{2,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "235", "fn": "even_odd_count", "para": "(int num)", "pass": false}
{"task_id": "CPP/155", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n    string w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    else n2+=1;\n    return {n2,n1};\n}\nint main(){\n\tauto result = even_odd_count(<FILL_ME>);\n\tassert(issame(result,{2,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "23521", "fn": "even_odd_count", "para": "(int num)", "pass": true}
{"task_id": "CPP/155", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n    string w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    else n2+=1;\n    return {n2,n1};\n}\nint main(){\n\tauto result = even_odd_count(<FILL_ME>);\n\tassert(issame(result,{2,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "235", "fn": "even_odd_count", "para": "(int num)", "pass": false}
{"task_id": "CPP/155", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n    string w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    else n2+=1;\n    return {n2,n1};\n}\nint main(){\n\tauto result = even_odd_count(<FILL_ME>);\n\tassert(issame(result,{2,3}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "523", "fn": "even_odd_count", "para": "(int num)", "pass": false}
{"task_id": "CPP/155", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n    string w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    else n2+=1;\n    return {n2,n1};\n}\nint main(){\n\tauto result = even_odd_count(<FILL_ME>);\n\tassert(issame(result,{0,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "123", "fn": "even_odd_count", "para": "(int num)", "pass": false}
{"task_id": "CPP/155", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n    string w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    else n2+=1;\n    return {n2,n1};\n}\nint main(){\n\tauto result = even_odd_count(<FILL_ME>);\n\tassert(issame(result,{0,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "1", "fn": "even_odd_count", "para": "(int num)", "pass": true}
{"task_id": "CPP/155", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n    string w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    else n2+=1;\n    return {n2,n1};\n}\nint main(){\n\tauto result = even_odd_count(<FILL_ME>);\n\tassert(issame(result,{0,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "123", "fn": "even_odd_count", "para": "(int num)", "pass": false}
{"task_id": "CPP/155", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n    string w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    else n2+=1;\n    return {n2,n1};\n}\nint main(){\n\tauto result = even_odd_count(<FILL_ME>);\n\tassert(issame(result,{0,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "123", "fn": "even_odd_count", "para": "(int num)", "pass": false}
{"task_id": "CPP/155", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n    string w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    else n2+=1;\n    return {n2,n1};\n}\nint main(){\n\tauto result = even_odd_count(<FILL_ME>);\n\tassert(issame(result,{0,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "1", "fn": "even_odd_count", "para": "(int num)", "pass": true}
{"task_id": "CPP/155", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n    string w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    else n2+=1;\n    return {n2,n1};\n}\nint main(){\n\tauto result = even_odd_count(<FILL_ME>);\n\tassert(issame(result,{2,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "2244", "fn": "even_odd_count", "para": "(int num)", "pass": false}
{"task_id": "CPP/155", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n    string w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    else n2+=1;\n    return {n2,n1};\n}\nint main(){\n\tauto result = even_odd_count(<FILL_ME>);\n\tassert(issame(result,{2,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "422", "fn": "even_odd_count", "para": "(int num)", "pass": false}
{"task_id": "CPP/155", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n    string w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    else n2+=1;\n    return {n2,n1};\n}\nint main(){\n\tauto result = even_odd_count(<FILL_ME>);\n\tassert(issame(result,{2,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "2468", "fn": "even_odd_count", "para": "(int num)", "pass": false}
{"task_id": "CPP/155", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n    string w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    else n2+=1;\n    return {n2,n1};\n}\nint main(){\n\tauto result = even_odd_count(<FILL_ME>);\n\tassert(issame(result,{2,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "2233", "fn": "even_odd_count", "para": "(int num)", "pass": true}
{"task_id": "CPP/155", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n    string w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    else n2+=1;\n    return {n2,n1};\n}\nint main(){\n\tauto result = even_odd_count(<FILL_ME>);\n\tassert(issame(result,{2,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "242", "fn": "even_odd_count", "para": "(int num)", "pass": false}
{"task_id": "CPP/155", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n    string w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    else n2+=1;\n    return {n2,n1};\n}\nint main(){\n\tauto result = even_odd_count(<FILL_ME>);\n\tassert(issame(result,{1,0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "0", "fn": "even_odd_count", "para": "(int num)", "pass": true}
{"task_id": "CPP/155", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n    string w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    else n2+=1;\n    return {n2,n1};\n}\nint main(){\n\tauto result = even_odd_count(<FILL_ME>);\n\tassert(issame(result,{1,0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "0", "fn": "even_odd_count", "para": "(int num)", "pass": true}
{"task_id": "CPP/155", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n    string w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    else n2+=1;\n    return {n2,n1};\n}\nint main(){\n\tauto result = even_odd_count(<FILL_ME>);\n\tassert(issame(result,{1,0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "0", "fn": "even_odd_count", "para": "(int num)", "pass": true}
{"task_id": "CPP/155", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n    string w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    else n2+=1;\n    return {n2,n1};\n}\nint main(){\n\tauto result = even_odd_count(<FILL_ME>);\n\tassert(issame(result,{1,0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "0", "fn": "even_odd_count", "para": "(int num)", "pass": true}
{"task_id": "CPP/155", "code": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n    string w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    else n2+=1;\n    return {n2,n1};\n}\nint main(){\n\tauto result = even_odd_count(<FILL_ME>);\n\tassert(issame(result,{1,0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "0", "fn": "even_odd_count", "para": "(int num)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"cm\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "900", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"cm\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "900", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"cm\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "900", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"cm\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "900", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"cm\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "900", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"clii\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "151", "fn": "int_to_mini_romank", "para": "(int number)", "pass": false}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"clii\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "151", "fn": "int_to_mini_romank", "para": "(int number)", "pass": false}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"clii\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "151", "fn": "int_to_mini_romank", "para": "(int number)", "pass": false}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"clii\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "151", "fn": "int_to_mini_romank", "para": "(int number)", "pass": false}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"clii\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "151", "fn": "int_to_mini_romank", "para": "(int number)", "pass": false}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"dxxxii\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "532", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"dxxxii\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "532", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"dxxxii\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "532", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"dxxxii\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "532", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"dxxxii\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "532", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"ccli\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "151", "fn": "int_to_mini_romank", "para": "(int number)", "pass": false}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"ccli\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "151", "fn": "int_to_mini_romank", "para": "(int number)", "pass": false}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"ccli\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "151", "fn": "int_to_mini_romank", "para": "(int number)", "pass": false}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"ccli\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "152", "fn": "int_to_mini_romank", "para": "(int number)", "pass": false}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"ccli\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "151", "fn": "int_to_mini_romank", "para": "(int number)", "pass": false}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"xc\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "90", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"xc\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "90", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"xc\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "90", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"xc\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "90", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"xc\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "90", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"iv\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "4", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"iv\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "4", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"iv\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "4", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"iv\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "4", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"iv\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "4", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"cmxciv\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "994", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"cmxciv\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "994", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"cmxciv\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "994", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"cmxciv\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "994", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"cmxciv\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "994", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"m\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1000", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"m\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1000", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"m\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1000", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"m\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1000", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"m\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1000", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"xciv\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "94", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"xciv\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "94", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"xciv\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "94", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"xciv\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "94", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"xciv\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "94", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"xix\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "19", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"xix\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "19", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"xix\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "19", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"xix\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "19", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"xix\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "19", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"cdxxvi\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "426", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"cdxxvi\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "426", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"cdxxvi\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "426", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"cdxxvi\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "426", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"cdxxvi\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "426", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"xliii\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "43", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"xliii\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "43", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"xliii\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "43", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"xliii\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "43", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"xliii\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "43", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"i\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"i\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"i\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"i\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"i\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"d\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "500", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"d\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "500", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"d\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "500", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"d\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "500", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/156", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\nint main(){\n\tauto result = int_to_mini_romank(<FILL_ME>);\n\tassert(result==\"d\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "500", "fn": "int_to_mini_romank", "para": "(int number)", "pass": true}
{"task_id": "CPP/157", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool right_angle_triangle(float a,float b,float c){\n    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;\n    return false;\n}\nint main(){\n\tauto result = right_angle_triangle(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1.5, 2.0, 2.5", "fn": "right_angle_triangle", "para": "(float a,float b,float c)", "pass": true}
{"task_id": "CPP/157", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool right_angle_triangle(float a,float b,float c){\n    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;\n    return false;\n}\nint main(){\n\tauto result = right_angle_triangle(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1.5, 2.0, 2.5", "fn": "right_angle_triangle", "para": "(float a,float b,float c)", "pass": true}
{"task_id": "CPP/157", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool right_angle_triangle(float a,float b,float c){\n    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;\n    return false;\n}\nint main(){\n\tauto result = right_angle_triangle(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1.5, 2.0, 2.5", "fn": "right_angle_triangle", "para": "(float a,float b,float c)", "pass": true}
{"task_id": "CPP/157", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool right_angle_triangle(float a,float b,float c){\n    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;\n    return false;\n}\nint main(){\n\tauto result = right_angle_triangle(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1.5, 2.0, 2.5", "fn": "right_angle_triangle", "para": "(float a,float b,float c)", "pass": true}
{"task_id": "CPP/157", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool right_angle_triangle(float a,float b,float c){\n    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;\n    return false;\n}\nint main(){\n\tauto result = right_angle_triangle(<FILL_ME>);\n\tassert(result==true);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "1.5, 2.0, 2.5", "fn": "right_angle_triangle", "para": "(float a,float b,float c)", "pass": true}
{"task_id": "CPP/157", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool right_angle_triangle(float a,float b,float c){\n    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;\n    return false;\n}\nint main(){\n\tauto result = right_angle_triangle(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "0.5, 0.5, 0.7", "fn": "right_angle_triangle", "para": "(float a,float b,float c)", "pass": true}
{"task_id": "CPP/157", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool right_angle_triangle(float a,float b,float c){\n    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;\n    return false;\n}\nint main(){\n\tauto result = right_angle_triangle(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "0.5, 0.5, 0.7", "fn": "right_angle_triangle", "para": "(float a,float b,float c)", "pass": true}
{"task_id": "CPP/157", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool right_angle_triangle(float a,float b,float c){\n    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;\n    return false;\n}\nint main(){\n\tauto result = right_angle_triangle(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "0.5, 0.5, 0.7", "fn": "right_angle_triangle", "para": "(float a,float b,float c)", "pass": true}
{"task_id": "CPP/157", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool right_angle_triangle(float a,float b,float c){\n    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;\n    return false;\n}\nint main(){\n\tauto result = right_angle_triangle(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "0.5, 0.5, 0.7", "fn": "right_angle_triangle", "para": "(float a,float b,float c)", "pass": true}
{"task_id": "CPP/157", "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool right_angle_triangle(float a,float b,float c){\n    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;\n    return false;\n}\nint main(){\n\tauto result = right_angle_triangle(<FILL_ME>);\n\tassert(result==false);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "0.5, 0.5, 0.7", "fn": "right_angle_triangle", "para": "(float a,float b,float c)", "pass": true}
{"task_id": "CPP/158", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = find_max(<FILL_ME>);\n\tassert((result==\"play\"));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"play\", \"player\", \"played\"}", "fn": "find_max", "para": "(vector<string> words)", "pass": false}
{"task_id": "CPP/158", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = find_max(<FILL_ME>);\n\tassert((result==\"play\"));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{\"play\", \"player\", \"played\"}", "fn": "find_max", "para": "(vector<string> words)", "pass": false}
{"task_id": "CPP/158", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = find_max(<FILL_ME>);\n\tassert((result==\"play\"));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{\"play\", \"player\", \"playing\"}", "fn": "find_max", "para": "(vector<string> words)", "pass": false}
{"task_id": "CPP/158", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = find_max(<FILL_ME>);\n\tassert((result==\"play\"));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{\"play\", \"played\", \"player\"}", "fn": "find_max", "para": "(vector<string> words)", "pass": false}
{"task_id": "CPP/158", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = find_max(<FILL_ME>);\n\tassert((result==\"play\"));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{\"play\", \"player\", \"played\"}", "fn": "find_max", "para": "(vector<string> words)", "pass": false}
{"task_id": "CPP/158", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = find_max(<FILL_ME>);\n\tassert((result==\"nation\"));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"nation\", \"hello\", \"apple\", \"banana\"}", "fn": "find_max", "para": "(vector<string> words)", "pass": true}
{"task_id": "CPP/158", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = find_max(<FILL_ME>);\n\tassert((result==\"nation\"));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"nation\", \"hello\", \"apple\", \"banana\"}", "fn": "find_max", "para": "(vector<string> words)", "pass": true}
{"task_id": "CPP/158", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = find_max(<FILL_ME>);\n\tassert((result==\"nation\"));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"nation\", \"hello\", \"apple\", \"banana\"}", "fn": "find_max", "para": "(vector<string> words)", "pass": true}
{"task_id": "CPP/158", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = find_max(<FILL_ME>);\n\tassert((result==\"nation\"));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"nation\", \"hello\", \"apple\", \"banana\"}", "fn": "find_max", "para": "(vector<string> words)", "pass": true}
{"task_id": "CPP/158", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = find_max(<FILL_ME>);\n\tassert((result==\"nation\"));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"nation\", \"hello\", \"apple\", \"banana\"}", "fn": "find_max", "para": "(vector<string> words)", "pass": true}
{"task_id": "CPP/158", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = find_max(<FILL_ME>);\n\tassert((result==\"string\"));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"string\", \"max\", \"unique\"}", "fn": "find_max", "para": "(vector<string> words)", "pass": true}
{"task_id": "CPP/158", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = find_max(<FILL_ME>);\n\tassert((result==\"string\"));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"string\", \"max\", \"unique\"}", "fn": "find_max", "para": "(vector<string> words)", "pass": true}
{"task_id": "CPP/158", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = find_max(<FILL_ME>);\n\tassert((result==\"string\"));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"string\", \"max\", \"unique\"}", "fn": "find_max", "para": "(vector<string> words)", "pass": true}
{"task_id": "CPP/158", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = find_max(<FILL_ME>);\n\tassert((result==\"string\"));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{\"string\", \"max\", \"unique\"}", "fn": "find_max", "para": "(vector<string> words)", "pass": true}
{"task_id": "CPP/158", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = find_max(<FILL_ME>);\n\tassert((result==\"string\"));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"string\", \"max\", \"unique\"}", "fn": "find_max", "para": "(vector<string> words)", "pass": true}
{"task_id": "CPP/158", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = find_max(<FILL_ME>);\n\tassert((result==\"enam\"));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{\"satu\", \"dua\", \"tiga\", \"empat\", \"lima\", \"enam\"}", "fn": "find_max", "para": "(vector<string> words)", "pass": false}
{"task_id": "CPP/158", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = find_max(<FILL_ME>);\n\tassert((result==\"enam\"));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{\"enam\", \"laptop\", \"computer\", \"mobile\", \"phone\"}", "fn": "find_max", "para": "(vector<string> words)", "pass": false}
{"task_id": "CPP/158", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = find_max(<FILL_ME>);\n\tassert((result==\"enam\"));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{\"enam\", \"laptop\", \"computer\", \"mobile\", \"phone\"}", "fn": "find_max", "para": "(vector<string> words)", "pass": false}
{"task_id": "CPP/158", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = find_max(<FILL_ME>);\n\tassert((result==\"enam\"));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{\"satu\", \"dua\", \"tiga\", \"empat\", \"lima\", \"enam\"}", "fn": "find_max", "para": "(vector<string> words)", "pass": false}
{"task_id": "CPP/158", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = find_max(<FILL_ME>);\n\tassert((result==\"enam\"));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{\"satu\", \"dua\", \"tiga\", \"empat\", \"lima\", \"enam\"}", "fn": "find_max", "para": "(vector<string> words)", "pass": false}
{"task_id": "CPP/158", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = find_max(<FILL_ME>);\n\tassert((result==\"abc\"));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"abc\", \"def\", \"ghi\"}", "fn": "find_max", "para": "(vector<string> words)", "pass": true}
{"task_id": "CPP/158", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = find_max(<FILL_ME>);\n\tassert((result==\"abc\"));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"abc\", \"def\", \"ghi\"}", "fn": "find_max", "para": "(vector<string> words)", "pass": true}
{"task_id": "CPP/158", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = find_max(<FILL_ME>);\n\tassert((result==\"abc\"));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"abc\", \"def\", \"ghi\"}", "fn": "find_max", "para": "(vector<string> words)", "pass": true}
{"task_id": "CPP/158", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = find_max(<FILL_ME>);\n\tassert((result==\"abc\"));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{\"abc\", \"def\", \"ghi\"}", "fn": "find_max", "para": "(vector<string> words)", "pass": true}
{"task_id": "CPP/158", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = find_max(<FILL_ME>);\n\tassert((result==\"abc\"));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"abc\", \"def\", \"ghi\"}", "fn": "find_max", "para": "(vector<string> words)", "pass": true}
{"task_id": "CPP/158", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = find_max(<FILL_ME>);\n\tassert((result==\"this\"));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"this\", \"is\", \"a\", \"test\"}", "fn": "find_max", "para": "(vector<string> words)", "pass": true}
{"task_id": "CPP/158", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = find_max(<FILL_ME>);\n\tassert((result==\"this\"));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"this\", \"is\", \"a\", \"test\"}", "fn": "find_max", "para": "(vector<string> words)", "pass": true}
{"task_id": "CPP/158", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = find_max(<FILL_ME>);\n\tassert((result==\"this\"));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"this\", \"is\", \"a\", \"test\"}", "fn": "find_max", "para": "(vector<string> words)", "pass": true}
{"task_id": "CPP/158", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = find_max(<FILL_ME>);\n\tassert((result==\"this\"));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"this\", \"is\", \"a\", \"test\"}", "fn": "find_max", "para": "(vector<string> words)", "pass": true}
{"task_id": "CPP/158", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = find_max(<FILL_ME>);\n\tassert((result==\"this\"));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"this\", \"is\", \"a\", \"test\"}", "fn": "find_max", "para": "(vector<string> words)", "pass": true}
{"task_id": "CPP/158", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = find_max(<FILL_ME>);\n\tassert((result==\"b\"));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{\"abc\", \"b\", \"def\"}", "fn": "find_max", "para": "(vector<string> words)", "pass": false}
{"task_id": "CPP/158", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = find_max(<FILL_ME>);\n\tassert((result==\"b\"));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"abc\", \"b\", \"def\"}", "fn": "find_max", "para": "(vector<string> words)", "pass": false}
{"task_id": "CPP/158", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = find_max(<FILL_ME>);\n\tassert((result==\"b\"));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"abc\", \"b\", \"def\"}", "fn": "find_max", "para": "(vector<string> words)", "pass": false}
{"task_id": "CPP/158", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = find_max(<FILL_ME>);\n\tassert((result==\"b\"));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"abc\", \"b\", \"def\"}", "fn": "find_max", "para": "(vector<string> words)", "pass": false}
{"task_id": "CPP/158", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = find_max(<FILL_ME>);\n\tassert((result==\"b\"));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"abc\", \"b\", \"def\"}", "fn": "find_max", "para": "(vector<string> words)", "pass": false}
{"task_id": "CPP/158", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = find_max(<FILL_ME>);\n\tassert((result==\"footbott\"));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"footbott\", \"robot\", \"bott\", \"foot\", \"bot\"}", "fn": "find_max", "para": "(vector<string> words)", "pass": true}
{"task_id": "CPP/158", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = find_max(<FILL_ME>);\n\tassert((result==\"footbott\"));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"football\", \"footbott\", \"footb\"}", "fn": "find_max", "para": "(vector<string> words)", "pass": false}
{"task_id": "CPP/158", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = find_max(<FILL_ME>);\n\tassert((result==\"footbott\"));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"footbott\", \"robot\", \"bott\", \"foot\", \"bot\"}", "fn": "find_max", "para": "(vector<string> words)", "pass": true}
{"task_id": "CPP/158", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = find_max(<FILL_ME>);\n\tassert((result==\"footbott\"));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"footbott\", \"robot\", \"bott\", \"foot\", \"bot\"}", "fn": "find_max", "para": "(vector<string> words)", "pass": true}
{"task_id": "CPP/158", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = find_max(<FILL_ME>);\n\tassert((result==\"footbott\"));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"footbott\", \"robot\", \"bott\", \"foot\", \"bot\"}", "fn": "find_max", "para": "(vector<string> words)", "pass": true}
{"task_id": "CPP/158", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = find_max(<FILL_ME>);\n\tassert((result==\"aaaaaaa\"));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{\"aaaaaaa\", \"aaabbb\", \"abc\"}", "fn": "find_max", "para": "(vector<string> words)", "pass": false}
{"task_id": "CPP/158", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = find_max(<FILL_ME>);\n\tassert((result==\"aaaaaaa\"));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"aaaaaaa\", \"aa\", \"aaaaa\"}", "fn": "find_max", "para": "(vector<string> words)", "pass": false}
{"task_id": "CPP/158", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = find_max(<FILL_ME>);\n\tassert((result==\"aaaaaaa\"));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"aaaaaaa\", \"aaabbb\", \"abc\"}", "fn": "find_max", "para": "(vector<string> words)", "pass": false}
{"task_id": "CPP/158", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = find_max(<FILL_ME>);\n\tassert((result==\"aaaaaaa\"));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"aaaaaaa\", \"aaabbb\", \"abc\"}", "fn": "find_max", "para": "(vector<string> words)", "pass": false}
{"task_id": "CPP/158", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = find_max(<FILL_ME>);\n\tassert((result==\"aaaaaaa\"));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{\"aaaaaaa\", \"aaabbb\", \"abc\"}", "fn": "find_max", "para": "(vector<string> words)", "pass": false}
{"task_id": "CPP/158", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = find_max(<FILL_ME>);\n\tassert((result==\"gonna\"));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"gonna\", \"be\", \"alright\", \"gonna\", \"be\", \"okay\", \"gonna\", \"be\", \"fine\"}", "fn": "find_max", "para": "(vector<string> words)", "pass": false}
{"task_id": "CPP/158", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = find_max(<FILL_ME>);\n\tassert((result==\"gonna\"));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{\"gonna\", \"be\", \"alright\", \"gonna\", \"be\", \"okay\", \"gonna\", \"be\", \"fine\"}", "fn": "find_max", "para": "(vector<string> words)", "pass": false}
{"task_id": "CPP/158", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = find_max(<FILL_ME>);\n\tassert((result==\"gonna\"));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"gonna\", \"be\", \"alright\", \"gonna\", \"be\", \"okay\", \"gonna\", \"be\", \"fine\"}", "fn": "find_max", "para": "(vector<string> words)", "pass": false}
{"task_id": "CPP/158", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = find_max(<FILL_ME>);\n\tassert((result==\"gonna\"));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"gonna\", \"be\", \"alright\", \"gonna\", \"be\", \"okay\", \"gonna\", \"be\", \"fine\"}", "fn": "find_max", "para": "(vector<string> words)", "pass": false}
{"task_id": "CPP/158", "code": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\nint main(){\n\tauto result = find_max(<FILL_ME>);\n\tassert((result==\"gonna\"));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"gonna\", \"be\", \"alright\", \"gonna\", \"be\", \"okay\", \"gonna\", \"be\", \"fine\"}", "fn": "find_max", "para": "(vector<string> words)", "pass": false}
{"task_id": "CPP/159", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number,int need,int remaining){\n    if (need>remaining) return {number+remaining, 0};\n    return {number+need,remaining-need};\n}\nint main(){\n\tauto result = eat(<FILL_ME>);\n\tassert(issame(result,{9,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "7, 2, 4", "fn": "eat", "para": "(int number,int need,int remaining)", "pass": true}
{"task_id": "CPP/159", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number,int need,int remaining){\n    if (need>remaining) return {number+remaining, 0};\n    return {number+need,remaining-need};\n}\nint main(){\n\tauto result = eat(<FILL_ME>);\n\tassert(issame(result,{9,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "7, 2, 4", "fn": "eat", "para": "(int number,int need,int remaining)", "pass": true}
{"task_id": "CPP/159", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number,int need,int remaining){\n    if (need>remaining) return {number+remaining, 0};\n    return {number+need,remaining-need};\n}\nint main(){\n\tauto result = eat(<FILL_ME>);\n\tassert(issame(result,{9,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "7, 2, 4", "fn": "eat", "para": "(int number,int need,int remaining)", "pass": true}
{"task_id": "CPP/159", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number,int need,int remaining){\n    if (need>remaining) return {number+remaining, 0};\n    return {number+need,remaining-need};\n}\nint main(){\n\tauto result = eat(<FILL_ME>);\n\tassert(issame(result,{9,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "7, 2, 4", "fn": "eat", "para": "(int number,int need,int remaining)", "pass": true}
{"task_id": "CPP/159", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number,int need,int remaining){\n    if (need>remaining) return {number+remaining, 0};\n    return {number+need,remaining-need};\n}\nint main(){\n\tauto result = eat(<FILL_ME>);\n\tassert(issame(result,{9,2}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "7, 2, 4", "fn": "eat", "para": "(int number,int need,int remaining)", "pass": true}
{"task_id": "CPP/159", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number,int need,int remaining){\n    if (need>remaining) return {number+remaining, 0};\n    return {number+need,remaining-need};\n}\nint main(){\n\tauto result = eat(<FILL_ME>);\n\tassert(issame(result,{7,0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "7,0,0", "fn": "eat", "para": "(int number,int need,int remaining)", "pass": true}
{"task_id": "CPP/159", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number,int need,int remaining){\n    if (need>remaining) return {number+remaining, 0};\n    return {number+need,remaining-need};\n}\nint main(){\n\tauto result = eat(<FILL_ME>);\n\tassert(issame(result,{7,0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "7,0,0", "fn": "eat", "para": "(int number,int need,int remaining)", "pass": true}
{"task_id": "CPP/159", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number,int need,int remaining){\n    if (need>remaining) return {number+remaining, 0};\n    return {number+need,remaining-need};\n}\nint main(){\n\tauto result = eat(<FILL_ME>);\n\tassert(issame(result,{7,0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "7,0,0", "fn": "eat", "para": "(int number,int need,int remaining)", "pass": true}
{"task_id": "CPP/159", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number,int need,int remaining){\n    if (need>remaining) return {number+remaining, 0};\n    return {number+need,remaining-need};\n}\nint main(){\n\tauto result = eat(<FILL_ME>);\n\tassert(issame(result,{7,0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "7,0,0", "fn": "eat", "para": "(int number,int need,int remaining)", "pass": true}
{"task_id": "CPP/159", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number,int need,int remaining){\n    if (need>remaining) return {number+remaining, 0};\n    return {number+need,remaining-need};\n}\nint main(){\n\tauto result = eat(<FILL_ME>);\n\tassert(issame(result,{7,0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "7, 0, 0", "fn": "eat", "para": "(int number,int need,int remaining)", "pass": true}
{"task_id": "CPP/159", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number,int need,int remaining){\n    if (need>remaining) return {number+remaining, 0};\n    return {number+need,remaining-need};\n}\nint main(){\n\tauto result = eat(<FILL_ME>);\n\tassert(issame(result,{11,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "7, 4, 7", "fn": "eat", "para": "(int number,int need,int remaining)", "pass": false}
{"task_id": "CPP/159", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number,int need,int remaining){\n    if (need>remaining) return {number+remaining, 0};\n    return {number+need,remaining-need};\n}\nint main(){\n\tauto result = eat(<FILL_ME>);\n\tassert(issame(result,{11,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "7,4,7", "fn": "eat", "para": "(int number,int need,int remaining)", "pass": false}
{"task_id": "CPP/159", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number,int need,int remaining){\n    if (need>remaining) return {number+remaining, 0};\n    return {number+need,remaining-need};\n}\nint main(){\n\tauto result = eat(<FILL_ME>);\n\tassert(issame(result,{11,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "7,4,7", "fn": "eat", "para": "(int number,int need,int remaining)", "pass": false}
{"task_id": "CPP/159", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number,int need,int remaining){\n    if (need>remaining) return {number+remaining, 0};\n    return {number+need,remaining-need};\n}\nint main(){\n\tauto result = eat(<FILL_ME>);\n\tassert(issame(result,{11,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "7,4,7", "fn": "eat", "para": "(int number,int need,int remaining)", "pass": false}
{"task_id": "CPP/159", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number,int need,int remaining){\n    if (need>remaining) return {number+remaining, 0};\n    return {number+need,remaining-need};\n}\nint main(){\n\tauto result = eat(<FILL_ME>);\n\tassert(issame(result,{11,4}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "7,4,7", "fn": "eat", "para": "(int number,int need,int remaining)", "pass": false}
{"task_id": "CPP/159", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number,int need,int remaining){\n    if (need>remaining) return {number+remaining, 0};\n    return {number+need,remaining-need};\n}\nint main(){\n\tauto result = eat(<FILL_ME>);\n\tassert(issame(result,{12,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "11, 1, 2", "fn": "eat", "para": "(int number,int need,int remaining)", "pass": true}
{"task_id": "CPP/159", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number,int need,int remaining){\n    if (need>remaining) return {number+remaining, 0};\n    return {number+need,remaining-need};\n}\nint main(){\n\tauto result = eat(<FILL_ME>);\n\tassert(issame(result,{12,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "11, 1, 2", "fn": "eat", "para": "(int number,int need,int remaining)", "pass": true}
{"task_id": "CPP/159", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number,int need,int remaining){\n    if (need>remaining) return {number+remaining, 0};\n    return {number+need,remaining-need};\n}\nint main(){\n\tauto result = eat(<FILL_ME>);\n\tassert(issame(result,{12,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "11, 1, 2", "fn": "eat", "para": "(int number,int need,int remaining)", "pass": true}
{"task_id": "CPP/159", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number,int need,int remaining){\n    if (need>remaining) return {number+remaining, 0};\n    return {number+need,remaining-need};\n}\nint main(){\n\tauto result = eat(<FILL_ME>);\n\tassert(issame(result,{12,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "11, 1, 2", "fn": "eat", "para": "(int number,int need,int remaining)", "pass": true}
{"task_id": "CPP/159", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number,int need,int remaining){\n    if (need>remaining) return {number+remaining, 0};\n    return {number+need,remaining-need};\n}\nint main(){\n\tauto result = eat(<FILL_ME>);\n\tassert(issame(result,{12,1}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "11, 1, 2", "fn": "eat", "para": "(int number,int need,int remaining)", "pass": true}
{"task_id": "CPP/159", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number,int need,int remaining){\n    if (need>remaining) return {number+remaining, 0};\n    return {number+need,remaining-need};\n}\nint main(){\n\tauto result = eat(<FILL_ME>);\n\tassert(issame(result,{11,0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "11, 11, 11", "fn": "eat", "para": "(int number,int need,int remaining)", "pass": false}
{"task_id": "CPP/159", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number,int need,int remaining){\n    if (need>remaining) return {number+remaining, 0};\n    return {number+need,remaining-need};\n}\nint main(){\n\tauto result = eat(<FILL_ME>);\n\tassert(issame(result,{11,0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "11,11,11", "fn": "eat", "para": "(int number,int need,int remaining)", "pass": false}
{"task_id": "CPP/159", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number,int need,int remaining){\n    if (need>remaining) return {number+remaining, 0};\n    return {number+need,remaining-need};\n}\nint main(){\n\tauto result = eat(<FILL_ME>);\n\tassert(issame(result,{11,0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "11, 11, 11", "fn": "eat", "para": "(int number,int need,int remaining)", "pass": false}
{"task_id": "CPP/159", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number,int need,int remaining){\n    if (need>remaining) return {number+remaining, 0};\n    return {number+need,remaining-need};\n}\nint main(){\n\tauto result = eat(<FILL_ME>);\n\tassert(issame(result,{11,0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "11, 11, 11", "fn": "eat", "para": "(int number,int need,int remaining)", "pass": false}
{"task_id": "CPP/159", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number,int need,int remaining){\n    if (need>remaining) return {number+remaining, 0};\n    return {number+need,remaining-need};\n}\nint main(){\n\tauto result = eat(<FILL_ME>);\n\tassert(issame(result,{11,0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "11, 11, 11", "fn": "eat", "para": "(int number,int need,int remaining)", "pass": false}
{"task_id": "CPP/159", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number,int need,int remaining){\n    if (need>remaining) return {number+remaining, 0};\n    return {number+need,remaining-need};\n}\nint main(){\n\tauto result = eat(<FILL_ME>);\n\tassert(issame(result,{5,0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "5, 0, 0", "fn": "eat", "para": "(int number,int need,int remaining)", "pass": true}
{"task_id": "CPP/159", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number,int need,int remaining){\n    if (need>remaining) return {number+remaining, 0};\n    return {number+need,remaining-need};\n}\nint main(){\n\tauto result = eat(<FILL_ME>);\n\tassert(issame(result,{5,0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "5, 0, 5", "fn": "eat", "para": "(int number,int need,int remaining)", "pass": false}
{"task_id": "CPP/159", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number,int need,int remaining){\n    if (need>remaining) return {number+remaining, 0};\n    return {number+need,remaining-need};\n}\nint main(){\n\tauto result = eat(<FILL_ME>);\n\tassert(issame(result,{5,0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "5, 0, 5", "fn": "eat", "para": "(int number,int need,int remaining)", "pass": false}
{"task_id": "CPP/159", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number,int need,int remaining){\n    if (need>remaining) return {number+remaining, 0};\n    return {number+need,remaining-need};\n}\nint main(){\n\tauto result = eat(<FILL_ME>);\n\tassert(issame(result,{5,0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "5,0,5", "fn": "eat", "para": "(int number,int need,int remaining)", "pass": false}
{"task_id": "CPP/159", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number,int need,int remaining){\n    if (need>remaining) return {number+remaining, 0};\n    return {number+need,remaining-need};\n}\nint main(){\n\tauto result = eat(<FILL_ME>);\n\tassert(issame(result,{5,0}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "5,0,5", "fn": "eat", "para": "(int number,int need,int remaining)", "pass": false}
{"task_id": "CPP/160", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n    vector<int> num={};\n    vector<int> posto={};\n    for (int i=0;i<operand.size();i++)\n        posto.push_back(i);\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"**\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"*\" or operato[i]==\"//\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"*\")\n            operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"+\" or operato[i]==\"-\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"+\")\n            operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    return operand[0];\n\n}\nint main(){\n\tauto result = do_algebra(<FILL_ME>);\n\tassert(result==37);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{\"**\", \"*\", \"+\", \"-\"}, {2, 3, 4, 5}", "fn": "do_algebra", "para": "(vector<string> operato, vector<int> operand)", "pass": false}
{"task_id": "CPP/160", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n    vector<int> num={};\n    vector<int> posto={};\n    for (int i=0;i<operand.size();i++)\n        posto.push_back(i);\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"**\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"*\" or operato[i]==\"//\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"*\")\n            operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"+\" or operato[i]==\"-\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"+\")\n            operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    return operand[0];\n\n}\nint main(){\n\tauto result = do_algebra(<FILL_ME>);\n\tassert(result==37);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{\"**\", \"+\", \"*\"}, {2, 3, 5, 4}", "fn": "do_algebra", "para": "(vector<string> operato, vector<int> operand)", "pass": false}
{"task_id": "CPP/160", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n    vector<int> num={};\n    vector<int> posto={};\n    for (int i=0;i<operand.size();i++)\n        posto.push_back(i);\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"**\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"*\" or operato[i]==\"//\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"*\")\n            operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"+\" or operato[i]==\"-\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"+\")\n            operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    return operand[0];\n\n}\nint main(){\n\tauto result = do_algebra(<FILL_ME>);\n\tassert(result==37);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{\"operato\", {\"**\", \"*\", \"+\"}, \"operand\", {2, 3, 4, 5}}", "fn": "do_algebra", "para": "(vector<string> operato, vector<int> operand)", "pass": false}
{"task_id": "CPP/160", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n    vector<int> num={};\n    vector<int> posto={};\n    for (int i=0;i<operand.size();i++)\n        posto.push_back(i);\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"**\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"*\" or operato[i]==\"//\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"*\")\n            operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"+\" or operato[i]==\"-\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"+\")\n            operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    return operand[0];\n\n}\nint main(){\n\tauto result = do_algebra(<FILL_ME>);\n\tassert(result==37);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{\"**\", \"*\", \"+\"}, {2, 3, 4, 5}", "fn": "do_algebra", "para": "(vector<string> operato, vector<int> operand)", "pass": true}
{"task_id": "CPP/160", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n    vector<int> num={};\n    vector<int> posto={};\n    for (int i=0;i<operand.size();i++)\n        posto.push_back(i);\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"**\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"*\" or operato[i]==\"//\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"*\")\n            operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"+\" or operato[i]==\"-\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"+\")\n            operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    return operand[0];\n\n}\nint main(){\n\tauto result = do_algebra(<FILL_ME>);\n\tassert(result==37);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{\"**\", \"*\", \"+\"}, {2, 3, 4, 5}", "fn": "do_algebra", "para": "(vector<string> operato, vector<int> operand)", "pass": true}
{"task_id": "CPP/160", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n    vector<int> num={};\n    vector<int> posto={};\n    for (int i=0;i<operand.size();i++)\n        posto.push_back(i);\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"**\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"*\" or operato[i]==\"//\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"*\")\n            operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"+\" or operato[i]==\"-\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"+\")\n            operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    return operand[0];\n\n}\nint main(){\n\tauto result = do_algebra(<FILL_ME>);\n\tassert(result==9);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"*\", \"+\", \"*\"}, vector<int>{2, 3, 2, 2}", "fn": "do_algebra", "para": "(vector<string> operato, vector<int> operand)", "pass": false}
{"task_id": "CPP/160", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n    vector<int> num={};\n    vector<int> posto={};\n    for (int i=0;i<operand.size();i++)\n        posto.push_back(i);\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"**\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"*\" or operato[i]==\"//\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"*\")\n            operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"+\" or operato[i]==\"-\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"+\")\n            operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    return operand[0];\n\n}\nint main(){\n\tauto result = do_algebra(<FILL_ME>);\n\tassert(result==9);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"*\", \"+\", \"+\"}, vector<int>{2, 3, 2, 2}", "fn": "do_algebra", "para": "(vector<string> operato, vector<int> operand)", "pass": false}
{"task_id": "CPP/160", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n    vector<int> num={};\n    vector<int> posto={};\n    for (int i=0;i<operand.size();i++)\n        posto.push_back(i);\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"**\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"*\" or operato[i]==\"//\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"*\")\n            operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"+\" or operato[i]==\"-\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"+\")\n            operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    return operand[0];\n\n}\nint main(){\n\tauto result = do_algebra(<FILL_ME>);\n\tassert(result==9);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{\"operato\": {\"*\", \"+\"}, \"operand\": {2, 3, 4}}", "fn": "do_algebra", "para": "(vector<string> operato, vector<int> operand)", "pass": false}
{"task_id": "CPP/160", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n    vector<int> num={};\n    vector<int> posto={};\n    for (int i=0;i<operand.size();i++)\n        posto.push_back(i);\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"**\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"*\" or operato[i]==\"//\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"*\")\n            operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"+\" or operato[i]==\"-\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"+\")\n            operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    return operand[0];\n\n}\nint main(){\n\tauto result = do_algebra(<FILL_ME>);\n\tassert(result==9);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"*\", \"+\", \"*\"}, vector<int>{2, 3, 2, 2}", "fn": "do_algebra", "para": "(vector<string> operato, vector<int> operand)", "pass": false}
{"task_id": "CPP/160", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n    vector<int> num={};\n    vector<int> posto={};\n    for (int i=0;i<operand.size();i++)\n        posto.push_back(i);\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"**\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"*\" or operato[i]==\"//\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"*\")\n            operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"+\" or operato[i]==\"-\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"+\")\n            operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    return operand[0];\n\n}\nint main(){\n\tauto result = do_algebra(<FILL_ME>);\n\tassert(result==9);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "vector<string>{\"*\", \"+\", \"+\"}, vector<int>{2, 3, 2, 2}", "fn": "do_algebra", "para": "(vector<string> operato, vector<int> operand)", "pass": false}
{"task_id": "CPP/160", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n    vector<int> num={};\n    vector<int> posto={};\n    for (int i=0;i<operand.size();i++)\n        posto.push_back(i);\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"**\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"*\" or operato[i]==\"//\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"*\")\n            operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"+\" or operato[i]==\"-\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"+\")\n            operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    return operand[0];\n\n}\nint main(){\n\tauto result = do_algebra(<FILL_ME>);\n\tassert(result==8);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{\"**\", \"*\", \"+\"}, {2, 2, 2}", "fn": "do_algebra", "para": "(vector<string> operato, vector<int> operand)", "pass": false}
{"task_id": "CPP/160", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n    vector<int> num={};\n    vector<int> posto={};\n    for (int i=0;i<operand.size();i++)\n        posto.push_back(i);\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"**\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"*\" or operato[i]==\"//\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"*\")\n            operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"+\" or operato[i]==\"-\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"+\")\n            operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    return operand[0];\n\n}\nint main(){\n\tauto result = do_algebra(<FILL_ME>);\n\tassert(result==8);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{\"**\", \"*\", \"+\"}, {2, 2, 2}", "fn": "do_algebra", "para": "(vector<string> operato, vector<int> operand)", "pass": false}
{"task_id": "CPP/160", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n    vector<int> num={};\n    vector<int> posto={};\n    for (int i=0;i<operand.size();i++)\n        posto.push_back(i);\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"**\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"*\" or operato[i]==\"//\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"*\")\n            operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"+\" or operato[i]==\"-\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"+\")\n            operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    return operand[0];\n\n}\nint main(){\n\tauto result = do_algebra(<FILL_ME>);\n\tassert(result==8);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{\"**\", \"*\", \"+\"}, {2, 2, 2, 2}", "fn": "do_algebra", "para": "(vector<string> operato, vector<int> operand)", "pass": false}
{"task_id": "CPP/160", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n    vector<int> num={};\n    vector<int> posto={};\n    for (int i=0;i<operand.size();i++)\n        posto.push_back(i);\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"**\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"*\" or operato[i]==\"//\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"*\")\n            operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"+\" or operato[i]==\"-\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"+\")\n            operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    return operand[0];\n\n}\nint main(){\n\tauto result = do_algebra(<FILL_ME>);\n\tassert(result==8);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{\"**\", \"*\", \"+\"}, {2, 2, 2}", "fn": "do_algebra", "para": "(vector<string> operato, vector<int> operand)", "pass": false}
{"task_id": "CPP/160", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n    vector<int> num={};\n    vector<int> posto={};\n    for (int i=0;i<operand.size();i++)\n        posto.push_back(i);\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"**\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"*\" or operato[i]==\"//\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"*\")\n            operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"+\" or operato[i]==\"-\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"+\")\n            operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    return operand[0];\n\n}\nint main(){\n\tauto result = do_algebra(<FILL_ME>);\n\tassert(result==8);\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "{\"**\", \"+\", \"*\"}, {2, 3, 2, 2}", "fn": "do_algebra", "para": "(vector<string> operato, vector<int> operand)", "pass": false}
{"task_id": "CPP/161", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"4321\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"1234\"", "fn": "solve", "para": "(string s)", "pass": true}
{"task_id": "CPP/161", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"4321\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"1234\"", "fn": "solve", "para": "(string s)", "pass": true}
{"task_id": "CPP/161", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"4321\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"1234\"", "fn": "solve", "para": "(string s)", "pass": true}
{"task_id": "CPP/161", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"4321\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"1234\"", "fn": "solve", "para": "(string s)", "pass": true}
{"task_id": "CPP/161", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"4321\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"1234\"", "fn": "solve", "para": "(string s)", "pass": true}
{"task_id": "CPP/161", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"#CCC\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"#ccc\"", "fn": "solve", "para": "(string s)", "pass": true}
{"task_id": "CPP/161", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"#CCC\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"#ccc\"", "fn": "solve", "para": "(string s)", "pass": true}
{"task_id": "CPP/161", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"#CCC\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"#ccc\"", "fn": "solve", "para": "(string s)", "pass": true}
{"task_id": "CPP/161", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"#CCC\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"#ccc\"", "fn": "solve", "para": "(string s)", "pass": true}
{"task_id": "CPP/161", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"#CCC\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"#ccc\"", "fn": "solve", "para": "(string s)", "pass": true}
{"task_id": "CPP/161", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"#$A^d\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"#$a^D\"", "fn": "solve", "para": "(string s)", "pass": true}
{"task_id": "CPP/161", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"#$A^d\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"#$a^D\"", "fn": "solve", "para": "(string s)", "pass": true}
{"task_id": "CPP/161", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"#$A^d\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"#$a^D\"", "fn": "solve", "para": "(string s)", "pass": true}
{"task_id": "CPP/161", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"#$A^d\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"#$a^D\"", "fn": "solve", "para": "(string s)", "pass": true}
{"task_id": "CPP/161", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"#$A^d\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"#$a^D\"", "fn": "solve", "para": "(string s)", "pass": true}
{"task_id": "CPP/161", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"#A@c\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"#a@C\"", "fn": "solve", "para": "(string s)", "pass": true}
{"task_id": "CPP/161", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"#A@c\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"#a@C\"", "fn": "solve", "para": "(string s)", "pass": true}
{"task_id": "CPP/161", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"#A@c\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"#A@C\"", "fn": "solve", "para": "(string s)", "pass": false}
{"task_id": "CPP/161", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"#A@c\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"#A@C\"", "fn": "solve", "para": "(string s)", "pass": false}
{"task_id": "CPP/161", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"#A@c\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"#a@C\"", "fn": "solve", "para": "(string s)", "pass": true}
{"task_id": "CPP/161", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"AB\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"ab\"", "fn": "solve", "para": "(string s)", "pass": true}
{"task_id": "CPP/161", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"AB\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"ab\"", "fn": "solve", "para": "(string s)", "pass": true}
{"task_id": "CPP/161", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"AB\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"ab\"", "fn": "solve", "para": "(string s)", "pass": true}
{"task_id": "CPP/161", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"AB\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"ab\"", "fn": "solve", "para": "(string s)", "pass": true}
{"task_id": "CPP/161", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"AB\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"ab\"", "fn": "solve", "para": "(string s)", "pass": true}
{"task_id": "CPP/161", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"2@6#\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"2@6#\"", "fn": "solve", "para": "(string s)", "pass": false}
{"task_id": "CPP/161", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"2@6#\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"2@6#\"", "fn": "solve", "para": "(string s)", "pass": false}
{"task_id": "CPP/161", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"2@6#\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"2@6#\"", "fn": "solve", "para": "(string s)", "pass": false}
{"task_id": "CPP/161", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"2@6#\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"2@6#\"", "fn": "solve", "para": "(string s)", "pass": false}
{"task_id": "CPP/161", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"2@6#\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"2@6#\"", "fn": "solve", "para": "(string s)", "pass": false}
{"task_id": "CPP/161", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"#aSDFw^45\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"#AsdfW^45\"", "fn": "solve", "para": "(string s)", "pass": true}
{"task_id": "CPP/161", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"#aSDFw^45\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"#AsdfW^45\"", "fn": "solve", "para": "(string s)", "pass": true}
{"task_id": "CPP/161", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"#aSDFw^45\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"#AsdfW^45\"", "fn": "solve", "para": "(string s)", "pass": true}
{"task_id": "CPP/161", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"#aSDFw^45\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"#AsdfW^45\"", "fn": "solve", "para": "(string s)", "pass": true}
{"task_id": "CPP/161", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"#aSDFw^45\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"#AsdfW^45\"", "fn": "solve", "para": "(string s)", "pass": true}
{"task_id": "CPP/161", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"aSdF\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"AsDf\"", "fn": "solve", "para": "(string s)", "pass": true}
{"task_id": "CPP/161", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"aSdF\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"AsDf\"", "fn": "solve", "para": "(string s)", "pass": true}
{"task_id": "CPP/161", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"aSdF\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"AsDf\"", "fn": "solve", "para": "(string s)", "pass": true}
{"task_id": "CPP/161", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"aSdF\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"AsDf\"", "fn": "solve", "para": "(string s)", "pass": true}
{"task_id": "CPP/161", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\nint main(){\n\tauto result = solve(<FILL_ME>);\n\tassert(result==\"aSdF\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"AsDf\"", "fn": "solve", "para": "(string s)", "pass": true}
{"task_id": "CPP/162", "code": "#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_to_md5(string text){\n    unsigned char md[16];\n    if (text.length()==0) return \"None\";\n    MD5_CTX c;\n    int i;\n   MD5_Init(&c);\n   MD5_Update(&c, (unsigned char*)text.c_str(), text.length());\n    MD5_Final(md, &c);\n    string out_str=\"\";\n    for (int i=0;i<16;i++)\n        {\n            char w;\n            if (md[i]<160) w=48+md[i]/16;\n            else w=87+md[i]/16;\n            out_str=out_str+w;\n            if (md[i]%16<10) w=48+md[i]%16;\n            else w=87+md[i]%16;\n            out_str=out_str+w;\n        }\n    return out_str;\n}\nint main(){\n\tauto result = string_to_md5(<FILL_ME>);\n\tassert(result==\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"password\"", "fn": "string_to_md5", "para": "(string text)", "pass": true}
{"task_id": "CPP/162", "code": "#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_to_md5(string text){\n    unsigned char md[16];\n    if (text.length()==0) return \"None\";\n    MD5_CTX c;\n    int i;\n   MD5_Init(&c);\n   MD5_Update(&c, (unsigned char*)text.c_str(), text.length());\n    MD5_Final(md, &c);\n    string out_str=\"\";\n    for (int i=0;i<16;i++)\n        {\n            char w;\n            if (md[i]<160) w=48+md[i]/16;\n            else w=87+md[i]/16;\n            out_str=out_str+w;\n            if (md[i]%16<10) w=48+md[i]%16;\n            else w=87+md[i]%16;\n            out_str=out_str+w;\n        }\n    return out_str;\n}\nint main(){\n\tauto result = string_to_md5(<FILL_ME>);\n\tassert(result==\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"password\"", "fn": "string_to_md5", "para": "(string text)", "pass": true}
{"task_id": "CPP/162", "code": "#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_to_md5(string text){\n    unsigned char md[16];\n    if (text.length()==0) return \"None\";\n    MD5_CTX c;\n    int i;\n   MD5_Init(&c);\n   MD5_Update(&c, (unsigned char*)text.c_str(), text.length());\n    MD5_Final(md, &c);\n    string out_str=\"\";\n    for (int i=0;i<16;i++)\n        {\n            char w;\n            if (md[i]<160) w=48+md[i]/16;\n            else w=87+md[i]/16;\n            out_str=out_str+w;\n            if (md[i]%16<10) w=48+md[i]%16;\n            else w=87+md[i]%16;\n            out_str=out_str+w;\n        }\n    return out_str;\n}\nint main(){\n\tauto result = string_to_md5(<FILL_ME>);\n\tassert(result==\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"password\"", "fn": "string_to_md5", "para": "(string text)", "pass": true}
{"task_id": "CPP/162", "code": "#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_to_md5(string text){\n    unsigned char md[16];\n    if (text.length()==0) return \"None\";\n    MD5_CTX c;\n    int i;\n   MD5_Init(&c);\n   MD5_Update(&c, (unsigned char*)text.c_str(), text.length());\n    MD5_Final(md, &c);\n    string out_str=\"\";\n    for (int i=0;i<16;i++)\n        {\n            char w;\n            if (md[i]<160) w=48+md[i]/16;\n            else w=87+md[i]/16;\n            out_str=out_str+w;\n            if (md[i]%16<10) w=48+md[i]%16;\n            else w=87+md[i]%16;\n            out_str=out_str+w;\n        }\n    return out_str;\n}\nint main(){\n\tauto result = string_to_md5(<FILL_ME>);\n\tassert(result==\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"password\"", "fn": "string_to_md5", "para": "(string text)", "pass": true}
{"task_id": "CPP/162", "code": "#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_to_md5(string text){\n    unsigned char md[16];\n    if (text.length()==0) return \"None\";\n    MD5_CTX c;\n    int i;\n   MD5_Init(&c);\n   MD5_Update(&c, (unsigned char*)text.c_str(), text.length());\n    MD5_Final(md, &c);\n    string out_str=\"\";\n    for (int i=0;i<16;i++)\n        {\n            char w;\n            if (md[i]<160) w=48+md[i]/16;\n            else w=87+md[i]/16;\n            out_str=out_str+w;\n            if (md[i]%16<10) w=48+md[i]%16;\n            else w=87+md[i]%16;\n            out_str=out_str+w;\n        }\n    return out_str;\n}\nint main(){\n\tauto result = string_to_md5(<FILL_ME>);\n\tassert(result==\"5f4dcc3b5aa765d61d8327deb882cf99\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"password\"", "fn": "string_to_md5", "para": "(string text)", "pass": true}
{"task_id": "CPP/162", "code": "#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_to_md5(string text){\n    unsigned char md[16];\n    if (text.length()==0) return \"None\";\n    MD5_CTX c;\n    int i;\n   MD5_Init(&c);\n   MD5_Update(&c, (unsigned char*)text.c_str(), text.length());\n    MD5_Final(md, &c);\n    string out_str=\"\";\n    for (int i=0;i<16;i++)\n        {\n            char w;\n            if (md[i]<160) w=48+md[i]/16;\n            else w=87+md[i]/16;\n            out_str=out_str+w;\n            if (md[i]%16<10) w=48+md[i]%16;\n            else w=87+md[i]%16;\n            out_str=out_str+w;\n        }\n    return out_str;\n}\nint main(){\n\tauto result = string_to_md5(<FILL_ME>);\n\tassert(result==\"3e25960a79dbc69b674cd4ec67a72c62\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"abc\"", "fn": "string_to_md5", "para": "(string text)", "pass": false}
{"task_id": "CPP/162", "code": "#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_to_md5(string text){\n    unsigned char md[16];\n    if (text.length()==0) return \"None\";\n    MD5_CTX c;\n    int i;\n   MD5_Init(&c);\n   MD5_Update(&c, (unsigned char*)text.c_str(), text.length());\n    MD5_Final(md, &c);\n    string out_str=\"\";\n    for (int i=0;i<16;i++)\n        {\n            char w;\n            if (md[i]<160) w=48+md[i]/16;\n            else w=87+md[i]/16;\n            out_str=out_str+w;\n            if (md[i]%16<10) w=48+md[i]%16;\n            else w=87+md[i]%16;\n            out_str=out_str+w;\n        }\n    return out_str;\n}\nint main(){\n\tauto result = string_to_md5(<FILL_ME>);\n\tassert(result==\"3e25960a79dbc69b674cd4ec67a72c62\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"abc\"", "fn": "string_to_md5", "para": "(string text)", "pass": false}
{"task_id": "CPP/162", "code": "#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_to_md5(string text){\n    unsigned char md[16];\n    if (text.length()==0) return \"None\";\n    MD5_CTX c;\n    int i;\n   MD5_Init(&c);\n   MD5_Update(&c, (unsigned char*)text.c_str(), text.length());\n    MD5_Final(md, &c);\n    string out_str=\"\";\n    for (int i=0;i<16;i++)\n        {\n            char w;\n            if (md[i]<160) w=48+md[i]/16;\n            else w=87+md[i]/16;\n            out_str=out_str+w;\n            if (md[i]%16<10) w=48+md[i]%16;\n            else w=87+md[i]%16;\n            out_str=out_str+w;\n        }\n    return out_str;\n}\nint main(){\n\tauto result = string_to_md5(<FILL_ME>);\n\tassert(result==\"3e25960a79dbc69b674cd4ec67a72c62\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"abc\"", "fn": "string_to_md5", "para": "(string text)", "pass": false}
{"task_id": "CPP/162", "code": "#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_to_md5(string text){\n    unsigned char md[16];\n    if (text.length()==0) return \"None\";\n    MD5_CTX c;\n    int i;\n   MD5_Init(&c);\n   MD5_Update(&c, (unsigned char*)text.c_str(), text.length());\n    MD5_Final(md, &c);\n    string out_str=\"\";\n    for (int i=0;i<16;i++)\n        {\n            char w;\n            if (md[i]<160) w=48+md[i]/16;\n            else w=87+md[i]/16;\n            out_str=out_str+w;\n            if (md[i]%16<10) w=48+md[i]%16;\n            else w=87+md[i]%16;\n            out_str=out_str+w;\n        }\n    return out_str;\n}\nint main(){\n\tauto result = string_to_md5(<FILL_ME>);\n\tassert(result==\"3e25960a79dbc69b674cd4ec67a72c62\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"test\"", "fn": "string_to_md5", "para": "(string text)", "pass": false}
{"task_id": "CPP/162", "code": "#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_to_md5(string text){\n    unsigned char md[16];\n    if (text.length()==0) return \"None\";\n    MD5_CTX c;\n    int i;\n   MD5_Init(&c);\n   MD5_Update(&c, (unsigned char*)text.c_str(), text.length());\n    MD5_Final(md, &c);\n    string out_str=\"\";\n    for (int i=0;i<16;i++)\n        {\n            char w;\n            if (md[i]<160) w=48+md[i]/16;\n            else w=87+md[i]/16;\n            out_str=out_str+w;\n            if (md[i]%16<10) w=48+md[i]%16;\n            else w=87+md[i]%16;\n            out_str=out_str+w;\n        }\n    return out_str;\n}\nint main(){\n\tauto result = string_to_md5(<FILL_ME>);\n\tassert(result==\"3e25960a79dbc69b674cd4ec67a72c62\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"abc\"", "fn": "string_to_md5", "para": "(string text)", "pass": false}
{"task_id": "CPP/162", "code": "#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_to_md5(string text){\n    unsigned char md[16];\n    if (text.length()==0) return \"None\";\n    MD5_CTX c;\n    int i;\n   MD5_Init(&c);\n   MD5_Update(&c, (unsigned char*)text.c_str(), text.length());\n    MD5_Final(md, &c);\n    string out_str=\"\";\n    for (int i=0;i<16;i++)\n        {\n            char w;\n            if (md[i]<160) w=48+md[i]/16;\n            else w=87+md[i]/16;\n            out_str=out_str+w;\n            if (md[i]%16<10) w=48+md[i]%16;\n            else w=87+md[i]%16;\n            out_str=out_str+w;\n        }\n    return out_str;\n}\nint main(){\n\tauto result = string_to_md5(<FILL_ME>);\n\tassert(result==\"0ef78513b0cb8cef12743f5aeb35f888\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello world\"", "fn": "string_to_md5", "para": "(string text)", "pass": false}
{"task_id": "CPP/162", "code": "#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_to_md5(string text){\n    unsigned char md[16];\n    if (text.length()==0) return \"None\";\n    MD5_CTX c;\n    int i;\n   MD5_Init(&c);\n   MD5_Update(&c, (unsigned char*)text.c_str(), text.length());\n    MD5_Final(md, &c);\n    string out_str=\"\";\n    for (int i=0;i<16;i++)\n        {\n            char w;\n            if (md[i]<160) w=48+md[i]/16;\n            else w=87+md[i]/16;\n            out_str=out_str+w;\n            if (md[i]%16<10) w=48+md[i]%16;\n            else w=87+md[i]%16;\n            out_str=out_str+w;\n        }\n    return out_str;\n}\nint main(){\n\tauto result = string_to_md5(<FILL_ME>);\n\tassert(result==\"0ef78513b0cb8cef12743f5aeb35f888\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"Hello World\"", "fn": "string_to_md5", "para": "(string text)", "pass": false}
{"task_id": "CPP/162", "code": "#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_to_md5(string text){\n    unsigned char md[16];\n    if (text.length()==0) return \"None\";\n    MD5_CTX c;\n    int i;\n   MD5_Init(&c);\n   MD5_Update(&c, (unsigned char*)text.c_str(), text.length());\n    MD5_Final(md, &c);\n    string out_str=\"\";\n    for (int i=0;i<16;i++)\n        {\n            char w;\n            if (md[i]<160) w=48+md[i]/16;\n            else w=87+md[i]/16;\n            out_str=out_str+w;\n            if (md[i]%16<10) w=48+md[i]%16;\n            else w=87+md[i]%16;\n            out_str=out_str+w;\n        }\n    return out_str;\n}\nint main(){\n\tauto result = string_to_md5(<FILL_ME>);\n\tassert(result==\"0ef78513b0cb8cef12743f5aeb35f888\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello world\"", "fn": "string_to_md5", "para": "(string text)", "pass": false}
{"task_id": "CPP/162", "code": "#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_to_md5(string text){\n    unsigned char md[16];\n    if (text.length()==0) return \"None\";\n    MD5_CTX c;\n    int i;\n   MD5_Init(&c);\n   MD5_Update(&c, (unsigned char*)text.c_str(), text.length());\n    MD5_Final(md, &c);\n    string out_str=\"\";\n    for (int i=0;i<16;i++)\n        {\n            char w;\n            if (md[i]<160) w=48+md[i]/16;\n            else w=87+md[i]/16;\n            out_str=out_str+w;\n            if (md[i]%16<10) w=48+md[i]%16;\n            else w=87+md[i]%16;\n            out_str=out_str+w;\n        }\n    return out_str;\n}\nint main(){\n\tauto result = string_to_md5(<FILL_ME>);\n\tassert(result==\"0ef78513b0cb8cef12743f5aeb35f888\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello world\"", "fn": "string_to_md5", "para": "(string text)", "pass": false}
{"task_id": "CPP/162", "code": "#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_to_md5(string text){\n    unsigned char md[16];\n    if (text.length()==0) return \"None\";\n    MD5_CTX c;\n    int i;\n   MD5_Init(&c);\n   MD5_Update(&c, (unsigned char*)text.c_str(), text.length());\n    MD5_Final(md, &c);\n    string out_str=\"\";\n    for (int i=0;i<16;i++)\n        {\n            char w;\n            if (md[i]<160) w=48+md[i]/16;\n            else w=87+md[i]/16;\n            out_str=out_str+w;\n            if (md[i]%16<10) w=48+md[i]%16;\n            else w=87+md[i]%16;\n            out_str=out_str+w;\n        }\n    return out_str;\n}\nint main(){\n\tauto result = string_to_md5(<FILL_ME>);\n\tassert(result==\"0ef78513b0cb8cef12743f5aeb35f888\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"hello world\"", "fn": "string_to_md5", "para": "(string text)", "pass": false}
{"task_id": "CPP/162", "code": "#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_to_md5(string text){\n    unsigned char md[16];\n    if (text.length()==0) return \"None\";\n    MD5_CTX c;\n    int i;\n   MD5_Init(&c);\n   MD5_Update(&c, (unsigned char*)text.c_str(), text.length());\n    MD5_Final(md, &c);\n    string out_str=\"\";\n    for (int i=0;i<16;i++)\n        {\n            char w;\n            if (md[i]<160) w=48+md[i]/16;\n            else w=87+md[i]/16;\n            out_str=out_str+w;\n            if (md[i]%16<10) w=48+md[i]%16;\n            else w=87+md[i]%16;\n            out_str=out_str+w;\n        }\n    return out_str;\n}\nint main(){\n\tauto result = string_to_md5(<FILL_ME>);\n\tassert(result==\"None\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"\"", "fn": "string_to_md5", "para": "(string text)", "pass": true}
{"task_id": "CPP/162", "code": "#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_to_md5(string text){\n    unsigned char md[16];\n    if (text.length()==0) return \"None\";\n    MD5_CTX c;\n    int i;\n   MD5_Init(&c);\n   MD5_Update(&c, (unsigned char*)text.c_str(), text.length());\n    MD5_Final(md, &c);\n    string out_str=\"\";\n    for (int i=0;i<16;i++)\n        {\n            char w;\n            if (md[i]<160) w=48+md[i]/16;\n            else w=87+md[i]/16;\n            out_str=out_str+w;\n            if (md[i]%16<10) w=48+md[i]%16;\n            else w=87+md[i]%16;\n            out_str=out_str+w;\n        }\n    return out_str;\n}\nint main(){\n\tauto result = string_to_md5(<FILL_ME>);\n\tassert(result==\"None\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"\"", "fn": "string_to_md5", "para": "(string text)", "pass": true}
{"task_id": "CPP/162", "code": "#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_to_md5(string text){\n    unsigned char md[16];\n    if (text.length()==0) return \"None\";\n    MD5_CTX c;\n    int i;\n   MD5_Init(&c);\n   MD5_Update(&c, (unsigned char*)text.c_str(), text.length());\n    MD5_Final(md, &c);\n    string out_str=\"\";\n    for (int i=0;i<16;i++)\n        {\n            char w;\n            if (md[i]<160) w=48+md[i]/16;\n            else w=87+md[i]/16;\n            out_str=out_str+w;\n            if (md[i]%16<10) w=48+md[i]%16;\n            else w=87+md[i]%16;\n            out_str=out_str+w;\n        }\n    return out_str;\n}\nint main(){\n\tauto result = string_to_md5(<FILL_ME>);\n\tassert(result==\"None\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"\"", "fn": "string_to_md5", "para": "(string text)", "pass": true}
{"task_id": "CPP/162", "code": "#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_to_md5(string text){\n    unsigned char md[16];\n    if (text.length()==0) return \"None\";\n    MD5_CTX c;\n    int i;\n   MD5_Init(&c);\n   MD5_Update(&c, (unsigned char*)text.c_str(), text.length());\n    MD5_Final(md, &c);\n    string out_str=\"\";\n    for (int i=0;i<16;i++)\n        {\n            char w;\n            if (md[i]<160) w=48+md[i]/16;\n            else w=87+md[i]/16;\n            out_str=out_str+w;\n            if (md[i]%16<10) w=48+md[i]%16;\n            else w=87+md[i]%16;\n            out_str=out_str+w;\n        }\n    return out_str;\n}\nint main(){\n\tauto result = string_to_md5(<FILL_ME>);\n\tassert(result==\"None\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"\"", "fn": "string_to_md5", "para": "(string text)", "pass": true}
{"task_id": "CPP/162", "code": "#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_to_md5(string text){\n    unsigned char md[16];\n    if (text.length()==0) return \"None\";\n    MD5_CTX c;\n    int i;\n   MD5_Init(&c);\n   MD5_Update(&c, (unsigned char*)text.c_str(), text.length());\n    MD5_Final(md, &c);\n    string out_str=\"\";\n    for (int i=0;i<16;i++)\n        {\n            char w;\n            if (md[i]<160) w=48+md[i]/16;\n            else w=87+md[i]/16;\n            out_str=out_str+w;\n            if (md[i]%16<10) w=48+md[i]%16;\n            else w=87+md[i]%16;\n            out_str=out_str+w;\n        }\n    return out_str;\n}\nint main(){\n\tauto result = string_to_md5(<FILL_ME>);\n\tassert(result==\"None\");\n}", "utils": "#undef NDEBUG\n#include<assert.h>\n\n", "filling": "\"\"", "fn": "string_to_md5", "para": "(string text)", "pass": true}
{"task_id": "CPP/163", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> generate_integers(int a,int b){\n    int m;\n    if (b<a)\n    {\n        m=a;a=b;b=m;\n    }\n\n    vector<int> out={};\n    for (int i=a;i<=b;i++)\n    if (i<10 and i%2==0) out.push_back(i);\n    return out;\n}\nint main(){\n\tauto result = generate_integers(<FILL_ME>);\n\tassert(issame(result,{2,4,6,8}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "2, 8", "fn": "generate_integers", "para": "(int a,int b)", "pass": true}
{"task_id": "CPP/163", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> generate_integers(int a,int b){\n    int m;\n    if (b<a)\n    {\n        m=a;a=b;b=m;\n    }\n\n    vector<int> out={};\n    for (int i=a;i<=b;i++)\n    if (i<10 and i%2==0) out.push_back(i);\n    return out;\n}\nint main(){\n\tauto result = generate_integers(<FILL_ME>);\n\tassert(issame(result,{2,4,6,8}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "2, 8", "fn": "generate_integers", "para": "(int a,int b)", "pass": true}
{"task_id": "CPP/163", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> generate_integers(int a,int b){\n    int m;\n    if (b<a)\n    {\n        m=a;a=b;b=m;\n    }\n\n    vector<int> out={};\n    for (int i=a;i<=b;i++)\n    if (i<10 and i%2==0) out.push_back(i);\n    return out;\n}\nint main(){\n\tauto result = generate_integers(<FILL_ME>);\n\tassert(issame(result,{2,4,6,8}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "2, 8", "fn": "generate_integers", "para": "(int a,int b)", "pass": true}
{"task_id": "CPP/163", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> generate_integers(int a,int b){\n    int m;\n    if (b<a)\n    {\n        m=a;a=b;b=m;\n    }\n\n    vector<int> out={};\n    for (int i=a;i<=b;i++)\n    if (i<10 and i%2==0) out.push_back(i);\n    return out;\n}\nint main(){\n\tauto result = generate_integers(<FILL_ME>);\n\tassert(issame(result,{2,4,6,8}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "2, 8", "fn": "generate_integers", "para": "(int a,int b)", "pass": true}
{"task_id": "CPP/163", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> generate_integers(int a,int b){\n    int m;\n    if (b<a)\n    {\n        m=a;a=b;b=m;\n    }\n\n    vector<int> out={};\n    for (int i=a;i<=b;i++)\n    if (i<10 and i%2==0) out.push_back(i);\n    return out;\n}\nint main(){\n\tauto result = generate_integers(<FILL_ME>);\n\tassert(issame(result,{2,4,6,8}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "2, 8", "fn": "generate_integers", "para": "(int a,int b)", "pass": true}
{"task_id": "CPP/163", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> generate_integers(int a,int b){\n    int m;\n    if (b<a)\n    {\n        m=a;a=b;b=m;\n    }\n\n    vector<int> out={};\n    for (int i=a;i<=b;i++)\n    if (i<10 and i%2==0) out.push_back(i);\n    return out;\n}\nint main(){\n\tauto result = generate_integers(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "0, 1", "fn": "generate_integers", "para": "(int a,int b)", "pass": false}
{"task_id": "CPP/163", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> generate_integers(int a,int b){\n    int m;\n    if (b<a)\n    {\n        m=a;a=b;b=m;\n    }\n\n    vector<int> out={};\n    for (int i=a;i<=b;i++)\n    if (i<10 and i%2==0) out.push_back(i);\n    return out;\n}\nint main(){\n\tauto result = generate_integers(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "5, 10", "fn": "generate_integers", "para": "(int a,int b)", "pass": false}
{"task_id": "CPP/163", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> generate_integers(int a,int b){\n    int m;\n    if (b<a)\n    {\n        m=a;a=b;b=m;\n    }\n\n    vector<int> out={};\n    for (int i=a;i<=b;i++)\n    if (i<10 and i%2==0) out.push_back(i);\n    return out;\n}\nint main(){\n\tauto result = generate_integers(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "5, 10", "fn": "generate_integers", "para": "(int a,int b)", "pass": false}
{"task_id": "CPP/163", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> generate_integers(int a,int b){\n    int m;\n    if (b<a)\n    {\n        m=a;a=b;b=m;\n    }\n\n    vector<int> out={};\n    for (int i=a;i<=b;i++)\n    if (i<10 and i%2==0) out.push_back(i);\n    return out;\n}\nint main(){\n\tauto result = generate_integers(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "5, 10", "fn": "generate_integers", "para": "(int a,int b)", "pass": false}
{"task_id": "CPP/163", "code": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> generate_integers(int a,int b){\n    int m;\n    if (b<a)\n    {\n        m=a;a=b;b=m;\n    }\n\n    vector<int> out={};\n    for (int i=a;i<=b;i++)\n    if (i<10 and i%2==0) out.push_back(i);\n    return out;\n}\nint main(){\n\tauto result = generate_integers(<FILL_ME>);\n\tassert(issame(result,{}));\n}", "utils": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\n\n", "filling": "5, 10", "fn": "generate_integers", "para": "(int a,int b)", "pass": false}
