{"task_id": "Python/0", "fn": "has_close_elements", "para": "(numbers: List[float], threshold: float)", "arg": ["[1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3", "[1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05", "[1.0, 2.0, 5.9, 4.0, 5.0], 0.95", "[1.0, 2.0, 5.9, 4.0, 5.0], 0.8", "[1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1", "[1.1, 2.2, 3.1, 4.1, 5.1], 1.0", "[1.1, 2.2, 3.1, 4.1, 5.1], 0.5"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n\nassert has_close_elements(<FILL_ME>) == True\n```", "assert": "True", "code": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n"}
{"task_id": "Python/0", "fn": "has_close_elements", "para": "(numbers: List[float], threshold: float)", "arg": ["[1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3", "[1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05", "[1.0, 2.0, 5.9, 4.0, 5.0], 0.95", "[1.0, 2.0, 5.9, 4.0, 5.0], 0.8", "[1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1", "[1.1, 2.2, 3.1, 4.1, 5.1], 1.0", "[1.1, 2.2, 3.1, 4.1, 5.1], 0.5"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n\nassert has_close_elements(<FILL_ME>) == False\n```", "assert": "False", "code": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n"}
{"task_id": "Python/1", "fn": "separate_paren_groups", "para": "(paren_string: str)", "arg": [null, null, null, "'( ) (( )) (( )( ))'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\nassert separate_paren_groups(<FILL_ME>) == ['()', '(())', '(()())']\n```", "assert": "['()', '(())', '(()())']", "code": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n"}
{"task_id": "Python/1", "fn": "separate_paren_groups", "para": "(paren_string: str)", "arg": [null, null, null, "'( ) (( )) (( )( ))'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\nassert separate_paren_groups(<FILL_ME>) == None\n```", "assert": null, "code": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n"}
{"task_id": "Python/2", "fn": "truncate_number", "para": "(number: float)", "arg": ["3.5", "truncate_number(1.33) - 0.33", "truncate_number(123.456) - 0.456"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef truncate_number(number: float) -> float:\n    return number % 1.0\n\nassert truncate_number(<FILL_ME>) == 1e-6\n```", "assert": "1e-6", "code": "def truncate_number(number: float) -> float:\n    return number % 1.0\n"}
{"task_id": "Python/2", "fn": "truncate_number", "para": "(number: float)", "arg": ["3.5", "truncate_number(1.33) - 0.33", "truncate_number(123.456) - 0.456"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef truncate_number(number: float) -> float:\n    return number % 1.0\n\nassert truncate_number(<FILL_ME>) == 0.5\n```", "assert": "0.5", "code": "def truncate_number(number: float) -> float:\n    return number % 1.0\n"}
{"task_id": "Python/3", "fn": "below_zero", "para": "(operations: List[int])", "arg": ["[]", "[1, 2, -3, 1, 2, -3]", "[1, 2, -4, 5, 6]", "[1, -1, 2, -2, 5, -5, 4, -4]", "[1, -1, 2, -2, 5, -5, 4, -5]", "[1, -2, 2, -2, 5, -5, 4, -4]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n\nassert below_zero(<FILL_ME>) == True\n```", "assert": "True", "code": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n"}
{"task_id": "Python/3", "fn": "below_zero", "para": "(operations: List[int])", "arg": ["[]", "[1, 2, -3, 1, 2, -3]", "[1, 2, -4, 5, 6]", "[1, -1, 2, -2, 5, -5, 4, -4]", "[1, -1, 2, -2, 5, -5, 4, -5]", "[1, -2, 2, -2, 5, -5, 4, -4]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n\nassert below_zero(<FILL_ME>) == False\n```", "assert": "False", "code": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n"}
{"task_id": "Python/4", "fn": "mean_absolute_deviation", "para": "(numbers: List[float])", "arg": ["mean_absolute_deviation([1.0, 2.0, 3.0]) - 2.0/3.0", "mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) - 1.0", "mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\nassert mean_absolute_deviation(<FILL_ME>) == 1e-6\n```", "assert": "1e-6", "code": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n"}
{"task_id": "Python/5", "fn": "intersperse", "para": "(numbers: List[int], delimeter: int)", "arg": ["[], 7", "[5, 6, 3, 2], 8", "[2, 2, 2], 2"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n\nassert intersperse(<FILL_ME>) == [5, 8, 6, 8, 3, 8, 2]\n```", "assert": "[5, 8, 6, 8, 3, 8, 2]", "code": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n"}
{"task_id": "Python/5", "fn": "intersperse", "para": "(numbers: List[int], delimeter: int)", "arg": ["[], 7", "[5, 6, 3, 2], 8", "[2, 2, 2], 2"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n\nassert intersperse(<FILL_ME>) == []\n```", "assert": "[]", "code": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n"}
{"task_id": "Python/5", "fn": "intersperse", "para": "(numbers: List[int], delimeter: int)", "arg": ["[], 7", "[5, 6, 3, 2], 8", "[2, 2, 2], 2"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n\nassert intersperse(<FILL_ME>) == [2, 2, 2, 2, 2]\n```", "assert": "[2, 2, 2, 2, 2]", "code": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n"}
{"task_id": "Python/6", "fn": "parse_nested_parens", "para": "(paren_string: str)", "arg": ["'(()()) ((())) () ((())()())'", "'() (()) ((())) (((())))'", "'(()(())((())))'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n\nassert parse_nested_parens(<FILL_ME>) == [1, 2, 3, 4]\n```", "assert": "[1, 2, 3, 4]", "code": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n"}
{"task_id": "Python/6", "fn": "parse_nested_parens", "para": "(paren_string: str)", "arg": ["'(()()) ((())) () ((())()())'", "'() (()) ((())) (((())))'", "'(()(())((())))'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n\nassert parse_nested_parens(<FILL_ME>) == [4]\n```", "assert": "[4]", "code": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n"}
{"task_id": "Python/6", "fn": "parse_nested_parens", "para": "(paren_string: str)", "arg": ["'(()()) ((())) () ((())()())'", "'() (()) ((())) (((())))'", "'(()(())((())))'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n\nassert parse_nested_parens(<FILL_ME>) == [2, 3, 1, 3]\n```", "assert": "[2, 3, 1, 3]", "code": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n"}
{"task_id": "Python/7", "fn": "filter_by_substring", "para": "(strings: List[str], substring: str)", "arg": ["[], 'john'", "['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx'", "['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx'", "['grunt', 'trumpet', 'prune', 'gruesome'], 'run'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [x for x in strings if substring in x]\n\nassert filter_by_substring(<FILL_ME>) == []\n```", "assert": "[]", "code": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [x for x in strings if substring in x]\n"}
{"task_id": "Python/7", "fn": "filter_by_substring", "para": "(strings: List[str], substring: str)", "arg": ["[], 'john'", "['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx'", "['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx'", "['grunt', 'trumpet', 'prune', 'gruesome'], 'run'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [x for x in strings if substring in x]\n\nassert filter_by_substring(<FILL_ME>) == ['xxx', 'xxxAAA', 'xxx']\n```", "assert": "['xxx', 'xxxAAA', 'xxx']", "code": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [x for x in strings if substring in x]\n"}
{"task_id": "Python/7", "fn": "filter_by_substring", "para": "(strings: List[str], substring: str)", "arg": ["[], 'john'", "['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx'", "['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx'", "['grunt', 'trumpet', 'prune', 'gruesome'], 'run'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [x for x in strings if substring in x]\n\nassert filter_by_substring(<FILL_ME>) == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n```", "assert": "['xxx', 'aaaxxy', 'xxxAAA', 'xxx']", "code": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [x for x in strings if substring in x]\n"}
{"task_id": "Python/7", "fn": "filter_by_substring", "para": "(strings: List[str], substring: str)", "arg": ["[], 'john'", "['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx'", "['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx'", "['grunt', 'trumpet', 'prune', 'gruesome'], 'run'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [x for x in strings if substring in x]\n\nassert filter_by_substring(<FILL_ME>) == ['grunt', 'prune']\n```", "assert": "['grunt', 'prune']", "code": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [x for x in strings if substring in x]\n"}
{"task_id": "Python/8", "fn": "sum_product", "para": "(numbers: List[int])", "arg": ["[]", "[1, 1, 1]", "[100, 0]", "[3, 5, 7]", "[10]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n\nassert sum_product(<FILL_ME>) == (100, 0)\n```", "assert": "(100, 0)", "code": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n"}
{"task_id": "Python/8", "fn": "sum_product", "para": "(numbers: List[int])", "arg": ["[]", "[1, 1, 1]", "[100, 0]", "[3, 5, 7]", "[10]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n\nassert sum_product(<FILL_ME>) == (10, 10)\n```", "assert": "(10, 10)", "code": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n"}
{"task_id": "Python/8", "fn": "sum_product", "para": "(numbers: List[int])", "arg": ["[]", "[1, 1, 1]", "[100, 0]", "[3, 5, 7]", "[10]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n\nassert sum_product(<FILL_ME>) == (3 + 5 + 7, 3 * 5 * 7)\n```", "assert": "(3 + 5 + 7, 3 * 5 * 7)", "code": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n"}
{"task_id": "Python/8", "fn": "sum_product", "para": "(numbers: List[int])", "arg": ["[]", "[1, 1, 1]", "[100, 0]", "[3, 5, 7]", "[10]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n\nassert sum_product(<FILL_ME>) == (3, 1)\n```", "assert": "(3, 1)", "code": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n"}
{"task_id": "Python/8", "fn": "sum_product", "para": "(numbers: List[int])", "arg": ["[]", "[1, 1, 1]", "[100, 0]", "[3, 5, 7]", "[10]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n\nassert sum_product(<FILL_ME>) == (0, 1)\n```", "assert": "(0, 1)", "code": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n"}
{"task_id": "Python/9", "fn": "rolling_max", "para": "(numbers: List[int])", "arg": ["[]", "[1, 2, 3, 4]", "[4, 3, 2, 1]", "[3, 2, 3, 100, 3]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n\nassert rolling_max(<FILL_ME>) == []\n```", "assert": "[]", "code": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n"}
{"task_id": "Python/9", "fn": "rolling_max", "para": "(numbers: List[int])", "arg": ["[]", "[1, 2, 3, 4]", "[4, 3, 2, 1]", "[3, 2, 3, 100, 3]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n\nassert rolling_max(<FILL_ME>) == [1, 2, 3, 4]\n```", "assert": "[1, 2, 3, 4]", "code": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n"}
{"task_id": "Python/9", "fn": "rolling_max", "para": "(numbers: List[int])", "arg": ["[]", "[1, 2, 3, 4]", "[4, 3, 2, 1]", "[3, 2, 3, 100, 3]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n\nassert rolling_max(<FILL_ME>) == [3, 3, 3, 100, 100]\n```", "assert": "[3, 3, 3, 100, 100]", "code": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n"}
{"task_id": "Python/9", "fn": "rolling_max", "para": "(numbers: List[int])", "arg": ["[]", "[1, 2, 3, 4]", "[4, 3, 2, 1]", "[3, 2, 3, 100, 3]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n\nassert rolling_max(<FILL_ME>) == [4, 4, 4, 4]\n```", "assert": "[4, 4, 4, 4]", "code": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n"}
{"task_id": "Python/10", "fn": "make_palindrome", "para": "(string: str)", "arg": ["''", "'x'", "'xyz'", "'xyx'", "'jerry'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n\nassert make_palindrome(<FILL_ME>) == 'x'\n```", "assert": "'x'", "code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n"}
{"task_id": "Python/10", "fn": "make_palindrome", "para": "(string: str)", "arg": ["''", "'x'", "'xyz'", "'xyx'", "'jerry'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n\nassert make_palindrome(<FILL_ME>) == 'xyzyx'\n```", "assert": "'xyzyx'", "code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n"}
{"task_id": "Python/10", "fn": "make_palindrome", "para": "(string: str)", "arg": ["''", "'x'", "'xyz'", "'xyx'", "'jerry'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n\nassert make_palindrome(<FILL_ME>) == 'jerryrrej'\n```", "assert": "'jerryrrej'", "code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n"}
{"task_id": "Python/10", "fn": "make_palindrome", "para": "(string: str)", "arg": ["''", "'x'", "'xyz'", "'xyx'", "'jerry'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n\nassert make_palindrome(<FILL_ME>) == 'xyx'\n```", "assert": "'xyx'", "code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n"}
{"task_id": "Python/10", "fn": "make_palindrome", "para": "(string: str)", "arg": ["''", "'x'", "'xyz'", "'xyx'", "'jerry'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n\nassert make_palindrome(<FILL_ME>) == ''\n```", "assert": "''", "code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n"}
{"task_id": "Python/11", "fn": "string_xor", "para": "(a: str, b: str)", "arg": ["'111000', '101010'", "'1', '1'", "'0101', '0000'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n\nassert string_xor(<FILL_ME>) == '0101'\n```", "assert": "'0101'", "code": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n"}
{"task_id": "Python/11", "fn": "string_xor", "para": "(a: str, b: str)", "arg": ["'111000', '101010'", "'1', '1'", "'0101', '0000'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n\nassert string_xor(<FILL_ME>) == '010010'\n```", "assert": "'010010'", "code": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n"}
{"task_id": "Python/11", "fn": "string_xor", "para": "(a: str, b: str)", "arg": ["'111000', '101010'", "'1', '1'", "'0101', '0000'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n\nassert string_xor(<FILL_ME>) == '0'\n```", "assert": "'0'", "code": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n"}
{"task_id": "Python/12", "fn": "longest", "para": "(strings: List[str])", "arg": ["[]", "['x', 'y', 'z']", "['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n\nassert longest(<FILL_ME>) == 'x'\n```", "assert": "'x'", "code": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n"}
{"task_id": "Python/12", "fn": "longest", "para": "(strings: List[str])", "arg": ["[]", "['x', 'y', 'z']", "['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n\nassert longest(<FILL_ME>) == None\n```", "assert": "None", "code": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n"}
{"task_id": "Python/12", "fn": "longest", "para": "(strings: List[str])", "arg": ["[]", "['x', 'y', 'z']", "['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n\nassert longest(<FILL_ME>) == 'zzzz'\n```", "assert": "'zzzz'", "code": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n"}
{"task_id": "Python/13", "fn": "greatest_common_divisor", "para": "(a: int, b: int)", "arg": ["3, 7", "10, 15", "49, 14", "144, 60"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n\nassert greatest_common_divisor(<FILL_ME>) == 5\n```", "assert": "5", "code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n"}
{"task_id": "Python/13", "fn": "greatest_common_divisor", "para": "(a: int, b: int)", "arg": ["3, 7", "10, 15", "49, 14", "144, 60"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n\nassert greatest_common_divisor(<FILL_ME>) == 7\n```", "assert": "7", "code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n"}
{"task_id": "Python/13", "fn": "greatest_common_divisor", "para": "(a: int, b: int)", "arg": ["3, 7", "10, 15", "49, 14", "144, 60"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n\nassert greatest_common_divisor(<FILL_ME>) == 12\n```", "assert": "12", "code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n"}
{"task_id": "Python/13", "fn": "greatest_common_divisor", "para": "(a: int, b: int)", "arg": ["3, 7", "10, 15", "49, 14", "144, 60"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n\nassert greatest_common_divisor(<FILL_ME>) == 1\n```", "assert": "1", "code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n"}
{"task_id": "Python/14", "fn": "all_prefixes", "para": "(string: str)", "arg": ["''", "'asdfgh'", "'WWW'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n\nassert all_prefixes(<FILL_ME>) == []\n```", "assert": "[]", "code": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n"}
{"task_id": "Python/14", "fn": "all_prefixes", "para": "(string: str)", "arg": ["''", "'asdfgh'", "'WWW'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n\nassert all_prefixes(<FILL_ME>) == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n```", "assert": "['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']", "code": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n"}
{"task_id": "Python/14", "fn": "all_prefixes", "para": "(string: str)", "arg": ["''", "'asdfgh'", "'WWW'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n\nassert all_prefixes(<FILL_ME>) == ['W', 'WW', 'WWW']\n```", "assert": "['W', 'WW', 'WWW']", "code": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n"}
{"task_id": "Python/15", "fn": "string_sequence", "para": "(n: int)", "arg": ["0", "3", "10"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef string_sequence(n: int) -> str:\n    return ' '.join([str(x) for x in range(n + 1)])\n\nassert string_sequence(<FILL_ME>) == '0 1 2 3'\n```", "assert": "'0 1 2 3'", "code": "def string_sequence(n: int) -> str:\n    return ' '.join([str(x) for x in range(n + 1)])\n"}
{"task_id": "Python/15", "fn": "string_sequence", "para": "(n: int)", "arg": ["0", "3", "10"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef string_sequence(n: int) -> str:\n    return ' '.join([str(x) for x in range(n + 1)])\n\nassert string_sequence(<FILL_ME>) == '0 1 2 3 4 5 6 7 8 9 10'\n```", "assert": "'0 1 2 3 4 5 6 7 8 9 10'", "code": "def string_sequence(n: int) -> str:\n    return ' '.join([str(x) for x in range(n + 1)])\n"}
{"task_id": "Python/15", "fn": "string_sequence", "para": "(n: int)", "arg": ["0", "3", "10"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef string_sequence(n: int) -> str:\n    return ' '.join([str(x) for x in range(n + 1)])\n\nassert string_sequence(<FILL_ME>) == '0'\n```", "assert": "'0'", "code": "def string_sequence(n: int) -> str:\n    return ' '.join([str(x) for x in range(n + 1)])\n"}
{"task_id": "Python/16", "fn": "count_distinct_characters", "para": "(string: str)", "arg": ["''", "'abcde'", "'abcde' + 'cade' + 'CADE'", "'aaaaAAAAaaaa'", "'Jerry jERRY JeRRRY'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))\n\nassert count_distinct_characters(<FILL_ME>) == 1\n```", "assert": "1", "code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))\n"}
{"task_id": "Python/16", "fn": "count_distinct_characters", "para": "(string: str)", "arg": ["''", "'abcde'", "'abcde' + 'cade' + 'CADE'", "'aaaaAAAAaaaa'", "'Jerry jERRY JeRRRY'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))\n\nassert count_distinct_characters(<FILL_ME>) == 0\n```", "assert": "0", "code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))\n"}
{"task_id": "Python/16", "fn": "count_distinct_characters", "para": "(string: str)", "arg": ["''", "'abcde'", "'abcde' + 'cade' + 'CADE'", "'aaaaAAAAaaaa'", "'Jerry jERRY JeRRRY'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))\n\nassert count_distinct_characters(<FILL_ME>) == 5\n```", "assert": "5", "code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))\n"}
{"task_id": "Python/17", "fn": "parse_music", "para": "(music_string: str)", "arg": ["''", "'o o o o'", "'.| .| .| .|'", "'o| o| .| .| o o o o'", "'o| .| o| .| o o| o o|'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n\nassert parse_music(<FILL_ME>) == [2, 1, 2, 1, 4, 2, 4, 2]\n```", "assert": "[2, 1, 2, 1, 4, 2, 4, 2]", "code": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n"}
{"task_id": "Python/17", "fn": "parse_music", "para": "(music_string: str)", "arg": ["''", "'o o o o'", "'.| .| .| .|'", "'o| o| .| .| o o o o'", "'o| .| o| .| o o| o o|'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n\nassert parse_music(<FILL_ME>) == [2, 2, 1, 1, 4, 4, 4, 4]\n```", "assert": "[2, 2, 1, 1, 4, 4, 4, 4]", "code": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n"}
{"task_id": "Python/17", "fn": "parse_music", "para": "(music_string: str)", "arg": ["''", "'o o o o'", "'.| .| .| .|'", "'o| o| .| .| o o o o'", "'o| .| o| .| o o| o o|'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n\nassert parse_music(<FILL_ME>) == [4, 4, 4, 4]\n```", "assert": "[4, 4, 4, 4]", "code": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n"}
{"task_id": "Python/17", "fn": "parse_music", "para": "(music_string: str)", "arg": ["''", "'o o o o'", "'.| .| .| .|'", "'o| o| .| .| o o o o'", "'o| .| o| .| o o| o o|'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n\nassert parse_music(<FILL_ME>) == [1, 1, 1, 1]\n```", "assert": "[1, 1, 1, 1]", "code": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n"}
{"task_id": "Python/17", "fn": "parse_music", "para": "(music_string: str)", "arg": ["''", "'o o o o'", "'.| .| .| .|'", "'o| o| .| .| o o o o'", "'o| .| o| .| o o| o o|'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n\nassert parse_music(<FILL_ME>) == []\n```", "assert": "[]", "code": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n"}
{"task_id": "Python/18", "fn": "how_many_times", "para": "(string: str, substring: str)", "arg": ["'', 'x'", "'xyxyxyx', 'x'", "'cacacacac', 'cac'", "'john doe', 'john'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef how_many_times(string: str, substring: str) -> int:\n    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n\nassert how_many_times(<FILL_ME>) == 1\n```", "assert": "1", "code": "def how_many_times(string: str, substring: str) -> int:\n    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n"}
{"task_id": "Python/18", "fn": "how_many_times", "para": "(string: str, substring: str)", "arg": ["'', 'x'", "'xyxyxyx', 'x'", "'cacacacac', 'cac'", "'john doe', 'john'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef how_many_times(string: str, substring: str) -> int:\n    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n\nassert how_many_times(<FILL_ME>) == 0\n```", "assert": "0", "code": "def how_many_times(string: str, substring: str) -> int:\n    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n"}
{"task_id": "Python/18", "fn": "how_many_times", "para": "(string: str, substring: str)", "arg": ["'', 'x'", "'xyxyxyx', 'x'", "'cacacacac', 'cac'", "'john doe', 'john'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef how_many_times(string: str, substring: str) -> int:\n    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n\nassert how_many_times(<FILL_ME>) == 4\n```", "assert": "4", "code": "def how_many_times(string: str, substring: str) -> int:\n    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n"}
{"task_id": "Python/19", "fn": "sort_numbers", "para": "(numbers: str)", "arg": ["''", "'three'", "'three five nine'", "'five zero four seven nine eight'", "'six five four three two one zero'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n\nassert sort_numbers(<FILL_ME>) == 'zero one two three four five six'\n```", "assert": "'zero one two three four five six'", "code": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n"}
{"task_id": "Python/19", "fn": "sort_numbers", "para": "(numbers: str)", "arg": ["''", "'three'", "'three five nine'", "'five zero four seven nine eight'", "'six five four three two one zero'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n\nassert sort_numbers(<FILL_ME>) == 'zero four five seven eight nine'\n```", "assert": "'zero four five seven eight nine'", "code": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n"}
{"task_id": "Python/19", "fn": "sort_numbers", "para": "(numbers: str)", "arg": ["''", "'three'", "'three five nine'", "'five zero four seven nine eight'", "'six five four three two one zero'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n\nassert sort_numbers(<FILL_ME>) == 'three'\n```", "assert": "'three'", "code": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n"}
{"task_id": "Python/19", "fn": "sort_numbers", "para": "(numbers: str)", "arg": ["''", "'three'", "'three five nine'", "'five zero four seven nine eight'", "'six five four three two one zero'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n\nassert sort_numbers(<FILL_ME>) == ''\n```", "assert": "''", "code": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n"}
{"task_id": "Python/19", "fn": "sort_numbers", "para": "(numbers: str)", "arg": ["''", "'three'", "'three five nine'", "'five zero four seven nine eight'", "'six five four three two one zero'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n\nassert sort_numbers(<FILL_ME>) == 'three five nine'\n```", "assert": "'three five nine'", "code": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n"}
{"task_id": "Python/20", "fn": "find_closest_elements", "para": "(numbers: List[float])", "arg": ["[1.0, 2.0, 3.9, 4.0, 5.0, 2.2]", "[1.0, 2.0, 5.9, 4.0, 5.0]", "[1.0, 2.0, 3.0, 4.0, 5.0, 2.2]", "[1.0, 2.0, 3.0, 4.0, 5.0, 2.0]", "[1.1, 2.2, 3.1, 4.1, 5.1]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n\nassert find_closest_elements(<FILL_ME>) == (2.2, 3.1)\n```", "assert": "(2.2, 3.1)", "code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n"}
{"task_id": "Python/20", "fn": "find_closest_elements", "para": "(numbers: List[float])", "arg": ["[1.0, 2.0, 3.9, 4.0, 5.0, 2.2]", "[1.0, 2.0, 5.9, 4.0, 5.0]", "[1.0, 2.0, 3.0, 4.0, 5.0, 2.2]", "[1.0, 2.0, 3.0, 4.0, 5.0, 2.0]", "[1.1, 2.2, 3.1, 4.1, 5.1]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n\nassert find_closest_elements(<FILL_ME>) == (2.0, 2.2)\n```", "assert": "(2.0, 2.2)", "code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n"}
{"task_id": "Python/20", "fn": "find_closest_elements", "para": "(numbers: List[float])", "arg": ["[1.0, 2.0, 3.9, 4.0, 5.0, 2.2]", "[1.0, 2.0, 5.9, 4.0, 5.0]", "[1.0, 2.0, 3.0, 4.0, 5.0, 2.2]", "[1.0, 2.0, 3.0, 4.0, 5.0, 2.0]", "[1.1, 2.2, 3.1, 4.1, 5.1]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n\nassert find_closest_elements(<FILL_ME>) == (5.0, 5.9)\n```", "assert": "(5.0, 5.9)", "code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n"}
{"task_id": "Python/20", "fn": "find_closest_elements", "para": "(numbers: List[float])", "arg": ["[1.0, 2.0, 3.9, 4.0, 5.0, 2.2]", "[1.0, 2.0, 5.9, 4.0, 5.0]", "[1.0, 2.0, 3.0, 4.0, 5.0, 2.2]", "[1.0, 2.0, 3.0, 4.0, 5.0, 2.0]", "[1.1, 2.2, 3.1, 4.1, 5.1]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n\nassert find_closest_elements(<FILL_ME>) == (2.0, 2.0)\n```", "assert": "(2.0, 2.0)", "code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n"}
{"task_id": "Python/20", "fn": "find_closest_elements", "para": "(numbers: List[float])", "arg": ["[1.0, 2.0, 3.9, 4.0, 5.0, 2.2]", "[1.0, 2.0, 5.9, 4.0, 5.0]", "[1.0, 2.0, 3.0, 4.0, 5.0, 2.2]", "[1.0, 2.0, 3.0, 4.0, 5.0, 2.0]", "[1.1, 2.2, 3.1, 4.1, 5.1]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n\nassert find_closest_elements(<FILL_ME>) == (3.9, 4.0)\n```", "assert": "(3.9, 4.0)", "code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n"}
{"task_id": "Python/21", "fn": "rescale_to_unit", "para": "(numbers: List[float])", "arg": ["[2.0, 49.9]", "[100.0, 49.9]", "[1.0, 2.0, 3.0, 4.0, 5.0]", "[2.0, 1.0, 5.0, 3.0, 4.0]", "[12.0, 11.0, 15.0, 13.0, 14.0]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n\nassert rescale_to_unit(<FILL_ME>) == [0.0, 0.25, 0.5, 0.75, 1.0]\n```", "assert": "[0.0, 0.25, 0.5, 0.75, 1.0]", "code": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n"}
{"task_id": "Python/21", "fn": "rescale_to_unit", "para": "(numbers: List[float])", "arg": ["[2.0, 49.9]", "[100.0, 49.9]", "[1.0, 2.0, 3.0, 4.0, 5.0]", "[2.0, 1.0, 5.0, 3.0, 4.0]", "[12.0, 11.0, 15.0, 13.0, 14.0]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n\nassert rescale_to_unit(<FILL_ME>) == [0.25, 0.0, 1.0, 0.5, 0.75]\n```", "assert": "[0.25, 0.0, 1.0, 0.5, 0.75]", "code": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n"}
{"task_id": "Python/21", "fn": "rescale_to_unit", "para": "(numbers: List[float])", "arg": ["[2.0, 49.9]", "[100.0, 49.9]", "[1.0, 2.0, 3.0, 4.0, 5.0]", "[2.0, 1.0, 5.0, 3.0, 4.0]", "[12.0, 11.0, 15.0, 13.0, 14.0]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n\nassert rescale_to_unit(<FILL_ME>) == [1.0, 0.0]\n```", "assert": "[1.0, 0.0]", "code": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n"}
{"task_id": "Python/21", "fn": "rescale_to_unit", "para": "(numbers: List[float])", "arg": ["[2.0, 49.9]", "[100.0, 49.9]", "[1.0, 2.0, 3.0, 4.0, 5.0]", "[2.0, 1.0, 5.0, 3.0, 4.0]", "[12.0, 11.0, 15.0, 13.0, 14.0]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n\nassert rescale_to_unit(<FILL_ME>) == [0.0, 1.0]\n```", "assert": "[0.0, 1.0]", "code": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n"}
{"task_id": "Python/22", "fn": "filter_integers", "para": "(values: List[Any])", "arg": ["[]", "[4, {}, [], 23.2, 9, 'adasd']", "[3, 'c', 3, 3, 'a', 'b']"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]\n\nassert filter_integers(<FILL_ME>) == []\n```", "assert": "[]", "code": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]\n"}
{"task_id": "Python/22", "fn": "filter_integers", "para": "(values: List[Any])", "arg": ["[]", "[4, {}, [], 23.2, 9, 'adasd']", "[3, 'c', 3, 3, 'a', 'b']"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]\n\nassert filter_integers(<FILL_ME>) == [3, 3, 3]\n```", "assert": "[3, 3, 3]", "code": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]\n"}
{"task_id": "Python/22", "fn": "filter_integers", "para": "(values: List[Any])", "arg": ["[]", "[4, {}, [], 23.2, 9, 'adasd']", "[3, 'c', 3, 3, 'a', 'b']"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]\n\nassert filter_integers(<FILL_ME>) == [4, 9]\n```", "assert": "[4, 9]", "code": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]\n"}
{"task_id": "Python/23", "fn": "strlen", "para": "(string: str)", "arg": ["''", "'x'", "'asdasnakj'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef strlen(string: str) -> int:\n    return len(string)\n\nassert strlen(<FILL_ME>) == 0\n```", "assert": "0", "code": "def strlen(string: str) -> int:\n    return len(string)\n"}
{"task_id": "Python/23", "fn": "strlen", "para": "(string: str)", "arg": ["''", "'x'", "'asdasnakj'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef strlen(string: str) -> int:\n    return len(string)\n\nassert strlen(<FILL_ME>) == 1\n```", "assert": "1", "code": "def strlen(string: str) -> int:\n    return len(string)\n"}
{"task_id": "Python/23", "fn": "strlen", "para": "(string: str)", "arg": ["''", "'x'", "'asdasnakj'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef strlen(string: str) -> int:\n    return len(string)\n\nassert strlen(<FILL_ME>) == 9\n```", "assert": "9", "code": "def strlen(string: str) -> int:\n    return len(string)\n"}
{"task_id": "Python/24", "fn": "largest_divisor", "para": "(n: int)", "arg": ["3", "7", "10", "100", "49"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef largest_divisor(n: int) -> int:\n    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n\nassert largest_divisor(<FILL_ME>) == 5\n```", "assert": "5", "code": "def largest_divisor(n: int) -> int:\n    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n"}
{"task_id": "Python/24", "fn": "largest_divisor", "para": "(n: int)", "arg": ["3", "7", "10", "100", "49"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef largest_divisor(n: int) -> int:\n    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n\nassert largest_divisor(<FILL_ME>) == 50\n```", "assert": "50", "code": "def largest_divisor(n: int) -> int:\n    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n"}
{"task_id": "Python/24", "fn": "largest_divisor", "para": "(n: int)", "arg": ["3", "7", "10", "100", "49"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef largest_divisor(n: int) -> int:\n    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n\nassert largest_divisor(<FILL_ME>) == 7\n```", "assert": "7", "code": "def largest_divisor(n: int) -> int:\n    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n"}
{"task_id": "Python/24", "fn": "largest_divisor", "para": "(n: int)", "arg": ["3", "7", "10", "100", "49"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef largest_divisor(n: int) -> int:\n    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n\nassert largest_divisor(<FILL_ME>) == 1\n```", "assert": "1", "code": "def largest_divisor(n: int) -> int:\n    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n"}
{"task_id": "Python/25", "fn": "factorize", "para": "(n: int)", "arg": ["2", "4", "8", "3 * 19", "3 * 19 * 3 * 19", "3 * 19 * 3 * 19 * 3 * 19", "3 * 19 * 19 * 19", "3 * 2 * 3"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n\nassert factorize(<FILL_ME>) == [2, 2, 2]\n```", "assert": "[2, 2, 2]", "code": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n"}
{"task_id": "Python/25", "fn": "factorize", "para": "(n: int)", "arg": ["2", "4", "8", "3 * 19", "3 * 19 * 3 * 19", "3 * 19 * 3 * 19 * 3 * 19", "3 * 19 * 19 * 19", "3 * 2 * 3"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n\nassert factorize(<FILL_ME>) == [2, 2]\n```", "assert": "[2, 2]", "code": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n"}
{"task_id": "Python/25", "fn": "factorize", "para": "(n: int)", "arg": ["2", "4", "8", "3 * 19", "3 * 19 * 3 * 19", "3 * 19 * 3 * 19 * 3 * 19", "3 * 19 * 19 * 19", "3 * 2 * 3"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n\nassert factorize(<FILL_ME>) == [2, 3, 3]\n```", "assert": "[2, 3, 3]", "code": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n"}
{"task_id": "Python/25", "fn": "factorize", "para": "(n: int)", "arg": ["2", "4", "8", "3 * 19", "3 * 19 * 3 * 19", "3 * 19 * 3 * 19 * 3 * 19", "3 * 19 * 19 * 19", "3 * 2 * 3"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n\nassert factorize(<FILL_ME>) == [3, 19, 19, 19]\n```", "assert": "[3, 19, 19, 19]", "code": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n"}
{"task_id": "Python/25", "fn": "factorize", "para": "(n: int)", "arg": ["2", "4", "8", "3 * 19", "3 * 19 * 3 * 19", "3 * 19 * 3 * 19 * 3 * 19", "3 * 19 * 19 * 19", "3 * 2 * 3"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n\nassert factorize(<FILL_ME>) == [2]\n```", "assert": "[2]", "code": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n"}
{"task_id": "Python/25", "fn": "factorize", "para": "(n: int)", "arg": ["2", "4", "8", "3 * 19", "3 * 19 * 3 * 19", "3 * 19 * 3 * 19 * 3 * 19", "3 * 19 * 19 * 19", "3 * 2 * 3"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n\nassert factorize(<FILL_ME>) == [3, 19]\n```", "assert": "[3, 19]", "code": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n"}
{"task_id": "Python/25", "fn": "factorize", "para": "(n: int)", "arg": ["2", "4", "8", "3 * 19", "3 * 19 * 3 * 19", "3 * 19 * 3 * 19 * 3 * 19", "3 * 19 * 19 * 19", "3 * 2 * 3"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n\nassert factorize(<FILL_ME>) == [3, 3, 3, 19, 19, 19]\n```", "assert": "[3, 3, 3, 19, 19, 19]", "code": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n"}
{"task_id": "Python/25", "fn": "factorize", "para": "(n: int)", "arg": ["2", "4", "8", "3 * 19", "3 * 19 * 3 * 19", "3 * 19 * 3 * 19 * 3 * 19", "3 * 19 * 19 * 19", "3 * 2 * 3"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n\nassert factorize(<FILL_ME>) == [3, 3, 19, 19]\n```", "assert": "[3, 3, 19, 19]", "code": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n"}
{"task_id": "Python/26", "fn": "remove_duplicates", "para": "(numbers: List[int])", "arg": ["[]", "[1, 2, 3, 4]", "[1, 2, 3, 2, 4, 3, 5]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n\nassert remove_duplicates(<FILL_ME>) == []\n```", "assert": "[]", "code": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n"}
{"task_id": "Python/26", "fn": "remove_duplicates", "para": "(numbers: List[int])", "arg": ["[]", "[1, 2, 3, 4]", "[1, 2, 3, 2, 4, 3, 5]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n\nassert remove_duplicates(<FILL_ME>) == [1, 2, 3, 4]\n```", "assert": "[1, 2, 3, 4]", "code": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n"}
{"task_id": "Python/26", "fn": "remove_duplicates", "para": "(numbers: List[int])", "arg": ["[]", "[1, 2, 3, 4]", "[1, 2, 3, 2, 4, 3, 5]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n\nassert remove_duplicates(<FILL_ME>) == [1, 4, 5]\n```", "assert": "[1, 4, 5]", "code": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n"}
{"task_id": "Python/27", "fn": "flip_case", "para": "(string: str)", "arg": ["''", "'Hello!'", "'These violent delights have violent ends'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef flip_case(string: str) -> str:\n    return string.swapcase()\n\nassert flip_case(<FILL_ME>) == 'hELLO!'\n```", "assert": "'hELLO!'", "code": "def flip_case(string: str) -> str:\n    return string.swapcase()\n"}
{"task_id": "Python/27", "fn": "flip_case", "para": "(string: str)", "arg": ["''", "'Hello!'", "'These violent delights have violent ends'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef flip_case(string: str) -> str:\n    return string.swapcase()\n\nassert flip_case(<FILL_ME>) == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n```", "assert": "'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'", "code": "def flip_case(string: str) -> str:\n    return string.swapcase()\n"}
{"task_id": "Python/27", "fn": "flip_case", "para": "(string: str)", "arg": ["''", "'Hello!'", "'These violent delights have violent ends'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef flip_case(string: str) -> str:\n    return string.swapcase()\n\nassert flip_case(<FILL_ME>) == ''\n```", "assert": "''", "code": "def flip_case(string: str) -> str:\n    return string.swapcase()\n"}
{"task_id": "Python/28", "fn": "concatenate", "para": "(strings: List[str])", "arg": ["[]", "['x', 'y', 'z']", "['x', 'y', 'z', 'w', 'k']"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n\nassert concatenate(<FILL_ME>) == 'xyzwk'\n```", "assert": "'xyzwk'", "code": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n"}
{"task_id": "Python/28", "fn": "concatenate", "para": "(strings: List[str])", "arg": ["[]", "['x', 'y', 'z']", "['x', 'y', 'z', 'w', 'k']"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n\nassert concatenate(<FILL_ME>) == 'xyz'\n```", "assert": "'xyz'", "code": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n"}
{"task_id": "Python/28", "fn": "concatenate", "para": "(strings: List[str])", "arg": ["[]", "['x', 'y', 'z']", "['x', 'y', 'z', 'w', 'k']"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n\nassert concatenate(<FILL_ME>) == ''\n```", "assert": "''", "code": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n"}
{"task_id": "Python/29", "fn": "filter_by_prefix", "para": "(strings: List[str], prefix: str)", "arg": ["[], 'john'", "['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [x for x in strings if x.startswith(prefix)]\n\nassert filter_by_prefix(<FILL_ME>) == []\n```", "assert": "[]", "code": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [x for x in strings if x.startswith(prefix)]\n"}
{"task_id": "Python/29", "fn": "filter_by_prefix", "para": "(strings: List[str], prefix: str)", "arg": ["[], 'john'", "['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nfrom typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [x for x in strings if x.startswith(prefix)]\n\nassert filter_by_prefix(<FILL_ME>) == ['xxx', 'xxxAAA', 'xxx']\n```", "assert": "['xxx', 'xxxAAA', 'xxx']", "code": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [x for x in strings if x.startswith(prefix)]\n"}
{"task_id": "Python/30", "fn": "get_positive", "para": "(l: list)", "arg": ["[-1, -2, 4, 5, 6]", "[5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]", "[-1, -2]", "[]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef get_positive(l: list):\n    return [e for e in l if e > 0]\n\nassert get_positive(<FILL_ME>) == []\n```", "assert": "[]", "code": "def get_positive(l: list):\n    return [e for e in l if e > 0]\n"}
{"task_id": "Python/30", "fn": "get_positive", "para": "(l: list)", "arg": ["[-1, -2, 4, 5, 6]", "[5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]", "[-1, -2]", "[]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef get_positive(l: list):\n    return [e for e in l if e > 0]\n\nassert get_positive(<FILL_ME>) == [5, 3, 2, 3, 3, 9, 123, 1]\n```", "assert": "[5, 3, 2, 3, 3, 9, 123, 1]", "code": "def get_positive(l: list):\n    return [e for e in l if e > 0]\n"}
{"task_id": "Python/30", "fn": "get_positive", "para": "(l: list)", "arg": ["[-1, -2, 4, 5, 6]", "[5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]", "[-1, -2]", "[]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef get_positive(l: list):\n    return [e for e in l if e > 0]\n\nassert get_positive(<FILL_ME>) == [4, 5, 6]\n```", "assert": "[4, 5, 6]", "code": "def get_positive(l: list):\n    return [e for e in l if e > 0]\n"}
{"task_id": "Python/31", "fn": "is_prime", "para": "(n)", "arg": ["6", "101", "11", "13441", "61", "4", "1", "5", "11", "17", "5 * 17", "11 * 7", "13441 * 19"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef is_prime(n):\n    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n\nassert is_prime(<FILL_ME>) == True\n```", "assert": "True", "code": "def is_prime(n):\n    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n"}
{"task_id": "Python/31", "fn": "is_prime", "para": "(n)", "arg": ["6", "101", "11", "13441", "61", "4", "1", "5", "11", "17", "5 * 17", "11 * 7", "13441 * 19"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef is_prime(n):\n    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n\nassert is_prime(<FILL_ME>) == False\n```", "assert": "False", "code": "def is_prime(n):\n    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n"}
{"task_id": "Python/32", "fn": "find_zero", "para": "(xs: list)", "arg": ["poly(coeffs, solution)"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nimport math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n\nassert find_zero(<FILL_ME>) == 1e-4\n```", "assert": "1e-4", "code": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n"}
{"task_id": "Python/33", "fn": "sort_third", "para": "(l: list)", "arg": ["sort_third([1, 2, 3])", "sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])", "sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])", "sort_third([5, 6, 3, 4, 8, 9, 2])", "sort_third([5, 8, 3, 4, 6, 9, 2])", "sort_third([5, 6, 9, 4, 8, 3, 2])", "sort_third([5, 6, 3, 4, 8, 9, 2, 1])"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sort_third(l: list):\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n\nassert sort_third(<FILL_ME>) == tuple([2, 6, 3, 4, 8, 9, 5])\n```", "assert": "tuple([2, 6, 3, 4, 8, 9, 5])", "code": "def sort_third(l: list):\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n"}
{"task_id": "Python/33", "fn": "sort_third", "para": "(l: list)", "arg": ["sort_third([1, 2, 3])", "sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])", "sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])", "sort_third([5, 6, 3, 4, 8, 9, 2])", "sort_third([5, 8, 3, 4, 6, 9, 2])", "sort_third([5, 6, 9, 4, 8, 3, 2])", "sort_third([5, 6, 3, 4, 8, 9, 2, 1])"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sort_third(l: list):\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n\nassert sort_third(<FILL_ME>) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n```", "assert": "tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))", "code": "def sort_third(l: list):\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n"}
{"task_id": "Python/33", "fn": "sort_third", "para": "(l: list)", "arg": ["sort_third([1, 2, 3])", "sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])", "sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])", "sort_third([5, 6, 3, 4, 8, 9, 2])", "sort_third([5, 8, 3, 4, 6, 9, 2])", "sort_third([5, 6, 9, 4, 8, 3, 2])", "sort_third([5, 6, 3, 4, 8, 9, 2, 1])"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sort_third(l: list):\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n\nassert sort_third(<FILL_ME>) == tuple([2, 8, 3, 4, 6, 9, 5])\n```", "assert": "tuple([2, 8, 3, 4, 6, 9, 5])", "code": "def sort_third(l: list):\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n"}
{"task_id": "Python/33", "fn": "sort_third", "para": "(l: list)", "arg": ["sort_third([1, 2, 3])", "sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])", "sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])", "sort_third([5, 6, 3, 4, 8, 9, 2])", "sort_third([5, 8, 3, 4, 6, 9, 2])", "sort_third([5, 6, 9, 4, 8, 3, 2])", "sort_third([5, 6, 3, 4, 8, 9, 2, 1])"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sort_third(l: list):\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n\nassert sort_third(<FILL_ME>) == tuple([2, 6, 9, 4, 8, 3, 5])\n```", "assert": "tuple([2, 6, 9, 4, 8, 3, 5])", "code": "def sort_third(l: list):\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n"}
{"task_id": "Python/33", "fn": "sort_third", "para": "(l: list)", "arg": ["sort_third([1, 2, 3])", "sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])", "sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])", "sort_third([5, 6, 3, 4, 8, 9, 2])", "sort_third([5, 8, 3, 4, 6, 9, 2])", "sort_third([5, 6, 9, 4, 8, 3, 2])", "sort_third([5, 6, 3, 4, 8, 9, 2, 1])"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sort_third(l: list):\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n\nassert sort_third(<FILL_ME>) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n```", "assert": "tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))", "code": "def sort_third(l: list):\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n"}
{"task_id": "Python/33", "fn": "sort_third", "para": "(l: list)", "arg": ["sort_third([1, 2, 3])", "sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])", "sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])", "sort_third([5, 6, 3, 4, 8, 9, 2])", "sort_third([5, 8, 3, 4, 6, 9, 2])", "sort_third([5, 6, 9, 4, 8, 3, 2])", "sort_third([5, 6, 3, 4, 8, 9, 2, 1])"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sort_third(l: list):\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n\nassert sort_third(<FILL_ME>) == tuple(sort_third([1, 2, 3]))\n```", "assert": "tuple(sort_third([1, 2, 3]))", "code": "def sort_third(l: list):\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n"}
{"task_id": "Python/33", "fn": "sort_third", "para": "(l: list)", "arg": ["sort_third([1, 2, 3])", "sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])", "sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])", "sort_third([5, 6, 3, 4, 8, 9, 2])", "sort_third([5, 8, 3, 4, 6, 9, 2])", "sort_third([5, 6, 9, 4, 8, 3, 2])", "sort_third([5, 6, 3, 4, 8, 9, 2, 1])"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sort_third(l: list):\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n\nassert sort_third(<FILL_ME>) == tuple([2, 6, 3, 4, 8, 9, 5, 1])\n```", "assert": "tuple([2, 6, 3, 4, 8, 9, 5, 1])", "code": "def sort_third(l: list):\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n"}
{"task_id": "Python/34", "fn": "unique", "para": "(l: list)", "arg": ["[5, 3, 5, 2, 3, 3, 9, 0, 123]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef unique(l: list):\n    return sorted(list(set(l)))\n\nassert unique(<FILL_ME>) == [0, 2, 3, 5, 9, 123]\n```", "assert": "[0, 2, 3, 5, 9, 123]", "code": "def unique(l: list):\n    return sorted(list(set(l)))\n"}
{"task_id": "Python/35", "fn": "max_element", "para": "(l: list)", "arg": ["[1, 2, 3]", "[5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef max_element(l: list):\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n\nassert max_element(<FILL_ME>) == 3\n```", "assert": "3", "code": "def max_element(l: list):\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n"}
{"task_id": "Python/35", "fn": "max_element", "para": "(l: list)", "arg": ["[1, 2, 3]", "[5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef max_element(l: list):\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n\nassert max_element(<FILL_ME>) == 124\n```", "assert": "124", "code": "def max_element(l: list):\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n"}
{"task_id": "Python/36", "fn": "fizz_buzz", "para": "(n: int)", "arg": ["50", "78", "79", "100", "200", "4000", "10000", "100000"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef fizz_buzz(n: int):\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\nassert fizz_buzz(<FILL_ME>) == 3\n```", "assert": "3", "code": "def fizz_buzz(n: int):\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n"}
{"task_id": "Python/36", "fn": "fizz_buzz", "para": "(n: int)", "arg": ["50", "78", "79", "100", "200", "4000", "10000", "100000"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef fizz_buzz(n: int):\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\nassert fizz_buzz(<FILL_ME>) == 192\n```", "assert": "192", "code": "def fizz_buzz(n: int):\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n"}
{"task_id": "Python/36", "fn": "fizz_buzz", "para": "(n: int)", "arg": ["50", "78", "79", "100", "200", "4000", "10000", "100000"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef fizz_buzz(n: int):\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\nassert fizz_buzz(<FILL_ME>) == 0\n```", "assert": "0", "code": "def fizz_buzz(n: int):\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n"}
{"task_id": "Python/36", "fn": "fizz_buzz", "para": "(n: int)", "arg": ["50", "78", "79", "100", "200", "4000", "10000", "100000"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef fizz_buzz(n: int):\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\nassert fizz_buzz(<FILL_ME>) == 639\n```", "assert": "639", "code": "def fizz_buzz(n: int):\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n"}
{"task_id": "Python/36", "fn": "fizz_buzz", "para": "(n: int)", "arg": ["50", "78", "79", "100", "200", "4000", "10000", "100000"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef fizz_buzz(n: int):\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\nassert fizz_buzz(<FILL_ME>) == 6\n```", "assert": "6", "code": "def fizz_buzz(n: int):\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n"}
{"task_id": "Python/36", "fn": "fizz_buzz", "para": "(n: int)", "arg": ["50", "78", "79", "100", "200", "4000", "10000", "100000"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef fizz_buzz(n: int):\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\nassert fizz_buzz(<FILL_ME>) == 2\n```", "assert": "2", "code": "def fizz_buzz(n: int):\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n"}
{"task_id": "Python/36", "fn": "fizz_buzz", "para": "(n: int)", "arg": ["50", "78", "79", "100", "200", "4000", "10000", "100000"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef fizz_buzz(n: int):\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\nassert fizz_buzz(<FILL_ME>) == 8026\n```", "assert": "8026", "code": "def fizz_buzz(n: int):\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n"}
{"task_id": "Python/37", "fn": "sort_even", "para": "(l: list)", "arg": ["sort_even([1, 2, 3])", "sort_even([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])", "sort_even([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sort_even(l: list):\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n\nassert sort_even(<FILL_ME>) == tuple([1, 2, 3])\n```", "assert": "tuple([1, 2, 3])", "code": "def sort_even(l: list):\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n"}
{"task_id": "Python/37", "fn": "sort_even", "para": "(l: list)", "arg": ["sort_even([1, 2, 3])", "sort_even([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])", "sort_even([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sort_even(l: list):\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n\nassert sort_even(<FILL_ME>) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\n```", "assert": "tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])", "code": "def sort_even(l: list):\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n"}
{"task_id": "Python/37", "fn": "sort_even", "para": "(l: list)", "arg": ["sort_even([1, 2, 3])", "sort_even([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])", "sort_even([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sort_even(l: list):\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n\nassert sort_even(<FILL_ME>) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n```", "assert": "tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])", "code": "def sort_even(l: list):\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n"}
{"task_id": "Python/38", "fn": "decode_cyclic", "para": "(s: str)", "arg": ["encoded_str"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    return encode_cyclic(encode_cyclic(s))\n\nassert decode_cyclic(<FILL_ME>) == str\n```", "assert": "str", "code": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    return encode_cyclic(encode_cyclic(s))\n"}
{"task_id": "Python/39", "fn": "prime_fib", "para": "(n: int)", "arg": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n\nassert prime_fib(<FILL_ME>) == 13\n```", "assert": "13", "code": "def prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n"}
{"task_id": "Python/39", "fn": "prime_fib", "para": "(n: int)", "arg": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n\nassert prime_fib(<FILL_ME>) == 3\n```", "assert": "3", "code": "def prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n"}
{"task_id": "Python/39", "fn": "prime_fib", "para": "(n: int)", "arg": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n\nassert prime_fib(<FILL_ME>) == 233\n```", "assert": "233", "code": "def prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n"}
{"task_id": "Python/39", "fn": "prime_fib", "para": "(n: int)", "arg": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n\nassert prime_fib(<FILL_ME>) == 433494437\n```", "assert": "433494437", "code": "def prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n"}
{"task_id": "Python/39", "fn": "prime_fib", "para": "(n: int)", "arg": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n\nassert prime_fib(<FILL_ME>) == 1597\n```", "assert": "1597", "code": "def prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n"}
{"task_id": "Python/39", "fn": "prime_fib", "para": "(n: int)", "arg": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n\nassert prime_fib(<FILL_ME>) == 28657\n```", "assert": "28657", "code": "def prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n"}
{"task_id": "Python/39", "fn": "prime_fib", "para": "(n: int)", "arg": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n\nassert prime_fib(<FILL_ME>) == 514229\n```", "assert": "514229", "code": "def prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n"}
{"task_id": "Python/39", "fn": "prime_fib", "para": "(n: int)", "arg": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n\nassert prime_fib(<FILL_ME>) == 2\n```", "assert": "2", "code": "def prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n"}
{"task_id": "Python/39", "fn": "prime_fib", "para": "(n: int)", "arg": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n\nassert prime_fib(<FILL_ME>) == 89\n```", "assert": "89", "code": "def prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n"}
{"task_id": "Python/39", "fn": "prime_fib", "para": "(n: int)", "arg": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n\nassert prime_fib(<FILL_ME>) == 5\n```", "assert": "5", "code": "def prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n"}
{"task_id": "Python/40", "fn": "triples_sum_to_zero", "para": "(l: list)", "arg": ["[1, 3, 5, 0]", "[1, 3, 5, -1]", "[1, 3, -2, 1]", "[1, 2, 3, 7]", "[1, 2, 5, 7]", "[2, 4, -5, 3, 9, 7]", "[1]", "[1, 3, 5, -100]", "[100, 3, 5, -100]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\nassert triples_sum_to_zero(<FILL_ME>) == True\n```", "assert": "True", "code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"}
{"task_id": "Python/40", "fn": "triples_sum_to_zero", "para": "(l: list)", "arg": ["[1, 3, 5, 0]", "[1, 3, 5, -1]", "[1, 3, -2, 1]", "[1, 2, 3, 7]", "[1, 2, 5, 7]", "[2, 4, -5, 3, 9, 7]", "[1]", "[1, 3, 5, -100]", "[100, 3, 5, -100]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\nassert triples_sum_to_zero(<FILL_ME>) == False\n```", "assert": "False", "code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"}
{"task_id": "Python/41", "fn": "car_race_collision", "para": "(n: int)", "arg": ["2", "3", "4", "8", "10"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef car_race_collision(n: int):\n    return n**2\n\nassert car_race_collision(<FILL_ME>) == 64\n```", "assert": "64", "code": "def car_race_collision(n: int):\n    return n**2\n"}
{"task_id": "Python/41", "fn": "car_race_collision", "para": "(n: int)", "arg": ["2", "3", "4", "8", "10"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef car_race_collision(n: int):\n    return n**2\n\nassert car_race_collision(<FILL_ME>) == 100\n```", "assert": "100", "code": "def car_race_collision(n: int):\n    return n**2\n"}
{"task_id": "Python/41", "fn": "car_race_collision", "para": "(n: int)", "arg": ["2", "3", "4", "8", "10"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef car_race_collision(n: int):\n    return n**2\n\nassert car_race_collision(<FILL_ME>) == 4\n```", "assert": "4", "code": "def car_race_collision(n: int):\n    return n**2\n"}
{"task_id": "Python/41", "fn": "car_race_collision", "para": "(n: int)", "arg": ["2", "3", "4", "8", "10"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef car_race_collision(n: int):\n    return n**2\n\nassert car_race_collision(<FILL_ME>) == 9\n```", "assert": "9", "code": "def car_race_collision(n: int):\n    return n**2\n"}
{"task_id": "Python/41", "fn": "car_race_collision", "para": "(n: int)", "arg": ["2", "3", "4", "8", "10"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef car_race_collision(n: int):\n    return n**2\n\nassert car_race_collision(<FILL_ME>) == 16\n```", "assert": "16", "code": "def car_race_collision(n: int):\n    return n**2\n"}
{"task_id": "Python/42", "fn": "incr_list", "para": "(l: list)", "arg": ["[]", "[3, 2, 1]", "[5, 2, 5, 2, 3, 3, 9, 0, 123]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef incr_list(l: list):\n    return [(e + 1) for e in l]\n\nassert incr_list(<FILL_ME>) == []\n```", "assert": "[]", "code": "def incr_list(l: list):\n    return [(e + 1) for e in l]\n"}
{"task_id": "Python/42", "fn": "incr_list", "para": "(l: list)", "arg": ["[]", "[3, 2, 1]", "[5, 2, 5, 2, 3, 3, 9, 0, 123]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef incr_list(l: list):\n    return [(e + 1) for e in l]\n\nassert incr_list(<FILL_ME>) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n```", "assert": "[6, 3, 6, 3, 4, 4, 10, 1, 124]", "code": "def incr_list(l: list):\n    return [(e + 1) for e in l]\n"}
{"task_id": "Python/42", "fn": "incr_list", "para": "(l: list)", "arg": ["[]", "[3, 2, 1]", "[5, 2, 5, 2, 3, 3, 9, 0, 123]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef incr_list(l: list):\n    return [(e + 1) for e in l]\n\nassert incr_list(<FILL_ME>) == [4, 3, 2]\n```", "assert": "[4, 3, 2]", "code": "def incr_list(l: list):\n    return [(e + 1) for e in l]\n"}
{"task_id": "Python/43", "fn": "pairs_sum_to_zero", "para": "(l)", "arg": ["[1, 3, 5, 0]", "[1, 3, -2, 1]", "[1, 2, 3, 7]", "[2, 4, -5, 3, 5, 7]", "[1]", "[-3, 9, -1, 3, 2, 30]", "[-3, 9, -1, 3, 2, 31]", "[-3, 9, -1, 4, 2, 30]", "[-3, 9, -1, 4, 2, 31]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef pairs_sum_to_zero(l):\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n\nassert pairs_sum_to_zero(<FILL_ME>) == True\n```", "assert": "True", "code": "def pairs_sum_to_zero(l):\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n"}
{"task_id": "Python/43", "fn": "pairs_sum_to_zero", "para": "(l)", "arg": ["[1, 3, 5, 0]", "[1, 3, -2, 1]", "[1, 2, 3, 7]", "[2, 4, -5, 3, 5, 7]", "[1]", "[-3, 9, -1, 3, 2, 30]", "[-3, 9, -1, 3, 2, 31]", "[-3, 9, -1, 4, 2, 30]", "[-3, 9, -1, 4, 2, 31]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef pairs_sum_to_zero(l):\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n\nassert pairs_sum_to_zero(<FILL_ME>) == False\n```", "assert": "False", "code": "def pairs_sum_to_zero(l):\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n"}
{"task_id": "Python/44", "fn": "change_base", "para": "(x: int, base: int)", "arg": ["8, 3", "9, 3", "234, 2", "16, 2", "8, 2", "7, 2", "x, x + 1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef change_base(x: int, base: int):\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n\nassert change_base(<FILL_ME>) == \"1000\"\n```", "assert": "\"1000\"", "code": "def change_base(x: int, base: int):\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n"}
{"task_id": "Python/44", "fn": "change_base", "para": "(x: int, base: int)", "arg": ["8, 3", "9, 3", "234, 2", "16, 2", "8, 2", "7, 2", "x, x + 1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef change_base(x: int, base: int):\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n\nassert change_base(<FILL_ME>) == \"10000\"\n```", "assert": "\"10000\"", "code": "def change_base(x: int, base: int):\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n"}
{"task_id": "Python/44", "fn": "change_base", "para": "(x: int, base: int)", "arg": ["8, 3", "9, 3", "234, 2", "16, 2", "8, 2", "7, 2", "x, x + 1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef change_base(x: int, base: int):\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n\nassert change_base(<FILL_ME>) == \"22\"\n```", "assert": "\"22\"", "code": "def change_base(x: int, base: int):\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n"}
{"task_id": "Python/44", "fn": "change_base", "para": "(x: int, base: int)", "arg": ["8, 3", "9, 3", "234, 2", "16, 2", "8, 2", "7, 2", "x, x + 1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef change_base(x: int, base: int):\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n\nassert change_base(<FILL_ME>) == str(x)\n```", "assert": "str(x)", "code": "def change_base(x: int, base: int):\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n"}
{"task_id": "Python/44", "fn": "change_base", "para": "(x: int, base: int)", "arg": ["8, 3", "9, 3", "234, 2", "16, 2", "8, 2", "7, 2", "x, x + 1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef change_base(x: int, base: int):\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n\nassert change_base(<FILL_ME>) == \"100\"\n```", "assert": "\"100\"", "code": "def change_base(x: int, base: int):\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n"}
{"task_id": "Python/44", "fn": "change_base", "para": "(x: int, base: int)", "arg": ["8, 3", "9, 3", "234, 2", "16, 2", "8, 2", "7, 2", "x, x + 1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef change_base(x: int, base: int):\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n\nassert change_base(<FILL_ME>) == \"11101010\"\n```", "assert": "\"11101010\"", "code": "def change_base(x: int, base: int):\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n"}
{"task_id": "Python/44", "fn": "change_base", "para": "(x: int, base: int)", "arg": ["8, 3", "9, 3", "234, 2", "16, 2", "8, 2", "7, 2", "x, x + 1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef change_base(x: int, base: int):\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n\nassert change_base(<FILL_ME>) == \"111\"\n```", "assert": "\"111\"", "code": "def change_base(x: int, base: int):\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n"}
{"task_id": "Python/45", "fn": "triangle_area", "para": "(a, h)", "arg": ["5, 3", "2, 2", "10, 8"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef triangle_area(a, h):\n    return a * h / 2.0\n\nassert triangle_area(<FILL_ME>) == 40.0\n```", "assert": "40.0", "code": "def triangle_area(a, h):\n    return a * h / 2.0\n"}
{"task_id": "Python/45", "fn": "triangle_area", "para": "(a, h)", "arg": ["5, 3", "2, 2", "10, 8"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef triangle_area(a, h):\n    return a * h / 2.0\n\nassert triangle_area(<FILL_ME>) == 2.0\n```", "assert": "2.0", "code": "def triangle_area(a, h):\n    return a * h / 2.0\n"}
{"task_id": "Python/45", "fn": "triangle_area", "para": "(a, h)", "arg": ["5, 3", "2, 2", "10, 8"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef triangle_area(a, h):\n    return a * h / 2.0\n\nassert triangle_area(<FILL_ME>) == 7.5\n```", "assert": "7.5", "code": "def triangle_area(a, h):\n    return a * h / 2.0\n"}
{"task_id": "Python/46", "fn": "fib4", "para": "(n: int)", "arg": ["5", "8", "10", "12"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef fib4(n: int):\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n\nassert fib4(<FILL_ME>) == 28\n```", "assert": "28", "code": "def fib4(n: int):\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n"}
{"task_id": "Python/46", "fn": "fib4", "para": "(n: int)", "arg": ["5", "8", "10", "12"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef fib4(n: int):\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n\nassert fib4(<FILL_ME>) == 386\n```", "assert": "386", "code": "def fib4(n: int):\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n"}
{"task_id": "Python/46", "fn": "fib4", "para": "(n: int)", "arg": ["5", "8", "10", "12"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef fib4(n: int):\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n\nassert fib4(<FILL_ME>) == 4\n```", "assert": "4", "code": "def fib4(n: int):\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n"}
{"task_id": "Python/46", "fn": "fib4", "para": "(n: int)", "arg": ["5", "8", "10", "12"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef fib4(n: int):\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n\nassert fib4(<FILL_ME>) == 104\n```", "assert": "104", "code": "def fib4(n: int):\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n"}
{"task_id": "Python/47", "fn": "median", "para": "(l: list)", "arg": ["[3, 1, 2, 4, 5]", "[-10, 4, 6, 1000, 10, 20]", "[5]", "[6, 5]", "[8, 1, 3, 9, 9, 2, 7]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef median(l: list):\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n\nassert median(<FILL_ME>) == 3\n```", "assert": "3", "code": "def median(l: list):\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n"}
{"task_id": "Python/47", "fn": "median", "para": "(l: list)", "arg": ["[3, 1, 2, 4, 5]", "[-10, 4, 6, 1000, 10, 20]", "[5]", "[6, 5]", "[8, 1, 3, 9, 9, 2, 7]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef median(l: list):\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n\nassert median(<FILL_ME>) == 5.5\n```", "assert": "5.5", "code": "def median(l: list):\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n"}
{"task_id": "Python/47", "fn": "median", "para": "(l: list)", "arg": ["[3, 1, 2, 4, 5]", "[-10, 4, 6, 1000, 10, 20]", "[5]", "[6, 5]", "[8, 1, 3, 9, 9, 2, 7]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef median(l: list):\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n\nassert median(<FILL_ME>) == 7\n```", "assert": "7", "code": "def median(l: list):\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n"}
{"task_id": "Python/47", "fn": "median", "para": "(l: list)", "arg": ["[3, 1, 2, 4, 5]", "[-10, 4, 6, 1000, 10, 20]", "[5]", "[6, 5]", "[8, 1, 3, 9, 9, 2, 7]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef median(l: list):\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n\nassert median(<FILL_ME>) == 8.0\n```", "assert": "8.0", "code": "def median(l: list):\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n"}
{"task_id": "Python/47", "fn": "median", "para": "(l: list)", "arg": ["[3, 1, 2, 4, 5]", "[-10, 4, 6, 1000, 10, 20]", "[5]", "[6, 5]", "[8, 1, 3, 9, 9, 2, 7]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef median(l: list):\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n\nassert median(<FILL_ME>) == 5\n```", "assert": "5", "code": "def median(l: list):\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n"}
{"task_id": "Python/48", "fn": "is_palindrome", "para": "(text: str)", "arg": ["''", "'aba'", "'aaaaa'", "'zbcd'", "'xywyx'", "'xywyz'", "'xywzx'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef is_palindrome(text: str):\n    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n\nassert is_palindrome(<FILL_ME>) == True\n```", "assert": "True", "code": "def is_palindrome(text: str):\n    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n"}
{"task_id": "Python/48", "fn": "is_palindrome", "para": "(text: str)", "arg": ["''", "'aba'", "'aaaaa'", "'zbcd'", "'xywyx'", "'xywyz'", "'xywzx'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef is_palindrome(text: str):\n    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n\nassert is_palindrome(<FILL_ME>) == False\n```", "assert": "False", "code": "def is_palindrome(text: str):\n    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n"}
{"task_id": "Python/49", "fn": "modp", "para": "(n: int, p: int)", "arg": ["3, 5", "1101, 101", "0, 101", "3, 11", "100, 101", "30, 5", "31, 5"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef modp(n: int, p: int):\n    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n\nassert modp(<FILL_ME>) == 3\n```", "assert": "3", "code": "def modp(n: int, p: int):\n    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n"}
{"task_id": "Python/49", "fn": "modp", "para": "(n: int, p: int)", "arg": ["3, 5", "1101, 101", "0, 101", "3, 11", "100, 101", "30, 5", "31, 5"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef modp(n: int, p: int):\n    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n\nassert modp(<FILL_ME>) == 2\n```", "assert": "2", "code": "def modp(n: int, p: int):\n    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n"}
{"task_id": "Python/49", "fn": "modp", "para": "(n: int, p: int)", "arg": ["3, 5", "1101, 101", "0, 101", "3, 11", "100, 101", "30, 5", "31, 5"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef modp(n: int, p: int):\n    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n\nassert modp(<FILL_ME>) == 4\n```", "assert": "4", "code": "def modp(n: int, p: int):\n    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n"}
{"task_id": "Python/49", "fn": "modp", "para": "(n: int, p: int)", "arg": ["3, 5", "1101, 101", "0, 101", "3, 11", "100, 101", "30, 5", "31, 5"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef modp(n: int, p: int):\n    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n\nassert modp(<FILL_ME>) == 1\n```", "assert": "1", "code": "def modp(n: int, p: int):\n    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n"}
{"task_id": "Python/49", "fn": "modp", "para": "(n: int, p: int)", "arg": ["3, 5", "1101, 101", "0, 101", "3, 11", "100, 101", "30, 5", "31, 5"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef modp(n: int, p: int):\n    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n\nassert modp(<FILL_ME>) == 8\n```", "assert": "8", "code": "def modp(n: int, p: int):\n    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n"}
{"task_id": "Python/50", "fn": "decode_shift", "para": "(s: str)", "arg": ["copy.deepcopy(encoded_str)"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\nassert decode_shift(<FILL_ME>) == str\n```", "assert": "str", "code": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"}
{"task_id": "Python/51", "fn": "remove_vowels", "para": "(text)", "arg": ["''", "\"abcdef\\nghijklm\"", "'fedcba'", "'eeeee'", "'acBAA'", "'EcBOO'", "'ybcd'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef remove_vowels(text):\n    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n\nassert remove_vowels(<FILL_ME>) == 'cB'\n```", "assert": "'cB'", "code": "def remove_vowels(text):\n    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n"}
{"task_id": "Python/51", "fn": "remove_vowels", "para": "(text)", "arg": ["''", "\"abcdef\\nghijklm\"", "'fedcba'", "'eeeee'", "'acBAA'", "'EcBOO'", "'ybcd'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef remove_vowels(text):\n    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n\nassert remove_vowels(<FILL_ME>) == 'ybcd'\n```", "assert": "'ybcd'", "code": "def remove_vowels(text):\n    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n"}
{"task_id": "Python/51", "fn": "remove_vowels", "para": "(text)", "arg": ["''", "\"abcdef\\nghijklm\"", "'fedcba'", "'eeeee'", "'acBAA'", "'EcBOO'", "'ybcd'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef remove_vowels(text):\n    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n\nassert remove_vowels(<FILL_ME>) == ''\n```", "assert": "''", "code": "def remove_vowels(text):\n    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n"}
{"task_id": "Python/51", "fn": "remove_vowels", "para": "(text)", "arg": ["''", "\"abcdef\\nghijklm\"", "'fedcba'", "'eeeee'", "'acBAA'", "'EcBOO'", "'ybcd'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef remove_vowels(text):\n    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n\nassert remove_vowels(<FILL_ME>) == 'bcdf\\nghjklm'\n```", "assert": "'bcdf\\nghjklm'", "code": "def remove_vowels(text):\n    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n"}
{"task_id": "Python/51", "fn": "remove_vowels", "para": "(text)", "arg": ["''", "\"abcdef\\nghijklm\"", "'fedcba'", "'eeeee'", "'acBAA'", "'EcBOO'", "'ybcd'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef remove_vowels(text):\n    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n\nassert remove_vowels(<FILL_ME>) == 'fdcb'\n```", "assert": "'fdcb'", "code": "def remove_vowels(text):\n    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n"}
{"task_id": "Python/52", "fn": "below_threshold", "para": "(l: list, t: int)", "arg": [null, null, null, null, null, null], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef below_threshold(l: list, t: int):\n    for e in l:\n        if e >= t:\n            return False\n    return True\n\nassert below_threshold(<FILL_ME>) == None\n```", "assert": null, "code": "def below_threshold(l: list, t: int):\n    for e in l:\n        if e >= t:\n            return False\n    return True\n"}
{"task_id": "Python/53", "fn": "add", "para": "(x: int, y: int)", "arg": ["0, 1", "1, 0", "2, 3", "5, 7", "7, 5", "x, y"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef add(x: int, y: int):\n    return x + y\n\nassert add(<FILL_ME>) == 5\n```", "assert": "5", "code": "def add(x: int, y: int):\n    return x + y\n"}
{"task_id": "Python/53", "fn": "add", "para": "(x: int, y: int)", "arg": ["0, 1", "1, 0", "2, 3", "5, 7", "7, 5", "x, y"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef add(x: int, y: int):\n    return x + y\n\nassert add(<FILL_ME>) == 12\n```", "assert": "12", "code": "def add(x: int, y: int):\n    return x + y\n"}
{"task_id": "Python/53", "fn": "add", "para": "(x: int, y: int)", "arg": ["0, 1", "1, 0", "2, 3", "5, 7", "7, 5", "x, y"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef add(x: int, y: int):\n    return x + y\n\nassert add(<FILL_ME>) == 1\n```", "assert": "1", "code": "def add(x: int, y: int):\n    return x + y\n"}
{"task_id": "Python/53", "fn": "add", "para": "(x: int, y: int)", "arg": ["0, 1", "1, 0", "2, 3", "5, 7", "7, 5", "x, y"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef add(x: int, y: int):\n    return x + y\n\nassert add(<FILL_ME>) == x + y\n```", "assert": "x + y", "code": "def add(x: int, y: int):\n    return x + y\n"}
{"task_id": "Python/54", "fn": "same_chars", "para": "(s0: str, s1: str)", "arg": ["'eabcdzzzz', 'dddzzzzzzzddeddabc'", "'abcd', 'dddddddabc'", "'dddddddabc', 'abcd'", "'eabcd', 'dddddddabc'", "'abcd', 'dddddddabcf'", "'eabcdzzzz', 'dddzzzzzzzddddabc'", "'aabb', 'aaccc'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)\n\nassert same_chars(<FILL_ME>) == True\n```", "assert": "True", "code": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)\n"}
{"task_id": "Python/54", "fn": "same_chars", "para": "(s0: str, s1: str)", "arg": ["'eabcdzzzz', 'dddzzzzzzzddeddabc'", "'abcd', 'dddddddabc'", "'dddddddabc', 'abcd'", "'eabcd', 'dddddddabc'", "'abcd', 'dddddddabcf'", "'eabcdzzzz', 'dddzzzzzzzddddabc'", "'aabb', 'aaccc'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)\n\nassert same_chars(<FILL_ME>) == False\n```", "assert": "False", "code": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)\n"}
{"task_id": "Python/55", "fn": "fib", "para": "(n: int)", "arg": ["10", "1", "8", "11", "12"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\nassert fib(<FILL_ME>) == 21\n```", "assert": "21", "code": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n"}
{"task_id": "Python/55", "fn": "fib", "para": "(n: int)", "arg": ["10", "1", "8", "11", "12"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\nassert fib(<FILL_ME>) == 144\n```", "assert": "144", "code": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n"}
{"task_id": "Python/55", "fn": "fib", "para": "(n: int)", "arg": ["10", "1", "8", "11", "12"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\nassert fib(<FILL_ME>) == 55\n```", "assert": "55", "code": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n"}
{"task_id": "Python/55", "fn": "fib", "para": "(n: int)", "arg": ["10", "1", "8", "11", "12"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\nassert fib(<FILL_ME>) == 89\n```", "assert": "89", "code": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n"}
{"task_id": "Python/55", "fn": "fib", "para": "(n: int)", "arg": ["10", "1", "8", "11", "12"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\nassert fib(<FILL_ME>) == 1\n```", "assert": "1", "code": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n"}
{"task_id": "Python/56", "fn": "correct_bracketing", "para": "(brackets: str)", "arg": [null, null, null, null, null, null, null, null, null, null, null, null], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef correct_bracketing(brackets: str):\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n\nassert correct_bracketing(<FILL_ME>) == None\n```", "assert": null, "code": "def correct_bracketing(brackets: str):\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n"}
{"task_id": "Python/57", "fn": "monotonic", "para": "(l: list)", "arg": ["[1, 2, 4, 10]", "[1, 2, 4, 20]", "[1, 20, 4, 10]", "[4, 1, 0, -10]", "[4, 1, 1, 0]", "[1, 2, 3, 2, 5, 60]", "[1, 2, 3, 4, 5, 60]", "[9, 9, 9, 9]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef monotonic(l: list):\n    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n\nassert monotonic(<FILL_ME>) == True\n```", "assert": "True", "code": "def monotonic(l: list):\n    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n"}
{"task_id": "Python/57", "fn": "monotonic", "para": "(l: list)", "arg": ["[1, 2, 4, 10]", "[1, 2, 4, 20]", "[1, 20, 4, 10]", "[4, 1, 0, -10]", "[4, 1, 1, 0]", "[1, 2, 3, 2, 5, 60]", "[1, 2, 3, 4, 5, 60]", "[9, 9, 9, 9]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef monotonic(l: list):\n    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n\nassert monotonic(<FILL_ME>) == False\n```", "assert": "False", "code": "def monotonic(l: list):\n    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n"}
{"task_id": "Python/58", "fn": "common", "para": "(l1: list, l2: list)", "arg": ["[1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]", "[5, 3, 2, 8], [3, 2]", "[4, 3, 2, 8], [3, 2, 4]", "[4, 3, 2, 8], []"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef common(l1: list, l2: list):\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n\nassert common(<FILL_ME>) == [2, 3]\n```", "assert": "[2, 3]", "code": "def common(l1: list, l2: list):\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n"}
{"task_id": "Python/58", "fn": "common", "para": "(l1: list, l2: list)", "arg": ["[1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]", "[5, 3, 2, 8], [3, 2]", "[4, 3, 2, 8], [3, 2, 4]", "[4, 3, 2, 8], []"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef common(l1: list, l2: list):\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n\nassert common(<FILL_ME>) == []\n```", "assert": "[]", "code": "def common(l1: list, l2: list):\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n"}
{"task_id": "Python/58", "fn": "common", "para": "(l1: list, l2: list)", "arg": ["[1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]", "[5, 3, 2, 8], [3, 2]", "[4, 3, 2, 8], [3, 2, 4]", "[4, 3, 2, 8], []"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef common(l1: list, l2: list):\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n\nassert common(<FILL_ME>) == [1, 5, 653]\n```", "assert": "[1, 5, 653]", "code": "def common(l1: list, l2: list):\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n"}
{"task_id": "Python/58", "fn": "common", "para": "(l1: list, l2: list)", "arg": ["[1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]", "[5, 3, 2, 8], [3, 2]", "[4, 3, 2, 8], [3, 2, 4]", "[4, 3, 2, 8], []"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef common(l1: list, l2: list):\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n\nassert common(<FILL_ME>) == [2, 3, 4]\n```", "assert": "[2, 3, 4]", "code": "def common(l1: list, l2: list):\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n"}
{"task_id": "Python/59", "fn": "largest_prime_factor", "para": "(n: int)", "arg": ["15", "27", "63", "330", "13195"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef largest_prime_factor(n: int):\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n\nassert largest_prime_factor(<FILL_ME>) == 11\n```", "assert": "11", "code": "def largest_prime_factor(n: int):\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n"}
{"task_id": "Python/59", "fn": "largest_prime_factor", "para": "(n: int)", "arg": ["15", "27", "63", "330", "13195"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef largest_prime_factor(n: int):\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n\nassert largest_prime_factor(<FILL_ME>) == 3\n```", "assert": "3", "code": "def largest_prime_factor(n: int):\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n"}
{"task_id": "Python/59", "fn": "largest_prime_factor", "para": "(n: int)", "arg": ["15", "27", "63", "330", "13195"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef largest_prime_factor(n: int):\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n\nassert largest_prime_factor(<FILL_ME>) == 7\n```", "assert": "7", "code": "def largest_prime_factor(n: int):\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n"}
{"task_id": "Python/59", "fn": "largest_prime_factor", "para": "(n: int)", "arg": ["15", "27", "63", "330", "13195"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef largest_prime_factor(n: int):\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n\nassert largest_prime_factor(<FILL_ME>) == 29\n```", "assert": "29", "code": "def largest_prime_factor(n: int):\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n"}
{"task_id": "Python/59", "fn": "largest_prime_factor", "para": "(n: int)", "arg": ["15", "27", "63", "330", "13195"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef largest_prime_factor(n: int):\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n\nassert largest_prime_factor(<FILL_ME>) == 5\n```", "assert": "5", "code": "def largest_prime_factor(n: int):\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n"}
{"task_id": "Python/60", "fn": "sum_to_n", "para": "(n: int)", "arg": ["1", "6", "11", "30", "100"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sum_to_n(n: int):\n    return sum(range(n + 1))\n\nassert sum_to_n(<FILL_ME>) == 5050\n```", "assert": "5050", "code": "def sum_to_n(n: int):\n    return sum(range(n + 1))\n"}
{"task_id": "Python/60", "fn": "sum_to_n", "para": "(n: int)", "arg": ["1", "6", "11", "30", "100"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sum_to_n(n: int):\n    return sum(range(n + 1))\n\nassert sum_to_n(<FILL_ME>) == 21\n```", "assert": "21", "code": "def sum_to_n(n: int):\n    return sum(range(n + 1))\n"}
{"task_id": "Python/60", "fn": "sum_to_n", "para": "(n: int)", "arg": ["1", "6", "11", "30", "100"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sum_to_n(n: int):\n    return sum(range(n + 1))\n\nassert sum_to_n(<FILL_ME>) == 1\n```", "assert": "1", "code": "def sum_to_n(n: int):\n    return sum(range(n + 1))\n"}
{"task_id": "Python/60", "fn": "sum_to_n", "para": "(n: int)", "arg": ["1", "6", "11", "30", "100"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sum_to_n(n: int):\n    return sum(range(n + 1))\n\nassert sum_to_n(<FILL_ME>) == 66\n```", "assert": "66", "code": "def sum_to_n(n: int):\n    return sum(range(n + 1))\n"}
{"task_id": "Python/60", "fn": "sum_to_n", "para": "(n: int)", "arg": ["1", "6", "11", "30", "100"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sum_to_n(n: int):\n    return sum(range(n + 1))\n\nassert sum_to_n(<FILL_ME>) == 465\n```", "assert": "465", "code": "def sum_to_n(n: int):\n    return sum(range(n + 1))\n"}
{"task_id": "Python/61", "fn": "correct_bracketing", "para": "(brackets: str)", "arg": [null, null, null, null, null, null, null, null, null, null, null, null], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef correct_bracketing(brackets: str):\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n\nassert correct_bracketing(<FILL_ME>) == None\n```", "assert": null, "code": "def correct_bracketing(brackets: str):\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n"}
{"task_id": "Python/62", "fn": "derivative", "para": "(xs: list)", "arg": ["[3, 1, 2, 4, 5]", "[1, 2, 3]", "[3, 2, 1]", "[3, 2, 1, 0, 4]", "[1]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef derivative(xs: list):\n    return [(i * x) for i, x in enumerate(xs)][1:]\n\nassert derivative(<FILL_ME>) == [2, 2]\n```", "assert": "[2, 2]", "code": "def derivative(xs: list):\n    return [(i * x) for i, x in enumerate(xs)][1:]\n"}
{"task_id": "Python/62", "fn": "derivative", "para": "(xs: list)", "arg": ["[3, 1, 2, 4, 5]", "[1, 2, 3]", "[3, 2, 1]", "[3, 2, 1, 0, 4]", "[1]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef derivative(xs: list):\n    return [(i * x) for i, x in enumerate(xs)][1:]\n\nassert derivative(<FILL_ME>) == [2, 2, 0, 16]\n```", "assert": "[2, 2, 0, 16]", "code": "def derivative(xs: list):\n    return [(i * x) for i, x in enumerate(xs)][1:]\n"}
{"task_id": "Python/62", "fn": "derivative", "para": "(xs: list)", "arg": ["[3, 1, 2, 4, 5]", "[1, 2, 3]", "[3, 2, 1]", "[3, 2, 1, 0, 4]", "[1]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef derivative(xs: list):\n    return [(i * x) for i, x in enumerate(xs)][1:]\n\nassert derivative(<FILL_ME>) == [1, 4, 12, 20]\n```", "assert": "[1, 4, 12, 20]", "code": "def derivative(xs: list):\n    return [(i * x) for i, x in enumerate(xs)][1:]\n"}
{"task_id": "Python/62", "fn": "derivative", "para": "(xs: list)", "arg": ["[3, 1, 2, 4, 5]", "[1, 2, 3]", "[3, 2, 1]", "[3, 2, 1, 0, 4]", "[1]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef derivative(xs: list):\n    return [(i * x) for i, x in enumerate(xs)][1:]\n\nassert derivative(<FILL_ME>) == []\n```", "assert": "[]", "code": "def derivative(xs: list):\n    return [(i * x) for i, x in enumerate(xs)][1:]\n"}
{"task_id": "Python/62", "fn": "derivative", "para": "(xs: list)", "arg": ["[3, 1, 2, 4, 5]", "[1, 2, 3]", "[3, 2, 1]", "[3, 2, 1, 0, 4]", "[1]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef derivative(xs: list):\n    return [(i * x) for i, x in enumerate(xs)][1:]\n\nassert derivative(<FILL_ME>) == [2, 6]\n```", "assert": "[2, 6]", "code": "def derivative(xs: list):\n    return [(i * x) for i, x in enumerate(xs)][1:]\n"}
{"task_id": "Python/63", "fn": "fibfib", "para": "(n: int)", "arg": ["2", "1", "5", "8", "10", "12", "14"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\nassert fibfib(<FILL_ME>) == 81\n```", "assert": "81", "code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n"}
{"task_id": "Python/63", "fn": "fibfib", "para": "(n: int)", "arg": ["2", "1", "5", "8", "10", "12", "14"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\nassert fibfib(<FILL_ME>) == 0\n```", "assert": "0", "code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n"}
{"task_id": "Python/63", "fn": "fibfib", "para": "(n: int)", "arg": ["2", "1", "5", "8", "10", "12", "14"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\nassert fibfib(<FILL_ME>) == 927\n```", "assert": "927", "code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n"}
{"task_id": "Python/63", "fn": "fibfib", "para": "(n: int)", "arg": ["2", "1", "5", "8", "10", "12", "14"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\nassert fibfib(<FILL_ME>) == 24\n```", "assert": "24", "code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n"}
{"task_id": "Python/63", "fn": "fibfib", "para": "(n: int)", "arg": ["2", "1", "5", "8", "10", "12", "14"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\nassert fibfib(<FILL_ME>) == 274\n```", "assert": "274", "code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n"}
{"task_id": "Python/63", "fn": "fibfib", "para": "(n: int)", "arg": ["2", "1", "5", "8", "10", "12", "14"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\nassert fibfib(<FILL_ME>) == 4\n```", "assert": "4", "code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n"}
{"task_id": "Python/63", "fn": "fibfib", "para": "(n: int)", "arg": ["2", "1", "5", "8", "10", "12", "14"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\nassert fibfib(<FILL_ME>) == 1\n```", "assert": "1", "code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n"}
{"task_id": "Python/64", "fn": "vowels_count", "para": "(s)", "arg": ["\"abcde\"", "\"Alone\"", "\"key\"", "\"bye\"", "\"keY\"", "\"bYe\"", "\"ACEDY\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n\nassert vowels_count(<FILL_ME>) == 3\n```", "assert": "3", "code": "FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n"}
{"task_id": "Python/64", "fn": "vowels_count", "para": "(s)", "arg": ["\"abcde\"", "\"Alone\"", "\"key\"", "\"bye\"", "\"keY\"", "\"bYe\"", "\"ACEDY\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n\nassert vowels_count(<FILL_ME>) == 2\n```", "assert": "2", "code": "FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n"}
{"task_id": "Python/64", "fn": "vowels_count", "para": "(s)", "arg": ["\"abcde\"", "\"Alone\"", "\"key\"", "\"bye\"", "\"keY\"", "\"bYe\"", "\"ACEDY\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n\nassert vowels_count(<FILL_ME>) == 1\n```", "assert": "1", "code": "FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n"}
{"task_id": "Python/65", "fn": "circular_shift", "para": "(x, shift)", "arg": ["100, 2", "12, 2", "97, 8", "12, 1", "11, 101"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef circular_shift(x, shift):\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n\nassert circular_shift(<FILL_ME>) == \"79\"\n```", "assert": "\"79\"", "code": "def circular_shift(x, shift):\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n"}
{"task_id": "Python/65", "fn": "circular_shift", "para": "(x, shift)", "arg": ["100, 2", "12, 2", "97, 8", "12, 1", "11, 101"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef circular_shift(x, shift):\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n\nassert circular_shift(<FILL_ME>) == \"21\"\n```", "assert": "\"21\"", "code": "def circular_shift(x, shift):\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n"}
{"task_id": "Python/65", "fn": "circular_shift", "para": "(x, shift)", "arg": ["100, 2", "12, 2", "97, 8", "12, 1", "11, 101"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef circular_shift(x, shift):\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n\nassert circular_shift(<FILL_ME>) == \"11\"\n```", "assert": "\"11\"", "code": "def circular_shift(x, shift):\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n"}
{"task_id": "Python/65", "fn": "circular_shift", "para": "(x, shift)", "arg": ["100, 2", "12, 2", "97, 8", "12, 1", "11, 101"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef circular_shift(x, shift):\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n\nassert circular_shift(<FILL_ME>) == \"12\"\n```", "assert": "\"12\"", "code": "def circular_shift(x, shift):\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n"}
{"task_id": "Python/65", "fn": "circular_shift", "para": "(x, shift)", "arg": ["100, 2", "12, 2", "97, 8", "12, 1", "11, 101"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef circular_shift(x, shift):\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n\nassert circular_shift(<FILL_ME>) == \"001\"\n```", "assert": "\"001\"", "code": "def circular_shift(x, shift):\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n"}
{"task_id": "Python/66", "fn": "digitSum", "para": "(s)", "arg": ["\"\"", "\"abAB\"", "\"abcCd\"", "\"helloE\"", "\"woArBld\"", "\"aAaaaXa\"", "\" How are yOu?\"", "\"You arE Very Smart\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef digitSum(s):\n    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n\nassert digitSum(<FILL_ME>) == 0\n```", "assert": "0", "code": "def digitSum(s):\n    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n"}
{"task_id": "Python/66", "fn": "digitSum", "para": "(s)", "arg": ["\"\"", "\"abAB\"", "\"abcCd\"", "\"helloE\"", "\"woArBld\"", "\"aAaaaXa\"", "\" How are yOu?\"", "\"You arE Very Smart\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef digitSum(s):\n    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n\nassert digitSum(<FILL_ME>) == 69\n```", "assert": "69", "code": "def digitSum(s):\n    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n"}
{"task_id": "Python/66", "fn": "digitSum", "para": "(s)", "arg": ["\"\"", "\"abAB\"", "\"abcCd\"", "\"helloE\"", "\"woArBld\"", "\"aAaaaXa\"", "\" How are yOu?\"", "\"You arE Very Smart\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef digitSum(s):\n    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n\nassert digitSum(<FILL_ME>) == 151\n```", "assert": "151", "code": "def digitSum(s):\n    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n"}
{"task_id": "Python/66", "fn": "digitSum", "para": "(s)", "arg": ["\"\"", "\"abAB\"", "\"abcCd\"", "\"helloE\"", "\"woArBld\"", "\"aAaaaXa\"", "\" How are yOu?\"", "\"You arE Very Smart\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef digitSum(s):\n    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n\nassert digitSum(<FILL_ME>) == 327\n```", "assert": "327", "code": "def digitSum(s):\n    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n"}
{"task_id": "Python/66", "fn": "digitSum", "para": "(s)", "arg": ["\"\"", "\"abAB\"", "\"abcCd\"", "\"helloE\"", "\"woArBld\"", "\"aAaaaXa\"", "\" How are yOu?\"", "\"You arE Very Smart\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef digitSum(s):\n    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n\nassert digitSum(<FILL_ME>) == 67\n```", "assert": "67", "code": "def digitSum(s):\n    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n"}
{"task_id": "Python/66", "fn": "digitSum", "para": "(s)", "arg": ["\"\"", "\"abAB\"", "\"abcCd\"", "\"helloE\"", "\"woArBld\"", "\"aAaaaXa\"", "\" How are yOu?\"", "\"You arE Very Smart\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef digitSum(s):\n    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n\nassert digitSum(<FILL_ME>) == 131\n```", "assert": "131", "code": "def digitSum(s):\n    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n"}
{"task_id": "Python/66", "fn": "digitSum", "para": "(s)", "arg": ["\"\"", "\"abAB\"", "\"abcCd\"", "\"helloE\"", "\"woArBld\"", "\"aAaaaXa\"", "\" How are yOu?\"", "\"You arE Very Smart\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef digitSum(s):\n    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n\nassert digitSum(<FILL_ME>) == 153\n```", "assert": "153", "code": "def digitSum(s):\n    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n"}
{"task_id": "Python/67", "fn": "fruit_distribution", "para": "(s,n)", "arg": ["\"5 apples and 6 oranges\",19", "\"5 apples and 6 oranges\",21", "\"0 apples and 1 oranges\",3", "\"1 apples and 0 oranges\",3", "\"2 apples and 3 oranges\",100", "\"2 apples and 3 oranges\",5", "\"1 apples and 100 oranges\",120"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef fruit_distribution(s,n):\n    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n\nassert fruit_distribution(<FILL_ME>) == 95\n```", "assert": "95", "code": "def fruit_distribution(s,n):\n    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n"}
{"task_id": "Python/67", "fn": "fruit_distribution", "para": "(s,n)", "arg": ["\"5 apples and 6 oranges\",19", "\"5 apples and 6 oranges\",21", "\"0 apples and 1 oranges\",3", "\"1 apples and 0 oranges\",3", "\"2 apples and 3 oranges\",100", "\"2 apples and 3 oranges\",5", "\"1 apples and 100 oranges\",120"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef fruit_distribution(s,n):\n    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n\nassert fruit_distribution(<FILL_ME>) == 19\n```", "assert": "19", "code": "def fruit_distribution(s,n):\n    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n"}
{"task_id": "Python/67", "fn": "fruit_distribution", "para": "(s,n)", "arg": ["\"5 apples and 6 oranges\",19", "\"5 apples and 6 oranges\",21", "\"0 apples and 1 oranges\",3", "\"1 apples and 0 oranges\",3", "\"2 apples and 3 oranges\",100", "\"2 apples and 3 oranges\",5", "\"1 apples and 100 oranges\",120"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef fruit_distribution(s,n):\n    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n\nassert fruit_distribution(<FILL_ME>) == 10\n```", "assert": "10", "code": "def fruit_distribution(s,n):\n    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n"}
{"task_id": "Python/67", "fn": "fruit_distribution", "para": "(s,n)", "arg": ["\"5 apples and 6 oranges\",19", "\"5 apples and 6 oranges\",21", "\"0 apples and 1 oranges\",3", "\"1 apples and 0 oranges\",3", "\"2 apples and 3 oranges\",100", "\"2 apples and 3 oranges\",5", "\"1 apples and 100 oranges\",120"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef fruit_distribution(s,n):\n    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n\nassert fruit_distribution(<FILL_ME>) == 0\n```", "assert": "0", "code": "def fruit_distribution(s,n):\n    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n"}
{"task_id": "Python/67", "fn": "fruit_distribution", "para": "(s,n)", "arg": ["\"5 apples and 6 oranges\",19", "\"5 apples and 6 oranges\",21", "\"0 apples and 1 oranges\",3", "\"1 apples and 0 oranges\",3", "\"2 apples and 3 oranges\",100", "\"2 apples and 3 oranges\",5", "\"1 apples and 100 oranges\",120"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef fruit_distribution(s,n):\n    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n\nassert fruit_distribution(<FILL_ME>) == 2\n```", "assert": "2", "code": "def fruit_distribution(s,n):\n    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n"}
{"task_id": "Python/67", "fn": "fruit_distribution", "para": "(s,n)", "arg": ["\"5 apples and 6 oranges\",19", "\"5 apples and 6 oranges\",21", "\"0 apples and 1 oranges\",3", "\"1 apples and 0 oranges\",3", "\"2 apples and 3 oranges\",100", "\"2 apples and 3 oranges\",5", "\"1 apples and 100 oranges\",120"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef fruit_distribution(s,n):\n    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n\nassert fruit_distribution(<FILL_ME>) == 8\n```", "assert": "8", "code": "def fruit_distribution(s,n):\n    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n"}
{"task_id": "Python/68", "fn": "pluck", "para": "(arr)", "arg": ["[4,2,3]", "[1,2,3]", "[]", "[5, 0, 3, 0, 4, 2]", "[1, 2, 3, 0, 5, 3]", "[5, 4, 8, 4 ,8]", "[7, 6, 7, 1]", "[7, 9, 7, 1]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef pluck(arr):\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n\nassert pluck(<FILL_ME>) == [6, 1]\n```", "assert": "[6, 1]", "code": "def pluck(arr):\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n"}
{"task_id": "Python/68", "fn": "pluck", "para": "(arr)", "arg": ["[4,2,3]", "[1,2,3]", "[]", "[5, 0, 3, 0, 4, 2]", "[1, 2, 3, 0, 5, 3]", "[5, 4, 8, 4 ,8]", "[7, 6, 7, 1]", "[7, 9, 7, 1]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef pluck(arr):\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n\nassert pluck(<FILL_ME>) == [4, 1]\n```", "assert": "[4, 1]", "code": "def pluck(arr):\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n"}
{"task_id": "Python/68", "fn": "pluck", "para": "(arr)", "arg": ["[4,2,3]", "[1,2,3]", "[]", "[5, 0, 3, 0, 4, 2]", "[1, 2, 3, 0, 5, 3]", "[5, 4, 8, 4 ,8]", "[7, 6, 7, 1]", "[7, 9, 7, 1]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef pluck(arr):\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n\nassert pluck(<FILL_ME>) == [0, 1]\n```", "assert": "[0, 1]", "code": "def pluck(arr):\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n"}
{"task_id": "Python/68", "fn": "pluck", "para": "(arr)", "arg": ["[4,2,3]", "[1,2,3]", "[]", "[5, 0, 3, 0, 4, 2]", "[1, 2, 3, 0, 5, 3]", "[5, 4, 8, 4 ,8]", "[7, 6, 7, 1]", "[7, 9, 7, 1]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef pluck(arr):\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n\nassert pluck(<FILL_ME>) == [0, 3]\n```", "assert": "[0, 3]", "code": "def pluck(arr):\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n"}
{"task_id": "Python/68", "fn": "pluck", "para": "(arr)", "arg": ["[4,2,3]", "[1,2,3]", "[]", "[5, 0, 3, 0, 4, 2]", "[1, 2, 3, 0, 5, 3]", "[5, 4, 8, 4 ,8]", "[7, 6, 7, 1]", "[7, 9, 7, 1]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef pluck(arr):\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n\nassert pluck(<FILL_ME>) == []\n```", "assert": "[]", "code": "def pluck(arr):\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n"}
{"task_id": "Python/68", "fn": "pluck", "para": "(arr)", "arg": ["[4,2,3]", "[1,2,3]", "[]", "[5, 0, 3, 0, 4, 2]", "[1, 2, 3, 0, 5, 3]", "[5, 4, 8, 4 ,8]", "[7, 6, 7, 1]", "[7, 9, 7, 1]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef pluck(arr):\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n\nassert pluck(<FILL_ME>) == [2, 1]\n```", "assert": "[2, 1]", "code": "def pluck(arr):\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n"}
{"task_id": "Python/69", "fn": "search", "para": "(lst)", "arg": ["[5, 5, 5, 5, 1]", "[4, 1, 4, 1, 4, 4]", "[3, 3]", "[8, 8, 8, 8, 8, 8, 8, 8]", "[2, 3, 3, 2, 2]", "[2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]", "[3, 2, 8, 2]", "[6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]", "[8, 8, 3, 6, 5, 6, 4]", "[6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]", "[1, 9, 10, 1, 3]", "[6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]", "[1]", "[8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]", "[2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]", "[1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]", "[9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]", "[2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]", "[9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]", "[5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]", "[10]", "[9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]", "[5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]", "[7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]", "[3, 10, 10, 9, 2]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef search(lst):\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n\nassert search(<FILL_ME>) == -1\n```", "assert": "-1", "code": "def search(lst):\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n"}
{"task_id": "Python/69", "fn": "search", "para": "(lst)", "arg": ["[5, 5, 5, 5, 1]", "[4, 1, 4, 1, 4, 4]", "[3, 3]", "[8, 8, 8, 8, 8, 8, 8, 8]", "[2, 3, 3, 2, 2]", "[2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]", "[3, 2, 8, 2]", "[6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]", "[8, 8, 3, 6, 5, 6, 4]", "[6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]", "[1, 9, 10, 1, 3]", "[6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]", "[1]", "[8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]", "[2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]", "[1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]", "[9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]", "[2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]", "[9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]", "[5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]", "[10]", "[9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]", "[5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]", "[7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]", "[3, 10, 10, 9, 2]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef search(lst):\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n\nassert search(<FILL_ME>) == 5\n```", "assert": "5", "code": "def search(lst):\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n"}
{"task_id": "Python/69", "fn": "search", "para": "(lst)", "arg": ["[5, 5, 5, 5, 1]", "[4, 1, 4, 1, 4, 4]", "[3, 3]", "[8, 8, 8, 8, 8, 8, 8, 8]", "[2, 3, 3, 2, 2]", "[2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]", "[3, 2, 8, 2]", "[6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]", "[8, 8, 3, 6, 5, 6, 4]", "[6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]", "[1, 9, 10, 1, 3]", "[6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]", "[1]", "[8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]", "[2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]", "[1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]", "[9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]", "[2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]", "[9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]", "[5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]", "[10]", "[9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]", "[5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]", "[7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]", "[3, 10, 10, 9, 2]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef search(lst):\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n\nassert search(<FILL_ME>) == 2\n```", "assert": "2", "code": "def search(lst):\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n"}
{"task_id": "Python/69", "fn": "search", "para": "(lst)", "arg": ["[5, 5, 5, 5, 1]", "[4, 1, 4, 1, 4, 4]", "[3, 3]", "[8, 8, 8, 8, 8, 8, 8, 8]", "[2, 3, 3, 2, 2]", "[2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]", "[3, 2, 8, 2]", "[6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]", "[8, 8, 3, 6, 5, 6, 4]", "[6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]", "[1, 9, 10, 1, 3]", "[6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]", "[1]", "[8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]", "[2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]", "[1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]", "[9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]", "[2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]", "[9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]", "[5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]", "[10]", "[9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]", "[5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]", "[7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]", "[3, 10, 10, 9, 2]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef search(lst):\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n\nassert search(<FILL_ME>) == 4\n```", "assert": "4", "code": "def search(lst):\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n"}
{"task_id": "Python/69", "fn": "search", "para": "(lst)", "arg": ["[5, 5, 5, 5, 1]", "[4, 1, 4, 1, 4, 4]", "[3, 3]", "[8, 8, 8, 8, 8, 8, 8, 8]", "[2, 3, 3, 2, 2]", "[2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]", "[3, 2, 8, 2]", "[6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]", "[8, 8, 3, 6, 5, 6, 4]", "[6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]", "[1, 9, 10, 1, 3]", "[6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]", "[1]", "[8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]", "[2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]", "[1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]", "[9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]", "[2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]", "[9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]", "[5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]", "[10]", "[9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]", "[5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]", "[7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]", "[3, 10, 10, 9, 2]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef search(lst):\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n\nassert search(<FILL_ME>) == 1\n```", "assert": "1", "code": "def search(lst):\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n"}
{"task_id": "Python/69", "fn": "search", "para": "(lst)", "arg": ["[5, 5, 5, 5, 1]", "[4, 1, 4, 1, 4, 4]", "[3, 3]", "[8, 8, 8, 8, 8, 8, 8, 8]", "[2, 3, 3, 2, 2]", "[2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]", "[3, 2, 8, 2]", "[6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]", "[8, 8, 3, 6, 5, 6, 4]", "[6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]", "[1, 9, 10, 1, 3]", "[6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]", "[1]", "[8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]", "[2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]", "[1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]", "[9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]", "[2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]", "[9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]", "[5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]", "[10]", "[9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]", "[5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]", "[7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]", "[3, 10, 10, 9, 2]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef search(lst):\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n\nassert search(<FILL_ME>) == 8\n```", "assert": "8", "code": "def search(lst):\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n"}
{"task_id": "Python/70", "fn": "strange_sort_list", "para": "(lst)", "arg": ["[1, 2, 3, 4]", "[5, 6, 7, 8, 9]", "[1, 2, 3, 4, 5]", "[5, 6, 7, 8, 9, 1]", "[5, 5, 5, 5]", "[]", "[1,2,3,4,5,6,7,8]", "[0,2,2,2,5,5,-5,-5]", "[111111]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef strange_sort_list(lst):\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n\nassert strange_sort_list(<FILL_ME>) == [1, 9, 5, 8, 6, 7]\n```", "assert": "[1, 9, 5, 8, 6, 7]", "code": "def strange_sort_list(lst):\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n"}
{"task_id": "Python/70", "fn": "strange_sort_list", "para": "(lst)", "arg": ["[1, 2, 3, 4]", "[5, 6, 7, 8, 9]", "[1, 2, 3, 4, 5]", "[5, 6, 7, 8, 9, 1]", "[5, 5, 5, 5]", "[]", "[1,2,3,4,5,6,7,8]", "[0,2,2,2,5,5,-5,-5]", "[111111]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef strange_sort_list(lst):\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n\nassert strange_sort_list(<FILL_ME>) == [5, 9, 6, 8, 7]\n```", "assert": "[5, 9, 6, 8, 7]", "code": "def strange_sort_list(lst):\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n"}
{"task_id": "Python/70", "fn": "strange_sort_list", "para": "(lst)", "arg": ["[1, 2, 3, 4]", "[5, 6, 7, 8, 9]", "[1, 2, 3, 4, 5]", "[5, 6, 7, 8, 9, 1]", "[5, 5, 5, 5]", "[]", "[1,2,3,4,5,6,7,8]", "[0,2,2,2,5,5,-5,-5]", "[111111]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef strange_sort_list(lst):\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n\nassert strange_sort_list(<FILL_ME>) == [1, 8, 2, 7, 3, 6, 4, 5]\n```", "assert": "[1, 8, 2, 7, 3, 6, 4, 5]", "code": "def strange_sort_list(lst):\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n"}
{"task_id": "Python/70", "fn": "strange_sort_list", "para": "(lst)", "arg": ["[1, 2, 3, 4]", "[5, 6, 7, 8, 9]", "[1, 2, 3, 4, 5]", "[5, 6, 7, 8, 9, 1]", "[5, 5, 5, 5]", "[]", "[1,2,3,4,5,6,7,8]", "[0,2,2,2,5,5,-5,-5]", "[111111]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef strange_sort_list(lst):\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n\nassert strange_sort_list(<FILL_ME>) == [111111]\n```", "assert": "[111111]", "code": "def strange_sort_list(lst):\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n"}
{"task_id": "Python/70", "fn": "strange_sort_list", "para": "(lst)", "arg": ["[1, 2, 3, 4]", "[5, 6, 7, 8, 9]", "[1, 2, 3, 4, 5]", "[5, 6, 7, 8, 9, 1]", "[5, 5, 5, 5]", "[]", "[1,2,3,4,5,6,7,8]", "[0,2,2,2,5,5,-5,-5]", "[111111]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef strange_sort_list(lst):\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n\nassert strange_sort_list(<FILL_ME>) == [1, 4, 2, 3]\n```", "assert": "[1, 4, 2, 3]", "code": "def strange_sort_list(lst):\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n"}
{"task_id": "Python/70", "fn": "strange_sort_list", "para": "(lst)", "arg": ["[1, 2, 3, 4]", "[5, 6, 7, 8, 9]", "[1, 2, 3, 4, 5]", "[5, 6, 7, 8, 9, 1]", "[5, 5, 5, 5]", "[]", "[1,2,3,4,5,6,7,8]", "[0,2,2,2,5,5,-5,-5]", "[111111]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef strange_sort_list(lst):\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n\nassert strange_sort_list(<FILL_ME>) == [-5, 5, -5, 5, 0, 2, 2, 2]\n```", "assert": "[-5, 5, -5, 5, 0, 2, 2, 2]", "code": "def strange_sort_list(lst):\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n"}
{"task_id": "Python/70", "fn": "strange_sort_list", "para": "(lst)", "arg": ["[1, 2, 3, 4]", "[5, 6, 7, 8, 9]", "[1, 2, 3, 4, 5]", "[5, 6, 7, 8, 9, 1]", "[5, 5, 5, 5]", "[]", "[1,2,3,4,5,6,7,8]", "[0,2,2,2,5,5,-5,-5]", "[111111]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef strange_sort_list(lst):\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n\nassert strange_sort_list(<FILL_ME>) == []\n```", "assert": "[]", "code": "def strange_sort_list(lst):\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n"}
{"task_id": "Python/70", "fn": "strange_sort_list", "para": "(lst)", "arg": ["[1, 2, 3, 4]", "[5, 6, 7, 8, 9]", "[1, 2, 3, 4, 5]", "[5, 6, 7, 8, 9, 1]", "[5, 5, 5, 5]", "[]", "[1,2,3,4,5,6,7,8]", "[0,2,2,2,5,5,-5,-5]", "[111111]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef strange_sort_list(lst):\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n\nassert strange_sort_list(<FILL_ME>) == [5, 5, 5, 5]\n```", "assert": "[5, 5, 5, 5]", "code": "def strange_sort_list(lst):\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n"}
{"task_id": "Python/70", "fn": "strange_sort_list", "para": "(lst)", "arg": ["[1, 2, 3, 4]", "[5, 6, 7, 8, 9]", "[1, 2, 3, 4, 5]", "[5, 6, 7, 8, 9, 1]", "[5, 5, 5, 5]", "[]", "[1,2,3,4,5,6,7,8]", "[0,2,2,2,5,5,-5,-5]", "[111111]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef strange_sort_list(lst):\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n\nassert strange_sort_list(<FILL_ME>) == [1, 5, 2, 4, 3]\n```", "assert": "[1, 5, 2, 4, 3]", "code": "def strange_sort_list(lst):\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n"}
{"task_id": "Python/71", "fn": "triangle_area", "para": "(a, b, c)", "arg": ["3, 4, 5", "1, 2, 10", "4, 8, 5", "2, 2, 2", "1, 2, 3", "10, 5, 7", "2, 6, 3", "1, 1, 1", "2, 2, 10"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n\nassert triangle_area(<FILL_ME>) == 8.18\n```", "assert": "8.18", "code": "def triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n"}
{"task_id": "Python/71", "fn": "triangle_area", "para": "(a, b, c)", "arg": ["3, 4, 5", "1, 2, 10", "4, 8, 5", "2, 2, 2", "1, 2, 3", "10, 5, 7", "2, 6, 3", "1, 1, 1", "2, 2, 10"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n\nassert triangle_area(<FILL_ME>) == -1\n```", "assert": "-1", "code": "def triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n"}
{"task_id": "Python/71", "fn": "triangle_area", "para": "(a, b, c)", "arg": ["3, 4, 5", "1, 2, 10", "4, 8, 5", "2, 2, 2", "1, 2, 3", "10, 5, 7", "2, 6, 3", "1, 1, 1", "2, 2, 10"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n\nassert triangle_area(<FILL_ME>) == 16.25\n```", "assert": "16.25", "code": "def triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n"}
{"task_id": "Python/71", "fn": "triangle_area", "para": "(a, b, c)", "arg": ["3, 4, 5", "1, 2, 10", "4, 8, 5", "2, 2, 2", "1, 2, 3", "10, 5, 7", "2, 6, 3", "1, 1, 1", "2, 2, 10"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n\nassert triangle_area(<FILL_ME>) == 6.00\n```", "assert": "6.00", "code": "def triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n"}
{"task_id": "Python/71", "fn": "triangle_area", "para": "(a, b, c)", "arg": ["3, 4, 5", "1, 2, 10", "4, 8, 5", "2, 2, 2", "1, 2, 3", "10, 5, 7", "2, 6, 3", "1, 1, 1", "2, 2, 10"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n\nassert triangle_area(<FILL_ME>) == 0.43\n```", "assert": "0.43", "code": "def triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n"}
{"task_id": "Python/71", "fn": "triangle_area", "para": "(a, b, c)", "arg": ["3, 4, 5", "1, 2, 10", "4, 8, 5", "2, 2, 2", "1, 2, 3", "10, 5, 7", "2, 6, 3", "1, 1, 1", "2, 2, 10"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n\nassert triangle_area(<FILL_ME>) == 1.73\n```", "assert": "1.73", "code": "def triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n"}
{"task_id": "Python/72", "fn": "will_it_fly", "para": "(q,w)", "arg": ["[3, 2, 3], 9", "[1, 2], 5", "[3], 5", "[3, 2, 3], 1", "[1, 2, 3], 6", "[5], 5"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef will_it_fly(q,w):\n    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n\nassert will_it_fly(<FILL_ME>) == True\n```", "assert": "True", "code": "def will_it_fly(q,w):\n    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n"}
{"task_id": "Python/72", "fn": "will_it_fly", "para": "(q,w)", "arg": ["[3, 2, 3], 9", "[1, 2], 5", "[3], 5", "[3, 2, 3], 1", "[1, 2, 3], 6", "[5], 5"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef will_it_fly(q,w):\n    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n\nassert will_it_fly(<FILL_ME>) == False\n```", "assert": "False", "code": "def will_it_fly(q,w):\n    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n"}
{"task_id": "Python/73", "fn": "smallest_change", "para": "(arr)", "arg": ["[1,2,3,5,4,7,9,6]", "[1, 2, 3, 4, 3, 2, 2]", "[1, 4, 2]", "[1, 4, 4, 2]", "[1, 2, 3, 2, 1]", "[3, 1, 1, 3]", "[1]", "[0, 1]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef smallest_change(arr):\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n\nassert smallest_change(<FILL_ME>) == 1\n```", "assert": "1", "code": "def smallest_change(arr):\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n"}
{"task_id": "Python/73", "fn": "smallest_change", "para": "(arr)", "arg": ["[1,2,3,5,4,7,9,6]", "[1, 2, 3, 4, 3, 2, 2]", "[1, 4, 2]", "[1, 4, 4, 2]", "[1, 2, 3, 2, 1]", "[3, 1, 1, 3]", "[1]", "[0, 1]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef smallest_change(arr):\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n\nassert smallest_change(<FILL_ME>) == 0\n```", "assert": "0", "code": "def smallest_change(arr):\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n"}
{"task_id": "Python/73", "fn": "smallest_change", "para": "(arr)", "arg": ["[1,2,3,5,4,7,9,6]", "[1, 2, 3, 4, 3, 2, 2]", "[1, 4, 2]", "[1, 4, 4, 2]", "[1, 2, 3, 2, 1]", "[3, 1, 1, 3]", "[1]", "[0, 1]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef smallest_change(arr):\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n\nassert smallest_change(<FILL_ME>) == 4\n```", "assert": "4", "code": "def smallest_change(arr):\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n"}
{"task_id": "Python/74", "fn": "total_match", "para": "(lst1, lst2)", "arg": ["[], []", "['hi', 'admin'], ['hi', 'hi']", "['hi', 'admin'], ['hi', 'hi', 'admin', 'project']", "['4'], ['1', '2', '3', '4', '5']", "['hi', 'admin'], ['hI', 'Hi']", "['hi', 'admin'], ['hI', 'hi', 'hi']", "['hi', 'admin'], ['hI', 'hi', 'hii']", "[], ['this']", "['this'], []"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef total_match(lst1, lst2):\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n\nassert total_match(<FILL_ME>) == ['hI', 'Hi']\n```", "assert": "['hI', 'Hi']", "code": "def total_match(lst1, lst2):\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n"}
{"task_id": "Python/74", "fn": "total_match", "para": "(lst1, lst2)", "arg": ["[], []", "['hi', 'admin'], ['hi', 'hi']", "['hi', 'admin'], ['hi', 'hi', 'admin', 'project']", "['4'], ['1', '2', '3', '4', '5']", "['hi', 'admin'], ['hI', 'Hi']", "['hi', 'admin'], ['hI', 'hi', 'hi']", "['hi', 'admin'], ['hI', 'hi', 'hii']", "[], ['this']", "['this'], []"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef total_match(lst1, lst2):\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n\nassert total_match(<FILL_ME>) == ['hi', 'hi']\n```", "assert": "['hi', 'hi']", "code": "def total_match(lst1, lst2):\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n"}
{"task_id": "Python/74", "fn": "total_match", "para": "(lst1, lst2)", "arg": ["[], []", "['hi', 'admin'], ['hi', 'hi']", "['hi', 'admin'], ['hi', 'hi', 'admin', 'project']", "['4'], ['1', '2', '3', '4', '5']", "['hi', 'admin'], ['hI', 'Hi']", "['hi', 'admin'], ['hI', 'hi', 'hi']", "['hi', 'admin'], ['hI', 'hi', 'hii']", "[], ['this']", "['this'], []"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef total_match(lst1, lst2):\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n\nassert total_match(<FILL_ME>) == ['hI', 'hi', 'hi']\n```", "assert": "['hI', 'hi', 'hi']", "code": "def total_match(lst1, lst2):\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n"}
{"task_id": "Python/74", "fn": "total_match", "para": "(lst1, lst2)", "arg": ["[], []", "['hi', 'admin'], ['hi', 'hi']", "['hi', 'admin'], ['hi', 'hi', 'admin', 'project']", "['4'], ['1', '2', '3', '4', '5']", "['hi', 'admin'], ['hI', 'Hi']", "['hi', 'admin'], ['hI', 'hi', 'hi']", "['hi', 'admin'], ['hI', 'hi', 'hii']", "[], ['this']", "['this'], []"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef total_match(lst1, lst2):\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n\nassert total_match(<FILL_ME>) == ['hi', 'admin']\n```", "assert": "['hi', 'admin']", "code": "def total_match(lst1, lst2):\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n"}
{"task_id": "Python/74", "fn": "total_match", "para": "(lst1, lst2)", "arg": ["[], []", "['hi', 'admin'], ['hi', 'hi']", "['hi', 'admin'], ['hi', 'hi', 'admin', 'project']", "['4'], ['1', '2', '3', '4', '5']", "['hi', 'admin'], ['hI', 'Hi']", "['hi', 'admin'], ['hI', 'hi', 'hi']", "['hi', 'admin'], ['hI', 'hi', 'hii']", "[], ['this']", "['this'], []"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef total_match(lst1, lst2):\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n\nassert total_match(<FILL_ME>) == []\n```", "assert": "[]", "code": "def total_match(lst1, lst2):\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n"}
{"task_id": "Python/74", "fn": "total_match", "para": "(lst1, lst2)", "arg": ["[], []", "['hi', 'admin'], ['hi', 'hi']", "['hi', 'admin'], ['hi', 'hi', 'admin', 'project']", "['4'], ['1', '2', '3', '4', '5']", "['hi', 'admin'], ['hI', 'Hi']", "['hi', 'admin'], ['hI', 'hi', 'hi']", "['hi', 'admin'], ['hI', 'hi', 'hii']", "[], ['this']", "['this'], []"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef total_match(lst1, lst2):\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n\nassert total_match(<FILL_ME>) == ['4']\n```", "assert": "['4']", "code": "def total_match(lst1, lst2):\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n"}
{"task_id": "Python/75", "fn": "is_multiply_prime", "para": "(a)", "arg": ["5", "30", "8", "10", "125", "3 * 5 * 7", "3 * 6 * 7", "9 * 9 * 9", "11 * 9 * 9", "11 * 13 * 7"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef is_multiply_prime(a):\n    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n\nassert is_multiply_prime(<FILL_ME>) == True\n```", "assert": "True", "code": "def is_multiply_prime(a):\n    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n"}
{"task_id": "Python/75", "fn": "is_multiply_prime", "para": "(a)", "arg": ["5", "30", "8", "10", "125", "3 * 5 * 7", "3 * 6 * 7", "9 * 9 * 9", "11 * 9 * 9", "11 * 13 * 7"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef is_multiply_prime(a):\n    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n\nassert is_multiply_prime(<FILL_ME>) == False\n```", "assert": "False", "code": "def is_multiply_prime(a):\n    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n"}
{"task_id": "Python/76", "fn": "is_simple_power", "para": "(x, n)", "arg": ["1, 4", "2, 2", "8, 2", "3, 2", "3, 1", "5, 3", "16, 2", "143214, 16", "4, 2", "9, 3", "16, 4", "24, 2", "128, 4", "12, 6", "1, 1", "1, 12"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef is_simple_power(x, n):\n    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n\nassert is_simple_power(<FILL_ME>) == True\n```", "assert": "True", "code": "def is_simple_power(x, n):\n    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n"}
{"task_id": "Python/76", "fn": "is_simple_power", "para": "(x, n)", "arg": ["1, 4", "2, 2", "8, 2", "3, 2", "3, 1", "5, 3", "16, 2", "143214, 16", "4, 2", "9, 3", "16, 4", "24, 2", "128, 4", "12, 6", "1, 1", "1, 12"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef is_simple_power(x, n):\n    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n\nassert is_simple_power(<FILL_ME>) == False\n```", "assert": "False", "code": "def is_simple_power(x, n):\n    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n"}
{"task_id": "Python/77", "fn": "iscube", "para": "(a)", "arg": ["1", "2", "-1", "64", "180", "1000", "0", "1729"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef iscube(a):\n    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n\nassert iscube(<FILL_ME>) == True\n```", "assert": "True", "code": "def iscube(a):\n    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n"}
{"task_id": "Python/77", "fn": "iscube", "para": "(a)", "arg": ["1", "2", "-1", "64", "180", "1000", "0", "1729"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef iscube(a):\n    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n\nassert iscube(<FILL_ME>) == False\n```", "assert": "False", "code": "def iscube(a):\n    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n"}
{"task_id": "Python/78", "fn": "hex_key", "para": "(num)", "arg": ["\"AB\"", "\"1077E\"", "\"ABED1A33\"", "\"2020\"", "\"123456789ABCDEF0\"", "\"112233445566778899AABBCCDDEEFF00\"", "[]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef hex_key(num):\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n\nassert hex_key(<FILL_ME>) == 12\n```", "assert": "12", "code": "def hex_key(num):\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n"}
{"task_id": "Python/78", "fn": "hex_key", "para": "(num)", "arg": ["\"AB\"", "\"1077E\"", "\"ABED1A33\"", "\"2020\"", "\"123456789ABCDEF0\"", "\"112233445566778899AABBCCDDEEFF00\"", "[]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef hex_key(num):\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n\nassert hex_key(<FILL_ME>) == 0\n```", "assert": "0", "code": "def hex_key(num):\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n"}
{"task_id": "Python/78", "fn": "hex_key", "para": "(num)", "arg": ["\"AB\"", "\"1077E\"", "\"ABED1A33\"", "\"2020\"", "\"123456789ABCDEF0\"", "\"112233445566778899AABBCCDDEEFF00\"", "[]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef hex_key(num):\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n\nassert hex_key(<FILL_ME>) == 6\n```", "assert": "6", "code": "def hex_key(num):\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n"}
{"task_id": "Python/78", "fn": "hex_key", "para": "(num)", "arg": ["\"AB\"", "\"1077E\"", "\"ABED1A33\"", "\"2020\"", "\"123456789ABCDEF0\"", "\"112233445566778899AABBCCDDEEFF00\"", "[]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef hex_key(num):\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n\nassert hex_key(<FILL_ME>) == 2\n```", "assert": "2", "code": "def hex_key(num):\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n"}
{"task_id": "Python/78", "fn": "hex_key", "para": "(num)", "arg": ["\"AB\"", "\"1077E\"", "\"ABED1A33\"", "\"2020\"", "\"123456789ABCDEF0\"", "\"112233445566778899AABBCCDDEEFF00\"", "[]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef hex_key(num):\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n\nassert hex_key(<FILL_ME>) == 4\n```", "assert": "4", "code": "def hex_key(num):\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n"}
{"task_id": "Python/78", "fn": "hex_key", "para": "(num)", "arg": ["\"AB\"", "\"1077E\"", "\"ABED1A33\"", "\"2020\"", "\"123456789ABCDEF0\"", "\"112233445566778899AABBCCDDEEFF00\"", "[]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef hex_key(num):\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n\nassert hex_key(<FILL_ME>) == 1\n```", "assert": "1", "code": "def hex_key(num):\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n"}
{"task_id": "Python/79", "fn": "decimal_to_binary", "para": "(decimal)", "arg": ["0", "32", "103", "15"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\"\n\nassert decimal_to_binary(<FILL_ME>) == \"db100000db\"\n```", "assert": "\"db100000db\"", "code": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\"\n"}
{"task_id": "Python/79", "fn": "decimal_to_binary", "para": "(decimal)", "arg": ["0", "32", "103", "15"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\"\n\nassert decimal_to_binary(<FILL_ME>) == \"db1100111db\"\n```", "assert": "\"db1100111db\"", "code": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\"\n"}
{"task_id": "Python/79", "fn": "decimal_to_binary", "para": "(decimal)", "arg": ["0", "32", "103", "15"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\"\n\nassert decimal_to_binary(<FILL_ME>) == \"db1111db\"\n```", "assert": "\"db1111db\"", "code": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\"\n"}
{"task_id": "Python/79", "fn": "decimal_to_binary", "para": "(decimal)", "arg": ["0", "32", "103", "15"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\"\n\nassert decimal_to_binary(<FILL_ME>) == \"db0db\"\n```", "assert": "\"db0db\"", "code": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\"\n"}
{"task_id": "Python/80", "fn": "is_happy", "para": "(s)", "arg": ["\"a\"", "\"aa\"", "\"abcd\"", "\"aabb\"", "\"adb\"", "\"xyy\"", "\"iopaxpoi\"", "\"iopaxioi\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef is_happy(s):\n    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n\nassert is_happy(<FILL_ME>) == True\n```", "assert": "True", "code": "def is_happy(s):\n    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n"}
{"task_id": "Python/80", "fn": "is_happy", "para": "(s)", "arg": ["\"a\"", "\"aa\"", "\"abcd\"", "\"aabb\"", "\"adb\"", "\"xyy\"", "\"iopaxpoi\"", "\"iopaxioi\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef is_happy(s):\n    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n\nassert is_happy(<FILL_ME>) == False\n```", "assert": "False", "code": "def is_happy(s):\n    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n"}
{"task_id": "Python/81", "fn": "numerical_letter_grade", "para": "(grades)", "arg": ["[4.0, 3, 1.7, 2, 3.5]", "[1.2]", "[0.5]", "[0.0]", "[1, 0.3, 1.5, 2.8, 3.3]", "[0, 0.7]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef numerical_letter_grade(grades):\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n\nassert numerical_letter_grade(<FILL_ME>) == ['A+', 'B', 'C-', 'C', 'A-']\n```", "assert": "['A+', 'B', 'C-', 'C', 'A-']", "code": "def numerical_letter_grade(grades):\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n"}
{"task_id": "Python/81", "fn": "numerical_letter_grade", "para": "(grades)", "arg": ["[4.0, 3, 1.7, 2, 3.5]", "[1.2]", "[0.5]", "[0.0]", "[1, 0.3, 1.5, 2.8, 3.3]", "[0, 0.7]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef numerical_letter_grade(grades):\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n\nassert numerical_letter_grade(<FILL_ME>) == ['E', 'D-']\n```", "assert": "['E', 'D-']", "code": "def numerical_letter_grade(grades):\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n"}
{"task_id": "Python/81", "fn": "numerical_letter_grade", "para": "(grades)", "arg": ["[4.0, 3, 1.7, 2, 3.5]", "[1.2]", "[0.5]", "[0.0]", "[1, 0.3, 1.5, 2.8, 3.3]", "[0, 0.7]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef numerical_letter_grade(grades):\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n\nassert numerical_letter_grade(<FILL_ME>) == ['D-']\n```", "assert": "['D-']", "code": "def numerical_letter_grade(grades):\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n"}
{"task_id": "Python/81", "fn": "numerical_letter_grade", "para": "(grades)", "arg": ["[4.0, 3, 1.7, 2, 3.5]", "[1.2]", "[0.5]", "[0.0]", "[1, 0.3, 1.5, 2.8, 3.3]", "[0, 0.7]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef numerical_letter_grade(grades):\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n\nassert numerical_letter_grade(<FILL_ME>) == ['D', 'D-', 'C-', 'B', 'B+']\n```", "assert": "['D', 'D-', 'C-', 'B', 'B+']", "code": "def numerical_letter_grade(grades):\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n"}
{"task_id": "Python/81", "fn": "numerical_letter_grade", "para": "(grades)", "arg": ["[4.0, 3, 1.7, 2, 3.5]", "[1.2]", "[0.5]", "[0.0]", "[1, 0.3, 1.5, 2.8, 3.3]", "[0, 0.7]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef numerical_letter_grade(grades):\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n\nassert numerical_letter_grade(<FILL_ME>) == ['E']\n```", "assert": "['E']", "code": "def numerical_letter_grade(grades):\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n"}
{"task_id": "Python/81", "fn": "numerical_letter_grade", "para": "(grades)", "arg": ["[4.0, 3, 1.7, 2, 3.5]", "[1.2]", "[0.5]", "[0.0]", "[1, 0.3, 1.5, 2.8, 3.3]", "[0, 0.7]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef numerical_letter_grade(grades):\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n\nassert numerical_letter_grade(<FILL_ME>) == ['D+']\n```", "assert": "['D+']", "code": "def numerical_letter_grade(grades):\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n"}
{"task_id": "Python/82", "fn": "prime_length", "para": "(string)", "arg": ["'Hello'", "'abcdcba'", "'kittens'", "'orange'", "'wow'", "'world'", "'MadaM'", "'Wow'", "''", "'HI'", "'go'", "'gogo'", "'aaaaaaaaaaaaaaa'", "'Madam'", "'M'", "'0'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef prime_length(string):\n    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n\nassert prime_length(<FILL_ME>) == True\n```", "assert": "True", "code": "def prime_length(string):\n    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n"}
{"task_id": "Python/82", "fn": "prime_length", "para": "(string)", "arg": ["'Hello'", "'abcdcba'", "'kittens'", "'orange'", "'wow'", "'world'", "'MadaM'", "'Wow'", "''", "'HI'", "'go'", "'gogo'", "'aaaaaaaaaaaaaaa'", "'Madam'", "'M'", "'0'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef prime_length(string):\n    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n\nassert prime_length(<FILL_ME>) == False\n```", "assert": "False", "code": "def prime_length(string):\n    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n"}
{"task_id": "Python/83", "fn": "starts_one_ends", "para": "(n)", "arg": ["1", "2", "3", "4", "5"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef starts_one_ends(n):\n    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n\nassert starts_one_ends(<FILL_ME>) == 18\n```", "assert": "18", "code": "def starts_one_ends(n):\n    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n"}
{"task_id": "Python/83", "fn": "starts_one_ends", "para": "(n)", "arg": ["1", "2", "3", "4", "5"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef starts_one_ends(n):\n    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n\nassert starts_one_ends(<FILL_ME>) == 18000\n```", "assert": "18000", "code": "def starts_one_ends(n):\n    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n"}
{"task_id": "Python/83", "fn": "starts_one_ends", "para": "(n)", "arg": ["1", "2", "3", "4", "5"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef starts_one_ends(n):\n    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n\nassert starts_one_ends(<FILL_ME>) == 1800\n```", "assert": "1800", "code": "def starts_one_ends(n):\n    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n"}
{"task_id": "Python/83", "fn": "starts_one_ends", "para": "(n)", "arg": ["1", "2", "3", "4", "5"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef starts_one_ends(n):\n    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n\nassert starts_one_ends(<FILL_ME>) == 180\n```", "assert": "180", "code": "def starts_one_ends(n):\n    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n"}
{"task_id": "Python/83", "fn": "starts_one_ends", "para": "(n)", "arg": ["1", "2", "3", "4", "5"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef starts_one_ends(n):\n    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n\nassert starts_one_ends(<FILL_ME>) == 1\n```", "assert": "1", "code": "def starts_one_ends(n):\n    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n"}
{"task_id": "Python/84", "fn": "solve", "para": "(N)", "arg": ["1000", "150", "147", "333", "963"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef solve(N):\n    return bin(sum(int(i) for i in str(N)))[2:]\n\nassert solve(<FILL_ME>) == \"1100\"\n```", "assert": "\"1100\"", "code": "def solve(N):\n    return bin(sum(int(i) for i in str(N)))[2:]\n"}
{"task_id": "Python/84", "fn": "solve", "para": "(N)", "arg": ["1000", "150", "147", "333", "963"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef solve(N):\n    return bin(sum(int(i) for i in str(N)))[2:]\n\nassert solve(<FILL_ME>) == \"110\"\n```", "assert": "\"110\"", "code": "def solve(N):\n    return bin(sum(int(i) for i in str(N)))[2:]\n"}
{"task_id": "Python/84", "fn": "solve", "para": "(N)", "arg": ["1000", "150", "147", "333", "963"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef solve(N):\n    return bin(sum(int(i) for i in str(N)))[2:]\n\nassert solve(<FILL_ME>) == \"1001\"\n```", "assert": "\"1001\"", "code": "def solve(N):\n    return bin(sum(int(i) for i in str(N)))[2:]\n"}
{"task_id": "Python/84", "fn": "solve", "para": "(N)", "arg": ["1000", "150", "147", "333", "963"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef solve(N):\n    return bin(sum(int(i) for i in str(N)))[2:]\n\nassert solve(<FILL_ME>) == \"10010\"\n```", "assert": "\"10010\"", "code": "def solve(N):\n    return bin(sum(int(i) for i in str(N)))[2:]\n"}
{"task_id": "Python/84", "fn": "solve", "para": "(N)", "arg": ["1000", "150", "147", "333", "963"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef solve(N):\n    return bin(sum(int(i) for i in str(N)))[2:]\n\nassert solve(<FILL_ME>) == \"1\"\n```", "assert": "\"1\"", "code": "def solve(N):\n    return bin(sum(int(i) for i in str(N)))[2:]\n"}
{"task_id": "Python/85", "fn": "add", "para": "(lst)", "arg": ["[4, 88]", "[4, 5, 6, 7, 2, 122]", "[4, 0, 6, 7]", "[4, 4, 6, 8]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef add(lst):\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n\nassert add(<FILL_ME>) == 122\n```", "assert": "122", "code": "def add(lst):\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n"}
{"task_id": "Python/85", "fn": "add", "para": "(lst)", "arg": ["[4, 88]", "[4, 5, 6, 7, 2, 122]", "[4, 0, 6, 7]", "[4, 4, 6, 8]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef add(lst):\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n\nassert add(<FILL_ME>) == 0\n```", "assert": "0", "code": "def add(lst):\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n"}
{"task_id": "Python/85", "fn": "add", "para": "(lst)", "arg": ["[4, 88]", "[4, 5, 6, 7, 2, 122]", "[4, 0, 6, 7]", "[4, 4, 6, 8]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef add(lst):\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n\nassert add(<FILL_ME>) == 88\n```", "assert": "88", "code": "def add(lst):\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n"}
{"task_id": "Python/85", "fn": "add", "para": "(lst)", "arg": ["[4, 88]", "[4, 5, 6, 7, 2, 122]", "[4, 0, 6, 7]", "[4, 4, 6, 8]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef add(lst):\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n\nassert add(<FILL_ME>) == 12\n```", "assert": "12", "code": "def add(lst):\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n"}
{"task_id": "Python/86", "fn": "anti_shuffle", "para": "(s)", "arg": ["'Hi'", "'hello'", "'number'", "'abcd'", "'Hello World!!!'", "''", "'Hi. My name is Mister Robot. How are you?'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef anti_shuffle(s):\n    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n\nassert anti_shuffle(<FILL_ME>) == 'Hello !!!Wdlor'\n```", "assert": "'Hello !!!Wdlor'", "code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n"}
{"task_id": "Python/86", "fn": "anti_shuffle", "para": "(s)", "arg": ["'Hi'", "'hello'", "'number'", "'abcd'", "'Hello World!!!'", "''", "'Hi. My name is Mister Robot. How are you?'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef anti_shuffle(s):\n    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n\nassert anti_shuffle(<FILL_ME>) == 'bemnru'\n```", "assert": "'bemnru'", "code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n"}
{"task_id": "Python/86", "fn": "anti_shuffle", "para": "(s)", "arg": ["'Hi'", "'hello'", "'number'", "'abcd'", "'Hello World!!!'", "''", "'Hi. My name is Mister Robot. How are you?'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef anti_shuffle(s):\n    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n\nassert anti_shuffle(<FILL_ME>) == 'ehllo'\n```", "assert": "'ehllo'", "code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n"}
{"task_id": "Python/86", "fn": "anti_shuffle", "para": "(s)", "arg": ["'Hi'", "'hello'", "'number'", "'abcd'", "'Hello World!!!'", "''", "'Hi. My name is Mister Robot. How are you?'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef anti_shuffle(s):\n    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n\nassert anti_shuffle(<FILL_ME>) == 'abcd'\n```", "assert": "'abcd'", "code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n"}
{"task_id": "Python/86", "fn": "anti_shuffle", "para": "(s)", "arg": ["'Hi'", "'hello'", "'number'", "'abcd'", "'Hello World!!!'", "''", "'Hi. My name is Mister Robot. How are you?'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef anti_shuffle(s):\n    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n\nassert anti_shuffle(<FILL_ME>) == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n```", "assert": "'.Hi My aemn is Meirst .Rboot How aer ?ouy'", "code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n"}
{"task_id": "Python/86", "fn": "anti_shuffle", "para": "(s)", "arg": ["'Hi'", "'hello'", "'number'", "'abcd'", "'Hello World!!!'", "''", "'Hi. My name is Mister Robot. How are you?'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef anti_shuffle(s):\n    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n\nassert anti_shuffle(<FILL_ME>) == ''\n```", "assert": "''", "code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n"}
{"task_id": "Python/86", "fn": "anti_shuffle", "para": "(s)", "arg": ["'Hi'", "'hello'", "'number'", "'abcd'", "'Hello World!!!'", "''", "'Hi. My name is Mister Robot. How are you?'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef anti_shuffle(s):\n    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n\nassert anti_shuffle(<FILL_ME>) == 'Hi'\n```", "assert": "'Hi'", "code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n"}
{"task_id": "Python/87", "fn": "get_row", "para": "(lst, x)", "arg": [null, null, null, "[], 1", "[[1]], 2", "[[], [1], [1, 2, 3]], 3"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef get_row(lst, x):\n    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n\nassert get_row(<FILL_ME>) == [(2, 2)]\n```", "assert": "[(2, 2)]", "code": "def get_row(lst, x):\n    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n"}
{"task_id": "Python/87", "fn": "get_row", "para": "(lst, x)", "arg": [null, null, null, "[], 1", "[[1]], 2", "[[], [1], [1, 2, 3]], 3"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef get_row(lst, x):\n    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n\nassert get_row(<FILL_ME>) == []\n```", "assert": "[]", "code": "def get_row(lst, x):\n    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n"}
{"task_id": "Python/87", "fn": "get_row", "para": "(lst, x)", "arg": [null, null, null, "[], 1", "[[1]], 2", "[[], [1], [1, 2, 3]], 3"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef get_row(lst, x):\n    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n\nassert get_row(<FILL_ME>) == None\n```", "assert": null, "code": "def get_row(lst, x):\n    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n"}
{"task_id": "Python/88", "fn": "sort_array", "para": "(array)", "arg": ["[]", "[5]", "[2, 4, 3, 0, 1, 5]", "[2, 4, 3, 0, 1, 5, 6]", "[2, 1]", "[15, 42, 87, 32 ,11, 0]", "[21, 14, 23, 11]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sort_array(array):\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n\nassert sort_array(<FILL_ME>) == [1, 2]\n```", "assert": "[1, 2]", "code": "def sort_array(array):\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n"}
{"task_id": "Python/88", "fn": "sort_array", "para": "(array)", "arg": ["[]", "[5]", "[2, 4, 3, 0, 1, 5]", "[2, 4, 3, 0, 1, 5, 6]", "[2, 1]", "[15, 42, 87, 32 ,11, 0]", "[21, 14, 23, 11]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sort_array(array):\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n\nassert sort_array(<FILL_ME>) == [5]\n```", "assert": "[5]", "code": "def sort_array(array):\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n"}
{"task_id": "Python/88", "fn": "sort_array", "para": "(array)", "arg": ["[]", "[5]", "[2, 4, 3, 0, 1, 5]", "[2, 4, 3, 0, 1, 5, 6]", "[2, 1]", "[15, 42, 87, 32 ,11, 0]", "[21, 14, 23, 11]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sort_array(array):\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n\nassert sort_array(<FILL_ME>) == [23, 21, 14, 11]\n```", "assert": "[23, 21, 14, 11]", "code": "def sort_array(array):\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n"}
{"task_id": "Python/88", "fn": "sort_array", "para": "(array)", "arg": ["[]", "[5]", "[2, 4, 3, 0, 1, 5]", "[2, 4, 3, 0, 1, 5, 6]", "[2, 1]", "[15, 42, 87, 32 ,11, 0]", "[21, 14, 23, 11]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sort_array(array):\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n\nassert sort_array(<FILL_ME>) == [0, 11, 15, 32, 42, 87]\n```", "assert": "[0, 11, 15, 32, 42, 87]", "code": "def sort_array(array):\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n"}
{"task_id": "Python/88", "fn": "sort_array", "para": "(array)", "arg": ["[]", "[5]", "[2, 4, 3, 0, 1, 5]", "[2, 4, 3, 0, 1, 5, 6]", "[2, 1]", "[15, 42, 87, 32 ,11, 0]", "[21, 14, 23, 11]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sort_array(array):\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n\nassert sort_array(<FILL_ME>) == [0, 1, 2, 3, 4, 5]\n```", "assert": "[0, 1, 2, 3, 4, 5]", "code": "def sort_array(array):\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n"}
{"task_id": "Python/88", "fn": "sort_array", "para": "(array)", "arg": ["[]", "[5]", "[2, 4, 3, 0, 1, 5]", "[2, 4, 3, 0, 1, 5, 6]", "[2, 1]", "[15, 42, 87, 32 ,11, 0]", "[21, 14, 23, 11]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sort_array(array):\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n\nassert sort_array(<FILL_ME>) == [6, 5, 4, 3, 2, 1, 0]\n```", "assert": "[6, 5, 4, 3, 2, 1, 0]", "code": "def sort_array(array):\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n"}
{"task_id": "Python/88", "fn": "sort_array", "para": "(array)", "arg": ["[]", "[5]", "[2, 4, 3, 0, 1, 5]", "[2, 4, 3, 0, 1, 5, 6]", "[2, 1]", "[15, 42, 87, 32 ,11, 0]", "[21, 14, 23, 11]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sort_array(array):\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n\nassert sort_array(<FILL_ME>) == []\n```", "assert": "[]", "code": "def sort_array(array):\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n"}
{"task_id": "Python/89", "fn": "encrypt", "para": "(s)", "arg": ["'hi'", "'asdfghjkl'", "'gf'", "'et'", "'faewfawefaewg'", "'hellomyfriend'", "'dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'", "'a'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n\nassert encrypt(<FILL_ME>) == 'jeiajeaijeiak'\n```", "assert": "'jeiajeaijeiak'", "code": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n"}
{"task_id": "Python/89", "fn": "encrypt", "para": "(s)", "arg": ["'hi'", "'asdfghjkl'", "'gf'", "'et'", "'faewfawefaewg'", "'hellomyfriend'", "'dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'", "'a'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n\nassert encrypt(<FILL_ME>) == 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n```", "assert": "'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'", "code": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n"}
{"task_id": "Python/89", "fn": "encrypt", "para": "(s)", "arg": ["'hi'", "'asdfghjkl'", "'gf'", "'et'", "'faewfawefaewg'", "'hellomyfriend'", "'dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'", "'a'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n\nassert encrypt(<FILL_ME>) == 'ix'\n```", "assert": "'ix'", "code": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n"}
{"task_id": "Python/89", "fn": "encrypt", "para": "(s)", "arg": ["'hi'", "'asdfghjkl'", "'gf'", "'et'", "'faewfawefaewg'", "'hellomyfriend'", "'dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'", "'a'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n\nassert encrypt(<FILL_ME>) == 'ewhjklnop'\n```", "assert": "'ewhjklnop'", "code": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n"}
{"task_id": "Python/89", "fn": "encrypt", "para": "(s)", "arg": ["'hi'", "'asdfghjkl'", "'gf'", "'et'", "'faewfawefaewg'", "'hellomyfriend'", "'dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'", "'a'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n\nassert encrypt(<FILL_ME>) == 'lm'\n```", "assert": "'lm'", "code": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n"}
{"task_id": "Python/89", "fn": "encrypt", "para": "(s)", "arg": ["'hi'", "'asdfghjkl'", "'gf'", "'et'", "'faewfawefaewg'", "'hellomyfriend'", "'dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'", "'a'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n\nassert encrypt(<FILL_ME>) == 'kj'\n```", "assert": "'kj'", "code": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n"}
{"task_id": "Python/89", "fn": "encrypt", "para": "(s)", "arg": ["'hi'", "'asdfghjkl'", "'gf'", "'et'", "'faewfawefaewg'", "'hellomyfriend'", "'dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'", "'a'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n\nassert encrypt(<FILL_ME>) == 'e'\n```", "assert": "'e'", "code": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n"}
{"task_id": "Python/89", "fn": "encrypt", "para": "(s)", "arg": ["'hi'", "'asdfghjkl'", "'gf'", "'et'", "'faewfawefaewg'", "'hellomyfriend'", "'dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'", "'a'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n\nassert encrypt(<FILL_ME>) == 'lippsqcjvmirh'\n```", "assert": "'lippsqcjvmirh'", "code": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n"}
{"task_id": "Python/90", "fn": "next_smallest", "para": "(lst)", "arg": ["[1, 2, 3, 4, 5]", "[5, 1, 4, 3, 2]", "[]", "[1, 1]", "[1,1,1,1,0]", "[1, 0**0]", "[-35, 34, 12, -45]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef next_smallest(lst):\n    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n\nassert next_smallest(<FILL_ME>) == None\n```", "assert": "None", "code": "def next_smallest(lst):\n    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n"}
{"task_id": "Python/90", "fn": "next_smallest", "para": "(lst)", "arg": ["[1, 2, 3, 4, 5]", "[5, 1, 4, 3, 2]", "[]", "[1, 1]", "[1,1,1,1,0]", "[1, 0**0]", "[-35, 34, 12, -45]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef next_smallest(lst):\n    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n\nassert next_smallest(<FILL_ME>) == 2\n```", "assert": "2", "code": "def next_smallest(lst):\n    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n"}
{"task_id": "Python/90", "fn": "next_smallest", "para": "(lst)", "arg": ["[1, 2, 3, 4, 5]", "[5, 1, 4, 3, 2]", "[]", "[1, 1]", "[1,1,1,1,0]", "[1, 0**0]", "[-35, 34, 12, -45]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef next_smallest(lst):\n    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n\nassert next_smallest(<FILL_ME>) == 1\n```", "assert": "1", "code": "def next_smallest(lst):\n    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n"}
{"task_id": "Python/90", "fn": "next_smallest", "para": "(lst)", "arg": ["[1, 2, 3, 4, 5]", "[5, 1, 4, 3, 2]", "[]", "[1, 1]", "[1,1,1,1,0]", "[1, 0**0]", "[-35, 34, 12, -45]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef next_smallest(lst):\n    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n\nassert next_smallest(<FILL_ME>) == -35\n```", "assert": "-35", "code": "def next_smallest(lst):\n    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n"}
{"task_id": "Python/91", "fn": "is_bored", "para": "(S)", "arg": ["\"Hello world\"", "\"Is the sky blue?\"", "\"I love It !\"", "\"bIt\"", "\"I feel good today. I will be productive. will kill It\"", "\"You and I are going for a walk\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef is_bored(S):\n    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n\nassert is_bored(<FILL_ME>) == 0\n```", "assert": "0", "code": "def is_bored(S):\n    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n"}
{"task_id": "Python/91", "fn": "is_bored", "para": "(S)", "arg": ["\"Hello world\"", "\"Is the sky blue?\"", "\"I love It !\"", "\"bIt\"", "\"I feel good today. I will be productive. will kill It\"", "\"You and I are going for a walk\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef is_bored(S):\n    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n\nassert is_bored(<FILL_ME>) == 2\n```", "assert": "2", "code": "def is_bored(S):\n    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n"}
{"task_id": "Python/91", "fn": "is_bored", "para": "(S)", "arg": ["\"Hello world\"", "\"Is the sky blue?\"", "\"I love It !\"", "\"bIt\"", "\"I feel good today. I will be productive. will kill It\"", "\"You and I are going for a walk\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef is_bored(S):\n    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n\nassert is_bored(<FILL_ME>) == 1\n```", "assert": "1", "code": "def is_bored(S):\n    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n"}
{"task_id": "Python/92", "fn": "any_int", "para": "(x, y, z)", "arg": ["2, 3, 1", "2.5, 2, 3", "1.5, 5, 3.5", "2, 6, 2", "4, 2, 2", "2.2, 2.2, 2.2", "-4, 6, 2", "2,1,1", "3,4,7", "3.0,4,7"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef any_int(x, y, z):\n    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n\nassert any_int(<FILL_ME>) == True\n```", "assert": "True", "code": "def any_int(x, y, z):\n    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n"}
{"task_id": "Python/92", "fn": "any_int", "para": "(x, y, z)", "arg": ["2, 3, 1", "2.5, 2, 3", "1.5, 5, 3.5", "2, 6, 2", "4, 2, 2", "2.2, 2.2, 2.2", "-4, 6, 2", "2,1,1", "3,4,7", "3.0,4,7"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef any_int(x, y, z):\n    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n\nassert any_int(<FILL_ME>) == False\n```", "assert": "False", "code": "def any_int(x, y, z):\n    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n"}
{"task_id": "Python/93", "fn": "encode", "para": "(message)", "arg": ["'TEST'", "'Mudasir'", "'YES'", "'This is a message'", "\"I DoNt KnOw WhAt tO WrItE\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef encode(message):\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n\nassert encode(<FILL_ME>) == 'tHKS KS C MGSSCGG'\n```", "assert": "'tHKS KS C MGSSCGG'", "code": "def encode(message):\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n"}
{"task_id": "Python/93", "fn": "encode", "para": "(message)", "arg": ["'TEST'", "'Mudasir'", "'YES'", "'This is a message'", "\"I DoNt KnOw WhAt tO WrItE\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef encode(message):\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n\nassert encode(<FILL_ME>) == 'ygs'\n```", "assert": "'ygs'", "code": "def encode(message):\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n"}
{"task_id": "Python/93", "fn": "encode", "para": "(message)", "arg": ["'TEST'", "'Mudasir'", "'YES'", "'This is a message'", "\"I DoNt KnOw WhAt tO WrItE\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef encode(message):\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n\nassert encode(<FILL_ME>) == 'tgst'\n```", "assert": "'tgst'", "code": "def encode(message):\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n"}
{"task_id": "Python/93", "fn": "encode", "para": "(message)", "arg": ["'TEST'", "'Mudasir'", "'YES'", "'This is a message'", "\"I DoNt KnOw WhAt tO WrItE\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef encode(message):\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n\nassert encode(<FILL_ME>) == 'k dQnT kNqW wHcT Tq wRkTg'\n```", "assert": "'k dQnT kNqW wHcT Tq wRkTg'", "code": "def encode(message):\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n"}
{"task_id": "Python/93", "fn": "encode", "para": "(message)", "arg": ["'TEST'", "'Mudasir'", "'YES'", "'This is a message'", "\"I DoNt KnOw WhAt tO WrItE\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef encode(message):\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n\nassert encode(<FILL_ME>) == 'mWDCSKR'\n```", "assert": "'mWDCSKR'", "code": "def encode(message):\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n"}
{"task_id": "Python/94", "fn": "skjkasdkd", "para": "(lst)", "arg": ["[0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]", "[1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]", "[1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]", "[0,724,32,71,99,32,6,0,5,91,83,0,5,6]", "[0,81,12,3,1,21]", "[0,8,1,2,1,7]", "[8191]", "[8191, 123456, 127, 7]", "[127, 97, 8192]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef skjkasdkd(lst):\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n\nassert skjkasdkd(<FILL_ME>) == 11\n```", "assert": "11", "code": "def skjkasdkd(lst):\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n"}
{"task_id": "Python/94", "fn": "skjkasdkd", "para": "(lst)", "arg": ["[0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]", "[1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]", "[1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]", "[0,724,32,71,99,32,6,0,5,91,83,0,5,6]", "[0,81,12,3,1,21]", "[0,8,1,2,1,7]", "[8191]", "[8191, 123456, 127, 7]", "[127, 97, 8192]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef skjkasdkd(lst):\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n\nassert skjkasdkd(<FILL_ME>) == 13\n```", "assert": "13", "code": "def skjkasdkd(lst):\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n"}
{"task_id": "Python/94", "fn": "skjkasdkd", "para": "(lst)", "arg": ["[0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]", "[1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]", "[1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]", "[0,724,32,71,99,32,6,0,5,91,83,0,5,6]", "[0,81,12,3,1,21]", "[0,8,1,2,1,7]", "[8191]", "[8191, 123456, 127, 7]", "[127, 97, 8192]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef skjkasdkd(lst):\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n\nassert skjkasdkd(<FILL_ME>) == 3\n```", "assert": "3", "code": "def skjkasdkd(lst):\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n"}
{"task_id": "Python/94", "fn": "skjkasdkd", "para": "(lst)", "arg": ["[0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]", "[1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]", "[1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]", "[0,724,32,71,99,32,6,0,5,91,83,0,5,6]", "[0,81,12,3,1,21]", "[0,8,1,2,1,7]", "[8191]", "[8191, 123456, 127, 7]", "[127, 97, 8192]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef skjkasdkd(lst):\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n\nassert skjkasdkd(<FILL_ME>) == 7\n```", "assert": "7", "code": "def skjkasdkd(lst):\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n"}
{"task_id": "Python/94", "fn": "skjkasdkd", "para": "(lst)", "arg": ["[0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]", "[1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]", "[1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]", "[0,724,32,71,99,32,6,0,5,91,83,0,5,6]", "[0,81,12,3,1,21]", "[0,8,1,2,1,7]", "[8191]", "[8191, 123456, 127, 7]", "[127, 97, 8192]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef skjkasdkd(lst):\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n\nassert skjkasdkd(<FILL_ME>) == 19\n```", "assert": "19", "code": "def skjkasdkd(lst):\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n"}
{"task_id": "Python/94", "fn": "skjkasdkd", "para": "(lst)", "arg": ["[0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]", "[1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]", "[1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]", "[0,724,32,71,99,32,6,0,5,91,83,0,5,6]", "[0,81,12,3,1,21]", "[0,8,1,2,1,7]", "[8191]", "[8191, 123456, 127, 7]", "[127, 97, 8192]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef skjkasdkd(lst):\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n\nassert skjkasdkd(<FILL_ME>) == 10\n```", "assert": "10", "code": "def skjkasdkd(lst):\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n"}
{"task_id": "Python/94", "fn": "skjkasdkd", "para": "(lst)", "arg": ["[0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]", "[1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]", "[1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]", "[0,724,32,71,99,32,6,0,5,91,83,0,5,6]", "[0,81,12,3,1,21]", "[0,8,1,2,1,7]", "[8191]", "[8191, 123456, 127, 7]", "[127, 97, 8192]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef skjkasdkd(lst):\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n\nassert skjkasdkd(<FILL_ME>) == 25\n```", "assert": "25", "code": "def skjkasdkd(lst):\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n"}
{"task_id": "Python/95", "fn": "check_dict_case", "para": "(dict)", "arg": ["{\"p\":\"pineapple\", \"b\":\"banana\"}", "{\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}", "{\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}", "{\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}", "{\"STATE\":\"NC\", \"ZIP\":\"12345\" }", "{\"fruit\":\"Orange\", \"taste\":\"Sweet\" }", "{}"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef check_dict_case(dict):\n    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n\nassert check_dict_case(<FILL_ME>) == True\n```", "assert": "True", "code": "def check_dict_case(dict):\n    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n"}
{"task_id": "Python/95", "fn": "check_dict_case", "para": "(dict)", "arg": ["{\"p\":\"pineapple\", \"b\":\"banana\"}", "{\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}", "{\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}", "{\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}", "{\"STATE\":\"NC\", \"ZIP\":\"12345\" }", "{\"fruit\":\"Orange\", \"taste\":\"Sweet\" }", "{}"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef check_dict_case(dict):\n    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n\nassert check_dict_case(<FILL_ME>) == False\n```", "assert": "False", "code": "def check_dict_case(dict):\n    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n"}
{"task_id": "Python/96", "fn": "count_up_to", "para": "(n)", "arg": ["5", "6", "7", "10", "0", "22", "1", "18", "47", "101"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n\nassert count_up_to(<FILL_ME>) == [2,3,5]\n```", "assert": "[2,3,5]", "code": "def count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n"}
{"task_id": "Python/96", "fn": "count_up_to", "para": "(n)", "arg": ["5", "6", "7", "10", "0", "22", "1", "18", "47", "101"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n\nassert count_up_to(<FILL_ME>) == [2,3]\n```", "assert": "[2,3]", "code": "def count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n"}
{"task_id": "Python/96", "fn": "count_up_to", "para": "(n)", "arg": ["5", "6", "7", "10", "0", "22", "1", "18", "47", "101"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n\nassert count_up_to(<FILL_ME>) == [2,3,5,7]\n```", "assert": "[2,3,5,7]", "code": "def count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n"}
{"task_id": "Python/96", "fn": "count_up_to", "para": "(n)", "arg": ["5", "6", "7", "10", "0", "22", "1", "18", "47", "101"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n\nassert count_up_to(<FILL_ME>) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n```", "assert": "[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]", "code": "def count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n"}
{"task_id": "Python/96", "fn": "count_up_to", "para": "(n)", "arg": ["5", "6", "7", "10", "0", "22", "1", "18", "47", "101"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n\nassert count_up_to(<FILL_ME>) == [2,3,5,7,11,13,17,19]\n```", "assert": "[2,3,5,7,11,13,17,19]", "code": "def count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n"}
{"task_id": "Python/96", "fn": "count_up_to", "para": "(n)", "arg": ["5", "6", "7", "10", "0", "22", "1", "18", "47", "101"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n\nassert count_up_to(<FILL_ME>) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n```", "assert": "[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]", "code": "def count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n"}
{"task_id": "Python/96", "fn": "count_up_to", "para": "(n)", "arg": ["5", "6", "7", "10", "0", "22", "1", "18", "47", "101"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n\nassert count_up_to(<FILL_ME>) == []\n```", "assert": "[]", "code": "def count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n"}
{"task_id": "Python/96", "fn": "count_up_to", "para": "(n)", "arg": ["5", "6", "7", "10", "0", "22", "1", "18", "47", "101"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n\nassert count_up_to(<FILL_ME>) == [2,3,5,7,11,13,17]\n```", "assert": "[2,3,5,7,11,13,17]", "code": "def count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n"}
{"task_id": "Python/97", "fn": "multiply", "para": "(a, b)", "arg": ["148, 412", "19, 28", "2020, 1851", "14,-15", "76, 67", "17, 27", "0, 1", "0, 0"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef multiply(a, b):\n    return abs(a % 10) * abs(b % 10)\n\nassert multiply(<FILL_ME>) == 72\n```", "assert": "72", "code": "def multiply(a, b):\n    return abs(a % 10) * abs(b % 10)\n"}
{"task_id": "Python/97", "fn": "multiply", "para": "(a, b)", "arg": ["148, 412", "19, 28", "2020, 1851", "14,-15", "76, 67", "17, 27", "0, 1", "0, 0"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef multiply(a, b):\n    return abs(a % 10) * abs(b % 10)\n\nassert multiply(<FILL_ME>) == 20\n```", "assert": "20", "code": "def multiply(a, b):\n    return abs(a % 10) * abs(b % 10)\n"}
{"task_id": "Python/97", "fn": "multiply", "para": "(a, b)", "arg": ["148, 412", "19, 28", "2020, 1851", "14,-15", "76, 67", "17, 27", "0, 1", "0, 0"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef multiply(a, b):\n    return abs(a % 10) * abs(b % 10)\n\nassert multiply(<FILL_ME>) == 42\n```", "assert": "42", "code": "def multiply(a, b):\n    return abs(a % 10) * abs(b % 10)\n"}
{"task_id": "Python/97", "fn": "multiply", "para": "(a, b)", "arg": ["148, 412", "19, 28", "2020, 1851", "14,-15", "76, 67", "17, 27", "0, 1", "0, 0"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef multiply(a, b):\n    return abs(a % 10) * abs(b % 10)\n\nassert multiply(<FILL_ME>) == 0\n```", "assert": "0", "code": "def multiply(a, b):\n    return abs(a % 10) * abs(b % 10)\n"}
{"task_id": "Python/97", "fn": "multiply", "para": "(a, b)", "arg": ["148, 412", "19, 28", "2020, 1851", "14,-15", "76, 67", "17, 27", "0, 1", "0, 0"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef multiply(a, b):\n    return abs(a % 10) * abs(b % 10)\n\nassert multiply(<FILL_ME>) == 49\n```", "assert": "49", "code": "def multiply(a, b):\n    return abs(a % 10) * abs(b % 10)\n"}
{"task_id": "Python/97", "fn": "multiply", "para": "(a, b)", "arg": ["148, 412", "19, 28", "2020, 1851", "14,-15", "76, 67", "17, 27", "0, 1", "0, 0"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef multiply(a, b):\n    return abs(a % 10) * abs(b % 10)\n\nassert multiply(<FILL_ME>) == 16\n```", "assert": "16", "code": "def multiply(a, b):\n    return abs(a % 10) * abs(b % 10)\n"}
{"task_id": "Python/98", "fn": "count_upper", "para": "(s)", "arg": ["'aBCdEf'", "'abcdefg'", "'dBBE'", "'B'", "'U'", "''", "'EEEE'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef count_upper(s):\n    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n\nassert count_upper(<FILL_ME>) == 0\n```", "assert": "0", "code": "def count_upper(s):\n    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n"}
{"task_id": "Python/98", "fn": "count_upper", "para": "(s)", "arg": ["'aBCdEf'", "'abcdefg'", "'dBBE'", "'B'", "'U'", "''", "'EEEE'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef count_upper(s):\n    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n\nassert count_upper(<FILL_ME>) == 2\n```", "assert": "2", "code": "def count_upper(s):\n    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n"}
{"task_id": "Python/98", "fn": "count_upper", "para": "(s)", "arg": ["'aBCdEf'", "'abcdefg'", "'dBBE'", "'B'", "'U'", "''", "'EEEE'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef count_upper(s):\n    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n\nassert count_upper(<FILL_ME>) == 1\n```", "assert": "1", "code": "def count_upper(s):\n    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n"}
{"task_id": "Python/99", "fn": "closest_integer", "para": "(value)", "arg": ["\"10\"", "\"14.5\"", "\"-15.5\"", "\"15.3\"", "\"0\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef closest_integer(value):\n    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n\nassert closest_integer(<FILL_ME>) == 10\n```", "assert": "10", "code": "def closest_integer(value):\n    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n"}
{"task_id": "Python/99", "fn": "closest_integer", "para": "(value)", "arg": ["\"10\"", "\"14.5\"", "\"-15.5\"", "\"15.3\"", "\"0\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef closest_integer(value):\n    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n\nassert closest_integer(<FILL_ME>) == 0\n```", "assert": "0", "code": "def closest_integer(value):\n    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n"}
{"task_id": "Python/99", "fn": "closest_integer", "para": "(value)", "arg": ["\"10\"", "\"14.5\"", "\"-15.5\"", "\"15.3\"", "\"0\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef closest_integer(value):\n    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n\nassert closest_integer(<FILL_ME>) == 15\n```", "assert": "15", "code": "def closest_integer(value):\n    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n"}
{"task_id": "Python/99", "fn": "closest_integer", "para": "(value)", "arg": ["\"10\"", "\"14.5\"", "\"-15.5\"", "\"15.3\"", "\"0\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef closest_integer(value):\n    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n\nassert closest_integer(<FILL_ME>) == -16\n```", "assert": "-16", "code": "def closest_integer(value):\n    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n"}
{"task_id": "Python/100", "fn": "make_a_pile", "para": "(n)", "arg": ["3", "4", "5", "6", "8"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef make_a_pile(n):\n    return [n + 2*i for i in range(n)]\n\nassert make_a_pile(<FILL_ME>) == [6, 8, 10, 12, 14, 16]\n```", "assert": "[6, 8, 10, 12, 14, 16]", "code": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]\n"}
{"task_id": "Python/100", "fn": "make_a_pile", "para": "(n)", "arg": ["3", "4", "5", "6", "8"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef make_a_pile(n):\n    return [n + 2*i for i in range(n)]\n\nassert make_a_pile(<FILL_ME>) == [8, 10, 12, 14, 16, 18, 20, 22]\n```", "assert": "[8, 10, 12, 14, 16, 18, 20, 22]", "code": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]\n"}
{"task_id": "Python/100", "fn": "make_a_pile", "para": "(n)", "arg": ["3", "4", "5", "6", "8"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef make_a_pile(n):\n    return [n + 2*i for i in range(n)]\n\nassert make_a_pile(<FILL_ME>) == [3, 5, 7]\n```", "assert": "[3, 5, 7]", "code": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]\n"}
{"task_id": "Python/100", "fn": "make_a_pile", "para": "(n)", "arg": ["3", "4", "5", "6", "8"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef make_a_pile(n):\n    return [n + 2*i for i in range(n)]\n\nassert make_a_pile(<FILL_ME>) == [5, 7, 9, 11, 13]\n```", "assert": "[5, 7, 9, 11, 13]", "code": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]\n"}
{"task_id": "Python/100", "fn": "make_a_pile", "para": "(n)", "arg": ["3", "4", "5", "6", "8"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef make_a_pile(n):\n    return [n + 2*i for i in range(n)]\n\nassert make_a_pile(<FILL_ME>) == [4,6,8,10]\n```", "assert": "[4,6,8,10]", "code": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]\n"}
{"task_id": "Python/101", "fn": "words_string", "para": "(s)", "arg": ["\"Hi, my name is John\"", "\"One, two, three, four, five, six\"", "\"Hi, my name\"", "\"One,, two, three, four, five, six,\"", "\"\"", "\"ahmed     , gamal\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef words_string(s):\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\nassert words_string(<FILL_ME>) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n```", "assert": "[\"Hi\", \"my\", \"name\", \"is\", \"John\"]", "code": "def words_string(s):\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n"}
{"task_id": "Python/101", "fn": "words_string", "para": "(s)", "arg": ["\"Hi, my name is John\"", "\"One, two, three, four, five, six\"", "\"Hi, my name\"", "\"One,, two, three, four, five, six,\"", "\"\"", "\"ahmed     , gamal\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef words_string(s):\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\nassert words_string(<FILL_ME>) == [\"Hi\", \"my\", \"name\"]\n```", "assert": "[\"Hi\", \"my\", \"name\"]", "code": "def words_string(s):\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n"}
{"task_id": "Python/101", "fn": "words_string", "para": "(s)", "arg": ["\"Hi, my name is John\"", "\"One, two, three, four, five, six\"", "\"Hi, my name\"", "\"One,, two, three, four, five, six,\"", "\"\"", "\"ahmed     , gamal\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef words_string(s):\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\nassert words_string(<FILL_ME>) == []\n```", "assert": "[]", "code": "def words_string(s):\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n"}
{"task_id": "Python/101", "fn": "words_string", "para": "(s)", "arg": ["\"Hi, my name is John\"", "\"One, two, three, four, five, six\"", "\"Hi, my name\"", "\"One,, two, three, four, five, six,\"", "\"\"", "\"ahmed     , gamal\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef words_string(s):\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\nassert words_string(<FILL_ME>) == [\"ahmed\", \"gamal\"]\n```", "assert": "[\"ahmed\", \"gamal\"]", "code": "def words_string(s):\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n"}
{"task_id": "Python/101", "fn": "words_string", "para": "(s)", "arg": ["\"Hi, my name is John\"", "\"One, two, three, four, five, six\"", "\"Hi, my name\"", "\"One,, two, three, four, five, six,\"", "\"\"", "\"ahmed     , gamal\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef words_string(s):\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\nassert words_string(<FILL_ME>) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n```", "assert": "[\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]", "code": "def words_string(s):\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n"}
{"task_id": "Python/102", "fn": "choose_num", "para": "(x, y)", "arg": ["12, 15", "13, 12", "33, 12354", "5234, 5233", "6, 29", "27, 10", "7, 7", "546, 546"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef choose_num(x, y):\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n\nassert choose_num(<FILL_ME>) == -1\n```", "assert": "-1", "code": "def choose_num(x, y):\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n"}
{"task_id": "Python/102", "fn": "choose_num", "para": "(x, y)", "arg": ["12, 15", "13, 12", "33, 12354", "5234, 5233", "6, 29", "27, 10", "7, 7", "546, 546"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef choose_num(x, y):\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n\nassert choose_num(<FILL_ME>) == 12354\n```", "assert": "12354", "code": "def choose_num(x, y):\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n"}
{"task_id": "Python/102", "fn": "choose_num", "para": "(x, y)", "arg": ["12, 15", "13, 12", "33, 12354", "5234, 5233", "6, 29", "27, 10", "7, 7", "546, 546"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef choose_num(x, y):\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n\nassert choose_num(<FILL_ME>) == 546\n```", "assert": "546", "code": "def choose_num(x, y):\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n"}
{"task_id": "Python/102", "fn": "choose_num", "para": "(x, y)", "arg": ["12, 15", "13, 12", "33, 12354", "5234, 5233", "6, 29", "27, 10", "7, 7", "546, 546"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef choose_num(x, y):\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n\nassert choose_num(<FILL_ME>) == 28\n```", "assert": "28", "code": "def choose_num(x, y):\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n"}
{"task_id": "Python/102", "fn": "choose_num", "para": "(x, y)", "arg": ["12, 15", "13, 12", "33, 12354", "5234, 5233", "6, 29", "27, 10", "7, 7", "546, 546"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef choose_num(x, y):\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n\nassert choose_num(<FILL_ME>) == 14\n```", "assert": "14", "code": "def choose_num(x, y):\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n"}
{"task_id": "Python/103", "fn": "rounded_avg", "para": "(n, m)", "arg": ["1, 5", "7, 13", "964,977", "996,997", "560,851", "185,546", "362,496", "350,902", "197,233", "7, 5", "5, 1", "5, 5"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n\nassert rounded_avg(<FILL_ME>) == -1\n```", "assert": "-1", "code": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n"}
{"task_id": "Python/103", "fn": "rounded_avg", "para": "(n, m)", "arg": ["1, 5", "7, 13", "964,977", "996,997", "560,851", "185,546", "362,496", "350,902", "197,233", "7, 5", "5, 1", "5, 5"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n\nassert rounded_avg(<FILL_ME>) == \"0b101\"\n```", "assert": "\"0b101\"", "code": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n"}
{"task_id": "Python/103", "fn": "rounded_avg", "para": "(n, m)", "arg": ["1, 5", "7, 13", "964,977", "996,997", "560,851", "185,546", "362,496", "350,902", "197,233", "7, 5", "5, 1", "5, 5"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n\nassert rounded_avg(<FILL_ME>) == \"0b1001110010\"\n```", "assert": "\"0b1001110010\"", "code": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n"}
{"task_id": "Python/103", "fn": "rounded_avg", "para": "(n, m)", "arg": ["1, 5", "7, 13", "964,977", "996,997", "560,851", "185,546", "362,496", "350,902", "197,233", "7, 5", "5, 1", "5, 5"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n\nassert rounded_avg(<FILL_ME>) == \"0b11\"\n```", "assert": "\"0b11\"", "code": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n"}
{"task_id": "Python/103", "fn": "rounded_avg", "para": "(n, m)", "arg": ["1, 5", "7, 13", "964,977", "996,997", "560,851", "185,546", "362,496", "350,902", "197,233", "7, 5", "5, 1", "5, 5"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n\nassert rounded_avg(<FILL_ME>) == \"0b1111100100\"\n```", "assert": "\"0b1111100100\"", "code": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n"}
{"task_id": "Python/103", "fn": "rounded_avg", "para": "(n, m)", "arg": ["1, 5", "7, 13", "964,977", "996,997", "560,851", "185,546", "362,496", "350,902", "197,233", "7, 5", "5, 1", "5, 5"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n\nassert rounded_avg(<FILL_ME>) == \"0b1111001010\"\n```", "assert": "\"0b1111001010\"", "code": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n"}
{"task_id": "Python/103", "fn": "rounded_avg", "para": "(n, m)", "arg": ["1, 5", "7, 13", "964,977", "996,997", "560,851", "185,546", "362,496", "350,902", "197,233", "7, 5", "5, 1", "5, 5"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n\nassert rounded_avg(<FILL_ME>) == \"0b101101110\"\n```", "assert": "\"0b101101110\"", "code": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n"}
{"task_id": "Python/103", "fn": "rounded_avg", "para": "(n, m)", "arg": ["1, 5", "7, 13", "964,977", "996,997", "560,851", "185,546", "362,496", "350,902", "197,233", "7, 5", "5, 1", "5, 5"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n\nassert rounded_avg(<FILL_ME>) == \"0b1010\"\n```", "assert": "\"0b1010\"", "code": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n"}
{"task_id": "Python/103", "fn": "rounded_avg", "para": "(n, m)", "arg": ["1, 5", "7, 13", "964,977", "996,997", "560,851", "185,546", "362,496", "350,902", "197,233", "7, 5", "5, 1", "5, 5"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n\nassert rounded_avg(<FILL_ME>) == \"0b110101101\"\n```", "assert": "\"0b110101101\"", "code": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n"}
{"task_id": "Python/103", "fn": "rounded_avg", "para": "(n, m)", "arg": ["1, 5", "7, 13", "964,977", "996,997", "560,851", "185,546", "362,496", "350,902", "197,233", "7, 5", "5, 1", "5, 5"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n\nassert rounded_avg(<FILL_ME>) == \"0b1011000010\"\n```", "assert": "\"0b1011000010\"", "code": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n"}
{"task_id": "Python/103", "fn": "rounded_avg", "para": "(n, m)", "arg": ["1, 5", "7, 13", "964,977", "996,997", "560,851", "185,546", "362,496", "350,902", "197,233", "7, 5", "5, 1", "5, 5"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n\nassert rounded_avg(<FILL_ME>) == \"0b11010111\"\n```", "assert": "\"0b11010111\"", "code": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n"}
{"task_id": "Python/104", "fn": "unique_digits", "para": "(x)", "arg": ["[15, 33, 1422, 1]", "[152, 323, 1422, 10]", "[12345, 2033, 111, 151]", "[135, 103, 31]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef unique_digits(x):\n    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n\nassert unique_digits(<FILL_ME>) == [1, 15, 33]\n```", "assert": "[1, 15, 33]", "code": "def unique_digits(x):\n    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n"}
{"task_id": "Python/104", "fn": "unique_digits", "para": "(x)", "arg": ["[15, 33, 1422, 1]", "[152, 323, 1422, 10]", "[12345, 2033, 111, 151]", "[135, 103, 31]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef unique_digits(x):\n    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n\nassert unique_digits(<FILL_ME>) == [111, 151]\n```", "assert": "[111, 151]", "code": "def unique_digits(x):\n    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n"}
{"task_id": "Python/104", "fn": "unique_digits", "para": "(x)", "arg": ["[15, 33, 1422, 1]", "[152, 323, 1422, 10]", "[12345, 2033, 111, 151]", "[135, 103, 31]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef unique_digits(x):\n    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n\nassert unique_digits(<FILL_ME>) == []\n```", "assert": "[]", "code": "def unique_digits(x):\n    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n"}
{"task_id": "Python/104", "fn": "unique_digits", "para": "(x)", "arg": ["[15, 33, 1422, 1]", "[152, 323, 1422, 10]", "[12345, 2033, 111, 151]", "[135, 103, 31]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef unique_digits(x):\n    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n\nassert unique_digits(<FILL_ME>) == [31, 135]\n```", "assert": "[31, 135]", "code": "def unique_digits(x):\n    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n"}
{"task_id": "Python/105", "fn": "by_length", "para": "(arr)", "arg": ["[2, 1, 1, 4, 5, 8, 2, 3]", "[]", "[1, -1 , 55]", "[1, -1, 3, 2]", "[9, 4, 8]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef by_length(arr):\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n\nassert by_length(<FILL_ME>) == ['One']\n```", "assert": "['One']", "code": "def by_length(arr):\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n"}
{"task_id": "Python/105", "fn": "by_length", "para": "(arr)", "arg": ["[2, 1, 1, 4, 5, 8, 2, 3]", "[]", "[1, -1 , 55]", "[1, -1, 3, 2]", "[9, 4, 8]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef by_length(arr):\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n\nassert by_length(<FILL_ME>) == [\"Nine\", \"Eight\", \"Four\"]\n```", "assert": "[\"Nine\", \"Eight\", \"Four\"]", "code": "def by_length(arr):\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n"}
{"task_id": "Python/105", "fn": "by_length", "para": "(arr)", "arg": ["[2, 1, 1, 4, 5, 8, 2, 3]", "[]", "[1, -1 , 55]", "[1, -1, 3, 2]", "[9, 4, 8]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef by_length(arr):\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n\nassert by_length(<FILL_ME>) == [\"Three\", \"Two\", \"One\"]\n```", "assert": "[\"Three\", \"Two\", \"One\"]", "code": "def by_length(arr):\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n"}
{"task_id": "Python/105", "fn": "by_length", "para": "(arr)", "arg": ["[2, 1, 1, 4, 5, 8, 2, 3]", "[]", "[1, -1 , 55]", "[1, -1, 3, 2]", "[9, 4, 8]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef by_length(arr):\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n\nassert by_length(<FILL_ME>) == []\n```", "assert": "[]", "code": "def by_length(arr):\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n"}
{"task_id": "Python/105", "fn": "by_length", "para": "(arr)", "arg": ["[2, 1, 1, 4, 5, 8, 2, 3]", "[]", "[1, -1 , 55]", "[1, -1, 3, 2]", "[9, 4, 8]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef by_length(arr):\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n\nassert by_length(<FILL_ME>) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n```", "assert": "[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]", "code": "def by_length(arr):\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n"}
{"task_id": "Python/106", "fn": "f", "para": "(n)", "arg": ["5", "7", "1", "3"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef f(n):\n    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n\nassert f(<FILL_ME>) == [1, 2, 6, 24, 15]\n```", "assert": "[1, 2, 6, 24, 15]", "code": "def f(n):\n    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n"}
{"task_id": "Python/106", "fn": "f", "para": "(n)", "arg": ["5", "7", "1", "3"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef f(n):\n    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n\nassert f(<FILL_ME>) == [1, 2, 6, 24, 15, 720, 28]\n```", "assert": "[1, 2, 6, 24, 15, 720, 28]", "code": "def f(n):\n    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n"}
{"task_id": "Python/106", "fn": "f", "para": "(n)", "arg": ["5", "7", "1", "3"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef f(n):\n    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n\nassert f(<FILL_ME>) == [1]\n```", "assert": "[1]", "code": "def f(n):\n    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n"}
{"task_id": "Python/106", "fn": "f", "para": "(n)", "arg": ["5", "7", "1", "3"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef f(n):\n    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n\nassert f(<FILL_ME>) == [1, 2, 6]\n```", "assert": "[1, 2, 6]", "code": "def f(n):\n    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n"}
{"task_id": "Python/107", "fn": "even_odd_palindrome", "para": "(n)", "arg": ["123", "12", "3", "63", "25", "19", "9", "1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\nassert even_odd_palindrome(<FILL_ME>) == (6, 8)\n```", "assert": "(6, 8)", "code": "def even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n"}
{"task_id": "Python/107", "fn": "even_odd_palindrome", "para": "(n)", "arg": ["123", "12", "3", "63", "25", "19", "9", "1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\nassert even_odd_palindrome(<FILL_ME>) == (4, 6)\n```", "assert": "(4, 6)", "code": "def even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n"}
{"task_id": "Python/107", "fn": "even_odd_palindrome", "para": "(n)", "arg": ["123", "12", "3", "63", "25", "19", "9", "1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\nassert even_odd_palindrome(<FILL_ME>) == (5, 6)\n```", "assert": "(5, 6)", "code": "def even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n"}
{"task_id": "Python/107", "fn": "even_odd_palindrome", "para": "(n)", "arg": ["123", "12", "3", "63", "25", "19", "9", "1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\nassert even_odd_palindrome(<FILL_ME>) == (4, 5)\n```", "assert": "(4, 5)", "code": "def even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n"}
{"task_id": "Python/107", "fn": "even_odd_palindrome", "para": "(n)", "arg": ["123", "12", "3", "63", "25", "19", "9", "1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\nassert even_odd_palindrome(<FILL_ME>) == (8, 13)\n```", "assert": "(8, 13)", "code": "def even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n"}
{"task_id": "Python/107", "fn": "even_odd_palindrome", "para": "(n)", "arg": ["123", "12", "3", "63", "25", "19", "9", "1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\nassert even_odd_palindrome(<FILL_ME>) == (0, 1)\n```", "assert": "(0, 1)", "code": "def even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n"}
{"task_id": "Python/107", "fn": "even_odd_palindrome", "para": "(n)", "arg": ["123", "12", "3", "63", "25", "19", "9", "1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\nassert even_odd_palindrome(<FILL_ME>) == (1, 2)\n```", "assert": "(1, 2)", "code": "def even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n"}
{"task_id": "Python/108", "fn": "count_nums", "para": "(arr)", "arg": ["[]", "[-1, -2, 0]", "[1, 1, 2, -2, 3, 4, 5]", "[1, 6, 9, -6, 0, 1, 5]", "[1, 100, 98, -7, 1, -1]", "[12, 23, 34, -45, -56, 0]", "[-0, 1**0]", "[1]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef count_nums(arr):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n\nassert count_nums(<FILL_ME>) == 5\n```", "assert": "5", "code": "def count_nums(arr):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n"}
{"task_id": "Python/108", "fn": "count_nums", "para": "(arr)", "arg": ["[]", "[-1, -2, 0]", "[1, 1, 2, -2, 3, 4, 5]", "[1, 6, 9, -6, 0, 1, 5]", "[1, 100, 98, -7, 1, -1]", "[12, 23, 34, -45, -56, 0]", "[-0, 1**0]", "[1]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef count_nums(arr):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n\nassert count_nums(<FILL_ME>) == 0\n```", "assert": "0", "code": "def count_nums(arr):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n"}
{"task_id": "Python/108", "fn": "count_nums", "para": "(arr)", "arg": ["[]", "[-1, -2, 0]", "[1, 1, 2, -2, 3, 4, 5]", "[1, 6, 9, -6, 0, 1, 5]", "[1, 100, 98, -7, 1, -1]", "[12, 23, 34, -45, -56, 0]", "[-0, 1**0]", "[1]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef count_nums(arr):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n\nassert count_nums(<FILL_ME>) == 6\n```", "assert": "6", "code": "def count_nums(arr):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n"}
{"task_id": "Python/108", "fn": "count_nums", "para": "(arr)", "arg": ["[]", "[-1, -2, 0]", "[1, 1, 2, -2, 3, 4, 5]", "[1, 6, 9, -6, 0, 1, 5]", "[1, 100, 98, -7, 1, -1]", "[12, 23, 34, -45, -56, 0]", "[-0, 1**0]", "[1]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef count_nums(arr):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n\nassert count_nums(<FILL_ME>) == 4\n```", "assert": "4", "code": "def count_nums(arr):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n"}
{"task_id": "Python/108", "fn": "count_nums", "para": "(arr)", "arg": ["[]", "[-1, -2, 0]", "[1, 1, 2, -2, 3, 4, 5]", "[1, 6, 9, -6, 0, 1, 5]", "[1, 100, 98, -7, 1, -1]", "[12, 23, 34, -45, -56, 0]", "[-0, 1**0]", "[1]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef count_nums(arr):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n\nassert count_nums(<FILL_ME>) == 1\n```", "assert": "1", "code": "def count_nums(arr):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n"}
{"task_id": "Python/109", "fn": "move_one_ball", "para": "(arr)", "arg": ["[3, 4, 5, 1, 2]", "[3, 5, 10, 1, 2]", "[4, 3, 1, 2]", "[3, 5, 4, 1, 2]", "[]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef move_one_ball(arr):\n    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n\nassert move_one_ball(<FILL_ME>) == True\n```", "assert": "True", "code": "def move_one_ball(arr):\n    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n"}
{"task_id": "Python/109", "fn": "move_one_ball", "para": "(arr)", "arg": ["[3, 4, 5, 1, 2]", "[3, 5, 10, 1, 2]", "[4, 3, 1, 2]", "[3, 5, 4, 1, 2]", "[]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef move_one_ball(arr):\n    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n\nassert move_one_ball(<FILL_ME>) == False\n```", "assert": "False", "code": "def move_one_ball(arr):\n    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n"}
{"task_id": "Python/110", "fn": "exchange", "para": "(lst1, lst2)", "arg": ["[1, 2, 3, 4], [1, 2, 3, 4]", "[1, 2, 3, 4], [1, 5, 3, 4]", "[1, 2, 3, 4], [2, 1, 4, 3]", "[5, 7, 3], [2, 6, 4]", "[5, 7, 3], [2, 6, 3]", "[3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]", "[100, 200], [200, 200]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef exchange(lst1, lst2):\n    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n\nassert exchange(<FILL_ME>) == \"YES\"\n```", "assert": "\"YES\"", "code": "def exchange(lst1, lst2):\n    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n"}
{"task_id": "Python/110", "fn": "exchange", "para": "(lst1, lst2)", "arg": ["[1, 2, 3, 4], [1, 2, 3, 4]", "[1, 2, 3, 4], [1, 5, 3, 4]", "[1, 2, 3, 4], [2, 1, 4, 3]", "[5, 7, 3], [2, 6, 4]", "[5, 7, 3], [2, 6, 3]", "[3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]", "[100, 200], [200, 200]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef exchange(lst1, lst2):\n    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n\nassert exchange(<FILL_ME>) == \"NO\"\n```", "assert": "\"NO\"", "code": "def exchange(lst1, lst2):\n    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n"}
{"task_id": "Python/111", "fn": "histogram", "para": "(test)", "arg": ["'a b b a'", "'a b c a b'", "'a b c d g'", "'r t g'", "'b b b b a'", "'r t g'", "''", "'a'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef histogram(test):\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n\nassert histogram(<FILL_ME>) == {'a': 2, 'b': 2}\n```", "assert": "{'a': 2, 'b': 2}", "code": "def histogram(test):\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n"}
{"task_id": "Python/111", "fn": "histogram", "para": "(test)", "arg": ["'a b b a'", "'a b c a b'", "'a b c d g'", "'r t g'", "'b b b b a'", "'r t g'", "''", "'a'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef histogram(test):\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n\nassert histogram(<FILL_ME>) == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}\n```", "assert": "{'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}", "code": "def histogram(test):\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n"}
{"task_id": "Python/111", "fn": "histogram", "para": "(test)", "arg": ["'a b b a'", "'a b c a b'", "'a b c d g'", "'r t g'", "'b b b b a'", "'r t g'", "''", "'a'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef histogram(test):\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n\nassert histogram(<FILL_ME>) == {'a': 1}\n```", "assert": "{'a': 1}", "code": "def histogram(test):\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n"}
{"task_id": "Python/111", "fn": "histogram", "para": "(test)", "arg": ["'a b b a'", "'a b c a b'", "'a b c d g'", "'r t g'", "'b b b b a'", "'r t g'", "''", "'a'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef histogram(test):\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n\nassert histogram(<FILL_ME>) == {'a':2,'b': 2}\n```", "assert": "{'a':2,'b': 2}", "code": "def histogram(test):\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n"}
{"task_id": "Python/111", "fn": "histogram", "para": "(test)", "arg": ["'a b b a'", "'a b c a b'", "'a b c d g'", "'r t g'", "'b b b b a'", "'r t g'", "''", "'a'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef histogram(test):\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n\nassert histogram(<FILL_ME>) == {'b': 4}\n```", "assert": "{'b': 4}", "code": "def histogram(test):\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n"}
{"task_id": "Python/111", "fn": "histogram", "para": "(test)", "arg": ["'a b b a'", "'a b c a b'", "'a b c d g'", "'r t g'", "'b b b b a'", "'r t g'", "''", "'a'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef histogram(test):\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n\nassert histogram(<FILL_ME>) == {'r': 1,'t': 1,'g': 1}\n```", "assert": "{'r': 1,'t': 1,'g': 1}", "code": "def histogram(test):\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n"}
{"task_id": "Python/111", "fn": "histogram", "para": "(test)", "arg": ["'a b b a'", "'a b c a b'", "'a b c d g'", "'r t g'", "'b b b b a'", "'r t g'", "''", "'a'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef histogram(test):\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n\nassert histogram(<FILL_ME>) == {}\n```", "assert": "{}", "code": "def histogram(test):\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n"}
{"task_id": "Python/112", "fn": "reverse_delete", "para": "(s,c)", "arg": ["\"abcde\",\"ae\"", "\"abcdef\", \"b\"", "\"abcdedcba\",\"ab\"", "\"dwik\",\"w\"", "\"a\",\"a\"", "\"abcdedcba\",\"\"", "\"abcdedcba\",\"v\"", "\"vabba\",\"v\"", "\"mamma\", \"mia\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef reverse_delete(s,c):\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n\nassert reverse_delete(<FILL_ME>) == ('bcd',False)\n```", "assert": "('bcd',False)", "code": "def reverse_delete(s,c):\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n"}
{"task_id": "Python/112", "fn": "reverse_delete", "para": "(s,c)", "arg": ["\"abcde\",\"ae\"", "\"abcdef\", \"b\"", "\"abcdedcba\",\"ab\"", "\"dwik\",\"w\"", "\"a\",\"a\"", "\"abcdedcba\",\"\"", "\"abcdedcba\",\"v\"", "\"vabba\",\"v\"", "\"mamma\", \"mia\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef reverse_delete(s,c):\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n\nassert reverse_delete(<FILL_ME>) == ('acdef',False)\n```", "assert": "('acdef',False)", "code": "def reverse_delete(s,c):\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n"}
{"task_id": "Python/112", "fn": "reverse_delete", "para": "(s,c)", "arg": ["\"abcde\",\"ae\"", "\"abcdef\", \"b\"", "\"abcdedcba\",\"ab\"", "\"dwik\",\"w\"", "\"a\",\"a\"", "\"abcdedcba\",\"\"", "\"abcdedcba\",\"v\"", "\"vabba\",\"v\"", "\"mamma\", \"mia\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef reverse_delete(s,c):\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n\nassert reverse_delete(<FILL_ME>) == ('abcdedcba',True)\n```", "assert": "('abcdedcba',True)", "code": "def reverse_delete(s,c):\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n"}
{"task_id": "Python/112", "fn": "reverse_delete", "para": "(s,c)", "arg": ["\"abcde\",\"ae\"", "\"abcdef\", \"b\"", "\"abcdedcba\",\"ab\"", "\"dwik\",\"w\"", "\"a\",\"a\"", "\"abcdedcba\",\"\"", "\"abcdedcba\",\"v\"", "\"vabba\",\"v\"", "\"mamma\", \"mia\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef reverse_delete(s,c):\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n\nassert reverse_delete(<FILL_ME>) == ('abba',True)\n```", "assert": "('abba',True)", "code": "def reverse_delete(s,c):\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n"}
{"task_id": "Python/112", "fn": "reverse_delete", "para": "(s,c)", "arg": ["\"abcde\",\"ae\"", "\"abcdef\", \"b\"", "\"abcdedcba\",\"ab\"", "\"dwik\",\"w\"", "\"a\",\"a\"", "\"abcdedcba\",\"\"", "\"abcdedcba\",\"v\"", "\"vabba\",\"v\"", "\"mamma\", \"mia\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef reverse_delete(s,c):\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n\nassert reverse_delete(<FILL_ME>) == ('dik',False)\n```", "assert": "('dik',False)", "code": "def reverse_delete(s,c):\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n"}
{"task_id": "Python/112", "fn": "reverse_delete", "para": "(s,c)", "arg": ["\"abcde\",\"ae\"", "\"abcdef\", \"b\"", "\"abcdedcba\",\"ab\"", "\"dwik\",\"w\"", "\"a\",\"a\"", "\"abcdedcba\",\"\"", "\"abcdedcba\",\"v\"", "\"vabba\",\"v\"", "\"mamma\", \"mia\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef reverse_delete(s,c):\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n\nassert reverse_delete(<FILL_ME>) == ('',True)\n```", "assert": "('',True)", "code": "def reverse_delete(s,c):\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n"}
{"task_id": "Python/112", "fn": "reverse_delete", "para": "(s,c)", "arg": ["\"abcde\",\"ae\"", "\"abcdef\", \"b\"", "\"abcdedcba\",\"ab\"", "\"dwik\",\"w\"", "\"a\",\"a\"", "\"abcdedcba\",\"\"", "\"abcdedcba\",\"v\"", "\"vabba\",\"v\"", "\"mamma\", \"mia\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef reverse_delete(s,c):\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n\nassert reverse_delete(<FILL_ME>) == (\"\", True)\n```", "assert": "(\"\", True)", "code": "def reverse_delete(s,c):\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n"}
{"task_id": "Python/112", "fn": "reverse_delete", "para": "(s,c)", "arg": ["\"abcde\",\"ae\"", "\"abcdef\", \"b\"", "\"abcdedcba\",\"ab\"", "\"dwik\",\"w\"", "\"a\",\"a\"", "\"abcdedcba\",\"\"", "\"abcdedcba\",\"v\"", "\"vabba\",\"v\"", "\"mamma\", \"mia\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef reverse_delete(s,c):\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n\nassert reverse_delete(<FILL_ME>) == ('cdedc',True)\n```", "assert": "('cdedc',True)", "code": "def reverse_delete(s,c):\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n"}
{"task_id": "Python/113", "fn": "odd_count", "para": "(lst)", "arg": ["['1234567']", "['3',\"11111111\"]", null], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef odd_count(lst):\n    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n\nassert odd_count(<FILL_ME>) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n```", "assert": "[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]", "code": "def odd_count(lst):\n    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n"}
{"task_id": "Python/113", "fn": "odd_count", "para": "(lst)", "arg": ["['1234567']", "['3',\"11111111\"]", null], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef odd_count(lst):\n    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n\nassert odd_count(<FILL_ME>) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n```", "assert": "[\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]", "code": "def odd_count(lst):\n    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n"}
{"task_id": "Python/113", "fn": "odd_count", "para": "(lst)", "arg": ["['1234567']", "['3',\"11111111\"]", null], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef odd_count(lst):\n    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n\nassert odd_count(<FILL_ME>) == None\n```", "assert": null, "code": "def odd_count(lst):\n    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n"}
{"task_id": "Python/114", "fn": "minSubArraySum", "para": "(nums)", "arg": ["[2, 3, 4, 1, 2, 4]", "[-1, -2, -3]", "[-1, -2, -3, 2, -10]", "[-9999999999999999]", "[0, 10, 20, 1000000]", "[-1, -2, -3, 10, -5]", "[100, -1, -2, -3, 10, -5]", "[10, 11, 13, 8, 3, 4]", "[100, -33, 32, -1, 0, -2]", "[-10]", "[7]", "[1, -1]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n\nassert minSubArraySum(<FILL_ME>) == 3\n```", "assert": "3", "code": "def minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n"}
{"task_id": "Python/114", "fn": "minSubArraySum", "para": "(nums)", "arg": ["[2, 3, 4, 1, 2, 4]", "[-1, -2, -3]", "[-1, -2, -3, 2, -10]", "[-9999999999999999]", "[0, 10, 20, 1000000]", "[-1, -2, -3, 10, -5]", "[100, -1, -2, -3, 10, -5]", "[10, 11, 13, 8, 3, 4]", "[100, -33, 32, -1, 0, -2]", "[-10]", "[7]", "[1, -1]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n\nassert minSubArraySum(<FILL_ME>) == 7\n```", "assert": "7", "code": "def minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n"}
{"task_id": "Python/114", "fn": "minSubArraySum", "para": "(nums)", "arg": ["[2, 3, 4, 1, 2, 4]", "[-1, -2, -3]", "[-1, -2, -3, 2, -10]", "[-9999999999999999]", "[0, 10, 20, 1000000]", "[-1, -2, -3, 10, -5]", "[100, -1, -2, -3, 10, -5]", "[10, 11, 13, 8, 3, 4]", "[100, -33, 32, -1, 0, -2]", "[-10]", "[7]", "[1, -1]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n\nassert minSubArraySum(<FILL_ME>) == -1\n```", "assert": "-1", "code": "def minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n"}
{"task_id": "Python/114", "fn": "minSubArraySum", "para": "(nums)", "arg": ["[2, 3, 4, 1, 2, 4]", "[-1, -2, -3]", "[-1, -2, -3, 2, -10]", "[-9999999999999999]", "[0, 10, 20, 1000000]", "[-1, -2, -3, 10, -5]", "[100, -1, -2, -3, 10, -5]", "[10, 11, 13, 8, 3, 4]", "[100, -33, 32, -1, 0, -2]", "[-10]", "[7]", "[1, -1]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n\nassert minSubArraySum(<FILL_ME>) == -33\n```", "assert": "-33", "code": "def minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n"}
{"task_id": "Python/114", "fn": "minSubArraySum", "para": "(nums)", "arg": ["[2, 3, 4, 1, 2, 4]", "[-1, -2, -3]", "[-1, -2, -3, 2, -10]", "[-9999999999999999]", "[0, 10, 20, 1000000]", "[-1, -2, -3, 10, -5]", "[100, -1, -2, -3, 10, -5]", "[10, 11, 13, 8, 3, 4]", "[100, -33, 32, -1, 0, -2]", "[-10]", "[7]", "[1, -1]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n\nassert minSubArraySum(<FILL_ME>) == 0\n```", "assert": "0", "code": "def minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n"}
{"task_id": "Python/114", "fn": "minSubArraySum", "para": "(nums)", "arg": ["[2, 3, 4, 1, 2, 4]", "[-1, -2, -3]", "[-1, -2, -3, 2, -10]", "[-9999999999999999]", "[0, 10, 20, 1000000]", "[-1, -2, -3, 10, -5]", "[100, -1, -2, -3, 10, -5]", "[10, 11, 13, 8, 3, 4]", "[100, -33, 32, -1, 0, -2]", "[-10]", "[7]", "[1, -1]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n\nassert minSubArraySum(<FILL_ME>) == -9999999999999999\n```", "assert": "-9999999999999999", "code": "def minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n"}
{"task_id": "Python/114", "fn": "minSubArraySum", "para": "(nums)", "arg": ["[2, 3, 4, 1, 2, 4]", "[-1, -2, -3]", "[-1, -2, -3, 2, -10]", "[-9999999999999999]", "[0, 10, 20, 1000000]", "[-1, -2, -3, 10, -5]", "[100, -1, -2, -3, 10, -5]", "[10, 11, 13, 8, 3, 4]", "[100, -33, 32, -1, 0, -2]", "[-10]", "[7]", "[1, -1]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n\nassert minSubArraySum(<FILL_ME>) == 1\n```", "assert": "1", "code": "def minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n"}
{"task_id": "Python/114", "fn": "minSubArraySum", "para": "(nums)", "arg": ["[2, 3, 4, 1, 2, 4]", "[-1, -2, -3]", "[-1, -2, -3, 2, -10]", "[-9999999999999999]", "[0, 10, 20, 1000000]", "[-1, -2, -3, 10, -5]", "[100, -1, -2, -3, 10, -5]", "[10, 11, 13, 8, 3, 4]", "[100, -33, 32, -1, 0, -2]", "[-10]", "[7]", "[1, -1]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n\nassert minSubArraySum(<FILL_ME>) == -10\n```", "assert": "-10", "code": "def minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n"}
{"task_id": "Python/114", "fn": "minSubArraySum", "para": "(nums)", "arg": ["[2, 3, 4, 1, 2, 4]", "[-1, -2, -3]", "[-1, -2, -3, 2, -10]", "[-9999999999999999]", "[0, 10, 20, 1000000]", "[-1, -2, -3, 10, -5]", "[100, -1, -2, -3, 10, -5]", "[10, 11, 13, 8, 3, 4]", "[100, -33, 32, -1, 0, -2]", "[-10]", "[7]", "[1, -1]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n\nassert minSubArraySum(<FILL_ME>) == -14\n```", "assert": "-14", "code": "def minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n"}
{"task_id": "Python/114", "fn": "minSubArraySum", "para": "(nums)", "arg": ["[2, 3, 4, 1, 2, 4]", "[-1, -2, -3]", "[-1, -2, -3, 2, -10]", "[-9999999999999999]", "[0, 10, 20, 1000000]", "[-1, -2, -3, 10, -5]", "[100, -1, -2, -3, 10, -5]", "[10, 11, 13, 8, 3, 4]", "[100, -33, 32, -1, 0, -2]", "[-10]", "[7]", "[1, -1]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n\nassert minSubArraySum(<FILL_ME>) == -6\n```", "assert": "-6", "code": "def minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n"}
{"task_id": "Python/115", "fn": "max_fill", "para": "(grid, capacity)", "arg": ["[[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1", "[[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2", "[[0,0,0], [0,0,0]], 5", "[[1,1,1,1], [1,1,1,1]], 2", "[[1,1,1,1], [1,1,1,1]], 9"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef max_fill(grid, capacity):\n    import math\n    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n\nassert max_fill(<FILL_ME>) == 0\n```", "assert": "0", "code": "def max_fill(grid, capacity):\n    import math\n    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n"}
{"task_id": "Python/115", "fn": "max_fill", "para": "(grid, capacity)", "arg": ["[[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1", "[[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2", "[[0,0,0], [0,0,0]], 5", "[[1,1,1,1], [1,1,1,1]], 2", "[[1,1,1,1], [1,1,1,1]], 9"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef max_fill(grid, capacity):\n    import math\n    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n\nassert max_fill(<FILL_ME>) == 6\n```", "assert": "6", "code": "def max_fill(grid, capacity):\n    import math\n    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n"}
{"task_id": "Python/115", "fn": "max_fill", "para": "(grid, capacity)", "arg": ["[[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1", "[[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2", "[[0,0,0], [0,0,0]], 5", "[[1,1,1,1], [1,1,1,1]], 2", "[[1,1,1,1], [1,1,1,1]], 9"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef max_fill(grid, capacity):\n    import math\n    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n\nassert max_fill(<FILL_ME>) == 2\n```", "assert": "2", "code": "def max_fill(grid, capacity):\n    import math\n    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n"}
{"task_id": "Python/115", "fn": "max_fill", "para": "(grid, capacity)", "arg": ["[[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1", "[[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2", "[[0,0,0], [0,0,0]], 5", "[[1,1,1,1], [1,1,1,1]], 2", "[[1,1,1,1], [1,1,1,1]], 9"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef max_fill(grid, capacity):\n    import math\n    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n\nassert max_fill(<FILL_ME>) == 4\n```", "assert": "4", "code": "def max_fill(grid, capacity):\n    import math\n    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n"}
{"task_id": "Python/115", "fn": "max_fill", "para": "(grid, capacity)", "arg": ["[[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1", "[[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2", "[[0,0,0], [0,0,0]], 5", "[[1,1,1,1], [1,1,1,1]], 2", "[[1,1,1,1], [1,1,1,1]], 9"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef max_fill(grid, capacity):\n    import math\n    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n\nassert max_fill(<FILL_ME>) == 5\n```", "assert": "5", "code": "def max_fill(grid, capacity):\n    import math\n    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n"}
{"task_id": "Python/116", "fn": "sort_array", "para": "(arr)", "arg": ["[1,5,2,3,4]", "[-2,-3,-4,-5,-6]", "[1,0,2,3,4]", "[]", "[2,5,77,4,5,3,5,7,2,3,4]", "[3,6,44,12,32,5]", "[2,4,8,16,32]", "[2,4,8,16,32]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sort_array(arr):\n    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n\nassert sort_array(<FILL_ME>) == [-4, -2, -6, -5, -3]\n```", "assert": "[-4, -2, -6, -5, -3]", "code": "def sort_array(arr):\n    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n"}
{"task_id": "Python/116", "fn": "sort_array", "para": "(arr)", "arg": ["[1,5,2,3,4]", "[-2,-3,-4,-5,-6]", "[1,0,2,3,4]", "[]", "[2,5,77,4,5,3,5,7,2,3,4]", "[3,6,44,12,32,5]", "[2,4,8,16,32]", "[2,4,8,16,32]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sort_array(arr):\n    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n\nassert sort_array(<FILL_ME>) == [1, 2, 4, 3, 5]\n```", "assert": "[1, 2, 4, 3, 5]", "code": "def sort_array(arr):\n    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n"}
{"task_id": "Python/116", "fn": "sort_array", "para": "(arr)", "arg": ["[1,5,2,3,4]", "[-2,-3,-4,-5,-6]", "[1,0,2,3,4]", "[]", "[2,5,77,4,5,3,5,7,2,3,4]", "[3,6,44,12,32,5]", "[2,4,8,16,32]", "[2,4,8,16,32]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sort_array(arr):\n    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n\nassert sort_array(<FILL_ME>) == [32, 3, 5, 6, 12, 44]\n```", "assert": "[32, 3, 5, 6, 12, 44]", "code": "def sort_array(arr):\n    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n"}
{"task_id": "Python/116", "fn": "sort_array", "para": "(arr)", "arg": ["[1,5,2,3,4]", "[-2,-3,-4,-5,-6]", "[1,0,2,3,4]", "[]", "[2,5,77,4,5,3,5,7,2,3,4]", "[3,6,44,12,32,5]", "[2,4,8,16,32]", "[2,4,8,16,32]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sort_array(arr):\n    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n\nassert sort_array(<FILL_ME>) == [2, 4, 8, 16, 32]\n```", "assert": "[2, 4, 8, 16, 32]", "code": "def sort_array(arr):\n    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n"}
{"task_id": "Python/116", "fn": "sort_array", "para": "(arr)", "arg": ["[1,5,2,3,4]", "[-2,-3,-4,-5,-6]", "[1,0,2,3,4]", "[]", "[2,5,77,4,5,3,5,7,2,3,4]", "[3,6,44,12,32,5]", "[2,4,8,16,32]", "[2,4,8,16,32]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sort_array(arr):\n    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n\nassert sort_array(<FILL_ME>) == []\n```", "assert": "[]", "code": "def sort_array(arr):\n    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n"}
{"task_id": "Python/116", "fn": "sort_array", "para": "(arr)", "arg": ["[1,5,2,3,4]", "[-2,-3,-4,-5,-6]", "[1,0,2,3,4]", "[]", "[2,5,77,4,5,3,5,7,2,3,4]", "[3,6,44,12,32,5]", "[2,4,8,16,32]", "[2,4,8,16,32]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sort_array(arr):\n    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n\nassert sort_array(<FILL_ME>) == [0, 1, 2, 4, 3]\n```", "assert": "[0, 1, 2, 4, 3]", "code": "def sort_array(arr):\n    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n"}
{"task_id": "Python/116", "fn": "sort_array", "para": "(arr)", "arg": ["[1,5,2,3,4]", "[-2,-3,-4,-5,-6]", "[1,0,2,3,4]", "[]", "[2,5,77,4,5,3,5,7,2,3,4]", "[3,6,44,12,32,5]", "[2,4,8,16,32]", "[2,4,8,16,32]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sort_array(arr):\n    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n\nassert sort_array(<FILL_ME>) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n```", "assert": "[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]", "code": "def sort_array(arr):\n    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n"}
{"task_id": "Python/117", "fn": "select_words", "para": "(s, n)", "arg": ["\"Mary had a little lamb\", 4", "\"Mary had a little lamb\", 3", "\"simple white space\", 2", "\"Hello world\", 4", "\"Uncle sam\", 3", "\"\", 4", "\"a b c d e f\", 1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef select_words(s, n):\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n\nassert select_words(<FILL_ME>) == [\"world\"]\n```", "assert": "[\"world\"]", "code": "def select_words(s, n):\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n"}
{"task_id": "Python/117", "fn": "select_words", "para": "(s, n)", "arg": ["\"Mary had a little lamb\", 4", "\"Mary had a little lamb\", 3", "\"simple white space\", 2", "\"Hello world\", 4", "\"Uncle sam\", 3", "\"\", 4", "\"a b c d e f\", 1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef select_words(s, n):\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n\nassert select_words(<FILL_ME>) == [\"Mary\", \"lamb\"]\n```", "assert": "[\"Mary\", \"lamb\"]", "code": "def select_words(s, n):\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n"}
{"task_id": "Python/117", "fn": "select_words", "para": "(s, n)", "arg": ["\"Mary had a little lamb\", 4", "\"Mary had a little lamb\", 3", "\"simple white space\", 2", "\"Hello world\", 4", "\"Uncle sam\", 3", "\"\", 4", "\"a b c d e f\", 1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef select_words(s, n):\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n\nassert select_words(<FILL_ME>) == [\"Uncle\"]\n```", "assert": "[\"Uncle\"]", "code": "def select_words(s, n):\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n"}
{"task_id": "Python/117", "fn": "select_words", "para": "(s, n)", "arg": ["\"Mary had a little lamb\", 4", "\"Mary had a little lamb\", 3", "\"simple white space\", 2", "\"Hello world\", 4", "\"Uncle sam\", 3", "\"\", 4", "\"a b c d e f\", 1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef select_words(s, n):\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n\nassert select_words(<FILL_ME>) == [\"b\", \"c\", \"d\", \"f\"]\n```", "assert": "[\"b\", \"c\", \"d\", \"f\"]", "code": "def select_words(s, n):\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n"}
{"task_id": "Python/117", "fn": "select_words", "para": "(s, n)", "arg": ["\"Mary had a little lamb\", 4", "\"Mary had a little lamb\", 3", "\"simple white space\", 2", "\"Hello world\", 4", "\"Uncle sam\", 3", "\"\", 4", "\"a b c d e f\", 1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef select_words(s, n):\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n\nassert select_words(<FILL_ME>) == [\"little\"]\n```", "assert": "[\"little\"]", "code": "def select_words(s, n):\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n"}
{"task_id": "Python/117", "fn": "select_words", "para": "(s, n)", "arg": ["\"Mary had a little lamb\", 4", "\"Mary had a little lamb\", 3", "\"simple white space\", 2", "\"Hello world\", 4", "\"Uncle sam\", 3", "\"\", 4", "\"a b c d e f\", 1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef select_words(s, n):\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n\nassert select_words(<FILL_ME>) == []\n```", "assert": "[]", "code": "def select_words(s, n):\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n"}
{"task_id": "Python/118", "fn": "get_closest_vowel", "para": "(word)", "arg": ["\"yogurt\"", "\"full\"", "\"easy\"", "\"eAsy\"", "\"ali\"", "\"bad\"", "\"most\"", "\"ab\"", "\"ba\"", "\"quick\"", "\"anime\"", "\"Asia\"", "\"Above\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef get_closest_vowel(word):\n    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n\nassert get_closest_vowel(<FILL_ME>) == \"\"\n```", "assert": "\"\"", "code": "def get_closest_vowel(word):\n    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n"}
{"task_id": "Python/118", "fn": "get_closest_vowel", "para": "(word)", "arg": ["\"yogurt\"", "\"full\"", "\"easy\"", "\"eAsy\"", "\"ali\"", "\"bad\"", "\"most\"", "\"ab\"", "\"ba\"", "\"quick\"", "\"anime\"", "\"Asia\"", "\"Above\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef get_closest_vowel(word):\n    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n\nassert get_closest_vowel(<FILL_ME>) == \"o\"\n```", "assert": "\"o\"", "code": "def get_closest_vowel(word):\n    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n"}
{"task_id": "Python/118", "fn": "get_closest_vowel", "para": "(word)", "arg": ["\"yogurt\"", "\"full\"", "\"easy\"", "\"eAsy\"", "\"ali\"", "\"bad\"", "\"most\"", "\"ab\"", "\"ba\"", "\"quick\"", "\"anime\"", "\"Asia\"", "\"Above\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef get_closest_vowel(word):\n    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n\nassert get_closest_vowel(<FILL_ME>) == \"i\"\n```", "assert": "\"i\"", "code": "def get_closest_vowel(word):\n    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n"}
{"task_id": "Python/118", "fn": "get_closest_vowel", "para": "(word)", "arg": ["\"yogurt\"", "\"full\"", "\"easy\"", "\"eAsy\"", "\"ali\"", "\"bad\"", "\"most\"", "\"ab\"", "\"ba\"", "\"quick\"", "\"anime\"", "\"Asia\"", "\"Above\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef get_closest_vowel(word):\n    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n\nassert get_closest_vowel(<FILL_ME>) == \"a\"\n```", "assert": "\"a\"", "code": "def get_closest_vowel(word):\n    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n"}
{"task_id": "Python/118", "fn": "get_closest_vowel", "para": "(word)", "arg": ["\"yogurt\"", "\"full\"", "\"easy\"", "\"eAsy\"", "\"ali\"", "\"bad\"", "\"most\"", "\"ab\"", "\"ba\"", "\"quick\"", "\"anime\"", "\"Asia\"", "\"Above\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef get_closest_vowel(word):\n    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n\nassert get_closest_vowel(<FILL_ME>) == \"u\"\n```", "assert": "\"u\"", "code": "def get_closest_vowel(word):\n    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n"}
{"task_id": "Python/119", "fn": "match_parens", "para": "(lst)", "arg": ["['()(', ')']", "[')', ')']", "['(()(())', '())())']", "[')())', '(()()(']", "['(())))', '(()())((']", "['()', '())']", "['(()(', '()))()']", "['((((', '((())']", "[')(()', '(()(']", "[')(', ')(']", "['(', ')']", "[')', '(']"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef match_parens(lst):\n    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n\nassert match_parens(<FILL_ME>) == 'No'\n```", "assert": "'No'", "code": "def match_parens(lst):\n    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n"}
{"task_id": "Python/119", "fn": "match_parens", "para": "(lst)", "arg": ["['()(', ')']", "[')', ')']", "['(()(())', '())())']", "[')())', '(()()(']", "['(())))', '(()())((']", "['()', '())']", "['(()(', '()))()']", "['((((', '((())']", "[')(()', '(()(']", "[')(', ')(']", "['(', ')']", "[')', '(']"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef match_parens(lst):\n    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n\nassert match_parens(<FILL_ME>) == 'Yes'\n```", "assert": "'Yes'", "code": "def match_parens(lst):\n    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n"}
{"task_id": "Python/120", "fn": "maximum", "para": "(arr, k)", "arg": ["[-3, -4, 5], 3", "[4, -4, 4], 2", "[-3, 2, 1, 2, -1, -2, 1], 1", "[123, -123, 20, 0 , 1, 2, -3], 3", "[-123, 20, 0 , 1, 2, -3], 4", "[5, 15, 0, 3, -13, -8, 0], 7", "[-1, 0, 2, 5, 3, -10], 2", "[1, 0, 5, -7], 1", "[4, -4], 2", "[-10, 10], 2", "[1, 2, 3, -23, 243, -400, 0], 0"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n\nassert maximum(<FILL_ME>) == [-4, -3, 5]\n```", "assert": "[-4, -3, 5]", "code": "def maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n"}
{"task_id": "Python/120", "fn": "maximum", "para": "(arr, k)", "arg": ["[-3, -4, 5], 3", "[4, -4, 4], 2", "[-3, 2, 1, 2, -1, -2, 1], 1", "[123, -123, 20, 0 , 1, 2, -3], 3", "[-123, 20, 0 , 1, 2, -3], 4", "[5, 15, 0, 3, -13, -8, 0], 7", "[-1, 0, 2, 5, 3, -10], 2", "[1, 0, 5, -7], 1", "[4, -4], 2", "[-10, 10], 2", "[1, 2, 3, -23, 243, -400, 0], 0"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n\nassert maximum(<FILL_ME>) == [3, 5]\n```", "assert": "[3, 5]", "code": "def maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n"}
{"task_id": "Python/120", "fn": "maximum", "para": "(arr, k)", "arg": ["[-3, -4, 5], 3", "[4, -4, 4], 2", "[-3, 2, 1, 2, -1, -2, 1], 1", "[123, -123, 20, 0 , 1, 2, -3], 3", "[-123, 20, 0 , 1, 2, -3], 4", "[5, 15, 0, 3, -13, -8, 0], 7", "[-1, 0, 2, 5, 3, -10], 2", "[1, 0, 5, -7], 1", "[4, -4], 2", "[-10, 10], 2", "[1, 2, 3, -23, 243, -400, 0], 0"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n\nassert maximum(<FILL_ME>) == [-4, 4]\n```", "assert": "[-4, 4]", "code": "def maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n"}
{"task_id": "Python/120", "fn": "maximum", "para": "(arr, k)", "arg": ["[-3, -4, 5], 3", "[4, -4, 4], 2", "[-3, 2, 1, 2, -1, -2, 1], 1", "[123, -123, 20, 0 , 1, 2, -3], 3", "[-123, 20, 0 , 1, 2, -3], 4", "[5, 15, 0, 3, -13, -8, 0], 7", "[-1, 0, 2, 5, 3, -10], 2", "[1, 0, 5, -7], 1", "[4, -4], 2", "[-10, 10], 2", "[1, 2, 3, -23, 243, -400, 0], 0"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n\nassert maximum(<FILL_ME>) == [5]\n```", "assert": "[5]", "code": "def maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n"}
{"task_id": "Python/120", "fn": "maximum", "para": "(arr, k)", "arg": ["[-3, -4, 5], 3", "[4, -4, 4], 2", "[-3, 2, 1, 2, -1, -2, 1], 1", "[123, -123, 20, 0 , 1, 2, -3], 3", "[-123, 20, 0 , 1, 2, -3], 4", "[5, 15, 0, 3, -13, -8, 0], 7", "[-1, 0, 2, 5, 3, -10], 2", "[1, 0, 5, -7], 1", "[4, -4], 2", "[-10, 10], 2", "[1, 2, 3, -23, 243, -400, 0], 0"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n\nassert maximum(<FILL_ME>) == [2, 20, 123]\n```", "assert": "[2, 20, 123]", "code": "def maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n"}
{"task_id": "Python/120", "fn": "maximum", "para": "(arr, k)", "arg": ["[-3, -4, 5], 3", "[4, -4, 4], 2", "[-3, 2, 1, 2, -1, -2, 1], 1", "[123, -123, 20, 0 , 1, 2, -3], 3", "[-123, 20, 0 , 1, 2, -3], 4", "[5, 15, 0, 3, -13, -8, 0], 7", "[-1, 0, 2, 5, 3, -10], 2", "[1, 0, 5, -7], 1", "[4, -4], 2", "[-10, 10], 2", "[1, 2, 3, -23, 243, -400, 0], 0"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n\nassert maximum(<FILL_ME>) == [4, 4]\n```", "assert": "[4, 4]", "code": "def maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n"}
{"task_id": "Python/120", "fn": "maximum", "para": "(arr, k)", "arg": ["[-3, -4, 5], 3", "[4, -4, 4], 2", "[-3, 2, 1, 2, -1, -2, 1], 1", "[123, -123, 20, 0 , 1, 2, -3], 3", "[-123, 20, 0 , 1, 2, -3], 4", "[5, 15, 0, 3, -13, -8, 0], 7", "[-1, 0, 2, 5, 3, -10], 2", "[1, 0, 5, -7], 1", "[4, -4], 2", "[-10, 10], 2", "[1, 2, 3, -23, 243, -400, 0], 0"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n\nassert maximum(<FILL_ME>) == [2]\n```", "assert": "[2]", "code": "def maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n"}
{"task_id": "Python/120", "fn": "maximum", "para": "(arr, k)", "arg": ["[-3, -4, 5], 3", "[4, -4, 4], 2", "[-3, 2, 1, 2, -1, -2, 1], 1", "[123, -123, 20, 0 , 1, 2, -3], 3", "[-123, 20, 0 , 1, 2, -3], 4", "[5, 15, 0, 3, -13, -8, 0], 7", "[-1, 0, 2, 5, 3, -10], 2", "[1, 0, 5, -7], 1", "[4, -4], 2", "[-10, 10], 2", "[1, 2, 3, -23, 243, -400, 0], 0"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n\nassert maximum(<FILL_ME>) == [-10, 10]\n```", "assert": "[-10, 10]", "code": "def maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n"}
{"task_id": "Python/120", "fn": "maximum", "para": "(arr, k)", "arg": ["[-3, -4, 5], 3", "[4, -4, 4], 2", "[-3, 2, 1, 2, -1, -2, 1], 1", "[123, -123, 20, 0 , 1, 2, -3], 3", "[-123, 20, 0 , 1, 2, -3], 4", "[5, 15, 0, 3, -13, -8, 0], 7", "[-1, 0, 2, 5, 3, -10], 2", "[1, 0, 5, -7], 1", "[4, -4], 2", "[-10, 10], 2", "[1, 2, 3, -23, 243, -400, 0], 0"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n\nassert maximum(<FILL_ME>) == []\n```", "assert": "[]", "code": "def maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n"}
{"task_id": "Python/120", "fn": "maximum", "para": "(arr, k)", "arg": ["[-3, -4, 5], 3", "[4, -4, 4], 2", "[-3, 2, 1, 2, -1, -2, 1], 1", "[123, -123, 20, 0 , 1, 2, -3], 3", "[-123, 20, 0 , 1, 2, -3], 4", "[5, 15, 0, 3, -13, -8, 0], 7", "[-1, 0, 2, 5, 3, -10], 2", "[1, 0, 5, -7], 1", "[4, -4], 2", "[-10, 10], 2", "[1, 2, 3, -23, 243, -400, 0], 0"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n\nassert maximum(<FILL_ME>) == [0, 1, 2, 20]\n```", "assert": "[0, 1, 2, 20]", "code": "def maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n"}
{"task_id": "Python/120", "fn": "maximum", "para": "(arr, k)", "arg": ["[-3, -4, 5], 3", "[4, -4, 4], 2", "[-3, 2, 1, 2, -1, -2, 1], 1", "[123, -123, 20, 0 , 1, 2, -3], 3", "[-123, 20, 0 , 1, 2, -3], 4", "[5, 15, 0, 3, -13, -8, 0], 7", "[-1, 0, 2, 5, 3, -10], 2", "[1, 0, 5, -7], 1", "[4, -4], 2", "[-10, 10], 2", "[1, 2, 3, -23, 243, -400, 0], 0"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n\nassert maximum(<FILL_ME>) == [-13, -8, 0, 0, 3, 5, 15]\n```", "assert": "[-13, -8, 0, 0, 3, 5, 15]", "code": "def maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n"}
{"task_id": "Python/121", "fn": "solution", "para": "(lst)", "arg": ["[5, 8, 7, 1]", "[3, 3, 3, 3, 3]", "[30, 13, 24, 321]", "[5, 9]", "[2, 4, 8]", "[30, 13, 23, 32]", "[3, 13, 2, 9]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef solution(lst):\n    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n\nassert solution(<FILL_ME>) == 3\n```", "assert": "3", "code": "def solution(lst):\n    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n"}
{"task_id": "Python/121", "fn": "solution", "para": "(lst)", "arg": ["[5, 8, 7, 1]", "[3, 3, 3, 3, 3]", "[30, 13, 24, 321]", "[5, 9]", "[2, 4, 8]", "[30, 13, 23, 32]", "[3, 13, 2, 9]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef solution(lst):\n    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n\nassert solution(<FILL_ME>) == 12\n```", "assert": "12", "code": "def solution(lst):\n    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n"}
{"task_id": "Python/121", "fn": "solution", "para": "(lst)", "arg": ["[5, 8, 7, 1]", "[3, 3, 3, 3, 3]", "[30, 13, 24, 321]", "[5, 9]", "[2, 4, 8]", "[30, 13, 23, 32]", "[3, 13, 2, 9]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef solution(lst):\n    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n\nassert solution(<FILL_ME>) == 0\n```", "assert": "0", "code": "def solution(lst):\n    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n"}
{"task_id": "Python/121", "fn": "solution", "para": "(lst)", "arg": ["[5, 8, 7, 1]", "[3, 3, 3, 3, 3]", "[30, 13, 24, 321]", "[5, 9]", "[2, 4, 8]", "[30, 13, 23, 32]", "[3, 13, 2, 9]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef solution(lst):\n    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n\nassert solution(<FILL_ME>) == 23\n```", "assert": "23", "code": "def solution(lst):\n    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n"}
{"task_id": "Python/121", "fn": "solution", "para": "(lst)", "arg": ["[5, 8, 7, 1]", "[3, 3, 3, 3, 3]", "[30, 13, 24, 321]", "[5, 9]", "[2, 4, 8]", "[30, 13, 23, 32]", "[3, 13, 2, 9]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef solution(lst):\n    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n\nassert solution(<FILL_ME>) == 9\n```", "assert": "9", "code": "def solution(lst):\n    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n"}
{"task_id": "Python/121", "fn": "solution", "para": "(lst)", "arg": ["[5, 8, 7, 1]", "[3, 3, 3, 3, 3]", "[30, 13, 24, 321]", "[5, 9]", "[2, 4, 8]", "[30, 13, 23, 32]", "[3, 13, 2, 9]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef solution(lst):\n    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n\nassert solution(<FILL_ME>) == 5\n```", "assert": "5", "code": "def solution(lst):\n    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n"}
{"task_id": "Python/122", "fn": "add_elements", "para": "(arr, k)", "arg": ["[1,-2,-3,41,57,76,87,88,99], 3", "[111,121,3,4000,5,6], 2", "[11,21,3,90,5,6,7,8,9], 4", "[111,21,3,4000,5,6,7,8,9], 4", "[1], 1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef add_elements(arr, k):\n    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n\nassert add_elements(<FILL_ME>) == 125\n```", "assert": "125", "code": "def add_elements(arr, k):\n    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n"}
{"task_id": "Python/122", "fn": "add_elements", "para": "(arr, k)", "arg": ["[1,-2,-3,41,57,76,87,88,99], 3", "[111,121,3,4000,5,6], 2", "[11,21,3,90,5,6,7,8,9], 4", "[111,21,3,4000,5,6,7,8,9], 4", "[1], 1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef add_elements(arr, k):\n    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n\nassert add_elements(<FILL_ME>) == 0\n```", "assert": "0", "code": "def add_elements(arr, k):\n    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n"}
{"task_id": "Python/122", "fn": "add_elements", "para": "(arr, k)", "arg": ["[1,-2,-3,41,57,76,87,88,99], 3", "[111,121,3,4000,5,6], 2", "[11,21,3,90,5,6,7,8,9], 4", "[111,21,3,4000,5,6,7,8,9], 4", "[1], 1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef add_elements(arr, k):\n    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n\nassert add_elements(<FILL_ME>) == 24\n```", "assert": "24", "code": "def add_elements(arr, k):\n    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n"}
{"task_id": "Python/122", "fn": "add_elements", "para": "(arr, k)", "arg": ["[1,-2,-3,41,57,76,87,88,99], 3", "[111,121,3,4000,5,6], 2", "[11,21,3,90,5,6,7,8,9], 4", "[111,21,3,4000,5,6,7,8,9], 4", "[1], 1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef add_elements(arr, k):\n    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n\nassert add_elements(<FILL_ME>) == -4\n```", "assert": "-4", "code": "def add_elements(arr, k):\n    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n"}
{"task_id": "Python/122", "fn": "add_elements", "para": "(arr, k)", "arg": ["[1,-2,-3,41,57,76,87,88,99], 3", "[111,121,3,4000,5,6], 2", "[11,21,3,90,5,6,7,8,9], 4", "[111,21,3,4000,5,6,7,8,9], 4", "[1], 1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef add_elements(arr, k):\n    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n\nassert add_elements(<FILL_ME>) == 1\n```", "assert": "1", "code": "def add_elements(arr, k):\n    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n"}
{"task_id": "Python/123", "fn": "get_odd_collatz", "para": "(n)", "arg": ["14", "5", "12", "1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef get_odd_collatz(n):\n    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n\nassert get_odd_collatz(<FILL_ME>) == [1, 3, 5]\n```", "assert": "[1, 3, 5]", "code": "def get_odd_collatz(n):\n    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n"}
{"task_id": "Python/123", "fn": "get_odd_collatz", "para": "(n)", "arg": ["14", "5", "12", "1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef get_odd_collatz(n):\n    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n\nassert get_odd_collatz(<FILL_ME>) == [1]\n```", "assert": "[1]", "code": "def get_odd_collatz(n):\n    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n"}
{"task_id": "Python/123", "fn": "get_odd_collatz", "para": "(n)", "arg": ["14", "5", "12", "1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef get_odd_collatz(n):\n    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n\nassert get_odd_collatz(<FILL_ME>) == [1, 5, 7, 11, 13, 17]\n```", "assert": "[1, 5, 7, 11, 13, 17]", "code": "def get_odd_collatz(n):\n    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n"}
{"task_id": "Python/123", "fn": "get_odd_collatz", "para": "(n)", "arg": ["14", "5", "12", "1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef get_odd_collatz(n):\n    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n\nassert get_odd_collatz(<FILL_ME>) == [1, 5]\n```", "assert": "[1, 5]", "code": "def get_odd_collatz(n):\n    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n"}
{"task_id": "Python/124", "fn": "valid_date", "para": "(date)", "arg": ["'03-11-2000'", "'15-01-2012'", "'04-0-2040'", "'06-04-2020'", "'01-01-2007'", "'03-32-2011'", "''", "'04-31-3000'", "'06-06-2005'", "'21-31-2000'", "'04-12-2003'", "'04122003'", "'20030412'", "'2003-04'", "'2003-04-12'", "'04-2003'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef valid_date(date):\n    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n\nassert valid_date(<FILL_ME>) == True\n```", "assert": "True", "code": "def valid_date(date):\n    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n"}
{"task_id": "Python/124", "fn": "valid_date", "para": "(date)", "arg": ["'03-11-2000'", "'15-01-2012'", "'04-0-2040'", "'06-04-2020'", "'01-01-2007'", "'03-32-2011'", "''", "'04-31-3000'", "'06-06-2005'", "'21-31-2000'", "'04-12-2003'", "'04122003'", "'20030412'", "'2003-04'", "'2003-04-12'", "'04-2003'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef valid_date(date):\n    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n\nassert valid_date(<FILL_ME>) == False\n```", "assert": "False", "code": "def valid_date(date):\n    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n"}
{"task_id": "Python/125", "fn": "split_words", "para": "(txt)", "arg": ["\"Hello world!\"", "\"Hello,world!\"", "\"Hello world,!\"", "\"Hello,Hello,world !\"", "\"abcdef\"", "\"aaabb\"", "\"aaaBb\"", "\"\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef split_words(txt):\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n\nassert split_words(<FILL_ME>) == 3\n```", "assert": "3", "code": "def split_words(txt):\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n"}
{"task_id": "Python/125", "fn": "split_words", "para": "(txt)", "arg": ["\"Hello world!\"", "\"Hello,world!\"", "\"Hello world,!\"", "\"Hello,Hello,world !\"", "\"abcdef\"", "\"aaabb\"", "\"aaaBb\"", "\"\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef split_words(txt):\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n\nassert split_words(<FILL_ME>) == 0\n```", "assert": "0", "code": "def split_words(txt):\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n"}
{"task_id": "Python/125", "fn": "split_words", "para": "(txt)", "arg": ["\"Hello world!\"", "\"Hello,world!\"", "\"Hello world,!\"", "\"Hello,Hello,world !\"", "\"abcdef\"", "\"aaabb\"", "\"aaaBb\"", "\"\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef split_words(txt):\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n\nassert split_words(<FILL_ME>) == 1\n```", "assert": "1", "code": "def split_words(txt):\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n"}
{"task_id": "Python/125", "fn": "split_words", "para": "(txt)", "arg": ["\"Hello world!\"", "\"Hello,world!\"", "\"Hello world,!\"", "\"Hello,Hello,world !\"", "\"abcdef\"", "\"aaabb\"", "\"aaaBb\"", "\"\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef split_words(txt):\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n\nassert split_words(<FILL_ME>) == [\"Hello\",\"world,!\"]\n```", "assert": "[\"Hello\",\"world,!\"]", "code": "def split_words(txt):\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n"}
{"task_id": "Python/125", "fn": "split_words", "para": "(txt)", "arg": ["\"Hello world!\"", "\"Hello,world!\"", "\"Hello world,!\"", "\"Hello,Hello,world !\"", "\"abcdef\"", "\"aaabb\"", "\"aaaBb\"", "\"\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef split_words(txt):\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n\nassert split_words(<FILL_ME>) == [\"Hello,Hello,world\",\"!\"]\n```", "assert": "[\"Hello,Hello,world\",\"!\"]", "code": "def split_words(txt):\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n"}
{"task_id": "Python/125", "fn": "split_words", "para": "(txt)", "arg": ["\"Hello world!\"", "\"Hello,world!\"", "\"Hello world,!\"", "\"Hello,Hello,world !\"", "\"abcdef\"", "\"aaabb\"", "\"aaaBb\"", "\"\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef split_words(txt):\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n\nassert split_words(<FILL_ME>) == 2\n```", "assert": "2", "code": "def split_words(txt):\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n"}
{"task_id": "Python/125", "fn": "split_words", "para": "(txt)", "arg": ["\"Hello world!\"", "\"Hello,world!\"", "\"Hello world,!\"", "\"Hello,Hello,world !\"", "\"abcdef\"", "\"aaabb\"", "\"aaaBb\"", "\"\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef split_words(txt):\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n\nassert split_words(<FILL_ME>) == [\"Hello\",\"world!\"]\n```", "assert": "[\"Hello\",\"world!\"]", "code": "def split_words(txt):\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n"}
{"task_id": "Python/126", "fn": "is_sorted", "para": "(lst)", "arg": ["[5]", "[1, 2, 3, 4, 5]", "[1, 3, 2, 4, 5]", "[1, 2, 3, 4, 5, 6]", "[1, 2, 3, 4, 5, 6, 7]", "[1, 3, 2, 4, 5, 6, 7]", "[]", "[1]", "[3, 2, 1]", "[1, 2, 2, 2, 3, 4]", "[1, 2, 3, 3, 3, 4]", "[1, 2, 2, 3, 3, 4]", "[1, 2, 3, 4]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef is_sorted(lst):\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n\nassert is_sorted(<FILL_ME>) == True\n```", "assert": "True", "code": "def is_sorted(lst):\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n"}
{"task_id": "Python/126", "fn": "is_sorted", "para": "(lst)", "arg": ["[5]", "[1, 2, 3, 4, 5]", "[1, 3, 2, 4, 5]", "[1, 2, 3, 4, 5, 6]", "[1, 2, 3, 4, 5, 6, 7]", "[1, 3, 2, 4, 5, 6, 7]", "[]", "[1]", "[3, 2, 1]", "[1, 2, 2, 2, 3, 4]", "[1, 2, 3, 3, 3, 4]", "[1, 2, 2, 3, 3, 4]", "[1, 2, 3, 4]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef is_sorted(lst):\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n\nassert is_sorted(<FILL_ME>) == False\n```", "assert": "False", "code": "def is_sorted(lst):\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n"}
{"task_id": "Python/127", "fn": "intersection", "para": "(interval1, interval2)", "arg": ["(1, 2), (2, 3)", "(-1, 1), (0, 4)", "(-3, -1), (-5, 5)", "(-2, 2), (-4, 0)", "(-11, 2), (-1, -1)", "(1, 2), (3, 5)", "(1, 2), (1, 2)", "(-2, -2), (-3, -2)"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef intersection(interval1, interval2):\n    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n\nassert intersection(<FILL_ME>) == \"YES\"\n```", "assert": "\"YES\"", "code": "def intersection(interval1, interval2):\n    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n"}
{"task_id": "Python/127", "fn": "intersection", "para": "(interval1, interval2)", "arg": ["(1, 2), (2, 3)", "(-1, 1), (0, 4)", "(-3, -1), (-5, 5)", "(-2, 2), (-4, 0)", "(-11, 2), (-1, -1)", "(1, 2), (3, 5)", "(1, 2), (1, 2)", "(-2, -2), (-3, -2)"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef intersection(interval1, interval2):\n    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n\nassert intersection(<FILL_ME>) == \"NO\"\n```", "assert": "\"NO\"", "code": "def intersection(interval1, interval2):\n    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n"}
{"task_id": "Python/128", "fn": "prod_signs", "para": "(arr)", "arg": ["[1, 2, 2, -4]", "[0, 1]", "[1, 1, 1, 2, 3, -1, 1]", "[]", "[2, 4,1, 2, -1, -1, 9]", "[-1, 1, -1, 1]", "[-1, 1, 1, 1]", "[-1, 1, 1, 0]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef prod_signs(arr):\n    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n\nassert prod_signs(<FILL_ME>) == 20\n```", "assert": "20", "code": "def prod_signs(arr):\n    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n"}
{"task_id": "Python/128", "fn": "prod_signs", "para": "(arr)", "arg": ["[1, 2, 2, -4]", "[0, 1]", "[1, 1, 1, 2, 3, -1, 1]", "[]", "[2, 4,1, 2, -1, -1, 9]", "[-1, 1, -1, 1]", "[-1, 1, 1, 1]", "[-1, 1, 1, 0]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef prod_signs(arr):\n    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n\nassert prod_signs(<FILL_ME>) == -9\n```", "assert": "-9", "code": "def prod_signs(arr):\n    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n"}
{"task_id": "Python/128", "fn": "prod_signs", "para": "(arr)", "arg": ["[1, 2, 2, -4]", "[0, 1]", "[1, 1, 1, 2, 3, -1, 1]", "[]", "[2, 4,1, 2, -1, -1, 9]", "[-1, 1, -1, 1]", "[-1, 1, 1, 1]", "[-1, 1, 1, 0]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef prod_signs(arr):\n    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n\nassert prod_signs(<FILL_ME>) == 0\n```", "assert": "0", "code": "def prod_signs(arr):\n    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n"}
{"task_id": "Python/128", "fn": "prod_signs", "para": "(arr)", "arg": ["[1, 2, 2, -4]", "[0, 1]", "[1, 1, 1, 2, 3, -1, 1]", "[]", "[2, 4,1, 2, -1, -1, 9]", "[-1, 1, -1, 1]", "[-1, 1, 1, 1]", "[-1, 1, 1, 0]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef prod_signs(arr):\n    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n\nassert prod_signs(<FILL_ME>) == 4\n```", "assert": "4", "code": "def prod_signs(arr):\n    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n"}
{"task_id": "Python/128", "fn": "prod_signs", "para": "(arr)", "arg": ["[1, 2, 2, -4]", "[0, 1]", "[1, 1, 1, 2, 3, -1, 1]", "[]", "[2, 4,1, 2, -1, -1, 9]", "[-1, 1, -1, 1]", "[-1, 1, 1, 1]", "[-1, 1, 1, 0]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef prod_signs(arr):\n    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n\nassert prod_signs(<FILL_ME>) == -10\n```", "assert": "-10", "code": "def prod_signs(arr):\n    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n"}
{"task_id": "Python/128", "fn": "prod_signs", "para": "(arr)", "arg": ["[1, 2, 2, -4]", "[0, 1]", "[1, 1, 1, 2, 3, -1, 1]", "[]", "[2, 4,1, 2, -1, -1, 9]", "[-1, 1, -1, 1]", "[-1, 1, 1, 1]", "[-1, 1, 1, 0]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef prod_signs(arr):\n    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n\nassert prod_signs(<FILL_ME>) == -4\n```", "assert": "-4", "code": "def prod_signs(arr):\n    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n"}
{"task_id": "Python/128", "fn": "prod_signs", "para": "(arr)", "arg": ["[1, 2, 2, -4]", "[0, 1]", "[1, 1, 1, 2, 3, -1, 1]", "[]", "[2, 4,1, 2, -1, -1, 9]", "[-1, 1, -1, 1]", "[-1, 1, 1, 1]", "[-1, 1, 1, 0]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef prod_signs(arr):\n    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n\nassert prod_signs(<FILL_ME>) == None\n```", "assert": "None", "code": "def prod_signs(arr):\n    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n"}
{"task_id": "Python/129", "fn": "minPath", "para": "(grid, k)", "arg": ["[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3", "[[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1", "[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4", "[[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7", "[[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5", "[[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9", "[[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12", "[[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8", "[[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8", "[[1, 2], [3, 4]], 10", "[[1, 3], [3, 2]], 10"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n\nassert minPath(<FILL_ME>) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n```", "assert": "[1, 6, 1, 6, 1, 6, 1, 6, 1]", "code": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n"}
{"task_id": "Python/129", "fn": "minPath", "para": "(grid, k)", "arg": ["[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3", "[[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1", "[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4", "[[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7", "[[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5", "[[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9", "[[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12", "[[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8", "[[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8", "[[1, 2], [3, 4]], 10", "[[1, 3], [3, 2]], 10"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n\nassert minPath(<FILL_ME>) == [1, 2, 1, 2]\n```", "assert": "[1, 2, 1, 2]", "code": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n"}
{"task_id": "Python/129", "fn": "minPath", "para": "(grid, k)", "arg": ["[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3", "[[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1", "[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4", "[[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7", "[[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5", "[[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9", "[[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12", "[[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8", "[[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8", "[[1, 2], [3, 4]], 10", "[[1, 3], [3, 2]], 10"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n\nassert minPath(<FILL_ME>) == [1, 7, 1, 7, 1]\n```", "assert": "[1, 7, 1, 7, 1]", "code": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n"}
{"task_id": "Python/129", "fn": "minPath", "para": "(grid, k)", "arg": ["[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3", "[[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1", "[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4", "[[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7", "[[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5", "[[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9", "[[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12", "[[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8", "[[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8", "[[1, 2], [3, 4]], 10", "[[1, 3], [3, 2]], 10"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n\nassert minPath(<FILL_ME>) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n```", "assert": "[1, 3, 1, 3, 1, 3, 1, 3, 1, 3]", "code": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n"}
{"task_id": "Python/129", "fn": "minPath", "para": "(grid, k)", "arg": ["[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3", "[[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1", "[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4", "[[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7", "[[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5", "[[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9", "[[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12", "[[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8", "[[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8", "[[1, 2], [3, 4]], 10", "[[1, 3], [3, 2]], 10"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n\nassert minPath(<FILL_ME>) == [1, 5, 1, 5, 1, 5, 1, 5]\n```", "assert": "[1, 5, 1, 5, 1, 5, 1, 5]", "code": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n"}
{"task_id": "Python/129", "fn": "minPath", "para": "(grid, k)", "arg": ["[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3", "[[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1", "[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4", "[[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7", "[[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5", "[[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9", "[[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12", "[[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8", "[[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8", "[[1, 2], [3, 4]], 10", "[[1, 3], [3, 2]], 10"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n\nassert minPath(<FILL_ME>) == [1, 2, 1]\n```", "assert": "[1, 2, 1]", "code": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n"}
{"task_id": "Python/129", "fn": "minPath", "para": "(grid, k)", "arg": ["[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3", "[[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1", "[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4", "[[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7", "[[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5", "[[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9", "[[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12", "[[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8", "[[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8", "[[1, 2], [3, 4]], 10", "[[1, 3], [3, 2]], 10"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n\nassert minPath(<FILL_ME>) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n```", "assert": "[1, 2, 1, 2, 1, 2, 1, 2, 1, 2]", "code": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n"}
{"task_id": "Python/129", "fn": "minPath", "para": "(grid, k)", "arg": ["[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3", "[[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1", "[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4", "[[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7", "[[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5", "[[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9", "[[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12", "[[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8", "[[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8", "[[1, 2], [3, 4]], 10", "[[1, 3], [3, 2]], 10"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n\nassert minPath(<FILL_ME>) == [1, 3, 1, 3, 1, 3, 1, 3]\n```", "assert": "[1, 3, 1, 3, 1, 3, 1, 3]", "code": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n"}
{"task_id": "Python/129", "fn": "minPath", "para": "(grid, k)", "arg": ["[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3", "[[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1", "[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4", "[[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7", "[[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5", "[[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9", "[[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12", "[[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8", "[[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8", "[[1, 2], [3, 4]], 10", "[[1, 3], [3, 2]], 10"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n\nassert minPath(<FILL_ME>) == [1]\n```", "assert": "[1]", "code": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n"}
{"task_id": "Python/129", "fn": "minPath", "para": "(grid, k)", "arg": ["[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3", "[[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1", "[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4", "[[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7", "[[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5", "[[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9", "[[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12", "[[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8", "[[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8", "[[1, 2], [3, 4]], 10", "[[1, 3], [3, 2]], 10"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n\nassert minPath(<FILL_ME>) == [1, 10, 1, 10, 1, 10, 1]\n```", "assert": "[1, 10, 1, 10, 1, 10, 1]", "code": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n"}
{"task_id": "Python/129", "fn": "minPath", "para": "(grid, k)", "arg": ["[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3", "[[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1", "[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4", "[[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7", "[[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5", "[[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9", "[[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12", "[[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8", "[[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8", "[[1, 2], [3, 4]], 10", "[[1, 3], [3, 2]], 10"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n\nassert minPath(<FILL_ME>) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n```", "assert": "[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]", "code": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n"}
{"task_id": "Python/130", "fn": "tri", "para": "(n)", "arg": ["3", "4", "5", "6", "7", "8", "9", "20", "0", "1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n\nassert tri(<FILL_ME>) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n```", "assert": "[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]", "code": "def tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n"}
{"task_id": "Python/130", "fn": "tri", "para": "(n)", "arg": ["3", "4", "5", "6", "7", "8", "9", "20", "0", "1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n\nassert tri(<FILL_ME>) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n```", "assert": "[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]", "code": "def tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n"}
{"task_id": "Python/130", "fn": "tri", "para": "(n)", "arg": ["3", "4", "5", "6", "7", "8", "9", "20", "0", "1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n\nassert tri(<FILL_ME>) == [1]\n```", "assert": "[1]", "code": "def tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n"}
{"task_id": "Python/130", "fn": "tri", "para": "(n)", "arg": ["3", "4", "5", "6", "7", "8", "9", "20", "0", "1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n\nassert tri(<FILL_ME>) == [1, 3, 2.0, 8.0, 3.0]\n```", "assert": "[1, 3, 2.0, 8.0, 3.0]", "code": "def tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n"}
{"task_id": "Python/130", "fn": "tri", "para": "(n)", "arg": ["3", "4", "5", "6", "7", "8", "9", "20", "0", "1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n\nassert tri(<FILL_ME>) == [1, 3]\n```", "assert": "[1, 3]", "code": "def tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n"}
{"task_id": "Python/130", "fn": "tri", "para": "(n)", "arg": ["3", "4", "5", "6", "7", "8", "9", "20", "0", "1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n\nassert tri(<FILL_ME>) == [1, 3, 2.0, 8.0]\n```", "assert": "[1, 3, 2.0, 8.0]", "code": "def tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n"}
{"task_id": "Python/130", "fn": "tri", "para": "(n)", "arg": ["3", "4", "5", "6", "7", "8", "9", "20", "0", "1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n\nassert tri(<FILL_ME>) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n```", "assert": "[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]", "code": "def tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n"}
{"task_id": "Python/130", "fn": "tri", "para": "(n)", "arg": ["3", "4", "5", "6", "7", "8", "9", "20", "0", "1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n\nassert tri(<FILL_ME>) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n```", "assert": "[1, 3, 2.0, 8.0, 3.0, 15.0]", "code": "def tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n"}
{"task_id": "Python/130", "fn": "tri", "para": "(n)", "arg": ["3", "4", "5", "6", "7", "8", "9", "20", "0", "1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n\nassert tri(<FILL_ME>) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n```", "assert": "[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]", "code": "def tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n"}
{"task_id": "Python/130", "fn": "tri", "para": "(n)", "arg": ["3", "4", "5", "6", "7", "8", "9", "20", "0", "1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n\nassert tri(<FILL_ME>) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n```", "assert": "[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]", "code": "def tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n"}
{"task_id": "Python/131", "fn": "digits", "para": "(n)", "arg": ["5", "54", "120", "5014", "98765", "5576543", "2468"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef digits(n):\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n\nassert digits(<FILL_ME>) == 5\n```", "assert": "5", "code": "def digits(n):\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n"}
{"task_id": "Python/131", "fn": "digits", "para": "(n)", "arg": ["5", "54", "120", "5014", "98765", "5576543", "2468"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef digits(n):\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n\nassert digits(<FILL_ME>) == 0\n```", "assert": "0", "code": "def digits(n):\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n"}
{"task_id": "Python/131", "fn": "digits", "para": "(n)", "arg": ["5", "54", "120", "5014", "98765", "5576543", "2468"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef digits(n):\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n\nassert digits(<FILL_ME>) == 315\n```", "assert": "315", "code": "def digits(n):\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n"}
{"task_id": "Python/131", "fn": "digits", "para": "(n)", "arg": ["5", "54", "120", "5014", "98765", "5576543", "2468"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef digits(n):\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n\nassert digits(<FILL_ME>) == 2625\n```", "assert": "2625", "code": "def digits(n):\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n"}
{"task_id": "Python/131", "fn": "digits", "para": "(n)", "arg": ["5", "54", "120", "5014", "98765", "5576543", "2468"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef digits(n):\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n\nassert digits(<FILL_ME>) == 1\n```", "assert": "1", "code": "def digits(n):\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n"}
{"task_id": "Python/132", "fn": "is_nested", "para": "(string)", "arg": ["'[[]]'", "'[]]]]]]][[[[[]'", "'[][]'", "('[]')", "'[[[[]]]]'", "'[]]]]]]]]]]'", "'[][][[]]'", "'[[]'", "'[]]'", "'[[]][['", "'[[][]]'", "''", "'[[[[[[[['", "']]]]]]]]'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef is_nested(string):\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n\nassert is_nested(<FILL_ME>) == True\n```", "assert": "True", "code": "def is_nested(string):\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n"}
{"task_id": "Python/132", "fn": "is_nested", "para": "(string)", "arg": ["'[[]]'", "'[]]]]]]][[[[[]'", "'[][]'", "('[]')", "'[[[[]]]]'", "'[]]]]]]]]]]'", "'[][][[]]'", "'[[]'", "'[]]'", "'[[]][['", "'[[][]]'", "''", "'[[[[[[[['", "']]]]]]]]'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef is_nested(string):\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n\nassert is_nested(<FILL_ME>) == False\n```", "assert": "False", "code": "def is_nested(string):\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n"}
{"task_id": "Python/133", "fn": "sum_squares", "para": "(lst)", "arg": ["[1,2,3]", "[1.0,2,3]", "[1,3,5,7]", "[1.4,4.2,0]", "[-2.4,1,1]", "[100,1,15,2]", "[10000,10000]", "[-1.4,4.6,6.3]", "[-1.4,17.9,18.9,19.9]", "[0]", "[-1]", "[-1,1,0]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\nassert sum_squares(<FILL_ME>) == 10230\n```", "assert": "10230", "code": "def sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n"}
{"task_id": "Python/133", "fn": "sum_squares", "para": "(lst)", "arg": ["[1,2,3]", "[1.0,2,3]", "[1,3,5,7]", "[1.4,4.2,0]", "[-2.4,1,1]", "[100,1,15,2]", "[10000,10000]", "[-1.4,4.6,6.3]", "[-1.4,17.9,18.9,19.9]", "[0]", "[-1]", "[-1,1,0]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\nassert sum_squares(<FILL_ME>) == 84\n```", "assert": "84", "code": "def sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n"}
{"task_id": "Python/133", "fn": "sum_squares", "para": "(lst)", "arg": ["[1,2,3]", "[1.0,2,3]", "[1,3,5,7]", "[1.4,4.2,0]", "[-2.4,1,1]", "[100,1,15,2]", "[10000,10000]", "[-1.4,4.6,6.3]", "[-1.4,17.9,18.9,19.9]", "[0]", "[-1]", "[-1,1,0]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\nassert sum_squares(<FILL_ME>) == 29\n```", "assert": "29", "code": "def sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n"}
{"task_id": "Python/133", "fn": "sum_squares", "para": "(lst)", "arg": ["[1,2,3]", "[1.0,2,3]", "[1,3,5,7]", "[1.4,4.2,0]", "[-2.4,1,1]", "[100,1,15,2]", "[10000,10000]", "[-1.4,4.6,6.3]", "[-1.4,17.9,18.9,19.9]", "[0]", "[-1]", "[-1,1,0]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\nassert sum_squares(<FILL_ME>) == 1086\n```", "assert": "1086", "code": "def sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n"}
{"task_id": "Python/133", "fn": "sum_squares", "para": "(lst)", "arg": ["[1,2,3]", "[1.0,2,3]", "[1,3,5,7]", "[1.4,4.2,0]", "[-2.4,1,1]", "[100,1,15,2]", "[10000,10000]", "[-1.4,4.6,6.3]", "[-1.4,17.9,18.9,19.9]", "[0]", "[-1]", "[-1,1,0]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\nassert sum_squares(<FILL_ME>) == 0\n```", "assert": "0", "code": "def sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n"}
{"task_id": "Python/133", "fn": "sum_squares", "para": "(lst)", "arg": ["[1,2,3]", "[1.0,2,3]", "[1,3,5,7]", "[1.4,4.2,0]", "[-2.4,1,1]", "[100,1,15,2]", "[10000,10000]", "[-1.4,4.6,6.3]", "[-1.4,17.9,18.9,19.9]", "[0]", "[-1]", "[-1,1,0]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\nassert sum_squares(<FILL_ME>) == 14\n```", "assert": "14", "code": "def sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n"}
{"task_id": "Python/133", "fn": "sum_squares", "para": "(lst)", "arg": ["[1,2,3]", "[1.0,2,3]", "[1,3,5,7]", "[1.4,4.2,0]", "[-2.4,1,1]", "[100,1,15,2]", "[10000,10000]", "[-1.4,4.6,6.3]", "[-1.4,17.9,18.9,19.9]", "[0]", "[-1]", "[-1,1,0]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\nassert sum_squares(<FILL_ME>) == 6\n```", "assert": "6", "code": "def sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n"}
{"task_id": "Python/133", "fn": "sum_squares", "para": "(lst)", "arg": ["[1,2,3]", "[1.0,2,3]", "[1,3,5,7]", "[1.4,4.2,0]", "[-2.4,1,1]", "[100,1,15,2]", "[10000,10000]", "[-1.4,4.6,6.3]", "[-1.4,17.9,18.9,19.9]", "[0]", "[-1]", "[-1,1,0]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\nassert sum_squares(<FILL_ME>) == 2\n```", "assert": "2", "code": "def sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n"}
{"task_id": "Python/133", "fn": "sum_squares", "para": "(lst)", "arg": ["[1,2,3]", "[1.0,2,3]", "[1,3,5,7]", "[1.4,4.2,0]", "[-2.4,1,1]", "[100,1,15,2]", "[10000,10000]", "[-1.4,4.6,6.3]", "[-1.4,17.9,18.9,19.9]", "[0]", "[-1]", "[-1,1,0]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\nassert sum_squares(<FILL_ME>) == 75\n```", "assert": "75", "code": "def sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n"}
{"task_id": "Python/133", "fn": "sum_squares", "para": "(lst)", "arg": ["[1,2,3]", "[1.0,2,3]", "[1,3,5,7]", "[1.4,4.2,0]", "[-2.4,1,1]", "[100,1,15,2]", "[10000,10000]", "[-1.4,4.6,6.3]", "[-1.4,17.9,18.9,19.9]", "[0]", "[-1]", "[-1,1,0]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\nassert sum_squares(<FILL_ME>) == 1\n```", "assert": "1", "code": "def sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n"}
{"task_id": "Python/133", "fn": "sum_squares", "para": "(lst)", "arg": ["[1,2,3]", "[1.0,2,3]", "[1,3,5,7]", "[1.4,4.2,0]", "[-2.4,1,1]", "[100,1,15,2]", "[10000,10000]", "[-1.4,4.6,6.3]", "[-1.4,17.9,18.9,19.9]", "[0]", "[-1]", "[-1,1,0]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\nassert sum_squares(<FILL_ME>) == 200000000\n```", "assert": "200000000", "code": "def sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n"}
{"task_id": "Python/134", "fn": "check_if_last_char_is_a_letter", "para": "(txt)", "arg": ["\"apple\"", "\"apple pi e\"", "\"eeeee\"", "\"A\"", "\"Pumpkin pie \"", "\"Pumpkin pie 1\"", "\"\"", "\"eeeee e \"", "\"apple pie\"", "\"apple pi e \""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef check_if_last_char_is_a_letter(txt):\n \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n\nassert check_if_last_char_is_a_letter(<FILL_ME>) == True\n```", "assert": "True", "code": "def check_if_last_char_is_a_letter(txt):\n \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n"}
{"task_id": "Python/134", "fn": "check_if_last_char_is_a_letter", "para": "(txt)", "arg": ["\"apple\"", "\"apple pi e\"", "\"eeeee\"", "\"A\"", "\"Pumpkin pie \"", "\"Pumpkin pie 1\"", "\"\"", "\"eeeee e \"", "\"apple pie\"", "\"apple pi e \""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef check_if_last_char_is_a_letter(txt):\n \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n\nassert check_if_last_char_is_a_letter(<FILL_ME>) == False\n```", "assert": "False", "code": "def check_if_last_char_is_a_letter(txt):\n \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n"}
{"task_id": "Python/135", "fn": "can_arrange", "para": "(arr)", "arg": ["[1,2,4,3,5]", "[1,2,4,5]", "[1,4,2,5,6,7,8,9,10]", "[4,8,5,7,3]", "[]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef can_arrange(arr):\n    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n\nassert can_arrange(<FILL_ME>) == 3\n```", "assert": "3", "code": "def can_arrange(arr):\n    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n"}
{"task_id": "Python/135", "fn": "can_arrange", "para": "(arr)", "arg": ["[1,2,4,3,5]", "[1,2,4,5]", "[1,4,2,5,6,7,8,9,10]", "[4,8,5,7,3]", "[]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef can_arrange(arr):\n    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n\nassert can_arrange(<FILL_ME>) == -1\n```", "assert": "-1", "code": "def can_arrange(arr):\n    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n"}
{"task_id": "Python/135", "fn": "can_arrange", "para": "(arr)", "arg": ["[1,2,4,3,5]", "[1,2,4,5]", "[1,4,2,5,6,7,8,9,10]", "[4,8,5,7,3]", "[]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef can_arrange(arr):\n    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n\nassert can_arrange(<FILL_ME>) == 2\n```", "assert": "2", "code": "def can_arrange(arr):\n    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n"}
{"task_id": "Python/135", "fn": "can_arrange", "para": "(arr)", "arg": ["[1,2,4,3,5]", "[1,2,4,5]", "[1,4,2,5,6,7,8,9,10]", "[4,8,5,7,3]", "[]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef can_arrange(arr):\n    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n\nassert can_arrange(<FILL_ME>) == 4\n```", "assert": "4", "code": "def can_arrange(arr):\n    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n"}
{"task_id": "Python/136", "fn": "largest_smallest_integers", "para": "(lst)", "arg": ["[2, 4, 1, 3, 5, 7]", "[2, 4, 1, 3, 5, 7, 0]", "[1, 3, 2, 4, 5, 6, -2]", "[4, 5, 3, 6, 2, 7, -7]", "[7, 3, 8, 4, 9, 2, 5, -9]", "[]", "[0]", "[-1, -3, -5, -6]", "[-1, -3, -5, -6, 0]", "[-6, -4, -4, -3, 1]", "[-6, -4, -4, -3, -100, 1]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef largest_smallest_integers(lst):\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n\nassert largest_smallest_integers(<FILL_ME>) == (-9, 2)\n```", "assert": "(-9, 2)", "code": "def largest_smallest_integers(lst):\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n"}
{"task_id": "Python/136", "fn": "largest_smallest_integers", "para": "(lst)", "arg": ["[2, 4, 1, 3, 5, 7]", "[2, 4, 1, 3, 5, 7, 0]", "[1, 3, 2, 4, 5, 6, -2]", "[4, 5, 3, 6, 2, 7, -7]", "[7, 3, 8, 4, 9, 2, 5, -9]", "[]", "[0]", "[-1, -3, -5, -6]", "[-1, -3, -5, -6, 0]", "[-6, -4, -4, -3, 1]", "[-6, -4, -4, -3, -100, 1]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef largest_smallest_integers(lst):\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n\nassert largest_smallest_integers(<FILL_ME>) == (None, None)\n```", "assert": "(None, None)", "code": "def largest_smallest_integers(lst):\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n"}
{"task_id": "Python/136", "fn": "largest_smallest_integers", "para": "(lst)", "arg": ["[2, 4, 1, 3, 5, 7]", "[2, 4, 1, 3, 5, 7, 0]", "[1, 3, 2, 4, 5, 6, -2]", "[4, 5, 3, 6, 2, 7, -7]", "[7, 3, 8, 4, 9, 2, 5, -9]", "[]", "[0]", "[-1, -3, -5, -6]", "[-1, -3, -5, -6, 0]", "[-6, -4, -4, -3, 1]", "[-6, -4, -4, -3, -100, 1]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef largest_smallest_integers(lst):\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n\nassert largest_smallest_integers(<FILL_ME>) == (-1, None)\n```", "assert": "(-1, None)", "code": "def largest_smallest_integers(lst):\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n"}
{"task_id": "Python/136", "fn": "largest_smallest_integers", "para": "(lst)", "arg": ["[2, 4, 1, 3, 5, 7]", "[2, 4, 1, 3, 5, 7, 0]", "[1, 3, 2, 4, 5, 6, -2]", "[4, 5, 3, 6, 2, 7, -7]", "[7, 3, 8, 4, 9, 2, 5, -9]", "[]", "[0]", "[-1, -3, -5, -6]", "[-1, -3, -5, -6, 0]", "[-6, -4, -4, -3, 1]", "[-6, -4, -4, -3, -100, 1]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef largest_smallest_integers(lst):\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n\nassert largest_smallest_integers(<FILL_ME>) == (-3, 1)\n```", "assert": "(-3, 1)", "code": "def largest_smallest_integers(lst):\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n"}
{"task_id": "Python/136", "fn": "largest_smallest_integers", "para": "(lst)", "arg": ["[2, 4, 1, 3, 5, 7]", "[2, 4, 1, 3, 5, 7, 0]", "[1, 3, 2, 4, 5, 6, -2]", "[4, 5, 3, 6, 2, 7, -7]", "[7, 3, 8, 4, 9, 2, 5, -9]", "[]", "[0]", "[-1, -3, -5, -6]", "[-1, -3, -5, -6, 0]", "[-6, -4, -4, -3, 1]", "[-6, -4, -4, -3, -100, 1]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef largest_smallest_integers(lst):\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n\nassert largest_smallest_integers(<FILL_ME>) == (-2, 1)\n```", "assert": "(-2, 1)", "code": "def largest_smallest_integers(lst):\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n"}
{"task_id": "Python/136", "fn": "largest_smallest_integers", "para": "(lst)", "arg": ["[2, 4, 1, 3, 5, 7]", "[2, 4, 1, 3, 5, 7, 0]", "[1, 3, 2, 4, 5, 6, -2]", "[4, 5, 3, 6, 2, 7, -7]", "[7, 3, 8, 4, 9, 2, 5, -9]", "[]", "[0]", "[-1, -3, -5, -6]", "[-1, -3, -5, -6, 0]", "[-6, -4, -4, -3, 1]", "[-6, -4, -4, -3, -100, 1]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef largest_smallest_integers(lst):\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n\nassert largest_smallest_integers(<FILL_ME>) == (None, 1)\n```", "assert": "(None, 1)", "code": "def largest_smallest_integers(lst):\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n"}
{"task_id": "Python/136", "fn": "largest_smallest_integers", "para": "(lst)", "arg": ["[2, 4, 1, 3, 5, 7]", "[2, 4, 1, 3, 5, 7, 0]", "[1, 3, 2, 4, 5, 6, -2]", "[4, 5, 3, 6, 2, 7, -7]", "[7, 3, 8, 4, 9, 2, 5, -9]", "[]", "[0]", "[-1, -3, -5, -6]", "[-1, -3, -5, -6, 0]", "[-6, -4, -4, -3, 1]", "[-6, -4, -4, -3, -100, 1]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef largest_smallest_integers(lst):\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n\nassert largest_smallest_integers(<FILL_ME>) == (-7, 2)\n```", "assert": "(-7, 2)", "code": "def largest_smallest_integers(lst):\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n"}
{"task_id": "Python/137", "fn": "compare_one", "para": "(a, b)", "arg": ["1, 2", "1, 2.5", "2, 3", "5, 6", "1, \"2,3\"", "\"5,1\", \"6\"", "\"1\", \"2\"", "\"1\", 1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef compare_one(a, b):\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n\nassert compare_one(<FILL_ME>) == \"2\"\n```", "assert": "\"2\"", "code": "def compare_one(a, b):\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n"}
{"task_id": "Python/137", "fn": "compare_one", "para": "(a, b)", "arg": ["1, 2", "1, 2.5", "2, 3", "5, 6", "1, \"2,3\"", "\"5,1\", \"6\"", "\"1\", \"2\"", "\"1\", 1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef compare_one(a, b):\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n\nassert compare_one(<FILL_ME>) == 3\n```", "assert": "3", "code": "def compare_one(a, b):\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n"}
{"task_id": "Python/137", "fn": "compare_one", "para": "(a, b)", "arg": ["1, 2", "1, 2.5", "2, 3", "5, 6", "1, \"2,3\"", "\"5,1\", \"6\"", "\"1\", \"2\"", "\"1\", 1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef compare_one(a, b):\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n\nassert compare_one(<FILL_ME>) == \"6\"\n```", "assert": "\"6\"", "code": "def compare_one(a, b):\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n"}
{"task_id": "Python/137", "fn": "compare_one", "para": "(a, b)", "arg": ["1, 2", "1, 2.5", "2, 3", "5, 6", "1, \"2,3\"", "\"5,1\", \"6\"", "\"1\", \"2\"", "\"1\", 1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef compare_one(a, b):\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n\nassert compare_one(<FILL_ME>) == 6\n```", "assert": "6", "code": "def compare_one(a, b):\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n"}
{"task_id": "Python/137", "fn": "compare_one", "para": "(a, b)", "arg": ["1, 2", "1, 2.5", "2, 3", "5, 6", "1, \"2,3\"", "\"5,1\", \"6\"", "\"1\", \"2\"", "\"1\", 1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef compare_one(a, b):\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n\nassert compare_one(<FILL_ME>) == \"2,3\"\n```", "assert": "\"2,3\"", "code": "def compare_one(a, b):\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n"}
{"task_id": "Python/137", "fn": "compare_one", "para": "(a, b)", "arg": ["1, 2", "1, 2.5", "2, 3", "5, 6", "1, \"2,3\"", "\"5,1\", \"6\"", "\"1\", \"2\"", "\"1\", 1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef compare_one(a, b):\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n\nassert compare_one(<FILL_ME>) == 2.5\n```", "assert": "2.5", "code": "def compare_one(a, b):\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n"}
{"task_id": "Python/137", "fn": "compare_one", "para": "(a, b)", "arg": ["1, 2", "1, 2.5", "2, 3", "5, 6", "1, \"2,3\"", "\"5,1\", \"6\"", "\"1\", \"2\"", "\"1\", 1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef compare_one(a, b):\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n\nassert compare_one(<FILL_ME>) == 2\n```", "assert": "2", "code": "def compare_one(a, b):\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n"}
{"task_id": "Python/137", "fn": "compare_one", "para": "(a, b)", "arg": ["1, 2", "1, 2.5", "2, 3", "5, 6", "1, \"2,3\"", "\"5,1\", \"6\"", "\"1\", \"2\"", "\"1\", 1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef compare_one(a, b):\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n\nassert compare_one(<FILL_ME>) == None\n```", "assert": "None", "code": "def compare_one(a, b):\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n"}
{"task_id": "Python/138", "fn": "is_equal_to_sum_even", "para": "(n)", "arg": ["4", "6", "8", "10", "11", "12", "13", "16"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef is_equal_to_sum_even(n):\n    return n%2 == 0 and n >= 8\n\nassert is_equal_to_sum_even(<FILL_ME>) == True\n```", "assert": "True", "code": "def is_equal_to_sum_even(n):\n    return n%2 == 0 and n >= 8\n"}
{"task_id": "Python/138", "fn": "is_equal_to_sum_even", "para": "(n)", "arg": ["4", "6", "8", "10", "11", "12", "13", "16"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef is_equal_to_sum_even(n):\n    return n%2 == 0 and n >= 8\n\nassert is_equal_to_sum_even(<FILL_ME>) == False\n```", "assert": "False", "code": "def is_equal_to_sum_even(n):\n    return n%2 == 0 and n >= 8\n"}
{"task_id": "Python/139", "fn": "special_factorial", "para": "(n)", "arg": ["4", "5", "7", "1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef special_factorial(n):\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n\nassert special_factorial(<FILL_ME>) == 125411328000\n```", "assert": "125411328000", "code": "def special_factorial(n):\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n"}
{"task_id": "Python/139", "fn": "special_factorial", "para": "(n)", "arg": ["4", "5", "7", "1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef special_factorial(n):\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n\nassert special_factorial(<FILL_ME>) == 1\n```", "assert": "1", "code": "def special_factorial(n):\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n"}
{"task_id": "Python/139", "fn": "special_factorial", "para": "(n)", "arg": ["4", "5", "7", "1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef special_factorial(n):\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n\nassert special_factorial(<FILL_ME>) == 288\n```", "assert": "288", "code": "def special_factorial(n):\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n"}
{"task_id": "Python/139", "fn": "special_factorial", "para": "(n)", "arg": ["4", "5", "7", "1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef special_factorial(n):\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n\nassert special_factorial(<FILL_ME>) == 34560\n```", "assert": "34560", "code": "def special_factorial(n):\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n"}
{"task_id": "Python/140", "fn": "fix_spaces", "para": "(text)", "arg": ["\"Example\"", "\"Mudasir Hanif \"", "\"Yellow Yellow  Dirty  Fellow\"", "\"Exa   mple\"", "\"   Exa 1 2 2 mple\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef fix_spaces(text):\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n\nassert fix_spaces(<FILL_ME>) == \"Mudasir_Hanif_\"\n```", "assert": "\"Mudasir_Hanif_\"", "code": "def fix_spaces(text):\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n"}
{"task_id": "Python/140", "fn": "fix_spaces", "para": "(text)", "arg": ["\"Example\"", "\"Mudasir Hanif \"", "\"Yellow Yellow  Dirty  Fellow\"", "\"Exa   mple\"", "\"   Exa 1 2 2 mple\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef fix_spaces(text):\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n\nassert fix_spaces(<FILL_ME>) == \"Example\"\n```", "assert": "\"Example\"", "code": "def fix_spaces(text):\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n"}
{"task_id": "Python/140", "fn": "fix_spaces", "para": "(text)", "arg": ["\"Example\"", "\"Mudasir Hanif \"", "\"Yellow Yellow  Dirty  Fellow\"", "\"Exa   mple\"", "\"   Exa 1 2 2 mple\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef fix_spaces(text):\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n\nassert fix_spaces(<FILL_ME>) == \"Exa-mple\"\n```", "assert": "\"Exa-mple\"", "code": "def fix_spaces(text):\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n"}
{"task_id": "Python/140", "fn": "fix_spaces", "para": "(text)", "arg": ["\"Example\"", "\"Mudasir Hanif \"", "\"Yellow Yellow  Dirty  Fellow\"", "\"Exa   mple\"", "\"   Exa 1 2 2 mple\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef fix_spaces(text):\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n\nassert fix_spaces(<FILL_ME>) == \"-Exa_1_2_2_mple\"\n```", "assert": "\"-Exa_1_2_2_mple\"", "code": "def fix_spaces(text):\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n"}
{"task_id": "Python/140", "fn": "fix_spaces", "para": "(text)", "arg": ["\"Example\"", "\"Mudasir Hanif \"", "\"Yellow Yellow  Dirty  Fellow\"", "\"Exa   mple\"", "\"   Exa 1 2 2 mple\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef fix_spaces(text):\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n\nassert fix_spaces(<FILL_ME>) == \"Yellow_Yellow__Dirty__Fellow\"\n```", "assert": "\"Yellow_Yellow__Dirty__Fellow\"", "code": "def fix_spaces(text):\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n"}
{"task_id": "Python/141", "fn": "file_name_check", "para": "(file_name)", "arg": ["\"example.txt\"", "\"1example.dll\"", "'s1sdf3.asd'", "'K.dll'", "'MY16FILE3.exe'", "'His12FILE94.exe'", "'_Y.txt'", "'?aREYA.exe'", "'/this_is_valid.dll'", "'this_is_valid.wow'", "'this_is_valid.txt'", "'this_is_valid.txtexe'", "'#this2_i4s_5valid.ten'", "'@this1_is6_valid.exe'", "'this_is_12valid.6exe4.txt'", "'all.exe.txt'", "'I563_No.exe'", "'Is3youfault.txt'", "'no_one#knows.dll'", "'1I563_Yes3.exe'", "'I563_Yes3.txtt'", "'final..txt'", "'final132'", "'_f4indsartal132.'", "'.txt'", "'s.'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef file_name_check(file_name):\n    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n\nassert file_name_check(<FILL_ME>) == 'No'\n```", "assert": "'No'", "code": "def file_name_check(file_name):\n    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n"}
{"task_id": "Python/141", "fn": "file_name_check", "para": "(file_name)", "arg": ["\"example.txt\"", "\"1example.dll\"", "'s1sdf3.asd'", "'K.dll'", "'MY16FILE3.exe'", "'His12FILE94.exe'", "'_Y.txt'", "'?aREYA.exe'", "'/this_is_valid.dll'", "'this_is_valid.wow'", "'this_is_valid.txt'", "'this_is_valid.txtexe'", "'#this2_i4s_5valid.ten'", "'@this1_is6_valid.exe'", "'this_is_12valid.6exe4.txt'", "'all.exe.txt'", "'I563_No.exe'", "'Is3youfault.txt'", "'no_one#knows.dll'", "'1I563_Yes3.exe'", "'I563_Yes3.txtt'", "'final..txt'", "'final132'", "'_f4indsartal132.'", "'.txt'", "'s.'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef file_name_check(file_name):\n    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n\nassert file_name_check(<FILL_ME>) == 'Yes'\n```", "assert": "'Yes'", "code": "def file_name_check(file_name):\n    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n"}
{"task_id": "Python/142", "fn": "sum_squares", "para": "(lst)", "arg": ["[1,2,3]", "[1,4,9]", "[]", "[1,1,1,1,1,1,1,1,1]", "[-1,-1,-1,-1,-1,-1,-1,-1,-1]", "[0]", "[-1,-5,2,-1,-5]", "[-56,-99,1,0,-2]", "[-1,0,0,0,0,0,0,0,-1]", "[-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]", "[-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sum_squares(lst):\n    \"\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n\nassert sum_squares(<FILL_ME>) == -126\n```", "assert": "-126", "code": "def sum_squares(lst):\n    \"\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n"}
{"task_id": "Python/142", "fn": "sum_squares", "para": "(lst)", "arg": ["[1,2,3]", "[1,4,9]", "[]", "[1,1,1,1,1,1,1,1,1]", "[-1,-1,-1,-1,-1,-1,-1,-1,-1]", "[0]", "[-1,-5,2,-1,-5]", "[-56,-99,1,0,-2]", "[-1,0,0,0,0,0,0,0,-1]", "[-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]", "[-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sum_squares(lst):\n    \"\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n\nassert sum_squares(<FILL_ME>) == 0\n```", "assert": "0", "code": "def sum_squares(lst):\n    \"\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n"}
{"task_id": "Python/142", "fn": "sum_squares", "para": "(lst)", "arg": ["[1,2,3]", "[1,4,9]", "[]", "[1,1,1,1,1,1,1,1,1]", "[-1,-1,-1,-1,-1,-1,-1,-1,-1]", "[0]", "[-1,-5,2,-1,-5]", "[-56,-99,1,0,-2]", "[-1,0,0,0,0,0,0,0,-1]", "[-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]", "[-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sum_squares(lst):\n    \"\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n\nassert sum_squares(<FILL_ME>) == 14\n```", "assert": "14", "code": "def sum_squares(lst):\n    \"\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n"}
{"task_id": "Python/142", "fn": "sum_squares", "para": "(lst)", "arg": ["[1,2,3]", "[1,4,9]", "[]", "[1,1,1,1,1,1,1,1,1]", "[-1,-1,-1,-1,-1,-1,-1,-1,-1]", "[0]", "[-1,-5,2,-1,-5]", "[-56,-99,1,0,-2]", "[-1,0,0,0,0,0,0,0,-1]", "[-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]", "[-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sum_squares(lst):\n    \"\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n\nassert sum_squares(<FILL_ME>) == -1448\n```", "assert": "-1448", "code": "def sum_squares(lst):\n    \"\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n"}
{"task_id": "Python/142", "fn": "sum_squares", "para": "(lst)", "arg": ["[1,2,3]", "[1,4,9]", "[]", "[1,1,1,1,1,1,1,1,1]", "[-1,-1,-1,-1,-1,-1,-1,-1,-1]", "[0]", "[-1,-5,2,-1,-5]", "[-56,-99,1,0,-2]", "[-1,0,0,0,0,0,0,0,-1]", "[-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]", "[-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sum_squares(lst):\n    \"\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n\nassert sum_squares(<FILL_ME>) == 6\n```", "assert": "6", "code": "def sum_squares(lst):\n    \"\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n"}
{"task_id": "Python/142", "fn": "sum_squares", "para": "(lst)", "arg": ["[1,2,3]", "[1,4,9]", "[]", "[1,1,1,1,1,1,1,1,1]", "[-1,-1,-1,-1,-1,-1,-1,-1,-1]", "[0]", "[-1,-5,2,-1,-5]", "[-56,-99,1,0,-2]", "[-1,0,0,0,0,0,0,0,-1]", "[-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]", "[-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sum_squares(lst):\n    \"\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n\nassert sum_squares(<FILL_ME>) == 3030\n```", "assert": "3030", "code": "def sum_squares(lst):\n    \"\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n"}
{"task_id": "Python/142", "fn": "sum_squares", "para": "(lst)", "arg": ["[1,2,3]", "[1,4,9]", "[]", "[1,1,1,1,1,1,1,1,1]", "[-1,-1,-1,-1,-1,-1,-1,-1,-1]", "[0]", "[-1,-5,2,-1,-5]", "[-56,-99,1,0,-2]", "[-1,0,0,0,0,0,0,0,-1]", "[-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]", "[-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sum_squares(lst):\n    \"\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n\nassert sum_squares(<FILL_ME>) == 9\n```", "assert": "9", "code": "def sum_squares(lst):\n    \"\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n"}
{"task_id": "Python/142", "fn": "sum_squares", "para": "(lst)", "arg": ["[1,2,3]", "[1,4,9]", "[]", "[1,1,1,1,1,1,1,1,1]", "[-1,-1,-1,-1,-1,-1,-1,-1,-1]", "[0]", "[-1,-5,2,-1,-5]", "[-56,-99,1,0,-2]", "[-1,0,0,0,0,0,0,0,-1]", "[-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]", "[-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sum_squares(lst):\n    \"\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n\nassert sum_squares(<FILL_ME>) == -3\n```", "assert": "-3", "code": "def sum_squares(lst):\n    \"\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n"}
{"task_id": "Python/142", "fn": "sum_squares", "para": "(lst)", "arg": ["[1,2,3]", "[1,4,9]", "[]", "[1,1,1,1,1,1,1,1,1]", "[-1,-1,-1,-1,-1,-1,-1,-1,-1]", "[0]", "[-1,-5,2,-1,-5]", "[-56,-99,1,0,-2]", "[-1,0,0,0,0,0,0,0,-1]", "[-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]", "[-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sum_squares(lst):\n    \"\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n\nassert sum_squares(<FILL_ME>) == -14196\n```", "assert": "-14196", "code": "def sum_squares(lst):\n    \"\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n"}
{"task_id": "Python/143", "fn": "words_in_sentence", "para": "(sentence)", "arg": ["\"This is a test\"", "\"lets go for swimming\"", "\"there is no place available here\"", "\"Hi I am Hussein\"", "\"go for it\"", "\"here\"", "\"here is\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef words_in_sentence(sentence):\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n\nassert words_in_sentence(<FILL_ME>) == \"\"\n```", "assert": "\"\"", "code": "def words_in_sentence(sentence):\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n"}
{"task_id": "Python/143", "fn": "words_in_sentence", "para": "(sentence)", "arg": ["\"This is a test\"", "\"lets go for swimming\"", "\"there is no place available here\"", "\"Hi I am Hussein\"", "\"go for it\"", "\"here\"", "\"here is\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef words_in_sentence(sentence):\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n\nassert words_in_sentence(<FILL_ME>) == \"go for\"\n```", "assert": "\"go for\"", "code": "def words_in_sentence(sentence):\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n"}
{"task_id": "Python/143", "fn": "words_in_sentence", "para": "(sentence)", "arg": ["\"This is a test\"", "\"lets go for swimming\"", "\"there is no place available here\"", "\"Hi I am Hussein\"", "\"go for it\"", "\"here\"", "\"here is\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef words_in_sentence(sentence):\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n\nassert words_in_sentence(<FILL_ME>) == \"Hi am Hussein\"\n```", "assert": "\"Hi am Hussein\"", "code": "def words_in_sentence(sentence):\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n"}
{"task_id": "Python/143", "fn": "words_in_sentence", "para": "(sentence)", "arg": ["\"This is a test\"", "\"lets go for swimming\"", "\"there is no place available here\"", "\"Hi I am Hussein\"", "\"go for it\"", "\"here\"", "\"here is\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef words_in_sentence(sentence):\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n\nassert words_in_sentence(<FILL_ME>) == \"go for it\"\n```", "assert": "\"go for it\"", "code": "def words_in_sentence(sentence):\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n"}
{"task_id": "Python/143", "fn": "words_in_sentence", "para": "(sentence)", "arg": ["\"This is a test\"", "\"lets go for swimming\"", "\"there is no place available here\"", "\"Hi I am Hussein\"", "\"go for it\"", "\"here\"", "\"here is\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef words_in_sentence(sentence):\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n\nassert words_in_sentence(<FILL_ME>) == \"there is no place\"\n```", "assert": "\"there is no place\"", "code": "def words_in_sentence(sentence):\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n"}
{"task_id": "Python/143", "fn": "words_in_sentence", "para": "(sentence)", "arg": ["\"This is a test\"", "\"lets go for swimming\"", "\"there is no place available here\"", "\"Hi I am Hussein\"", "\"go for it\"", "\"here\"", "\"here is\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef words_in_sentence(sentence):\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n\nassert words_in_sentence(<FILL_ME>) == \"is\"\n```", "assert": "\"is\"", "code": "def words_in_sentence(sentence):\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n"}
{"task_id": "Python/144", "fn": "simplify", "para": "(x, n)", "arg": ["\"1/5\", \"5/1\"", "\"1/6\", \"2/1\"", "\"5/1\", \"3/1\"", "\"7/10\", \"10/2\"", "\"2/10\", \"50/10\"", "\"7/2\", \"4/2\"", "\"11/6\", \"6/1\"", "\"2/3\", \"5/2\"", "\"5/2\", \"3/5\"", "\"2/4\", \"8/4\"", "\"2/4\", \"4/2\"", "\"1/5\", \"5/1\"", "\"1/5\", \"1/5\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef simplify(x, n):\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n\nassert simplify(<FILL_ME>) == True\n```", "assert": "True", "code": "def simplify(x, n):\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n"}
{"task_id": "Python/144", "fn": "simplify", "para": "(x, n)", "arg": ["\"1/5\", \"5/1\"", "\"1/6\", \"2/1\"", "\"5/1\", \"3/1\"", "\"7/10\", \"10/2\"", "\"2/10\", \"50/10\"", "\"7/2\", \"4/2\"", "\"11/6\", \"6/1\"", "\"2/3\", \"5/2\"", "\"5/2\", \"3/5\"", "\"2/4\", \"8/4\"", "\"2/4\", \"4/2\"", "\"1/5\", \"5/1\"", "\"1/5\", \"1/5\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef simplify(x, n):\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n\nassert simplify(<FILL_ME>) == False\n```", "assert": "False", "code": "def simplify(x, n):\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n"}
{"task_id": "Python/145", "fn": "order_by_points", "para": "(nums)", "arg": ["[1, 11, -1, -11, -12]", "[1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]", "[]", "[1, -11, -32, 43, 54, -98, 2, -3]", "[1,2,3,4,5,6,7,8,9,10,11]", "[0,6,6,-76,-21,23,4]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef order_by_points(nums):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n\nassert order_by_points(<FILL_ME>) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n```", "assert": "[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]", "code": "def order_by_points(nums):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n"}
{"task_id": "Python/145", "fn": "order_by_points", "para": "(nums)", "arg": ["[1, 11, -1, -11, -12]", "[1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]", "[]", "[1, -11, -32, 43, 54, -98, 2, -3]", "[1,2,3,4,5,6,7,8,9,10,11]", "[0,6,6,-76,-21,23,4]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef order_by_points(nums):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n\nassert order_by_points(<FILL_ME>) == [-76, -21, 0, 4, 23, 6, 6]\n```", "assert": "[-76, -21, 0, 4, 23, 6, 6]", "code": "def order_by_points(nums):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n"}
{"task_id": "Python/145", "fn": "order_by_points", "para": "(nums)", "arg": ["[1, 11, -1, -11, -12]", "[1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]", "[]", "[1, -11, -32, 43, 54, -98, 2, -3]", "[1,2,3,4,5,6,7,8,9,10,11]", "[0,6,6,-76,-21,23,4]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef order_by_points(nums):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n\nassert order_by_points(<FILL_ME>) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n```", "assert": "[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]", "code": "def order_by_points(nums):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n"}
{"task_id": "Python/145", "fn": "order_by_points", "para": "(nums)", "arg": ["[1, 11, -1, -11, -12]", "[1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]", "[]", "[1, -11, -32, 43, 54, -98, 2, -3]", "[1,2,3,4,5,6,7,8,9,10,11]", "[0,6,6,-76,-21,23,4]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef order_by_points(nums):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n\nassert order_by_points(<FILL_ME>) == [-3, -32, -98, -11, 1, 2, 43, 54]\n```", "assert": "[-3, -32, -98, -11, 1, 2, 43, 54]", "code": "def order_by_points(nums):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n"}
{"task_id": "Python/145", "fn": "order_by_points", "para": "(nums)", "arg": ["[1, 11, -1, -11, -12]", "[1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]", "[]", "[1, -11, -32, 43, 54, -98, 2, -3]", "[1,2,3,4,5,6,7,8,9,10,11]", "[0,6,6,-76,-21,23,4]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef order_by_points(nums):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n\nassert order_by_points(<FILL_ME>) == []\n```", "assert": "[]", "code": "def order_by_points(nums):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n"}
{"task_id": "Python/145", "fn": "order_by_points", "para": "(nums)", "arg": ["[1, 11, -1, -11, -12]", "[1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]", "[]", "[1, -11, -32, 43, 54, -98, 2, -3]", "[1,2,3,4,5,6,7,8,9,10,11]", "[0,6,6,-76,-21,23,4]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef order_by_points(nums):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n\nassert order_by_points(<FILL_ME>) == [-1, -11, 1, -12, 11]\n```", "assert": "[-1, -11, 1, -12, 11]", "code": "def order_by_points(nums):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n"}
{"task_id": "Python/146", "fn": "specialFilter", "para": "(nums)", "arg": ["[5, -2, 1, -5]", "[15, -73, 14, -15]", "[33, -2, -3, 45, 21, 109]", "[43, -12, 93, 125, 121, 109]", "[71, -2, -33, 75, 21, 19]", "[1]", "[]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef specialFilter(nums):\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n\nassert specialFilter(<FILL_ME>) == 3\n```", "assert": "3", "code": "def specialFilter(nums):\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n"}
{"task_id": "Python/146", "fn": "specialFilter", "para": "(nums)", "arg": ["[5, -2, 1, -5]", "[15, -73, 14, -15]", "[33, -2, -3, 45, 21, 109]", "[43, -12, 93, 125, 121, 109]", "[71, -2, -33, 75, 21, 19]", "[1]", "[]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef specialFilter(nums):\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n\nassert specialFilter(<FILL_ME>) == 0\n```", "assert": "0", "code": "def specialFilter(nums):\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n"}
{"task_id": "Python/146", "fn": "specialFilter", "para": "(nums)", "arg": ["[5, -2, 1, -5]", "[15, -73, 14, -15]", "[33, -2, -3, 45, 21, 109]", "[43, -12, 93, 125, 121, 109]", "[71, -2, -33, 75, 21, 19]", "[1]", "[]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef specialFilter(nums):\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n\nassert specialFilter(<FILL_ME>) == 2\n```", "assert": "2", "code": "def specialFilter(nums):\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n"}
{"task_id": "Python/146", "fn": "specialFilter", "para": "(nums)", "arg": ["[5, -2, 1, -5]", "[15, -73, 14, -15]", "[33, -2, -3, 45, 21, 109]", "[43, -12, 93, 125, 121, 109]", "[71, -2, -33, 75, 21, 19]", "[1]", "[]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef specialFilter(nums):\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n\nassert specialFilter(<FILL_ME>) == 4\n```", "assert": "4", "code": "def specialFilter(nums):\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n"}
{"task_id": "Python/146", "fn": "specialFilter", "para": "(nums)", "arg": ["[5, -2, 1, -5]", "[15, -73, 14, -15]", "[33, -2, -3, 45, 21, 109]", "[43, -12, 93, 125, 121, 109]", "[71, -2, -33, 75, 21, 19]", "[1]", "[]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef specialFilter(nums):\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n\nassert specialFilter(<FILL_ME>) == 1\n```", "assert": "1", "code": "def specialFilter(nums):\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n"}
{"task_id": "Python/147", "fn": "get_max_triples", "para": "(n)", "arg": ["5", "6", "10", "100"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef get_max_triples(n):\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n\nassert get_max_triples(<FILL_ME>) == 4\n```", "assert": "4", "code": "def get_max_triples(n):\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n"}
{"task_id": "Python/147", "fn": "get_max_triples", "para": "(n)", "arg": ["5", "6", "10", "100"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef get_max_triples(n):\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n\nassert get_max_triples(<FILL_ME>) == 53361\n```", "assert": "53361", "code": "def get_max_triples(n):\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n"}
{"task_id": "Python/147", "fn": "get_max_triples", "para": "(n)", "arg": ["5", "6", "10", "100"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef get_max_triples(n):\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n\nassert get_max_triples(<FILL_ME>) == 1\n```", "assert": "1", "code": "def get_max_triples(n):\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n"}
{"task_id": "Python/147", "fn": "get_max_triples", "para": "(n)", "arg": ["5", "6", "10", "100"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef get_max_triples(n):\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n\nassert get_max_triples(<FILL_ME>) == 36\n```", "assert": "36", "code": "def get_max_triples(n):\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n"}
{"task_id": "Python/148", "fn": "bf", "para": "(planet1, planet2)", "arg": ["\"Jupiter\", \"Neptune\"", "\"Earth\", \"Mercury\"", "\"Mercury\", \"Uranus\"", "\"Neptune\", \"Venus\"", "\"Earth\", \"Earth\"", "\"Mars\", \"Earth\"", "\"Jupiter\", \"Makemake\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef bf(planet1, planet2):\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n\nassert bf(<FILL_ME>) == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")\n```", "assert": "(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")", "code": "def bf(planet1, planet2):\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n"}
{"task_id": "Python/148", "fn": "bf", "para": "(planet1, planet2)", "arg": ["\"Jupiter\", \"Neptune\"", "\"Earth\", \"Mercury\"", "\"Mercury\", \"Uranus\"", "\"Neptune\", \"Venus\"", "\"Earth\", \"Earth\"", "\"Mars\", \"Earth\"", "\"Jupiter\", \"Makemake\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef bf(planet1, planet2):\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n\nassert bf(<FILL_ME>) == ()\n```", "assert": "()", "code": "def bf(planet1, planet2):\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n"}
{"task_id": "Python/148", "fn": "bf", "para": "(planet1, planet2)", "arg": ["\"Jupiter\", \"Neptune\"", "\"Earth\", \"Mercury\"", "\"Mercury\", \"Uranus\"", "\"Neptune\", \"Venus\"", "\"Earth\", \"Earth\"", "\"Mars\", \"Earth\"", "\"Jupiter\", \"Makemake\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef bf(planet1, planet2):\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n\nassert bf(<FILL_ME>) == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n```", "assert": "(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")", "code": "def bf(planet1, planet2):\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n"}
{"task_id": "Python/148", "fn": "bf", "para": "(planet1, planet2)", "arg": ["\"Jupiter\", \"Neptune\"", "\"Earth\", \"Mercury\"", "\"Mercury\", \"Uranus\"", "\"Neptune\", \"Venus\"", "\"Earth\", \"Earth\"", "\"Mars\", \"Earth\"", "\"Jupiter\", \"Makemake\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef bf(planet1, planet2):\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n\nassert bf(<FILL_ME>) == (\"Venus\",)\n```", "assert": "(\"Venus\",)", "code": "def bf(planet1, planet2):\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n"}
{"task_id": "Python/148", "fn": "bf", "para": "(planet1, planet2)", "arg": ["\"Jupiter\", \"Neptune\"", "\"Earth\", \"Mercury\"", "\"Mercury\", \"Uranus\"", "\"Neptune\", \"Venus\"", "\"Earth\", \"Earth\"", "\"Mars\", \"Earth\"", "\"Jupiter\", \"Makemake\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef bf(planet1, planet2):\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n\nassert bf(<FILL_ME>) == (\"Saturn\", \"Uranus\")\n```", "assert": "(\"Saturn\", \"Uranus\")", "code": "def bf(planet1, planet2):\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n"}
{"task_id": "Python/149", "fn": "sorted_list_sum", "para": "(lst)", "arg": ["[\"aa\", \"a\", \"aaa\"]", "[\"school\", \"AI\", \"asdf\", \"b\"]", "[\"d\", \"b\", \"c\", \"a\"]", "[\"d\", \"dcba\", \"abcd\", \"a\"]", "[\"AI\", \"ai\", \"au\"]", "[\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]", "['aaaa', 'bbbb', 'dd', 'cc']"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sorted_list_sum(lst):\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n\nassert sorted_list_sum(<FILL_ME>) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n```", "assert": "[\"cc\", \"dd\", \"aaaa\", \"bbbb\"]", "code": "def sorted_list_sum(lst):\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n"}
{"task_id": "Python/149", "fn": "sorted_list_sum", "para": "(lst)", "arg": ["[\"aa\", \"a\", \"aaa\"]", "[\"school\", \"AI\", \"asdf\", \"b\"]", "[\"d\", \"b\", \"c\", \"a\"]", "[\"d\", \"dcba\", \"abcd\", \"a\"]", "[\"AI\", \"ai\", \"au\"]", "[\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]", "['aaaa', 'bbbb', 'dd', 'cc']"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sorted_list_sum(lst):\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n\nassert sorted_list_sum(<FILL_ME>) == [\"AI\", \"ai\", \"au\"]\n```", "assert": "[\"AI\", \"ai\", \"au\"]", "code": "def sorted_list_sum(lst):\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n"}
{"task_id": "Python/149", "fn": "sorted_list_sum", "para": "(lst)", "arg": ["[\"aa\", \"a\", \"aaa\"]", "[\"school\", \"AI\", \"asdf\", \"b\"]", "[\"d\", \"b\", \"c\", \"a\"]", "[\"d\", \"dcba\", \"abcd\", \"a\"]", "[\"AI\", \"ai\", \"au\"]", "[\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]", "['aaaa', 'bbbb', 'dd', 'cc']"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sorted_list_sum(lst):\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n\nassert sorted_list_sum(<FILL_ME>) == [\"AI\", \"asdf\", \"school\"]\n```", "assert": "[\"AI\", \"asdf\", \"school\"]", "code": "def sorted_list_sum(lst):\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n"}
{"task_id": "Python/149", "fn": "sorted_list_sum", "para": "(lst)", "arg": ["[\"aa\", \"a\", \"aaa\"]", "[\"school\", \"AI\", \"asdf\", \"b\"]", "[\"d\", \"b\", \"c\", \"a\"]", "[\"d\", \"dcba\", \"abcd\", \"a\"]", "[\"AI\", \"ai\", \"au\"]", "[\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]", "['aaaa', 'bbbb', 'dd', 'cc']"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sorted_list_sum(lst):\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n\nassert sorted_list_sum(<FILL_ME>) == [\"abcd\", \"dcba\"]\n```", "assert": "[\"abcd\", \"dcba\"]", "code": "def sorted_list_sum(lst):\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n"}
{"task_id": "Python/149", "fn": "sorted_list_sum", "para": "(lst)", "arg": ["[\"aa\", \"a\", \"aaa\"]", "[\"school\", \"AI\", \"asdf\", \"b\"]", "[\"d\", \"b\", \"c\", \"a\"]", "[\"d\", \"dcba\", \"abcd\", \"a\"]", "[\"AI\", \"ai\", \"au\"]", "[\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]", "['aaaa', 'bbbb', 'dd', 'cc']"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sorted_list_sum(lst):\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n\nassert sorted_list_sum(<FILL_ME>) == []\n```", "assert": "[]", "code": "def sorted_list_sum(lst):\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n"}
{"task_id": "Python/149", "fn": "sorted_list_sum", "para": "(lst)", "arg": ["[\"aa\", \"a\", \"aaa\"]", "[\"school\", \"AI\", \"asdf\", \"b\"]", "[\"d\", \"b\", \"c\", \"a\"]", "[\"d\", \"dcba\", \"abcd\", \"a\"]", "[\"AI\", \"ai\", \"au\"]", "[\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]", "['aaaa', 'bbbb', 'dd', 'cc']"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef sorted_list_sum(lst):\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n\nassert sorted_list_sum(<FILL_ME>) == [\"aa\"]\n```", "assert": "[\"aa\"]", "code": "def sorted_list_sum(lst):\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n"}
{"task_id": "Python/150", "fn": "x_or_y", "para": "(n, x, y)", "arg": ["7, 34, 12", "15, 8, 5", "3, 33, 5212", "1259, 3, 52", "7919, -1, 12", "3609, 1245, 583", "91, 56, 129", "6, 34, 1234", "1, 2, 0", "2, 2, 0"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n\nassert x_or_y(<FILL_ME>) == 3\n```", "assert": "3", "code": "def x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n"}
{"task_id": "Python/150", "fn": "x_or_y", "para": "(n, x, y)", "arg": ["7, 34, 12", "15, 8, 5", "3, 33, 5212", "1259, 3, 52", "7919, -1, 12", "3609, 1245, 583", "91, 56, 129", "6, 34, 1234", "1, 2, 0", "2, 2, 0"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n\nassert x_or_y(<FILL_ME>) == -1\n```", "assert": "-1", "code": "def x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n"}
{"task_id": "Python/150", "fn": "x_or_y", "para": "(n, x, y)", "arg": ["7, 34, 12", "15, 8, 5", "3, 33, 5212", "1259, 3, 52", "7919, -1, 12", "3609, 1245, 583", "91, 56, 129", "6, 34, 1234", "1, 2, 0", "2, 2, 0"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n\nassert x_or_y(<FILL_ME>) == 1234\n```", "assert": "1234", "code": "def x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n"}
{"task_id": "Python/150", "fn": "x_or_y", "para": "(n, x, y)", "arg": ["7, 34, 12", "15, 8, 5", "3, 33, 5212", "1259, 3, 52", "7919, -1, 12", "3609, 1245, 583", "91, 56, 129", "6, 34, 1234", "1, 2, 0", "2, 2, 0"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n\nassert x_or_y(<FILL_ME>) == 0\n```", "assert": "0", "code": "def x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n"}
{"task_id": "Python/150", "fn": "x_or_y", "para": "(n, x, y)", "arg": ["7, 34, 12", "15, 8, 5", "3, 33, 5212", "1259, 3, 52", "7919, -1, 12", "3609, 1245, 583", "91, 56, 129", "6, 34, 1234", "1, 2, 0", "2, 2, 0"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n\nassert x_or_y(<FILL_ME>) == 33\n```", "assert": "33", "code": "def x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n"}
{"task_id": "Python/150", "fn": "x_or_y", "para": "(n, x, y)", "arg": ["7, 34, 12", "15, 8, 5", "3, 33, 5212", "1259, 3, 52", "7919, -1, 12", "3609, 1245, 583", "91, 56, 129", "6, 34, 1234", "1, 2, 0", "2, 2, 0"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n\nassert x_or_y(<FILL_ME>) == 2\n```", "assert": "2", "code": "def x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n"}
{"task_id": "Python/150", "fn": "x_or_y", "para": "(n, x, y)", "arg": ["7, 34, 12", "15, 8, 5", "3, 33, 5212", "1259, 3, 52", "7919, -1, 12", "3609, 1245, 583", "91, 56, 129", "6, 34, 1234", "1, 2, 0", "2, 2, 0"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n\nassert x_or_y(<FILL_ME>) == 34\n```", "assert": "34", "code": "def x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n"}
{"task_id": "Python/150", "fn": "x_or_y", "para": "(n, x, y)", "arg": ["7, 34, 12", "15, 8, 5", "3, 33, 5212", "1259, 3, 52", "7919, -1, 12", "3609, 1245, 583", "91, 56, 129", "6, 34, 1234", "1, 2, 0", "2, 2, 0"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n\nassert x_or_y(<FILL_ME>) == 129\n```", "assert": "129", "code": "def x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n"}
{"task_id": "Python/150", "fn": "x_or_y", "para": "(n, x, y)", "arg": ["7, 34, 12", "15, 8, 5", "3, 33, 5212", "1259, 3, 52", "7919, -1, 12", "3609, 1245, 583", "91, 56, 129", "6, 34, 1234", "1, 2, 0", "2, 2, 0"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n\nassert x_or_y(<FILL_ME>) == 583\n```", "assert": "583", "code": "def x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n"}
{"task_id": "Python/150", "fn": "x_or_y", "para": "(n, x, y)", "arg": ["7, 34, 12", "15, 8, 5", "3, 33, 5212", "1259, 3, 52", "7919, -1, 12", "3609, 1245, 583", "91, 56, 129", "6, 34, 1234", "1, 2, 0", "2, 2, 0"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n\nassert x_or_y(<FILL_ME>) == 5\n```", "assert": "5", "code": "def x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n"}
{"task_id": "Python/151", "fn": "double_the_difference", "para": "(lst)", "arg": ["[]", "[5, 4]", "[0.1, 0.2, 0.3]", "[-10, -20, -30]", "[-1, -2, 8]", "[0.2, 3, 5]", "lst"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef double_the_difference(lst):\n    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n\nassert double_the_difference(<FILL_ME>) == odd_sum\n```", "assert": "odd_sum", "code": "def double_the_difference(lst):\n    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n"}
{"task_id": "Python/151", "fn": "double_the_difference", "para": "(lst)", "arg": ["[]", "[5, 4]", "[0.1, 0.2, 0.3]", "[-10, -20, -30]", "[-1, -2, 8]", "[0.2, 3, 5]", "lst"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef double_the_difference(lst):\n    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n\nassert double_the_difference(<FILL_ME>) == 0\n```", "assert": "0", "code": "def double_the_difference(lst):\n    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n"}
{"task_id": "Python/151", "fn": "double_the_difference", "para": "(lst)", "arg": ["[]", "[5, 4]", "[0.1, 0.2, 0.3]", "[-10, -20, -30]", "[-1, -2, 8]", "[0.2, 3, 5]", "lst"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef double_the_difference(lst):\n    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n\nassert double_the_difference(<FILL_ME>) == 34\n```", "assert": "34", "code": "def double_the_difference(lst):\n    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n"}
{"task_id": "Python/151", "fn": "double_the_difference", "para": "(lst)", "arg": ["[]", "[5, 4]", "[0.1, 0.2, 0.3]", "[-10, -20, -30]", "[-1, -2, 8]", "[0.2, 3, 5]", "lst"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef double_the_difference(lst):\n    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n\nassert double_the_difference(<FILL_ME>) == 25\n```", "assert": "25", "code": "def double_the_difference(lst):\n    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n"}
{"task_id": "Python/152", "fn": "compare", "para": "(game,guess)", "arg": ["[1,2,3,4,5,1],[1,2,3,4,2,-2]", "[0,5,0,0,0,4],[4,1,1,0,0,-2]", "[1,2,3,4,5,1],[1,2,3,4,2,-2]", "[0,0,0,0,0,0],[0,0,0,0,0,0]", "[1,2,3],[-1,-2,-3]", "[1,2,3,5],[-1,2,3,4]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef compare(game,guess):\n    return [abs(x-y) for x,y in zip(game,guess)]\n\nassert compare(<FILL_ME>) == [0,0,0,0,3,3]\n```", "assert": "[0,0,0,0,3,3]", "code": "def compare(game,guess):\n    return [abs(x-y) for x,y in zip(game,guess)]\n"}
{"task_id": "Python/152", "fn": "compare", "para": "(game,guess)", "arg": ["[1,2,3,4,5,1],[1,2,3,4,2,-2]", "[0,5,0,0,0,4],[4,1,1,0,0,-2]", "[1,2,3,4,5,1],[1,2,3,4,2,-2]", "[0,0,0,0,0,0],[0,0,0,0,0,0]", "[1,2,3],[-1,-2,-3]", "[1,2,3,5],[-1,2,3,4]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef compare(game,guess):\n    return [abs(x-y) for x,y in zip(game,guess)]\n\nassert compare(<FILL_ME>) == [2,0,0,1]\n```", "assert": "[2,0,0,1]", "code": "def compare(game,guess):\n    return [abs(x-y) for x,y in zip(game,guess)]\n"}
{"task_id": "Python/152", "fn": "compare", "para": "(game,guess)", "arg": ["[1,2,3,4,5,1],[1,2,3,4,2,-2]", "[0,5,0,0,0,4],[4,1,1,0,0,-2]", "[1,2,3,4,5,1],[1,2,3,4,2,-2]", "[0,0,0,0,0,0],[0,0,0,0,0,0]", "[1,2,3],[-1,-2,-3]", "[1,2,3,5],[-1,2,3,4]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef compare(game,guess):\n    return [abs(x-y) for x,y in zip(game,guess)]\n\nassert compare(<FILL_ME>) == [0,0,0,0,0,0]\n```", "assert": "[0,0,0,0,0,0]", "code": "def compare(game,guess):\n    return [abs(x-y) for x,y in zip(game,guess)]\n"}
{"task_id": "Python/152", "fn": "compare", "para": "(game,guess)", "arg": ["[1,2,3,4,5,1],[1,2,3,4,2,-2]", "[0,5,0,0,0,4],[4,1,1,0,0,-2]", "[1,2,3,4,5,1],[1,2,3,4,2,-2]", "[0,0,0,0,0,0],[0,0,0,0,0,0]", "[1,2,3],[-1,-2,-3]", "[1,2,3,5],[-1,2,3,4]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef compare(game,guess):\n    return [abs(x-y) for x,y in zip(game,guess)]\n\nassert compare(<FILL_ME>) == [2,4,6]\n```", "assert": "[2,4,6]", "code": "def compare(game,guess):\n    return [abs(x-y) for x,y in zip(game,guess)]\n"}
{"task_id": "Python/152", "fn": "compare", "para": "(game,guess)", "arg": ["[1,2,3,4,5,1],[1,2,3,4,2,-2]", "[0,5,0,0,0,4],[4,1,1,0,0,-2]", "[1,2,3,4,5,1],[1,2,3,4,2,-2]", "[0,0,0,0,0,0],[0,0,0,0,0,0]", "[1,2,3],[-1,-2,-3]", "[1,2,3,5],[-1,2,3,4]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef compare(game,guess):\n    return [abs(x-y) for x,y in zip(game,guess)]\n\nassert compare(<FILL_ME>) == [4,4,1,0,0,6]\n```", "assert": "[4,4,1,0,0,6]", "code": "def compare(game,guess):\n    return [abs(x-y) for x,y in zip(game,guess)]\n"}
{"task_id": "Python/153", "fn": "Strongest_Extension", "para": "(class_name, extensions)", "arg": ["'Watashi', ['tEN', 'niNE', 'eIGHt8OKe']", "'Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']", "'__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']", "'K', ['Ta', 'TAR', 't234An', 'cosSo']", "'__HAHA', ['Tab', '123', '781345', '-_-']", "'YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']", "'finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']", "'_', ['Bb', '91245']", "'Sp', ['671235', 'Bb']"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n\nassert Strongest_Extension(<FILL_ME>) == 'finNNalLLly.WoW'\n```", "assert": "'finNNalLLly.WoW'", "code": "def Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n"}
{"task_id": "Python/153", "fn": "Strongest_Extension", "para": "(class_name, extensions)", "arg": ["'Watashi', ['tEN', 'niNE', 'eIGHt8OKe']", "'Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']", "'__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']", "'K', ['Ta', 'TAR', 't234An', 'cosSo']", "'__HAHA', ['Tab', '123', '781345', '-_-']", "'YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']", "'finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']", "'_', ['Bb', '91245']", "'Sp', ['671235', 'Bb']"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n\nassert Strongest_Extension(<FILL_ME>) == 'Sp.671235'\n```", "assert": "'Sp.671235'", "code": "def Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n"}
{"task_id": "Python/153", "fn": "Strongest_Extension", "para": "(class_name, extensions)", "arg": ["'Watashi', ['tEN', 'niNE', 'eIGHt8OKe']", "'Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']", "'__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']", "'K', ['Ta', 'TAR', 't234An', 'cosSo']", "'__HAHA', ['Tab', '123', '781345', '-_-']", "'YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']", "'finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']", "'_', ['Bb', '91245']", "'Sp', ['671235', 'Bb']"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n\nassert Strongest_Extension(<FILL_ME>) == 'K.TAR'\n```", "assert": "'K.TAR'", "code": "def Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n"}
{"task_id": "Python/153", "fn": "Strongest_Extension", "para": "(class_name, extensions)", "arg": ["'Watashi', ['tEN', 'niNE', 'eIGHt8OKe']", "'Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']", "'__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']", "'K', ['Ta', 'TAR', 't234An', 'cosSo']", "'__HAHA', ['Tab', '123', '781345', '-_-']", "'YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']", "'finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']", "'_', ['Bb', '91245']", "'Sp', ['671235', 'Bb']"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n\nassert Strongest_Extension(<FILL_ME>) == '__HAHA.123'\n```", "assert": "'__HAHA.123'", "code": "def Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n"}
{"task_id": "Python/153", "fn": "Strongest_Extension", "para": "(class_name, extensions)", "arg": ["'Watashi', ['tEN', 'niNE', 'eIGHt8OKe']", "'Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']", "'__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']", "'K', ['Ta', 'TAR', 't234An', 'cosSo']", "'__HAHA', ['Tab', '123', '781345', '-_-']", "'YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']", "'finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']", "'_', ['Bb', '91245']", "'Sp', ['671235', 'Bb']"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n\nassert Strongest_Extension(<FILL_ME>) == 'Watashi.eIGHt8OKe'\n```", "assert": "'Watashi.eIGHt8OKe'", "code": "def Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n"}
{"task_id": "Python/153", "fn": "Strongest_Extension", "para": "(class_name, extensions)", "arg": ["'Watashi', ['tEN', 'niNE', 'eIGHt8OKe']", "'Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']", "'__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']", "'K', ['Ta', 'TAR', 't234An', 'cosSo']", "'__HAHA', ['Tab', '123', '781345', '-_-']", "'YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']", "'finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']", "'_', ['Bb', '91245']", "'Sp', ['671235', 'Bb']"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n\nassert Strongest_Extension(<FILL_ME>) == '__YESIMHERE.NuLl__'\n```", "assert": "'__YESIMHERE.NuLl__'", "code": "def Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n"}
{"task_id": "Python/153", "fn": "Strongest_Extension", "para": "(class_name, extensions)", "arg": ["'Watashi', ['tEN', 'niNE', 'eIGHt8OKe']", "'Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']", "'__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']", "'K', ['Ta', 'TAR', 't234An', 'cosSo']", "'__HAHA', ['Tab', '123', '781345', '-_-']", "'YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']", "'finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']", "'_', ['Bb', '91245']", "'Sp', ['671235', 'Bb']"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n\nassert Strongest_Extension(<FILL_ME>) == 'YameRore.okIWILL123'\n```", "assert": "'YameRore.okIWILL123'", "code": "def Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n"}
{"task_id": "Python/153", "fn": "Strongest_Extension", "para": "(class_name, extensions)", "arg": ["'Watashi', ['tEN', 'niNE', 'eIGHt8OKe']", "'Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']", "'__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']", "'K', ['Ta', 'TAR', 't234An', 'cosSo']", "'__HAHA', ['Tab', '123', '781345', '-_-']", "'YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']", "'finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']", "'_', ['Bb', '91245']", "'Sp', ['671235', 'Bb']"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n\nassert Strongest_Extension(<FILL_ME>) == '_.Bb'\n```", "assert": "'_.Bb'", "code": "def Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n"}
{"task_id": "Python/153", "fn": "Strongest_Extension", "para": "(class_name, extensions)", "arg": ["'Watashi', ['tEN', 'niNE', 'eIGHt8OKe']", "'Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']", "'__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']", "'K', ['Ta', 'TAR', 't234An', 'cosSo']", "'__HAHA', ['Tab', '123', '781345', '-_-']", "'YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']", "'finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']", "'_', ['Bb', '91245']", "'Sp', ['671235', 'Bb']"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n\nassert Strongest_Extension(<FILL_ME>) == 'Boku123.YEs.WeCaNe'\n```", "assert": "'Boku123.YEs.WeCaNe'", "code": "def Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n"}
{"task_id": "Python/154", "fn": "cycpattern_check", "para": "(a , b)", "arg": ["\"xyzw\",\"xyw\"", "\"yello\",\"ell\"", "\"whattup\",\"ptut\"", "\"efef\",\"fee\"", "\"abab\",\"aabb\"", "\"winemtt\",\"tinem\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef cycpattern_check(a , b):\n    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n\nassert cycpattern_check(<FILL_ME>) == True\n```", "assert": "True", "code": "def cycpattern_check(a , b):\n    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n"}
{"task_id": "Python/154", "fn": "cycpattern_check", "para": "(a , b)", "arg": ["\"xyzw\",\"xyw\"", "\"yello\",\"ell\"", "\"whattup\",\"ptut\"", "\"efef\",\"fee\"", "\"abab\",\"aabb\"", "\"winemtt\",\"tinem\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef cycpattern_check(a , b):\n    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n\nassert cycpattern_check(<FILL_ME>) == False\n```", "assert": "False", "code": "def cycpattern_check(a , b):\n    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n"}
{"task_id": "Python/155", "fn": "even_odd_count", "para": "(num)", "arg": ["7", "-78", "3452", "346211", "-345821", "-2", "-45347", "0"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n\nassert even_odd_count(<FILL_ME>) == (1, 0)\n```", "assert": "(1, 0)", "code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n"}
{"task_id": "Python/155", "fn": "even_odd_count", "para": "(num)", "arg": ["7", "-78", "3452", "346211", "-345821", "-2", "-45347", "0"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n\nassert even_odd_count(<FILL_ME>) == (1, 1)\n```", "assert": "(1, 1)", "code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n"}
{"task_id": "Python/155", "fn": "even_odd_count", "para": "(num)", "arg": ["7", "-78", "3452", "346211", "-345821", "-2", "-45347", "0"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n\nassert even_odd_count(<FILL_ME>) == (2, 3)\n```", "assert": "(2, 3)", "code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n"}
{"task_id": "Python/155", "fn": "even_odd_count", "para": "(num)", "arg": ["7", "-78", "3452", "346211", "-345821", "-2", "-45347", "0"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n\nassert even_odd_count(<FILL_ME>) == (2, 2)\n```", "assert": "(2, 2)", "code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n"}
{"task_id": "Python/155", "fn": "even_odd_count", "para": "(num)", "arg": ["7", "-78", "3452", "346211", "-345821", "-2", "-45347", "0"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n\nassert even_odd_count(<FILL_ME>) == (3, 3)\n```", "assert": "(3, 3)", "code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n"}
{"task_id": "Python/155", "fn": "even_odd_count", "para": "(num)", "arg": ["7", "-78", "3452", "346211", "-345821", "-2", "-45347", "0"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n\nassert even_odd_count(<FILL_ME>) == (0, 1)\n```", "assert": "(0, 1)", "code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n"}
{"task_id": "Python/156", "fn": "int_to_mini_roman", "para": "(number)", "arg": ["19", "152", "251", "426", "500", "1", "4", "43", "90", "94", "532", "900", "994", "1000"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n\nassert int_to_mini_roman(<FILL_ME>) == 'cm'\n```", "assert": "'cm'", "code": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n"}
{"task_id": "Python/156", "fn": "int_to_mini_roman", "para": "(number)", "arg": ["19", "152", "251", "426", "500", "1", "4", "43", "90", "94", "532", "900", "994", "1000"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n\nassert int_to_mini_roman(<FILL_ME>) == 'cmxciv'\n```", "assert": "'cmxciv'", "code": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n"}
{"task_id": "Python/156", "fn": "int_to_mini_roman", "para": "(number)", "arg": ["19", "152", "251", "426", "500", "1", "4", "43", "90", "94", "532", "900", "994", "1000"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n\nassert int_to_mini_roman(<FILL_ME>) == 'cdxxvi'\n```", "assert": "'cdxxvi'", "code": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n"}
{"task_id": "Python/156", "fn": "int_to_mini_roman", "para": "(number)", "arg": ["19", "152", "251", "426", "500", "1", "4", "43", "90", "94", "532", "900", "994", "1000"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n\nassert int_to_mini_roman(<FILL_ME>) == 'xliii'\n```", "assert": "'xliii'", "code": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n"}
{"task_id": "Python/156", "fn": "int_to_mini_roman", "para": "(number)", "arg": ["19", "152", "251", "426", "500", "1", "4", "43", "90", "94", "532", "900", "994", "1000"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n\nassert int_to_mini_roman(<FILL_ME>) == 'dxxxii'\n```", "assert": "'dxxxii'", "code": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n"}
{"task_id": "Python/156", "fn": "int_to_mini_roman", "para": "(number)", "arg": ["19", "152", "251", "426", "500", "1", "4", "43", "90", "94", "532", "900", "994", "1000"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n\nassert int_to_mini_roman(<FILL_ME>) == 'xciv'\n```", "assert": "'xciv'", "code": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n"}
{"task_id": "Python/156", "fn": "int_to_mini_roman", "para": "(number)", "arg": ["19", "152", "251", "426", "500", "1", "4", "43", "90", "94", "532", "900", "994", "1000"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n\nassert int_to_mini_roman(<FILL_ME>) == 'm'\n```", "assert": "'m'", "code": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n"}
{"task_id": "Python/156", "fn": "int_to_mini_roman", "para": "(number)", "arg": ["19", "152", "251", "426", "500", "1", "4", "43", "90", "94", "532", "900", "994", "1000"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n\nassert int_to_mini_roman(<FILL_ME>) == 'ccli'\n```", "assert": "'ccli'", "code": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n"}
{"task_id": "Python/156", "fn": "int_to_mini_roman", "para": "(number)", "arg": ["19", "152", "251", "426", "500", "1", "4", "43", "90", "94", "532", "900", "994", "1000"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n\nassert int_to_mini_roman(<FILL_ME>) == 'i'\n```", "assert": "'i'", "code": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n"}
{"task_id": "Python/156", "fn": "int_to_mini_roman", "para": "(number)", "arg": ["19", "152", "251", "426", "500", "1", "4", "43", "90", "94", "532", "900", "994", "1000"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n\nassert int_to_mini_roman(<FILL_ME>) == 'clii'\n```", "assert": "'clii'", "code": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n"}
{"task_id": "Python/156", "fn": "int_to_mini_roman", "para": "(number)", "arg": ["19", "152", "251", "426", "500", "1", "4", "43", "90", "94", "532", "900", "994", "1000"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n\nassert int_to_mini_roman(<FILL_ME>) == 'd'\n```", "assert": "'d'", "code": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n"}
{"task_id": "Python/156", "fn": "int_to_mini_roman", "para": "(number)", "arg": ["19", "152", "251", "426", "500", "1", "4", "43", "90", "94", "532", "900", "994", "1000"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n\nassert int_to_mini_roman(<FILL_ME>) == 'xix'\n```", "assert": "'xix'", "code": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n"}
{"task_id": "Python/156", "fn": "int_to_mini_roman", "para": "(number)", "arg": ["19", "152", "251", "426", "500", "1", "4", "43", "90", "94", "532", "900", "994", "1000"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n\nassert int_to_mini_roman(<FILL_ME>) == 'xc'\n```", "assert": "'xc'", "code": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n"}
{"task_id": "Python/156", "fn": "int_to_mini_roman", "para": "(number)", "arg": ["19", "152", "251", "426", "500", "1", "4", "43", "90", "94", "532", "900", "994", "1000"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n\nassert int_to_mini_roman(<FILL_ME>) == 'iv'\n```", "assert": "'iv'", "code": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n"}
{"task_id": "Python/157", "fn": "right_angle_triangle", "para": "(a, b, c)", "arg": ["3, 4, 5", "1, 2, 3", "10, 6, 8", "2, 2, 2", "7, 24, 25", "10, 5, 7", "5, 12, 13", "15, 8, 17", "48, 55, 73", "1, 1, 1", "2, 2, 10"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef right_angle_triangle(a, b, c):\n    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n\nassert right_angle_triangle(<FILL_ME>) == True\n```", "assert": "True", "code": "def right_angle_triangle(a, b, c):\n    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n"}
{"task_id": "Python/157", "fn": "right_angle_triangle", "para": "(a, b, c)", "arg": ["3, 4, 5", "1, 2, 3", "10, 6, 8", "2, 2, 2", "7, 24, 25", "10, 5, 7", "5, 12, 13", "15, 8, 17", "48, 55, 73", "1, 1, 1", "2, 2, 10"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef right_angle_triangle(a, b, c):\n    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n\nassert right_angle_triangle(<FILL_ME>) == False\n```", "assert": "False", "code": "def right_angle_triangle(a, b, c):\n    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n"}
{"task_id": "Python/158", "fn": "find_max", "para": "(words)", "arg": [null, null, null, null, null, null, null, null, null, null], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef find_max(words):\n    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n\nassert find_max(<FILL_ME>) == None\n```", "assert": null, "code": "def find_max(words):\n    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n"}
{"task_id": "Python/159", "fn": "eat", "para": "(number, need, remaining)", "arg": ["5, 6, 10", "4, 8, 9", "1, 10, 10", "2, 11, 5", "4, 5, 7", "4, 5, 1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef eat(number, need, remaining):\n    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n\nassert eat(<FILL_ME>) == [11, 4]\n```", "assert": "[11, 4]", "code": "def eat(number, need, remaining):\n    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n"}
{"task_id": "Python/159", "fn": "eat", "para": "(number, need, remaining)", "arg": ["5, 6, 10", "4, 8, 9", "1, 10, 10", "2, 11, 5", "4, 5, 7", "4, 5, 1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef eat(number, need, remaining):\n    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n\nassert eat(<FILL_ME>) == [11, 0]\n```", "assert": "[11, 0]", "code": "def eat(number, need, remaining):\n    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n"}
{"task_id": "Python/159", "fn": "eat", "para": "(number, need, remaining)", "arg": ["5, 6, 10", "4, 8, 9", "1, 10, 10", "2, 11, 5", "4, 5, 7", "4, 5, 1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef eat(number, need, remaining):\n    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n\nassert eat(<FILL_ME>) == [12, 1]\n```", "assert": "[12, 1]", "code": "def eat(number, need, remaining):\n    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n"}
{"task_id": "Python/159", "fn": "eat", "para": "(number, need, remaining)", "arg": ["5, 6, 10", "4, 8, 9", "1, 10, 10", "2, 11, 5", "4, 5, 7", "4, 5, 1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef eat(number, need, remaining):\n    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n\nassert eat(<FILL_ME>) == [7, 0]\n```", "assert": "[7, 0]", "code": "def eat(number, need, remaining):\n    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n"}
{"task_id": "Python/159", "fn": "eat", "para": "(number, need, remaining)", "arg": ["5, 6, 10", "4, 8, 9", "1, 10, 10", "2, 11, 5", "4, 5, 7", "4, 5, 1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef eat(number, need, remaining):\n    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n\nassert eat(<FILL_ME>) == [5, 0]\n```", "assert": "[5, 0]", "code": "def eat(number, need, remaining):\n    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n"}
{"task_id": "Python/159", "fn": "eat", "para": "(number, need, remaining)", "arg": ["5, 6, 10", "4, 8, 9", "1, 10, 10", "2, 11, 5", "4, 5, 7", "4, 5, 1"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef eat(number, need, remaining):\n    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n\nassert eat(<FILL_ME>) == [9, 2]\n```", "assert": "[9, 2]", "code": "def eat(number, need, remaining):\n    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n"}
{"task_id": "Python/160", "fn": "do_algebra", "para": "(operator, operand)", "arg": ["['**', '*', '+'], [2, 3, 4, 5]", "['+', '*', '-'], [2, 3, 4, 5]", "['//', '*'], [7, 3, 4]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef do_algebra(operator, operand):\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\nassert do_algebra(<FILL_ME>) == 37\n```", "assert": "37", "code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n"}
{"task_id": "Python/160", "fn": "do_algebra", "para": "(operator, operand)", "arg": ["['**', '*', '+'], [2, 3, 4, 5]", "['+', '*', '-'], [2, 3, 4, 5]", "['//', '*'], [7, 3, 4]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef do_algebra(operator, operand):\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\nassert do_algebra(<FILL_ME>) == 8\n```", "assert": "8", "code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n"}
{"task_id": "Python/160", "fn": "do_algebra", "para": "(operator, operand)", "arg": ["['**', '*', '+'], [2, 3, 4, 5]", "['+', '*', '-'], [2, 3, 4, 5]", "['//', '*'], [7, 3, 4]"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef do_algebra(operator, operand):\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n\nassert do_algebra(<FILL_ME>) == 9\n```", "assert": "9", "code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n"}
{"task_id": "Python/161", "fn": "solve", "para": "(s)", "arg": ["\"AsDf\"", "\"1234\"", "\"ab\"", "\"#a@C\"", "\"#AsdfW^45\"", "\"#6@2\"", "\"#$a^D\"", "\"#ccc\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef solve(s):\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n\nassert solve(<FILL_ME>) == \"aSdF\"\n```", "assert": "\"aSdF\"", "code": "def solve(s):\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n"}
{"task_id": "Python/161", "fn": "solve", "para": "(s)", "arg": ["\"AsDf\"", "\"1234\"", "\"ab\"", "\"#a@C\"", "\"#AsdfW^45\"", "\"#6@2\"", "\"#$a^D\"", "\"#ccc\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef solve(s):\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n\nassert solve(<FILL_ME>) == \"#CCC\"\n```", "assert": "\"#CCC\"", "code": "def solve(s):\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n"}
{"task_id": "Python/161", "fn": "solve", "para": "(s)", "arg": ["\"AsDf\"", "\"1234\"", "\"ab\"", "\"#a@C\"", "\"#AsdfW^45\"", "\"#6@2\"", "\"#$a^D\"", "\"#ccc\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef solve(s):\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n\nassert solve(<FILL_ME>) == \"AB\"\n```", "assert": "\"AB\"", "code": "def solve(s):\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n"}
{"task_id": "Python/161", "fn": "solve", "para": "(s)", "arg": ["\"AsDf\"", "\"1234\"", "\"ab\"", "\"#a@C\"", "\"#AsdfW^45\"", "\"#6@2\"", "\"#$a^D\"", "\"#ccc\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef solve(s):\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n\nassert solve(<FILL_ME>) == \"#A@c\"\n```", "assert": "\"#A@c\"", "code": "def solve(s):\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n"}
{"task_id": "Python/161", "fn": "solve", "para": "(s)", "arg": ["\"AsDf\"", "\"1234\"", "\"ab\"", "\"#a@C\"", "\"#AsdfW^45\"", "\"#6@2\"", "\"#$a^D\"", "\"#ccc\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef solve(s):\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n\nassert solve(<FILL_ME>) == \"#$A^d\"\n```", "assert": "\"#$A^d\"", "code": "def solve(s):\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n"}
{"task_id": "Python/161", "fn": "solve", "para": "(s)", "arg": ["\"AsDf\"", "\"1234\"", "\"ab\"", "\"#a@C\"", "\"#AsdfW^45\"", "\"#6@2\"", "\"#$a^D\"", "\"#ccc\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef solve(s):\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n\nassert solve(<FILL_ME>) == \"#aSDFw^45\"\n```", "assert": "\"#aSDFw^45\"", "code": "def solve(s):\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n"}
{"task_id": "Python/161", "fn": "solve", "para": "(s)", "arg": ["\"AsDf\"", "\"1234\"", "\"ab\"", "\"#a@C\"", "\"#AsdfW^45\"", "\"#6@2\"", "\"#$a^D\"", "\"#ccc\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef solve(s):\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n\nassert solve(<FILL_ME>) == \"2@6#\"\n```", "assert": "\"2@6#\"", "code": "def solve(s):\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n"}
{"task_id": "Python/161", "fn": "solve", "para": "(s)", "arg": ["\"AsDf\"", "\"1234\"", "\"ab\"", "\"#a@C\"", "\"#AsdfW^45\"", "\"#6@2\"", "\"#$a^D\"", "\"#ccc\""], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef solve(s):\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n\nassert solve(<FILL_ME>) == \"4321\"\n```", "assert": "\"4321\"", "code": "def solve(s):\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n"}
{"task_id": "Python/162", "fn": "string_to_md5", "para": "(text)", "arg": ["'Hello world'", "''", "'A B C'", "'password'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef string_to_md5(text):\n    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n\nassert string_to_md5(<FILL_ME>) == '5f4dcc3b5aa765d61d8327deb882cf99'\n```", "assert": "'5f4dcc3b5aa765d61d8327deb882cf99'", "code": "def string_to_md5(text):\n    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n"}
{"task_id": "Python/162", "fn": "string_to_md5", "para": "(text)", "arg": ["'Hello world'", "''", "'A B C'", "'password'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef string_to_md5(text):\n    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n\nassert string_to_md5(<FILL_ME>) == '3e25960a79dbc69b674cd4ec67a72c62'\n```", "assert": "'3e25960a79dbc69b674cd4ec67a72c62'", "code": "def string_to_md5(text):\n    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n"}
{"task_id": "Python/162", "fn": "string_to_md5", "para": "(text)", "arg": ["'Hello world'", "''", "'A B C'", "'password'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef string_to_md5(text):\n    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n\nassert string_to_md5(<FILL_ME>) == None\n```", "assert": "None", "code": "def string_to_md5(text):\n    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n"}
{"task_id": "Python/162", "fn": "string_to_md5", "para": "(text)", "arg": ["'Hello world'", "''", "'A B C'", "'password'"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef string_to_md5(text):\n    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n\nassert string_to_md5(<FILL_ME>) == '0ef78513b0cb8cef12743f5aeb35f888'\n```", "assert": "'0ef78513b0cb8cef12743f5aeb35f888'", "code": "def string_to_md5(text):\n    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n"}
{"task_id": "Python/163", "fn": "generate_integers", "para": "(a, b)", "arg": ["2, 10", "10, 2", "132, 2", "17,89"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef generate_integers(a, b):\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n\nassert generate_integers(<FILL_ME>) == []\n```", "assert": "[]", "code": "def generate_integers(a, b):\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n"}
{"task_id": "Python/163", "fn": "generate_integers", "para": "(a, b)", "arg": ["2, 10", "10, 2", "132, 2", "17,89"], "prompt": "Please fill the arguments tagged with <FILL_ME> to make the assertion success.\n```py\ndef generate_integers(a, b):\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n\nassert generate_integers(<FILL_ME>) == [2, 4, 6, 8]\n```", "assert": "[2, 4, 6, 8]", "code": "def generate_integers(a, b):\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n"}
